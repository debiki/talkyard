import { serve } from "https://deno.land/std@0.167.0/http/server.ts";



function bindThis() {  // HMMM
console.log(`Now in bindThis, this is:  ` + this);

// React expects `window` or `global` to exist, and my React code sometimes
// load React components from `window['component-name']`.
var global = this; // var global = window = this;  HMMM

console.log(`TEEST window: ` + window);

/* HHMMM  var console = {
  trace: function(message) {
    java.lang.System.out.println('Nashorn TRACE: ' + message);
  },
  debug: function(message) {
    java.lang.System.out.println('Nashorn DEBUG: ' + message);
  },
  log: function(message) {
    java.lang.System.out.println('Nashorn LOG: ' + message);
  },
  warn: function(message) {
    java.lang.System.err.println('Nashorn WARN: ' + message);
  },
  error: function(message) {
    java.lang.System.err.println('Nashorn ERROR: ' + message);
  }
};  */

// If line and column numbers aren't defined, the exception might be a Nashorn bug.
// For example, if the exception.toString is: 'java.lang.ArrayIndexOutOfBoundsException: 10'.
function printStackTrace(exception) {
  console.error('File: nashorn-ok-delete.js');
  console.error('Line: ' + exception.lineNumber);
  console.error('Column: ' + exception.columnNumber);
  console.error('Stack trace: ' + exception.stack);
  console.error('Exception as is: ' + exception);
  console.error('Exception as JSON: ' + JSON.stringify(exception));
}

// CLEAN_UP DO_AFTER 2018-11-01 use this + console.error(), instead of printStackTrace(exception) ?
// — just wait for a short while, in case there's some surprising problem with this fn:
// Could actually remove printStackTrace() and always log the error from Scala instead? since
// needs to return the error to Scala anyway, so can show in the browser.
function exceptionToString(exception) {
  return (
      'File: nashorn-ok-delete.js\n' +
      'Line: ' + exception.lineNumber  + '\n' +
      'Column: ' + exception.columnNumber  + '\n' +
      'Exception message: ' + exception + '\n' +
      'Exception as JSON: ' + JSON.stringify(exception) + '\n' +
      // It's useful to include the 2 lines above, not only `.stack` below, because
      // sometimes, e.g. if doing `throw 'text'`, then `.stack` will be `undefined`.
      // However, `exception.toString()` will be 'text'.
      'Stack trace: ' + exception.stack  + '\n');
}


var eds = {
  secure: false
};
// CLEAN_UP remove debiki.v0 & .internal [4KSWPY]
var debiki = {
  v0: { util: {} },
  internal: {},
};

var debiki2 = debiki2 || {};
var theStore; // Hack. Used here and there directly [4AGLH2], works fine ... and fragile?

/**
 * A React store for server side rendering. No event related functions; no events happen
 * when rendering server side.
 */
debiki2.ReactStore = {
  allData: function() {
    return theStore;
  },
  getUser: function() {
    return theStore.me;
  },
  getPageTitle: function() { // dupl code [5GYK2]
    var titlePost = theStore.currentPage.postsByNr[TitleNr];
    return titlePost ? titlePost.sanitizedHtml : "(no title)";
  }
};

// React-Router calls setTimeout(), but it's not available in Nashorn.
function setTimeout(callback) {
  callback();
}

function renderReactServerSide(reactStoreJsonString) {
  var exceptionAsString;
  try {
    theStore = JSON.parse(reactStoreJsonString);
    theStore.currentPage = theStore.pagesById[theStore.currentPageId];

    // Fill in no-page-data to avoid null errors. Dupl code. [4FBR20]
    theStore.me.myCurrentPageData = {
      pageId: '0', // EmptyPageId, but isn't defined here
      myPageNotfPref: undefined,
      groupsPageNotfPrefs: [],
      votes: {},
      unapprovedPosts: {},
      unapprovedPostAuthors: [],
      postNrsAutoReadLongAgo: [],
      postNrsAutoReadNow: [],
      marksByPostId: {},
    };

    // Each language file creates a 't_(lang-code)' global variable, e.g. 't_en_US' for English.
    // And they all set a global 'var t' to themselves (t is declared in those files).
    // Update 't' here; it gets used during rendering. If language missing (that'd be a bug),
    // fallback to English.
    var langCode = theStore.settings.languageCode || 'en_US';
    t = global['t_' + langCode] || t_en_US;

    // The React store should be used instead, when running React.
    eds.uploadsUrlPrefixCommonmark = 'TyEFORCOMMONMARK';  // [7AKBQ2]

    var html = debiki2.renderPageServerSideToString();
    return html;
  }
  catch (e) {
    printStackTrace(e);
    exceptionAsString = exceptionToString(e);
  }
  finally {
    // Reset things to error codes, to fail fast, if attempts to access these,
    // when using this same Nashorn engine to render Markdown to HTML.
    t = 'TyEBADACCESSLANG';
    theStore = 'TyEBADACCESSSTORE';
  }
  return '__error_rendering_react_5KGF25X8__\n\n' + exceptionAsString;
}
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_en_US = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Active",
    Activity: "Activity",
    Add: "Add",
    AddingDots: "Adding ...",
    AddComment: "Add Comment",
    Admin: "Admin",
    AdvSearch: "Advanced search",
    Anonym: "Anonym",
    Away: "Away",
    Back: "Back",
    BlogN: "Blog",
    Bookmarks: "Bookmarks",
    Cancel: "Cancel",
    Categories: "Categories",
    Category: "Category",
    ChangeV: "Change",
    ClickToShow: "Click to show",
    ChangeDots: "Change ...",
    ChatN: "Chat",
    Chatting: "Chatting",
    CheckYourEmail: "Check your email",
    Close: "Close",
    closed: "closed",
    comments: "comments",
    Continue: "Continue",
    Created: "Created",
    Delete: "Delete",
    Deleted: "Deleted",
    DirectMessage: "Direct message",
    Discussion: "Discussion",
    discussion: "discussion",
    done: "done",
    EditV: "Edit",
    Editing: "Editing",
    EmailC: "Email: ",
    EmailAddress: "Email address",
    EmailAddresses: "Email addresses",
    EmailSentD: "Email sent.",
    Forum: "Forum",
    GetNotifiedAbout: "Get notified about",
    GroupsC: "Groups:",
    Hide: "Hide",
    Home: "Home",
    Idea: "Idea",
    Join: "Join",
    KbdShrtcsC: "Keyboard shortcuts: ",
    Loading: "Loading...",
    LoadMore: "Load more ...",
    LogIn: "Log In",
    LoggedInAs: "Logged in as ",
    LogOut: "Log out",
    Maybe: "Maybe",
    Manage: "Manage",
    Members: "Members",
    MessageN: "Message",
    MoreDots: "More...",
    Move: "Move",
    Name: "Name",
    NameC: "Name:",
    NewTopic: "New topic",
    NoCancel: "No, cancel",
    Notifications: "Notifications",
    NotImplemented: "(Not implemented)",
    NotYet: "Not yet",
    NoTitle: "No title",
    NoTopics: "No topics.",
    Okay: "Okay",
    OkayDots: "Okay ...",
    Online: "Online",
    onePerLine: "one per line",
    PreviewV: "Preview",
    Problem: "Problem",
    progressN: "progress",
    Question: "Question",
    Recent: "Recent",
    Remove: "Remove",
    Reopen: "Reopen",
    ReplyV: "Reply",
    Replying: "Replying",
    Replies: "Replies",
    replies: "replies",
    Save: "Save",
    SavingDots: "Saving ...",
    SavedDot: "Saved.",
    Search: "Search",
    SendMsg: "Send Message",
    ShowPreview: "Show preview",
    SignUp: "Join",
    Solution: "Solution",
    started: "started",
    Summary: "Summary",
    Submit: "Submit",
    Tag: "Tag",
    Tags: "Tags",
    Tools: "Tools",
    Topics: "Topics",
    TopicTitle: "Topic title",
    TopicType: "Topic type",
    UploadingDots: "Uploading...",
    Username: "Username",
    Users: "Users",
    Welcome: "Welcome",
    Wiki: "Wiki",
    Yes: "Yes",
    YesBye: "Yes, bye",
    YesDoThat: "Yes, do that",
    You: "You",
    you: "you",
    // Trust levels.
    Guest: "Guest",
    NewMember: "New member",
    BasicMember: "Basic member",
    FullMember: "Full member",
    TrustedMember: "Trusted member",
    RegularMember: "Trusted regular",
    CoreMember: "Core member",
    // Periods.
    PastDay: "Past Day",
    PastWeek: "Past Week",
    PastMonth: "Past Month",
    PastQuarter: "Past Quarter",
    PastYear: "Past Year",
    AllTime: "All Time",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "mon",
    daysLtr: "d",
    hoursLtr: "h",
    minsLtr: "m",
    secsLtr: "s",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "1 day ago" : "".concat(numDays, " days ago");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1 hour ago" : "".concat(numHours, " hours ago");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1 minute ago" : "".concat(numMins, " minutes ago");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1 second ago" : "".concat(numSecs, " seconds ago");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Email required",
        NoSpcs: "No spaces please",
        InvldAddr: "Not a valid email address",
        NoBadChrs: "No weird characters please",
        // Full name input field:
        NotOnlSpcs: "Not just spaces please",
        NoAt: "No @ please",
        // Username input field:
        NoDash: "No dashes (-) please",
        DontInclAt: "Don't include the @",
        StartEndLtrDgt: "Start and end with a letter or a digit",
        OnlLtrNumEtc: "Only letters (a-z, A-Z) and numbers, and _ (underscore)",
        // This shown just below the username input:
        UnUnqShrt_1: "Your ",
        UnUnqShrt_2: "@username",
        UnUnqShrt_3: ", unique and short",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Should be at least ".concat(minLength, " characters"); },
        TooLong: function (maxLength) { return "Too long. Should be at most ".concat(maxLength, " characters"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Every Post",
        EveryPostInTopic: "You'll be notified of all new replies in this topic.",
        EveryPostInCat: "You'll be notified of all new topics and replies, in this category.",
        EveryPostInTopicsWithTag: "You'll be notified of new topics with this tag, and all replies in those topics.",
        EveryPostWholeSite: "You'll be notified of all new topics and replies, anywhere.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "New Topics",
        NewTopicsInCat: "You'll be notified of new topics in this category.",
        NewTopicsWithTag: "You'll be notified of new topics with this tag.",
        NewTopicsWholeSite: "You'll be notified of new topics, anywhere.",
        Tracking: "Tracking",
        Normal: "Normal",
        NormalDescr: "You'll be notified if someone talks to you, also indirectly, e.g. a " +
            "reply to a reply to you.",
        //NormalTopic_1: "You'll be notified if someone talks to you, or mentions your ",
        //NormalTopic_2: "@name",
        Hushed: "Hushed",
        HushedDescr: "You'll be notified only if someone talks directly to you.",
        Muted: "Muted",
        MutedTopic: "No notifications."
    },
    // Forum intro text
    fi: {
        Edit: "Edit",
        Hide_1: "Hide",
        Hide_2: ", click ",
        Hide_3: " to reopen"
    },
    // Forum categories
    fcs: {
        All: "All"
    },
    // Forum buttons
    fb: {
        TopicList: "Topic list",
        // Select category dropdown
        from: "from",
        "in": "in",
        AllCats: "All categories",
        // Topic sort order
        Active: "Active first",
        ActiveDescr: "Shows recently active topics first",
        New: "New",
        NewDescr: "Shows newest topics first",
        Top: "Popular",
        TopDescr: "Shows popular topics first",
        // Topic filter dropdown
        AllTopics: "All topics",
        ShowAllTopics: "Show all topics",
        ShowAllTopicsDescr: "Not deleted topics though",
        WaitingTopics: "Waiting topics",
        OnlyWaitingDescr_1: "Shows only topics ",
        OnlyWaitingDescr_2: "waiting ",
        OnlyWaitingDescr_3: "for a solution or to be implemented and done",
        YourTopics: "Your topics",
        AssignedToYou: "Assigned to you",
        DeletedTopics: "Show deleted",
        ShowDeleted: "Show deleted",
        ShowDeletedDescr: "Shows all topics, including deleted topics",
        // Rightmost buttons
        ViewCategories: "View categories",
        EditCat: "Edit Category",
        CreateCat: "Create Category",
        CreateTopic: "Create Topic",
        PostIdea: "Post an Idea",
        AskQuestion: "Ask a Question",
        ReportProblem: "Report a Problem",
        CreateMindMap: "Create Mind Map",
        CreatePage: "Create Page"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Explain icons...",
        IconExplanation: "Icon explanation:",
        ExplGenDisc: "A general discussion.",
        ExplQuestion: "A question with no accepted answer.",
        ExplAnswer: "A question with an accepted answer.",
        ExplIdea: "An idea / suggestion.",
        ExplProblem: "A problem.",
        ExplPlanned: "Something we're planning to do or fix.",
        ExplDone: "Something that's been done or fixed.",
        ExplClosed: "Topic closed.",
        ExplPinned: "Topic always listed first (perhaps only in its own category).",
        PopularTopicsComma: "Popular topics, ",
        TopFirstAllTime: "Shows the most popular topics first, all time.",
        TopFirstPastDay: "Shows topics popular during the past day.",
        CatHasBeenDeleted: "This category has been deleted",
        TopicsActiveFirst: "Topics, recently active first",
        TopicsNewestFirst: "Topics, new first",
        CreatedOn: "Created on ",
        LastReplyOn: "\nLast reply on ",
        EditedOn: "\nEdited on ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "created the topic",
        frequentPoster: "frequent poster",
        mostRecentPoster: "most recent poster",
        inC: "in: ",
        TitleFixed: "This has been fixed",
        TitleDone: "This has been done",
        TitleStarted: "We've started this",
        TitleStartedFixing: "We've started fixing this",
        TitleUnsolved: "This is an unsolved problem",
        TitleIdea: "This is an idea",
        TitlePlanningFix: "We're planning to fix this",
        TitlePlanningDo: "We're planning to do this",
        TitleChat: "This is a chat channel",
        TitlePrivateChat: "This is a private chat channel",
        TitlePrivateMessage: "A private message",
        TitleInfoPage: "This is an info page",
        TitleDiscussion: "A discussion",
        IsPinnedGlobally: "\nIt has been pinned, so it's listed first.",
        IsPinnedInCat: "\nIt has been pinned in its category, so is listed first, in its category."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Recent topics (those waiting)",
        RecentTopicsInclDel: "Recent topics (including deleted)",
        RecentTopics: "Recent topics",
        _replies: " replies",
        _deleted: " (deleted)",
        _defCat: " (default category)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Recent posts",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online in this chat",
        NumOnlForum: " online in this forum",
        // Open left-sidebar button title.
        WatchbBtn: "Your topics",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Your recent topics, joined chats, direct messages",
        // Title shown on user profile pages.
        AbtUsr: "About User",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Back from user profile",
        BackFromAdm: "Back from admin area",
        // Title shown on full text search page.
        SearchPg: "Search Page"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Add ...",
        RecentlyViewed: "Recently viewed topics",
        JoinedChats: "Joined Chats",
        ChatChannels: "Chat Channels",
        CreateChat: "Create chat channel",
        DirectMsgs: "Direct Messages",
        NoChats: "None",
        NoDirMsgs: "None",
        // The click-topic dropdown menu:
        TopicActions: "Topic actions",
        ViewPeopleHere: "View people here",
        ViewAddRemoveMembers: "View / add / remove members",
        ViewChatMembers: "View chat members",
        EditChat: "Edit chat description",
        //EditChat: "Edit chat title and purpose", // Keep, in case adds back edit-title input
        LeaveThisChat: "Leave this chat",
        LeaveThisCommunity: "Leave this community",
        JoinThisCommunity: "Join this community"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Recent comments in this topic:",
        NoComments: "No comments.",
        YourBookmarks: "Your bookmarks:",
        UsersOnline: "Users online:",
        UsersOnlineForum: "Users online in this forum:",
        UsersInThisChat: "Users in this chat:",
        UsersInThisTopic: "Users in this topic:",
        GettingStartedGuide: "Admin Guide",
        AdminGuide: "Admin Guide",
        Guide: "Guide",
        // How to hide the sidebar.
        CloseShortcutS: "Close (keyboard shortcut: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Add more people",
        // Shown next to one's own username, in a list of users.
        thatsYou: "that's you",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Only you, it seems",
        YouAnd: "You, and ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " person" : " people";
            var have = numStrangers === 1 ? "has" : "have";
            return numStrangers + people + " who " + have + " not logged in";
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        // MISSING "are sorted by" —> "might be"
        RepliesToTheLeft: "The replies to the left might be sorted by ",
        bestFirst: "best-first.",
        ButBelow: "But below ",
        insteadBy: " the same replies are instead sorted by ",
        newestFirst: "newest-first.",
        SoIfLeave: "So if you leave, and come back here later, below you'll find ",
        allNewReplies: "all new replies.",
        Click: "Click",
        aReplyToReadIt: " a reply below to read it — because only an excerpt is shown, below."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Click to change status",
        ClickToViewAnswer: "Click to view answer",
        ViewAnswer: "View answer",
        ChangeStatusC: "Change status to:",
        ChangeCatC: "Change category:",
        ChangeTopicTypeC: "Change topic type:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "a question",
        hasAccptAns: "has an accepted answer",
        aProblem: "a problem",
        planToFix: "plan to fix",
        anIdea: "an idea",
        planToDo: "plan to do"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "This form has been ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "closed; you can no longer fill it in and post it.",
        ThisTopicClosed_1: "This topic has been ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". You can still post comments.",
        ThisPageDeleted: "This page has been deleted",
        CatDeldPageToo: "Category deleted, so this page was deleted too",
        ThreadDeld: "Thread deleted",
        CmntDeld: "Comment deleted",
        PostDeld: "Post deleted",
        DiscDeld: "Discussion deleted",
        PageDeld: "Page deleted",
        PagePendAppr: "Page pending approval",
        TitlePendAppr: "Title pending approval",
        TextPendingApproval: "Text pending approval",
        TooltipQuestClosedNoAnsw: "This question has been closed without any accepted answer.",
        TooltipTopicClosed: "This topic is closed.",
        TooltipQuestSolved: "This is a solved question",
        TooltipQuestUnsolved: "This is an unsolved question",
        StatusDone: "Done",
        TooltipProblFixed: "This has been fixed",
        TooltipDone: "This has been done",
        StatusStarted: "Started",
        TooltipFixing: "We've started fixing this",
        TooltipImplementing: "We've started doing this",
        StatusPlanned: "Planned",
        TooltipProblPlanned: "We're planning to fix this",
        TooltipIdeaPlanned: "We're planning to do this",
        StatusNew: "New",
        StatusNewDtl: "New topic, under discussion",
        TooltipUnsProbl: "This is an unsolved problem",
        TooltipIdea: "This is an idea",
        TooltipPersMsg: "Personal message",
        TooltipChat: "# means Chat Channel",
        TooltipPrivChat: "This is a private chat channel",
        TooltipPinnedGlob: "\nPinned globally.",
        TooltipPinnedCat: "\nPinned in this category.",
        SolvedClickView_1: "Solved in post #",
        SolvedClickView_2: ", click to view",
        PostHiddenClickShow: "Post hidden; click to show",
        ClickSeeMoreRepls: "Show more replies",
        ClickSeeMoreComments: "Show more comments",
        ClickSeeThisComment: "Click to show this comment",
        clickToShow: "click to show",
        ManyDisagree: "Many disagree with this:",
        SomeDisagree: "Some disagree with this:",
        PendAppr: "Pending approval",
        CmtPendAppr: "Comment pending approval, posted ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Your" : "The") + " comment below is pending approval."; },
        _and: " and",
        repliesTo: "replies to",
        InReplyTo: "In reply to",
        YourReplyTo: "Your reply to ",
        YourChatMsg: "Your chat message: ",
        YourDraft: "Your draft",
        YourEdits: "Your edits: ",
        YourProgrNoteC: "Your progress note:",
        aProgrNote: "a progress note: ",
        ReplyingToC: "Replying to:",
        ScrollToPrevw_1: "Scroll to ",
        ScrollToPrevw_2: "preview",
        UnfinEdits: "Unfinished edits",
        ResumeEdting: "Resume editing",
        DelDraft: "Delete draft",
        ClickViewEdits: "Click to view old edits",
        By: "By ",
        // Discussion ...
        aboutThisIdea: "about how and if to do this idea",
        aboutThisProbl: "about how and if to fix this",
        AddProgrNote: "Add progress note",
        // Progress ...
        withThisIdea: "with doing this idea",
        withThisProbl: "with handling this problem",
        withThis: "with doing this"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Notifications about this topic:",
        // If is a direct message topic, members listed below this text.
        Msg: "Message",
        SmrzRepls: "Summarize Replies",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "There are ".concat(numReplies, " replies. Estimated reading time: ").concat(minutes, " minutes");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Done. Summarized ".concat(numSummarized, " replies, of the ").concat(numShownBefore, " replies previously shown.");
        }
    },
    // Post actions
    pa: {
        CloseTopic: "Close topic",
        CloseOwnQuestionTooltip: "Close this question if you don't need an answer any more.",
        CloseOthersQuestionTooltip: "Close this question if it doesn't need an answer, e.g. if " +
            "it is off-topic or already answered in another topic.",
        CloseToDoTooltip: "Close this To-Do if it does not need to be done or fixed.",
        CloseTopicTooltip: "Close this topic if it needs no further consideration.",
        AcceptBtnExpl: "Accept this as the answer to the question or problem",
        SolutionQ: "Solution?",
        ClickUnaccept: "Click to un-accept this answer",
        PostAccepted: "This post has been accepted as the answer",
        NumLikes: function (num) { return num === 1 ? "1 Like" : num + " Likes"; },
        NumDisagree: function (num) { return num + " Disagree"; },
        NumBury: function (num) { return num === 1 ? "1 Bury" : num + " Burys"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Unwanted" : num + " Unwanteds"; },
        MoreVotes: "More votes...",
        LikeThis: "Like this",
        LinkToPost: "Link to this post",
        Report: "Report",
        ReportThisPost: "Report this post",
        Admin: "Admin",
        DiscIx: "Discussions index",
        Disagree: "Disagree",
        DisagreeExpl: "Click here to disagree with this post, or to warn others about factual errors.",
        Bury: "Bury",
        BuryExpl: "Click to sort other posts before this post. Only the forum staff can see your vote.",
        Unwanted: "Unwanted",
        UnwantedExpl: "If you do not want this post on this website. This would reduce the trust I have " +
            "in the post author. Only the forum staff can see your vote.",
        AddTags: "Add/remove tags",
        UnWikify: "Un-Wikify",
        Wikify: "Wikify",
        PinDeleteEtc: "Pin / Delete / Category ..."
    },
    // Share dialog
    sd: {
        Copied: "Copied.",
        CtrlCToCopy: "Hit CTRL+C to copy.",
        ClickToCopy: "Click to copy link."
    },
    // Chat
    c: {
        About_1: "This is the ",
        About_2: " chat channel, created by ",
        ScrollUpViewComments: "Scroll up to view older comments",
        Purpose: "Purpose:",
        edit: "edit",
        'delete': "delete",
        MessageDeleted: "(Message deleted)",
        JoinThisChat: "Join this chat",
        PostMessage: "Post message",
        AdvancedEditor: "Advanced editor",
        TypeHere: "Type here. You can use Markdown and HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Needs review ",
        AdminHelp: "Admin help ",
        StaffHelp: "Staff help ",
        DraftsEtc: "Drafts, bookmarks, tasks",
        MoreNotfs: "View all notifications",
        DismNotfs: "Mark all as read",
        ViewProfile: "View your profile",
        ViewGroups: "View groups",
        LogOut: "Log out",
        UnhideHelp: "Unhide help messages"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Scroll to:",
        Scroll: "Scroll",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "B",
        Back_2: "ack",
        BackExpl: "Scroll back to your previous position on this page",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Page top",
        PgTopHelp: "Go to the top of the page. Keyboard shortcut: 1",
        Repl: "Replies",
        ReplHelp: "Go to the Replies section. Shortcut: 2",
        Progr: "Progress",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Go to the Progress section. Shortcut: 3",
        PgBtm: "Page bottom",
        Btm: "Bottom",
        BtmHelp: "Go to the bottom of the page. Shortcut: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", and ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " to scroll back"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Select users",
        AddUsers: "Add users"
    },
    // About user dialog
    aud: {
        IsMod: "Is moderator.",
        IsAdm: "Is administrator.",
        IsDeld: "Is deactivated or deleted.",
        ThisIsGuest: "This is a guest user, could in fact be anyone.",
        ViewInAdm: "View in Admin Area",
        ViewProfl: "View Profile",
        ViewComments: "View other comments",
        RmFromTpc: "Remove from topic",
        EmAdrUnkn: "Email address unknown — this guest won't be notified about replies."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Preferences",
        Invites: "Invites",
        DraftsEtc: "Drafts etc",
        About: "About",
        Privacy: "Privacy",
        Security: "Security",
        Account: "Account",
        Interface: "Interface",
        // ----- Overview stats
        JoinedC: "Joined: ",
        PostsMadeC: "Posts made: ",
        LastPostC: "Last post: ",
        LastSeenC: "Last seen: ",
        TrustLevelC: "Trust level: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Upload photo",
        ChangePhoto: "Change photo",
        ImgTooSmall: "Image too small: should be at least 100 x 100",
        // ----- Activity
        OnlyStaffCanSee: "Only staff and trusted core members, can see this.",
        OnlyMbrsCanSee: "Only people who have been active members for a while can see this.",
        Nothing: "Nothing to show",
        Posts: "Posts",
        NoPosts: "No posts.",
        Topics: "Topics",
        NoTopics: "No topics.",
        // ----- User status
        UserBanned: "This user is banned",
        UserSuspended: function (dateUtc) { return "This user is suspended until ".concat(dateUtc, " UTC"); },
        ReasonC: "Reason: ",
        DeactOrDeld: "Has been deactivated or deleted.",
        isGroup: " (a group)",
        isGuest: " — a guest user, could be anyone",
        isMod: " – moderator",
        isAdmin: " – administrator",
        you: "(you)",
        // ----- Notifications page
        NoNotfs: "No notifications",
        NotfsToYouC: "Notifications to you:",
        NotfsToOtherC: function (name) { return "Notifications to ".concat(name, ":"); },
        DefNotfsSiteWide: "Default notifications, site wide",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "for",
        // ----- Drafts Etc page
        NoDrafts: "No drafts",
        YourDraftsC: "Your drafts:",
        DraftsByC: function (name) { return "Drafts by ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Here you can invite people to join this site. ",
        InvitesListedBelow: "Invites that you have already sent are listed below.",
        NoInvites: "You have not invited anyone yet.",
        InvitedEmail: "Invited email",
        WhoAccepted: "Member who accepted",
        InvAccepted: "Invitation accepted",
        InvSent: "Invitation sent",
        JoinedAlready: "Joined already",
        SendAnInv: "Invite people",
        SendInv: "Send invites",
        SendInvExpl: // MISSING I18N changed to pluralis
        "We'll send your friends a brief email. They'll click a link " +
            "to join immediately, no login required. " +
            "They'll become normal members, not moderators or admins.",
        //EnterEmail: "Enter email(s)",
        InvDone: "Done. I'll send them an email.",
        NoOneToInv: "No one to invite.",
        InvNotfLater: "I'll notify you later, when I've invited them.",
        AlreadyInvSendAgainQ: "These have been invited already — maybe you'd like to invite them again?",
        InvErr_1: "These resulted in ",
        InvErr_2: "errors",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "These have joined already, so I didn't invite them:",
        ResendInvsQ: "Re-send invitations to these people? They have been invited already.",
        InvAgain: "Invite again",
        // ----- Preferences, About
        AboutYou: "About you",
        WebLink: "Any website or page of yours.",
        NotShownCannotChange: "Not shown publicly. Cannot be changed.",
        // The full name or alias:
        NameOpt: "Name (optional)",
        NotShown: "Not shown publicly.",
        // The username:
        MayChangeFewTimes: "You may change it only a few times.",
        notSpecified: "(not specified)",
        ChangeUsername_1: "You may change your username only a few times.",
        ChangeUsername_2: "Changing it too often can make others confused — " +
            "they won't know how to @mention you.",
        NotfAboutAll: "Be notified about every new post (unless you mute the topic or category)",
        NotfAboutNewTopics: "Be notified about new topics (unless you mute the category)",
        ActivitySummaryEmails: "Activity summary emails",
        EmailSummariesToGroup: "When members of this group don't visit here, then, by default, email them " +
            "summaries of popular topics and other stuff.",
        EmailSummariesToMe: "When I don't visit here, email me " +
            "summaries of popular topics and other stuff.",
        AlsoIfTheyVisit: "Email them also if they visit here regularly.",
        AlsoIfIVisit: "Email me also if I visit here regularly.",
        HowOftenWeSend: "How often shall we send these emails?",
        HowOftenYouWant: "How often do you want these emails?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Hide your recent activity for strangers and new members?",
        HideActivityStrangers_2: "(But not for those who have been active members for a while.)",
        HideActivityAll_1: "Hide your recent activity for everyone?",
        HideActivityAll_2: "(Except for staff and trusted core members.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Email addresses",
        PrimaryDot: "Primary. ",
        VerifiedDot: "Verified. ",
        NotVerifiedDot: "Not verified. ",
        ForLoginWithDot: function (provider) { return "For login with ".concat(provider, ". "); },
        MakePrimary: "Make Primary",
        AddEmail: "Add email address",
        TypeNewEmailC: "Type a new email address:",
        MaxEmailsInfo: function (numMax) { return "(You cannot add more than ".concat(numMax, " addresses.)"); },
        EmailAdded_1: "Added. We've sent you a verification email — ",
        EmailAdded_2: "check your email inbox.",
        SendVerifEmail: "Send verification email",
        EmailStatusExpl: "('Primary' means you can login via this address, and we send notifications to it. " +
            "'Verified' means you clicked a verification link in an address verification email.)",
        // Password:
        ChangePwdQ: "Change password?",
        CreatePwdQ: "Create password?",
        WillGetPwdRstEml: "You'll get a reset password email.",
        // This is the "None" in:  "Password: None"
        PwdNone: "None",
        // Logins:
        LoginMethods: "Login methods",
        commaAs: ", as: ",
        // One's data:
        YourContent: "Your content",
        DownloadPosts: "Download posts",
        DownloadPostsHelp: "Creates a JSON file with a copy of topics and comments you've posted.",
        DownloadPersData: "Download personal data",
        DownloadPersDataHelp: "Creates a JSON file with a copy of your personal data, e.g. your name " +
            "(if you specified a name) and email address.",
        // Delete account:
        DangerZone: "Danger zone",
        DeleteAccount: "Delete account",
        DeleteYourAccountQ: "Delete your account? We'll remove your name, forget your email address, password and " +
            "any online identities (like Facebook or Twitter login). " +
            "You won't be able to login again. This cannot be undone.",
        DeleteUserQ: "Delete this user? We'll remove the name, forget the email address, password and " +
            "online identities (like Facebook or Twitter login). " +
            "The user won't be able to login again. This cannot be undone.",
        YesDelete: "Yes, delete"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Group members",
        NoMembers: "No members.",
        MayNotListMembers: "May not list members.",
        AddMembers: "Add Members",
        BuiltInCannotModify: "This is a built-in group; it cannot be modified.",
        NumMembers: function (num) { return "".concat(num, " members"); },
        YouAreMember: "You're a member.",
        CustomGroupsC: "Custom groups:",
        BuiltInGroupsC: "Built-in groups:",
        DeleteGroup: "Delete this group"
    },
    // Create user dialog
    cud: {
        CreateUser: "Create User",
        CreateAccount: "Create Account",
        EmailC: "Email:",
        keptPriv: "will be kept private",
        forNotfsKeptPriv: "for reply notifications, kept private",
        EmailVerifBy_1: "Your email has been verified by ",
        EmailVerifBy_2: ".",
        UsernameC: "Username:",
        FullNameC: "Full name:",
        optName: "optional",
        // OrCreateAcct_1: "Or ",
        // OrCreateAcct_2: "create an account",
        // OrCreateAcct_3: " with ",
        // OrCreateAcct_4: "@username",
        // OrCreateAcct_5: " & password",
        DoneLoggedIn: "Account created. You have been logged in.",
        AlmostDone: "Almost done! You just need to confirm your email address. We have " +
            "sent an email to you. Please click the link in the email to activate " +
            "your account. You can close this page."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Terms and Privacy",
        Accept_1: "Do you accept our ",
        TermsOfService: "Terms of Service",
        TermsOfUse: "Terms of Use",
        Accept_2: " and ",
        PrivPol: "Privacy Policy",
        Accept_3_User: "?",
        Accept_3_Owner: " for site owners?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Yes I accept"
    },
    // Password input
    pwd: {
        PasswordC: "Password:",
        StrengthC: "Strength: ",
        FairlyWeak: "Fairly weak.",
        toShort: "too short",
        TooShort: function (minLength) { return "Too short. Should be at least ".concat(minLength, " characters"); },
        PlzInclDigit: "Please include a digit or special character",
        TooWeak123abc: "Too weak. Don't use passwords like '12345' or 'abcde'.",
        AvoidInclC: "Avoid including (parts of) your name or email in the password:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Page not found, or Access Denied.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "You're impersonating someone, who might not have access to all parts " +
            "of this website.",
        IfYouThinkExistsThen: "If you think the page exists, log in as someone who may access it. ",
        LoggedInAlready: "(You are logged in already, but perhaps it's the wrong account?) ",
        ElseGoToHome_1: "Otherwise, you can ",
        ElseGoToHome_2: "go to the homepage.",
        CreateAcconut: "Create account",
        ContinueWithDots: "Continue with ...",
        SignUp: "Join",
        LogIn: "Log in",
        LogInWithPwd: "Log in with Password",
        CreateAdmAcct: "Create admin account:",
        AuthRequired: "Authentication required to access this site",
        LogInToLike: "Log in to Like this post",
        LogInToSubmit: "Log in and submit",
        LogInToComment: "Log in to write a comment",
        LogInToCreateTopic: "Log in to create topic",
        //AlreadyHaveAcctQ: "You have an account? ",  // MISSING changed "Already have...?" to "You have...?"
        OrLogIn_1: "Or ",
        OrLogIn_2: "Log in",
        OrLogIn_3: " instead",
        //NewUserQ: "New user? ",
        SignUpInstead_1: "Or ",
        SignUpInstead_2: "Create account",
        SignUpInstead_3: "",
        OrTypeName_1: ", or just ",
        OrTypeName_2: "type a name",
        OrTypeName_3: "",
        OrCreateAcctHere: "Or create account:",
        OrTypeName: "Or type your name:",
        OrLogIn: "Or log in:",
        YourNameQ: "Your name?",
        BadCreds: "Wrong username or password",
        UsernameOrEmailC: "Username or email:",
        PasswordC: "Password:",
        ForgotPwd: "Did you forget your password?",
        NoPwd: "You have not yet chosen a password.",
        CreatePwd: "Create password"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Please tell us what you are concerned about.",
        ThanksHaveReported: "Thanks. You have reported it. The forum staff will take a look.",
        ReportComment: "Report Comment",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "This post contains personal data, for example someones' real name.",
        OptOffensive: "This post contains offensive or abusive content.",
        OptSpam: "This post is an unwanted advertisement.",
        OptOther: "Notify staff about this post for some other reason."
    },
    // Help message dialog (as in "Tips", not "Private message").
    help: {
        YouCanShowAgain_1: "You can show help messages again, if you are logged in, by " +
            "clicking your name and then ",
        YouCanShowAgain_2: "Unhide help messages"
    },
    // Editor
    e: {
        SimilarTopicsC: "Similar topics:",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "Sorry but currently you can upload only one file at a time",
        PleaseFinishPost: "Please first finish writing your post",
        PleaseFinishChatMsg: "Please first finish writing your chat message",
        PleaseFinishMsg: "Please first finish writing your message",
        PleaseSaveEdits: "Please first save your current edits",
        PleaseSaveOrCancel: "Please first either save or cancel your new topic",
        CanContinueEditing: "You can continue editing your text, if you open the editor again.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Please don't delete all text. Write something.",
        PleaseWriteSth: "Please write something.",
        PleaseWriteTitle: "Please write a topic title.",
        PleaseWriteMsgTitle: "Please write a message title.",
        PleaseWriteMsg: "Please write a message.",
        exBold: "bold text",
        exEmph: "emphasized text",
        exPre: "preformatted text",
        exQuoted: "quoted text",
        ExHeading: "Heading",
        TitlePlaceholder: "Type a title — what is this about, in one brief sentence?",
        TypeChatTitle: "Type a title — what's this chat about, in a few words?",
        TypePurpose: "Type a purpose — can be longer than the title, more descriptive.",
        EditPost_1: "Edit ",
        EditPost_2: "post ",
        TypeChatMsg: "Type a chat message:",
        YourMsg: "Your message:",
        CreateTopic: "Create new topic",
        CreateCustomHtml: "Create a custom HTML page (add your own <h1> title)",
        CreateInfoPage: "Create an info page",
        CreateCode: "Create a source code page",
        AskQuestion: "Ask a question",
        ReportProblem: "Report a problem",
        SuggestIdea: "Suggest an idea",
        NewChat: "Chat title and purpose",
        NewPrivChat: "Private chat title and purpose",
        AppendComment: "Append a comment at the bottom of the page:",
        ReplyTo: "Reply to ",
        ReplyTo_theOrigPost: "the Original Post",
        ReplyTo_post: "post ",
        AddCommentC: "Add a comment:",
        PleaseSelectPosts: "Please select one or more posts to reply to.",
        Save: "Save",
        edits: "edits",
        PostReply: "Post reply",
        PostComment: "Post comment",
        Post: "Post",
        comment: "comment",
        question: "question",
        PostMessage: "Post message",
        SimpleEditor: "Simple editor",
        Send: "Send",
        message: "message",
        Create: "Create",
        page: "page",
        chat: "chat",
        idea: "idea",
        topic: "topic",
        Submit: "Submit",
        problem: "problem",
        ViewOldEdits: "View old edits",
        UploadBtnTooltip: "Upload a file or image",
        BoldBtnTooltip: "Make text bold",
        EmBtnTooltip: "Emphasize",
        QuoteBtnTooltip: "Quote",
        PreBtnTooltip: "Preformatted text",
        HeadingBtnTooltip: "Heading",
        TypeHerePlaceholder: "Type here. You can use Markdown and HTML. Drag and drop to paste images.",
        Maximize: "Maximize",
        ToNormal: "Back to normal",
        TileHorizontally: "Tile horizontally",
        PreviewC: "Preview:",
        TitleExcl: " (title excluded)",
        ShowEditorAgain: "Show editor again",
        Minimize: "Minimize",
        IPhoneKbdSpace_1: "(This gray space is reserved",
        IPhoneKbdSpace_2: "for the iPhone keyboard.)",
        PreviewInfo: "Here you can preview how your post will look.",
        CannotType: "You cannot type here.",
        LoadingDraftDots: "Loading any draft...",
        DraftUnchanged: "Unchanged.",
        CannotSaveDraftC: "Cannot save draft:",
        DraftSavedBrwsr: "Draft saved, in browser.",
        DraftSaved: function (nr) { return "Draft ".concat(nr, " saved."); },
        DraftDeleted: function (nr) { return "Draft ".concat(nr, " deleted."); },
        WillSaveDraft: function (nr) { return "Will save draft ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "Saving draft ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Deleting draft ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Select category"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Select topic type:",
        DiscussionExpl: "A discussion about something.",
        QuestionExpl: "One answer can be marked as the accepted answer.",
        ProblExpl: "If something is broken or doesn't work. Can be marked as fixed/solved.",
        IdeaExpl: "A suggestion. Can be marked as done/implemented.",
        ChatExpl: "A perhaps never-ending conversation.",
        PrivChatExpl: "Only visible to people that get invited to join the chat.",
        CustomHtml: "Custom HTML page",
        InfoPage: "Info page",
        Code: "Code",
        EmbCmts: "Embedded comments",
        About: "About",
        PrivChat: "Private Chat",
        Form: "Form"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "No more communities to join.",
        SelCmty: "Select community ..."
    },
    // Search dialogs and the search page.
    s: {
        SearchForHelp: "Search for help",
        TxtToFind: "Text to search for"
    },
    // No internet
    ni: {
        NoInet: "No internet connection",
        PlzRefr: "Refresh page to see any latest changes. (There was a disconnection)",
        RefrNow: "Refresh now"
    },
    PostDeleted: function (postNr) { return "That post, nr ".concat(postNr, ", has been deleted."); },
    NoSuchPost: function (postNr) { return "There's no post nr ".concat(postNr, " on this page."); },
    NoPageHere: "This page has been deleted, or it never existed, or you may not access it.",
    GoBackToLastPage: "Go back to last page"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_en_US = (t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "活跃",
    Activity: "活动",
    Add: "添加",
    AddingDots: "正在添加...",
    AddComment: "添加评论",
    Admin: "管理员",
    AdvSearch: "高级搜索",
    Anonym: "匿名",
    Away: "离开",
    Back: "返回",
    BlogN: "博客",
    Bookmarks: "书签",
    Cancel: "取消",
    Categories: "分类",
    Category: "分类",
    ChangeV: "更改",
    ClickToShow: "点击显示",
    ChangeDots: "正在更改...",
    ChatN: "聊天",
    Chatting: "聊天中",
    CheckYourEmail: "检查你的电子邮件",
    Close: "关闭",
    closed: "已关闭",
    comments: "评论数",
    Continue: "继续",
    Created: "已创建",
    Delete: "删除",
    Deleted: "已删除",
    DirectMessage: "私信",
    Discussion: "讨论",
    discussion: "讨论",
    done: "完成",
    EditV: "编辑",
    Editing: "编辑中",
    EmailC: "电子邮件：",
    EmailAddress: "电子邮件地址",
    EmailAddresses: "电子邮件地址",
    EmailSentD: "电子邮件已发送。",
    Forum: "论坛",
    GetNotifiedAbout: "获取通知",
    GroupsC: "群组：",
    Hide: "隐藏",
    Home: "主页",
    Idea: "想法",
    Join: "加入",
    KbdShrtcsC: "键盘快捷键：",
    Loading: "正在加载...",
    LoadMore: "加载更多...",
    LogIn: "登录",
    LoggedInAs: "登录为",
    LogOut: "退出",
    Maybe: "或许",
    Manage: "管理",
    Members: "成员",
    MessageN: "消息",
    MoreDots: "更多...",
    Move: "移动",
    Name: "名称",
    NameC: "名称：",
    NewTopic: "新话题",
    NoCancel: "不取消",
    Notifications: "通知",
    NotImplemented: "（未实现）",
    NotYet: "尚未",
    NoTitle: "无标题",
    NoTopics: "无话题",
    Okay: "好的",
    OkayDots: "好的...",
    Online: "在线",
    onePerLine: "每行一个",
    PreviewV: "预览",
    Problem: "问题",
    progressN: "进度",
    Question: "问题",
    Recent: "最近",
    Remove: "移除",
    Reopen: "重新开启",
    ReplyV: "回复",
    Replying: "回复中",
    Replies: "回复",
    replies: "回复",
    Save: "保存",
    SavingDots: "正在保存...",
    SavedDot: "已保存。",
    Search: "搜索",
    SendMsg: "发送消息",
    ShowPreview: "显示预览",
    SignUp: "加入",
    Solution: "解决方案",
    started: "开始",
    Summary: "摘要",
    Submit: "提交",
    Tag: "标签",
    Tags: "标签",
    Tools: "工具",
    Topics: "话题",
    TopicTitle: "话题标题",
    TopicType: "话题类型",
    UploadingDots: "上传中...",
    Username: "用户名",
    Users: "用户",
    Welcome: "欢迎",
    Wiki: "维基",
    Yes: "是",
    YesBye: "是的，再见",
    YesDoThat: "是的，去做",
    You: "你",
    you: "你",
    // 信任级别
    Guest: "游客",
    NewMember: "新成员",
    BasicMember: "基础成员",
    FullMember: "完整成员",
    TrustedMember: "受信任成员",
    RegularMember: "普通成员",
    CoreMember: "核心成员",
    // 时间段
    PastDay: "过去一天",
    PastWeek: "过去一周",
    PastMonth: "过去一个月",
    PastQuarter: "过去一个季度",
    PastYear: "过去一年",
    AllTime: "全部时间",
    // 时间距离的字母缩写
    // 例如：英文中的“3d”在论坛主题列表中表示3天前。“5h”表示5小时。
    monthsLtr: "月",
    daysLtr: "天",
    hoursLtr: "小时",
    minsLtr: "分",
    secsLtr: "秒",
    // 时间距离的长文本版本。
    daysAgo: function (numDays) { return (numDays === 1 ? "1天前" : "".concat(numDays, "\u5929\u524D")); },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1小时前" : "".concat(numHours, "\u5C0F\u65F6\u524D");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1分钟前" : "".concat(numMins, "\u5206\u949F\u524D");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1秒钟前" : "".concat(numSecs, "\u79D2\u949F\u524D");
    },
    // 输入框，例如电子邮件、姓名等。
    inp: {
        // 电子邮件地址输入框：
        EmReq: "必须输入电子邮件地址",
        NoSpcs: "请勿输入空格",
        InvldAddr: "不是有效的电子邮件地址",
        NoBadChrs: "请勿输入奇怪的字符",
        // 全名输入框：
        NotOnlSpcs: "请勿只输入空格",
        NoAt: "请勿输入@符号",
        // 用户名输入框：
        NoDash: "请勿输入破折号（-）",
        DontInclAt: "请勿包含@符号",
        StartEndLtrDgt: "必须以字母或数字开头和结尾",
        OnlLtrNumEtc: "仅允许字母（a-z，A-Z）和数字、_（下划线）",
        // 此消息显示在用户名输入框下面：
        UnUnqShrt_1: "您的",
        UnUnqShrt_2: "@用户名",
        UnUnqShrt_3: "，唯一且简短",
        // 适用于所有输入字段的通用消息：
        TooShort: function (minLength) { return "\u81F3\u5C11\u5E94\u4E3A".concat(minLength, "\u4E2A\u5B57\u7B26"); },
        TooLong: function (maxLength) { return "\u8FC7\u957F\u3002\u6700\u591A\u5E94\u4E3A".concat(maxLength, "\u4E2A\u5B57\u7B26"); }
    },
    // 通知级别。
    nl: {
        EveryPost: "每篇文章",
        EveryPostInTopic: "您将收到此主题中所有新回复的通知。",
        EveryPostInCat: "您将收到此分类中所有新主题和回复的通知。",
        EveryPostInTopicsWithTag: "您将收到带有此标签的新主题和这些主题中的所有回复的通知。",
        EveryPostWholeSite: "您将收到任何地方的所有新主题和回复的通知。",
        // 只会收到新主题的*第一篇*帖子的通知。也就是原始帖子
        // （在讨论论坛主题中，第一篇帖子就是原始帖子）。
        NewTopics: "新主题",
        NewTopicsInCat: "您将收到此分类中的新主题的通知。",
        NewTopicsWithTag: "您将收到带有此标签的新主题的通知。",
        NewTopicsWholeSite: "您将收到任何地方的新主题的通知。",
        Tracking: "跟踪",
        Normal: "普通",
        NormalDescr: "如果有人与您交谈，即使是间接地，例如回复您的回复，您也会收到通知。",
        //NormalTopic_1: "如果有人与您交谈，或提到您的",
        //NormalTopic_2: "@name",
        Hushed: "静音",
        HushedDescr: "只有当有人直接与您交谈时，您才会收到通知。",
        Muted: "已静音",
        MutedTopic: "没有通知。"
    },
    // 论坛介绍文本
    fi: {
        Edit: "编辑",
        Hide_1: "隐藏",
        Hide_2: "，单击",
        Hide_3: "重新打开"
    },
    // 论坛分类
    fcs: {
        All: "所有分类"
    },
    // 论坛按钮
    fb: {
        TopicList: "主题列表",
        // 选择分类下拉菜单
        from: "来自",
        "in": "在",
        AllCats: "所有分类",
        // 主题排序顺序
        Active: "活跃优先",
        ActiveDescr: "首先显示最近活跃的主题",
        New: "最新",
        NewDescr: "首先显示最新的主题",
        Top: "热门",
        TopDescr: "首先显示热门主题",
        // 主题过滤下拉菜单
        AllTopics: "所有话题",
        ShowAllTopics: "显示所有话题",
        ShowAllTopicsDescr: "不包括已删除的话题",
        WaitingTopics: "等待的话题",
        OnlyWaitingDescr_1: "仅显示",
        OnlyWaitingDescr_2: "等待",
        OnlyWaitingDescr_3: "解决方案或被实施和完成的话题",
        YourTopics: "您的话题",
        AssignedToYou: "分配给您的话题",
        DeletedTopics: "显示已删除的",
        ShowDeleted: "显示已删除的话题",
        ShowDeletedDescr: "显示所有话题，包括已删除的话题",
        // 右侧按钮
        ViewCategories: "查看分类",
        EditCat: "编辑分类",
        CreateCat: "创建分类",
        CreateTopic: "创建话题",
        PostIdea: "发布想法",
        AskQuestion: "提问",
        ReportProblem: "报告问题",
        CreateMindMap: "创建思维导图",
        CreatePage: "创建页面"
    },
    // 论坛主题列表
    ft: {
        ExplIcons: "解释图标...",
        IconExplanation: "图标说明：",
        ExplGenDisc: "一般讨论。",
        ExplQuestion: "一个没有被接受的答案的问题。",
        ExplAnswer: "一个有被接受答案的问题。",
        ExplIdea: "一个想法/建议。",
        ExplProblem: "一个问题。",
        ExplPlanned: "我们正在计划做或修复的事情。",
        ExplDone: "已经完成或修复的事情。",
        ExplClosed: "主题已关闭。",
        ExplPinned: "主题始终排在第一位（可能仅在其自己的类别中）。",
        PopularTopicsComma: "热门话题，",
        TopFirstAllTime: "首先显示最受欢迎的话题，所有时间。",
        TopFirstPastDay: "显示过去一天受欢迎的话题。",
        CatHasBeenDeleted: "此类别已被删除",
        TopicsActiveFirst: "主题，最近活跃的首位",
        TopicsNewestFirst: "主题，最新的首位",
        CreatedOn: "创建于 ",
        LastReplyOn: "\n上次回复时间 ",
        EditedOn: "\n编辑于 ",
        // 这些被显示为鼠标悬停工具提示或移动电话触摸提示，在论坛主题列表中用户头像图标上。
        createdTheTopic: "创建了主题",
        frequentPoster: "常发帖者",
        mostRecentPoster: "最新的发帖者",
        inC: "在：",
        TitleFixed: "此问题已解决",
        TitleDone: "此事情已完成",
        TitleStarted: "我们已经开始了",
        TitleStartedFixing: "我们已经开始修复这个问题",
        TitleUnsolved: "这是一个未解决的问题",
        TitleIdea: "这是一个想法",
        TitlePlanningFix: "我们正在计划修复这个问题",
        TitlePlanningDo: "我们正在计划做这件事",
        TitleChat: "这是一个聊天频道",
        TitlePrivateChat: "这是一个私人聊天频道",
        TitlePrivateMessage: "一条私人消息",
        TitleInfoPage: "这是一个信息页面",
        TitleDiscussion: "一次讨论",
        IsPinnedGlobally: "\n它被置顶，所以排在首位。",
        IsPinnedInCat: "\n它在它的类别中被置顶，所以在它的类别中排在首位。"
    },
    // 论坛类别列表
    fc: {
        RecentTopicsWaiting: "最近的主题（等待中）",
        RecentTopicsInclDel: "最近的主题（包括已删除的）",
        RecentTopics: "最近的主题",
        _replies: " 回复",
        _deleted: "（已删除）",
        _defCat: "（默认类别）"
    },
    // 顶部栏
    // 显示在页面顶部。包括登录和注册按钮，或用户的用户名菜单。
    tb: {
        // 打开右侧边栏并列出当前主题中最近的帖子。
        RecentPosts: "最近的帖子",
        // 在线用户数鼠标悬停时，打开右侧边栏按钮的提示信息。
        NumOnlChat: "当前聊天室在线人数为",
        NumOnlForum: "当前论坛在线人数为",
        // 打开左侧边栏按钮的标题。
        WatchbBtn: "您的主题",
        // 鼠标悬停在打开左侧边栏按钮时显示的提示信息。
        WatchbToolt: "您的最近主题、已加入聊天室、直接消息",
        // 在用户个人资料页面上显示的标题。
        AbtUsr: "关于用户",
        // 快捷方式，离开用户个人资料页面或工作人员区域，返回讨论主题。
        BackFromUsr: "从用户资料返回",
        BackFromAdm: "从管理区返回",
        // 在全文搜索页面上显示的标题。
        SearchPg: "搜索页面"
    },
    // 左侧边栏
    wb: {
        AddCommunity: "添加 ...",
        RecentlyViewed: "最近查看的主题",
        JoinedChats: "已加入的聊天室",
        ChatChannels: "聊天室频道",
        CreateChat: "创建聊天室频道",
        DirectMsgs: "直接消息",
        NoChats: "没有聊天消息",
        NoDirMsgs: "没有直接消息",
        // 单击主题下拉菜单：
        TopicActions: "主题操作",
        ViewPeopleHere: "查看这里的人员",
        ViewAddRemoveMembers: "查看/添加/删除成员",
        ViewChatMembers: "查看聊天成员",
        EditChat: "编辑聊天描述",
        //EditChat: "编辑聊天标题和目的", // 保留，以防添加回编辑标题输入
        LeaveThisChat: "离开此聊天室",
        LeaveThisCommunity: "退出此社区",
        JoinThisCommunity: "加入此社区"
    },
    // 右侧边栏
    cb: {
        RecentComments: "本主题的最近评论：",
        NoComments: "没有评论。",
        YourBookmarks: "你的书签：",
        UsersOnline: "在线用户：",
        UsersOnlineForum: "本论坛在线用户：",
        UsersInThisChat: "本聊天中的用户：",
        UsersInThisTopic: "本主题中的用户：",
        GettingStartedGuide: "入门指南",
        AdminGuide: "管理指南",
        Guide: "指南",
        // 如何隐藏侧边栏。
        CloseShortcutS: "关闭（键盘快捷键：S）",
        // ----- 在线用户列表 / 当前主题中的用户
        AddPeople: "添加更多人",
        // 在用户列表中显示在自己的用户名旁边。
        thatsYou: "就是你",
        // 关于哪些人在线的信息。
        // 例如，在英文中：“在线用户：您和5个未登录的人”
        OnlyYou: "只有你似乎在线",
        YouAnd: "你和",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " 个人" : " 人";
            var have = numStrangers === 1 ? "还没有" : "没有";
            return numStrangers + people + " " + have + "登录";
        },
        // ----- 最近评论列表
        // 这解释了侧边栏中“最近”选项卡的工作原理。
        RepliesToTheLeft: "左侧的回复可能会按照最好的顺序排序",
        bestFirst: "（最佳优先）。",
        ButBelow: "但是在下面，",
        insteadBy: " 相同的回复将按",
        newestFirst: "最新的先排序。",
        SoIfLeave: "因此，如果您离开并稍后返回这里，则将找到",
        allNewReplies: "所有新的回复。",
        Click: "点击",
        aReplyToReadIt: "下面的回复以阅读它-因为下面仅显示摘录。"
    },
    // Change page dialog
    cpd: {
        ClickToChange: "点击更改状态",
        ClickToViewAnswer: "点击查看答案",
        ViewAnswer: "查看答案",
        ChangeStatusC: "更改状态为：",
        ChangeCatC: "更改类别：",
        ChangeTopicTypeC: "更改主题类型："
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "一个问题",
        hasAccptAns: "有一个被采纳的答案",
        aProblem: "一个问题",
        planToFix: "计划修复",
        anIdea: "一个想法",
        planToDo: "计划去做"
    },
    // 讨论/非聊天页面
    d: {
        // 这些文本被分成1、2或1、2、3等部分，因为在文本之间，
        // 会显示图标以帮助人们理解这些图标的含义。
        ThisFormClosed_1: "这个表单已经被",
        // 在此处显示了一个主题已关闭的图标，在文本部分1（上面）和部分2（下面）之间。
        ThisFormClosed_2: "关闭，你不能再填写和发布它。",
        ThisTopicClosed_1: "这个话题已经被",
        // 在此处显示了一个主题已关闭的图标和文本“已关闭”。
        ThisTopicClosed_2: "。你仍然可以发布评论。",
        ThisPageDeleted: "此页面已被删除",
        CatDeldPageToo: "类别已删除，因此此页面也已被删除",
        ThreadDeld: "主题已删除",
        CmntDeld: "评论已删除",
        PostDeld: "帖子已删除",
        DiscDeld: "讨论已删除",
        PageDeld: "页面已删除",
        PagePendAppr: "页面等待批准",
        TitlePendAppr: "标题等待批准",
        TextPendingApproval: "文本等待批准",
        TooltipQuestClosedNoAnsw: "此问题已关闭，没有接受的答案。",
        TooltipTopicClosed: "此主题已关闭。",
        TooltipQuestSolved: "这是一个已解决的问题",
        TooltipQuestUnsolved: "这是一个未解决的问题",
        StatusDone: "完成",
        TooltipProblFixed: "已经解决了这个问题",
        TooltipDone: "已经完成了这个事情",
        StatusStarted: "已开始",
        TooltipFixing: "我们已经开始解决这个问题",
        TooltipImplementing: "我们已经开始做这个事情",
        StatusPlanned: "已计划",
        TooltipProblPlanned: "我们正在计划解决这个问题",
        TooltipIdeaPlanned: "我们正在计划做这个事情",
        StatusNew: "新的",
        StatusNewDtl: "新的主题，正在讨论中",
        TooltipUnsProbl: "这是一个未解决的问题",
        TooltipIdea: "这是一个想法",
        TooltipPersMsg: "个人消息",
        TooltipChat: "# 表示聊天频道",
        TooltipPrivChat: "这是一个私人聊天频道",
        TooltipPinnedGlob: "\n被全局置顶。",
        TooltipPinnedCat: "\n被该类别置顶。",
        SolvedClickView_1: "在帖子#中已解决",
        SolvedClickView_2: "，点击查看",
        PostHiddenClickShow: "帖子已隐藏，点击显示",
        ClickSeeMoreRepls: "显示更多回复",
        ClickSeeMoreComments: "显示更多评论",
        ClickSeeThisComment: "点击显示此评论",
        clickToShow: "点击显示",
        ManyDisagree: "很多人不同意此观点：",
        SomeDisagree: "一些人不同意此观点：",
        PendAppr: "待批准",
        CmtPendAppr: "评论待批准，发布于",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "您的" : "该") + "评论待批准。"; },
        _and: "和",
        repliesTo: "回复",
        InReplyTo: "回复",
        YourReplyTo: "您的回复",
        YourChatMsg: "您的聊天消息：",
        YourDraft: "您的草稿",
        YourEdits: "您的编辑：",
        YourProgrNoteC: "您的进展记录：",
        aProgrNote: "一条进展记录：",
        ReplyingToC: "回复",
        ScrollToPrevw_1: "滚动到",
        ScrollToPrevw_2: "预览",
        UnfinEdits: "未完成的编辑",
        ResumeEdting: "继续编辑",
        DelDraft: "删除草稿",
        ClickViewEdits: "单击查看旧的编辑",
        By: "作者：",
        // Discussion ...
        aboutThisIdea: "关于如何以及是否执行此想法",
        aboutThisProbl: "关于如何以及是否修复此问题",
        AddProgrNote: "添加进展记录",
        // Progress ...
        withThisIdea: "与执行此想法有关",
        withThisProbl: "与解决此问题有关",
        withThis: "与此有关"
    },
    // Metabar（元栏）
    // 在原始帖子和所有回复之间显示。
    mb: {
        NotfsAbtThisC: "关于此话题的通知：",
        // 如果是直接消息主题，则在此文本下方列出成员。
        Msg: "消息",
        SmrzRepls: "总结回复",
        // 不必担心“1个回复”，“2,3,4个回复”的正确性。
        // 只需始终写“回复”？（即使只有一个）
        EstTime: function (numReplies, minutes) {
            return "\u6709".concat(numReplies, "\u4E2A\u56DE\u590D\u3002\u9884\u8BA1\u9605\u8BFB\u65F6\u95F4\uFF1A").concat(minutes, "\u5206\u949F");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "\u5B8C\u6210\u3002\u603B\u7ED3\u4E86".concat(numSummarized, "\u4E2A\u56DE\u590D\uFF0C\u4E4B\u524D\u663E\u793A\u4E86").concat(numShownBefore, "\u4E2A\u56DE\u590D\u3002");
        }
    },
    // 帖子操作
    pa: {
        CloseTopic: "关闭主题",
        CloseOwnQuestionTooltip: "如果您不需要回答，请关闭此问题。",
        CloseOthersQuestionTooltip: "如果此问题不需要回答（例如，如果属于非主题或已在另一个主题中回答），请关闭此问题。",
        CloseToDoTooltip: "如果此 To-Do 不需要完成或修复，请关闭。",
        CloseTopicTooltip: "如果不需要进一步考虑此主题，请关闭此主题。",
        AcceptBtnExpl: "接受此作为问题或问题的答案",
        SolutionQ: "解决方案？",
        ClickUnaccept: "单击取消接受此答案",
        PostAccepted: "此帖子已被接受为答案",
        NumLikes: function (num) { return (num === 1 ? "1 赞" : num + " 赞"); },
        NumDisagree: function (num) { return num + " 不同意"; },
        NumBury: function (num) { return (num === 1 ? "1 掩埋" : num + " 掩埋"); },
        NumUnwanted: function (num) { return (num === 1 ? "1 不需要" : num + " 不需要"); },
        MoreVotes: "更多投票...",
        LikeThis: "喜欢这个",
        LinkToPost: "链接到此帖子",
        Report: "报告",
        ReportThisPost: "报告此帖子",
        Admin: "管理员",
        DiscIx: "讨论索引",
        Disagree: "不同意",
        DisagreeExpl: "单击此处不同意此帖子，或警告其他人存在事实错误。",
        Bury: "掩埋",
        BuryExpl: "单击此处将其他帖子排序在此帖子之前。只有论坛工作人员可以看到您的投票。",
        Unwanted: "不想要",
        UnwantedExpl: "如果你不想要这个帖子出现在这个网站上。这会减少我对帖子作者的信任。只有论坛工作人员能看到你的投票。",
        AddTags: "添加/删除标签",
        UnWikify: "取消维基化",
        Wikify: "维基化",
        PinDeleteEtc: "置顶/删除/分类 ..."
    },
    // 分享对话框
    sd: {
        Copied: "已复制。",
        CtrlCToCopy: "按Ctrl+C键复制。",
        ClickToCopy: "点击复制链接。"
    },
    // 聊天
    c: {
        About_1: "这是由",
        About_2: "创建的聊天频道。",
        ScrollUpViewComments: "向上滚动查看旧评论",
        Purpose: "目的：",
        edit: "编辑",
        "delete": "删除",
        MessageDeleted: "（消息已删除）",
        JoinThisChat: "加入此聊天",
        PostMessage: "发布消息",
        AdvancedEditor: "高级编辑器",
        TypeHere: "在此输入。您可以使用Markdown和HTML。"
    },
    // 我的菜单
    mm: {
        NeedsReview: "需要审核",
        AdminHelp: "管理员帮助",
        StaffHelp: "工作人员帮助",
        DraftsEtc: "草稿、书签、任务",
        MoreNotfs: "查看所有通知",
        DismNotfs: "全部标记为已读",
        ViewProfile: "查看您的个人资料",
        ViewGroups: "查看群组",
        LogOut: "退出",
        UnhideHelp: "取消隐藏帮助消息"
    },
    // 滚动按钮
    sb: {
        ScrollToC: "滚动到：",
        Scroll: "滚动",
        // 返回按钮，字母B是一个键盘快捷键。
        // 如果在您的语言中，“返回”不以“B”开头，则将 Back_1 设置为空字符串（空文本），并将 Back_2 设置为：“返回（B）” - 而不是“返回”（但不是“B”）
        // 翻译成您的语言。
        Back_1: "B",
        Back_2: "ack",
        BackExpl: "滚动回到页面上的上一个位置",
        // 这些在移动设备上很有用-然后，没有Home（=滚动到顶部）和End按钮的键盘。
        // 一旦你习惯了键盘，点击1到达顶部，点击2查看第一个回复，B返回，F前进等等，这样挺好的。
        PgTop: "页面顶部",
        PgTopHelp: "转到页面顶部。键盘快捷键：1",
        Repl: "回复",
        ReplHelp: "转到回复部分。快捷键：2",
        Progr: "进展",
        // 进展部分在页面的末尾，那里会显示类似于“ Alice将状态更改为Doing”和“ Alice标记为Done”以及“主题由...关闭”之类的内容。
        // （如果需要，还可以显示工作人员或参与该问题的人员的评论。）
        ProgrHelp: "转到进展部分。快捷键：3",
        PgBtm: "页面底部",
        Btm: "底部",
        BtmHelp: "转到页面底部。快捷键：4",
        // “键盘快捷键：...，B滚动回退”
        Kbd_1: "，并且",
        // 然后是字母'B'（不管语言如何）
        Kbd_2: "滚动回退"
    },
    // 选择用户对话框
    sud: {
        SelectUsers: "选择用户",
        AddUsers: "添加用户"
    },
    // 关于用户对话框
    aud: {
        IsMod: "是版主。",
        IsAdm: "是管理员。",
        IsDeld: "已停用或删除。",
        ThisIsGuest: "这是一个访客用户，实际上可能是任何人。",
        ViewInAdm: "在管理区域查看",
        ViewProfl: "查看个人资料",
        ViewComments: "查看其他评论",
        RmFromTpc: "从主题中删除",
        EmAdrUnkn: "电子邮件地址未知-此访客不会收到有关回复的通知。"
    },
    upp: {
        // ----- 链接
        Preferences: "偏好设置",
        Invites: "邀请",
        DraftsEtc: "草稿等",
        About: "关于",
        Privacy: "隐私",
        Security: "安全",
        Account: "账户",
        Interface: "界面",
        // ----- 总览统计
        JoinedC: "加入日期：",
        PostsMadeC: "发表帖子：",
        LastPostC: "最后发帖：",
        LastSeenC: "最后活动时间：",
        TrustLevelC: "信任等级：",
        // ----- 操作按钮
        // ----- 头像
        UploadPhoto: "上传头像",
        ChangePhoto: "更改头像",
        ImgTooSmall: "图片太小：应至少为100 x 100",
        // ----- 活动
        OnlyStaffCanSee: "只有工作人员和受信任的核心成员才能查看。",
        OnlyMbrsCanSee: "只有活跃成员一段时间后才能查看。",
        Nothing: "无内容",
        Posts: "帖子",
        NoPosts: "无帖子。",
        Topics: "话题",
        NoTopics: "无话题。",
        // ----- 用户状态
        UserBanned: "此用户已被禁止",
        UserSuspended: function (dateUtc) {
            return "\u6B64\u7528\u6237\u5DF2\u88AB\u6682\u505C\u4F7F\u7528\uFF0C\u76F4\u5230".concat(dateUtc, " UTC");
        },
        ReasonC: "原因：",
        DeactOrDeld: "已停用或已删除。",
        isGroup: "（一个组）",
        isGuest: " — 访客用户，可能是任何人",
        isMod: " – 版主",
        isAdmin: " – 管理员",
        you: "（你）",
        // ----- 通知页面
        NoNotfs: "无通知",
        NotfsToYouC: "发给你的通知：",
        NotfsToOtherC: function (name) { return "\u53D1\u7ED9".concat(name, "\u7684\u901A\u77E5\uFF1A"); },
        DefNotfsSiteWide: "默认通知，整个站点",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "发给",
        // ----- 草稿等页面
        NoDrafts: "无草稿",
        YourDraftsC: "你的草稿：",
        DraftsByC: function (name) { return "".concat(name, "\u7684\u8349\u7A3F\uFF1A"); },
        // ----- 邀请页面
        InvitesIntro: "在这里您可以邀请其他人加入本站。",
        InvitesListedBelow: "您已经发送的邀请如下所示。",
        NoInvites: "您还没有邀请任何人。",
        InvitedEmail: "邀请电子邮件",
        WhoAccepted: "接受邀请的成员",
        InvAccepted: "接受邀请",
        InvSent: "已发送邀请",
        JoinedAlready: "已经加入",
        SendAnInv: "邀请人",
        SendInv: "发送邀请",
        SendInvExpl: "我们将向您的朋友发送一封简短的电子邮件。他们将点击链接立即加入，无需登录。他们将成为普通成员，而不是版主或管理员。",
        //EnterEmail: "输入电子邮件",
        InvDone: "完成。我将发送电子邮件。",
        NoOneToInv: "没有人可邀请。",
        InvNotfLater: "稍后我会通知您，当我邀请他们时。",
        AlreadyInvSendAgainQ: "这些人已经被邀请了 - 您是否想再次邀请他们？",
        InvErr_1: "出现了",
        InvErr_2: "个错误",
        InvErr_3: "：",
        TheseJoinedAlrdyC: "这些人已经加入了，所以我没有邀请他们：",
        ResendInvsQ: "再次向这些人发送邀请？他们已经被邀请过了。",
        InvAgain: "再次邀请",
        // ----- 首选项，关于
        AboutYou: "关于您",
        WebLink: "您的任何网站或页面。",
        NotShownCannotChange: "不公开显示。无法更改。",
        // 全名或别名：
        NameOpt: "名称（可选）",
        NotShown: "不公开显示。",
        // 用户名：
        MayChangeFewTimes: "您只能更改几次。",
        notSpecified: "（未指定）",
        ChangeUsername_1: "您只能更改用户名几次。",
        ChangeUsername_2: "过于频繁的更改会让其他人感到困惑- 他们不知道如何@提到您。",
        NotfAboutAll: "通知每个新帖子（除非您将主题或类别静音）",
        NotfAboutNewTopics: "通知新主题（除非您将类别静音）",
        ActivitySummaryEmails: "活动摘要电子邮件",
        EmailSummariesToGroup: "当此组的成员不访问此处时，默认情况下会向他们发送热门主题和其他内容的摘要电子邮件。",
        EmailSummariesToMe: "当我不在这里访问时，向我发送热门话题和其他内容的摘要邮件。",
        AlsoIfTheyVisit: "即使他们经常访问这里，也要给他们发送电子邮件。",
        AlsoIfIVisit: "即使我经常访问这里，也要给我发送电子邮件。",
        HowOftenWeSend: "我们应该多久发送这些电子邮件？",
        HowOftenYouWant: "你想多久收到这些电子邮件？",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "为陌生人和新成员隐藏您最近的活动？",
        HideActivityStrangers_2: "（但不包括那些成为活跃成员一段时间的人。）",
        HideActivityAll_1: "对所有人隐藏您最近的活动？",
        HideActivityAll_2: "（除了工作人员和受信任的核心成员。）",
        // ----- Preferences, Account
        // 关于电子邮件地址：
        EmailAddresses: "电子邮件地址",
        PrimaryDot: "主要。",
        VerifiedDot: "已验证。",
        NotVerifiedDot: "未验证。",
        ForLoginWithDot: function (provider) { return "\u7528\u4E8E".concat(provider, "\u767B\u5F55\u3002"); },
        MakePrimary: "设为主要",
        AddEmail: "添加电子邮件地址",
        TypeNewEmailC: "输入一个新的电子邮件地址：",
        MaxEmailsInfo: function (numMax) { return "(\u60A8\u4E0D\u80FD\u6DFB\u52A0\u8D85\u8FC7 ".concat(numMax, " \u4E2A\u5730\u5740\u3002)"); },
        EmailAdded_1: "已添加。我们已向您发送了一封验证电子邮件——",
        EmailAdded_2: "请查收您的电子邮件收件箱。",
        SendVerifEmail: "发送验证电子邮件",
        EmailStatusExpl: "（'主要'表示您可以通过此地址登录，并且我们向其发送通知。" +
            " '已验证'表示您在地址验证电子邮件中单击了验证链接。）",
        // 密码：
        ChangePwdQ: "更改密码？",
        CreatePwdQ: "创建密码？",
        WillGetPwdRstEml: "您将收到一封重置密码电子邮件。",
        // 这是“无”的翻译："密码：无"
        PwdNone: "无",
        // 登录：
        LoginMethods: "登录方式",
        commaAs: "，作为：",
        // 个人数据：
        YourContent: "您的内容",
        DownloadPosts: "下载帖子",
        DownloadPostsHelp: "创建一个带有您发布的主题和评论副本的 JSON 文件。",
        DownloadPersData: "下载个人数据",
        DownloadPersDataHelp: "创建一个包含您的个人数据副本的JSON文件，例如您的姓名（如果您指定了姓名）和电子邮件地址。",
        // 删除账号:
        DangerZone: "危险区",
        DeleteAccount: "删除账户",
        DeleteYourAccountQ: "是否删除您的账户？我们将删除您的姓名，忘记您的电子邮件地址、密码和任何在线身份（例如Facebook或Twitter登录）。" +
            "您将无法再次登录。此操作无法撤销。",
        DeleteUserQ: "是否删除此用户？我们将删除该用户的姓名，忘记其电子邮件地址、密码和在线身份（例如Facebook或Twitter登录）。" +
            "该用户将无法再次登录。此操作无法撤销。",
        YesDelete: "是的，删除"
    },
    gpp: {
        GroupMembers: "小组成员",
        NoMembers: "暂无成员。",
        MayNotListMembers: "可能无法列出成员。",
        AddMembers: "添加成员",
        BuiltInCannotModify: "这是一个内置的组，无法修改。",
        NumMembers: function (num) { return "".concat(num, "\u540D\u6210\u5458"); },
        YouAreMember: "你是成员。",
        CustomGroupsC: "自定义组:",
        BuiltInGroupsC: "内置组:",
        DeleteGroup: "删除该组"
    },
    // 创建用户对话框
    cud: {
        CreateUser: "创建用户",
        CreateAccount: "创建账户",
        EmailC: "邮箱：",
        keptPriv: "将被保密",
        forNotfsKeptPriv: "用于回复通知，将被保密",
        EmailVerifBy_1: "你的邮箱已被",
        EmailVerifBy_2: "验证。",
        UsernameC: "用户名：",
        FullNameC: "全名：",
        optName: "选填",
        // OrCreateAcct_1: "Or ",
        // OrCreateAcct_2: "create an account",
        // OrCreateAcct_3: " with ",
        // OrCreateAcct_4: "@username",
        // OrCreateAcct_5: " & password",
        DoneLoggedIn: "账户已创建，你已登录。",
        AlmostDone: "快完成了！你只需要确认你的邮箱地址。我们已经发送了一封邮件给你。请点击邮件中的链接以激活你的账户。你可以关闭此页面。"
    },
    // 接受条款和隐私政策？
    terms: {
        TermsAndPrivacy: "条款和隐私政策",
        Accept_1: "您是否接受我们的",
        TermsOfService: "服务条款",
        TermsOfUse: "使用条款",
        Accept_2: "和",
        PrivPol: "隐私政策",
        Accept_3_User: "？",
        Accept_3_Owner: "适用于网站管理员？",
        // 关于上面的“适用于网站管理员？”：
        // 如果有人通过此提供的软件作为软件即服务托管创建自己的社区，则需要同意略有不同的服务条款，
        // 因为成为社区维护者/所有者与仅注册发表评论是不同的（责任更大）。
        YesAccept: "是的，我接受"
    },
    // 密码输入
    pwd: {
        PasswordC: "密码：",
        StrengthC: "强度：",
        FairlyWeak: "相当弱。",
        toShort: "太短",
        TooShort: function (minLength) { return "\u592A\u77ED\u4E86\uFF0C\u5E94\u81F3\u5C11\u4E3A".concat(minLength, "\u4E2A\u5B57\u7B26"); },
        PlzInclDigit: "请包含数字或特殊字符",
        TooWeak123abc: "太弱了。不要使用像'12345'或'abcde'这样的密码。",
        AvoidInclC: "避免在密码中包含（部分）您的姓名或电子邮件："
    },
    // 登录对话框
    ld: {
        NotFoundOrPrivate: "页面未找到或访问被拒绝。",
        // 这是管理员单击“冒充”按钮以成为其他人的情况下，如果您以其他用户的身份打开登录对话框
        // （可能是因为导航到了该用户无法访问的站点的不同部分）- 那么就会显示该错误消息：在你停止模拟第一个用户之前，你不能以“其他人”的身份登录以访问社区的那部分。（否则，一切都会变得太复杂。）
        IsImpersonating: "您正在扮演其他人的角色，该用户可能无法访问本网站的所有部分。",
        IfYouThinkExistsThen: "如果您认为该页面存在，请登录为可能访问该页面的某个人。 ",
        LoggedInAlready: "（您已经登录了，但也许是错误的帐户？）",
        ElseGoToHome_1: "否则，您可以 ",
        ElseGoToHome_2: "返回主页。",
        CreateAcconut: "创建帐号",
        ContinueWithDots: "继续...",
        SignUp: "注册",
        LogIn: "登录",
        LogInWithPwd: "用密码登录",
        CreateAdmAcct: "创建管理员帐户：",
        AuthRequired: "需要身份验证才能访问此站点",
        LogInToLike: "登录以喜欢此帖子",
        LogInToSubmit: "登录并提交",
        LogInToComment: "登录以撰写评论",
        LogInToCreateTopic: "登录以创建主题",
        //AlreadyHaveAcctQ: "You have an account? ",  // MISSING changed "Already have...?" to "You have...?"
        OrLogIn_1: "或者 ",
        OrLogIn_2: "登录",
        OrLogIn_3: "。",
        //NewUserQ: "New user? ",
        SignUpInstead_1: "或者 ",
        SignUpInstead_2: "创建帐号",
        SignUpInstead_3: "",
        OrTypeName_1: "，或者只需",
        OrTypeName_2: "输入名称",
        OrTypeName_3: "",
        OrCreateAcctHere: "或在此处创建帐户：",
        OrTypeName: "或输入您的名称：",
        OrLogIn: "或登录：",
        YourNameQ: "您的姓名？",
        BadCreds: "用户名或密码错误",
        UsernameOrEmailC: "用户名或电子邮件：",
        PasswordC: "密码：",
        ForgotPwd: "忘记密码了吗？",
        NoPwd: "您尚未选择密码。",
        CreatePwd: "创建密码"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "请告诉我们您的关注点。",
        ThanksHaveReported: "谢谢，您已经举报了此内容。论坛工作人员将会查看此内容。",
        ReportComment: "举报评论",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "此帖包含个人数据，例如某人的真实姓名。",
        OptOffensive: "此帖包含冒犯或滥用内容。",
        OptSpam: "此帖为不受欢迎的广告。",
        OptOther: "因其他原因通知工作人员有关此帖。"
    },
    // Help message dialog (as in "Tips", not "Private message").
    help: {
        YouCanShowAgain_1: "如果您已经登录，可以通过单击您的名称然后点击 ",
        YouCanShowAgain_2: "显示帮助消息"
    },
    // 编辑器
    e: {
        SimilarTopicsC: "类似主题：",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "抱歉，目前您一次只能上传一个文件",
        PleaseFinishPost: "请先完成您的帖子",
        PleaseFinishChatMsg: "请先完成您的聊天信息",
        PleaseFinishMsg: "请先完成您的消息",
        PleaseSaveEdits: "请先保存您当前的编辑",
        PleaseSaveOrCancel: "请先保存或取消您的新主题",
        CanContinueEditing: "如果您再次打开编辑器，可以继续编辑您的文本。",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "请不要删除所有文本。请写点东西。",
        PleaseWriteSth: "请写点东西。",
        PleaseWriteTitle: "请写一个主题标题。",
        PleaseWriteMsgTitle: "请写一条消息标题。",
        PleaseWriteMsg: "请写一条消息。",
        exBold: "粗体文本",
        exEmph: "强调文本",
        exPre: "预格式化文本",
        exQuoted: "引用文本",
        ExHeading: "标题",
        TitlePlaceholder: "输入一个标题——简洁地说明这是关于什么的？",
        EditPost_1: "编辑 ",
        EditPost_2: " 帖子 ",
        TypeChatMsg: "输入聊天信息：",
        YourMsg: "您的消息：",
        CreateTopic: "创建新主题",
        CreateCustomHtml: "创建自定义 HTML 页面（添加您自己的 <h1> 标题）",
        CreateInfoPage: "创建信息页面",
        CreateCode: "创建源代码页面",
        AskQuestion: "提出问题",
        ReportProblem: "报告问题",
        SuggestIdea: "建议一个想法",
        NewChat: "新聊天频道的标题和目的",
        NewPrivChat: "新的私人聊天标题和目的",
        AppendComment: "在页面底部添加评论：",
        ReplyTo: "回复 ",
        ReplyTo_theOrigPost: "原始帖子",
        ReplyTo_post: "帖子 ",
        AddCommentC: "添加评论：",
        PleaseSelectPosts: "请选择一个或多个帖子进行回复。",
        Save: "保存",
        edits: "次编辑",
        PostReply: "发布回复",
        PostComment: "发布评论",
        Post: "发布",
        comment: "评论",
        question: "问题",
        PostMessage: "发布信息",
        SimpleEditor: "简单编辑器",
        Send: "发送",
        message: "信息",
        Create: "创建",
        page: "页面",
        chat: "聊天",
        idea: "想法",
        topic: "话题",
        Submit: "提交",
        problem: "问题",
        ViewOldEdits: "查看旧编辑",
        UploadBtnTooltip: "上传文件或图像",
        BoldBtnTooltip: "加粗文字",
        EmBtnTooltip: "强调",
        QuoteBtnTooltip: "引用",
        PreBtnTooltip: "预格式文本",
        HeadingBtnTooltip: "标题",
        TypeHerePlaceholder: "在此处输入。您可以使用Markdown和HTML。拖放以粘贴图像。",
        Maximize: "最大化",
        ToNormal: "恢复正常",
        TileHorizontally: "水平平铺",
        PreviewC: "预览：",
        TitleExcl: "（不包括标题）",
        ShowEditorAgain: "再次显示编辑器",
        Minimize: "最小化",
        IPhoneKbdSpace_1: "（此灰色空间为",
        IPhoneKbdSpace_2: "iPhone键盘保留。）",
        PreviewInfo: "您可以在此处预览您的发布内容。",
        CannotType: "您无法在此处键入。",
        LoadingDraftDots: "正在加载任何草稿...",
        DraftUnchanged: "未更改。",
        CannotSaveDraftC: "无法保存草稿：",
        DraftSavedBrwsr: "草稿已保存，在浏览器中。",
        DraftSaved: function (nr) { return "\u5DF2\u4FDD\u5B58\u8349\u7A3F".concat(nr, "\u3002"); },
        DraftDeleted: function (nr) { return "\u5DF2\u5220\u9664\u8349\u7A3F".concat(nr, "\u3002"); },
        WillSaveDraft: function (nr) { return "\u5C06\u4FDD\u5B58\u8349\u7A3F".concat(nr, "..."); },
        SavingDraft: function (nr) { return "\u6B63\u5728\u4FDD\u5B58\u8349\u7A3F".concat(nr, "..."); },
        DeletingDraft: function (nr) { return "\u6B63\u5728\u5220\u9664\u8349\u7A3F".concat(nr, "..."); }
    },
    // 选择分类下拉框
    scd: {
        SelCat: "选择分类"
    },
    // 页面类型下拉框
    pt: {
        SelectTypeC: "选择主题类型：",
        DiscussionExpl: "讨论某个话题。",
        QuestionExpl: "一个答案可以被标记为被接受的答案。",
        ProblExpl: "如果有什么东西坏了或不起作用。可以被标记为已修复/已解决。",
        IdeaExpl: "一个建议。可以被标记为已完成/已实施。",
        ChatExpl: "一个或许永无止境的对话。",
        PrivChatExpl: "只有被邀请加入聊天的人才能看到。",
        CustomHtml: "自定义 HTML 页面",
        InfoPage: "信息页面",
        Code: "代码",
        EmbCmts: "嵌入式评论",
        About: "关于",
        PrivChat: "私人聊天",
        Form: "表单"
    },
    // 加入子社区对话框
    jscd: {
        NoMoreToJoin: "没有更多的社区可加入。",
        SelCmty: "选择社区..."
    },
    // 搜索对话框和搜索页面。
    s: {
        SearchForHelp: "搜索帮助",
        TxtToFind: "要搜索的文本"
    },
    // 无网络
    ni: {
        NoInet: "无网络连接",
        PlzRefr: "刷新页面以查看最新更改。(发生了断网)",
        RefrNow: "立即刷新"
    },
    PostDeleted: function (postNr) { return "\u8BE5\u5E16\u5B50\uFF0C\u7F16\u53F7".concat(postNr, "\uFF0C\u5DF2\u88AB\u5220\u9664\u3002"); },
    NoSuchPost: function (postNr) { return "\u672C\u9875\u4E0A\u6CA1\u6709\u7F16\u53F7\u4E3A".concat(postNr, "\u7684\u5E16\u5B50\u3002"); },
    NoPageHere: "该页面已被删除，或从未存在，或您无权访问它。",
    GoBackToLastPage: "返回上一页"
});
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_es_CL = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Activo",
    Activity: "Actividad",
    Add: "Agregar",
    AddingDots: "Agregando ...",
    AddComment: "Agregar comentario",
    Admin: "Admin",
    AdvSearch: "Busqueda Avanzada",
    Away: "Alejado",
    Back: "De vuelta",
    BlogN: "Blog",
    Bookmarks: "Favoritos",
    Cancel: "Cancelar",
    Categories: "Categorias",
    Category: "Categoría",
    ChangeV: "Cambiar",
    ClickToShow: "Clic para mostrar",
    ChangeDots: "Cambiar ...",
    ChatN: "Chat",
    Chatting: "Chateando",
    CheckYourEmail: "Revisa tu correo electrónico",
    Close: "Cerrar",
    closed: "cerrado",
    comments: "comentarios",
    Continue: "Continuar",
    Created: "Creado",
    Delete: "Borrar",
    Deleted: "Borrado",
    DirectMessage: "Mensaje directo",
    Discussion: "Conversación",
    discussion: "conversación",
    done: "hecho",
    EditV: "Editar",
    Editing: "Editando",
    EmailC: "Correo-e: ",
    EmailAddress: "Dirección de correo electrónico",
    EmailAddresses: "Direcciones de correo electrónico",
    EmailSentD: "Correo enviado",
    Forum: "Foro",
    GetNotifiedAbout: "Recibir notificaciones sobre",
    GroupsC: "Grupos:",
    Hide: "Ocultar",
    Home: "Página principal",
    Idea: "Idea",
    Join: "Unirse",
    KbdShrtcsC: "Atajos del teclado: ",
    Loading: "Cargando...",
    LoadMore: "Cargar más ...",
    LogIn: "Entrar",
    LoggedInAs: "Registrado como ",
    LogOut: "Salir",
    Maybe: "Quizás",
    Manage: "Manejar",
    Members: "Miembros",
    MessageN: "Mensaje",
    MoreDots: "Más...",
    Move: "Mover",
    Name: "Nombre",
    NameC: "Nombre:",
    NewTopic: "Nueva conversación:",
    NoCancel: "No, cancelar",
    Notifications: "Notificaciones",
    NotImplemented: "(No implementado)",
    NotYet: "Aún no",
    NoTitle: "Sin título",
    NoTopics: "No hay conversaciones.",
    Okay: "Ok",
    OkayDots: "Ok ...",
    Online: "En línea",
    onePerLine: "uno por línea",
    PreviewV: "Vista previa",
    Problem: "Problema",
    progressN: "progreso",
    Question: "Pregunta",
    Recent: "Reciente",
    Remove: "Eliminar",
    Reopen: "Reabrir",
    ReplyV: "Responder",
    Replying: "Respondiendo",
    Replies: "Respuestas",
    replies: "respuestas",
    Save: "Guardar",
    SavingDots: "Guardando ...",
    SavedDot: "Guardado.",
    Search: "Buscar",
    SendMsg: "Enviar mensaje",
    ShowPreview: "Mostrar vista previa",
    SignUp: "Registrarse",
    Solution: "Solución",
    started: "iniciado",
    Summary: "Resumen",
    Submit: "Publicar",
    Tag: "Etiqueta",
    Tags: "Etiquetas",
    Tools: "Herramientas",
    Topics: "Conversaciones",
    TopicTitle: "Título de conversación",
    TopicType: "Tipo de conversación",
    UploadingDots: "Subiendo...",
    Username: "Nombre de usuario",
    Users: "Usuarios",
    Welcome: "Bienvenido",
    Wiki: "Wiki",
    Yes: "Sí",
    YesBye: "Sí, adiós",
    YesDoThat: "Sí, haz eso",
    You: "Tú",
    you: "tú",
    // Trust levels.
    Guest: "Invitado",
    NewMember: "Miembro nuevo",
    BasicMember: "Miembro básico",
    FullMember: "Miembro avanzado",
    TrustedMember: "Miembro de confianza",
    RegularMember: "Miembro corriente",
    CoreMember: "Miembro central",
    // Periods.
    PastDay: "Ayer",
    PastWeek: "Semana pasada",
    PastMonth: "Mes pasado",
    PastQuarter: "Trimestre pasado",
    PastYear: "Año pasado",
    AllTime: "Todo el tiempo",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "meses",
    daysLtr: "dias",
    hoursLtr: "horas",
    minsLtr: "mins",
    secsLtr: "segs",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "1 dias atrás" : "".concat(numDays, " days ago");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1 horas atrás" : "".concat(numHours, " hours ago");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1 minutos atrás" : "".concat(numMins, " minutes ago");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1 segundos atrás" : "".concat(numSecs, " seconds ago");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Correo-e requerido",
        NoSpcs: "Sin espacios",
        InvldAddr: "no es una dirección válida",
        NoBadChrs: "Sin caracteres especiales",
        // Full name input field:
        NotOnlSpcs: "Veo sólo espacios (mal)",
        NoAt: "Sin @",
        // Username input field:
        NoDash: "Sin guiones (-)",
        DontInclAt: "No incluya la @",
        StartEndLtrDgt: "Comience y termine con una letra o dígito",
        OnlLtrNumEtc: "Sólo letras (a-z, A-Z) y números, y _ (underscore)",
        // This shown just below the username input:
        UnUnqShrt_1: "Su ",
        UnUnqShrt_2: "@NombreDeUsuario",
        UnUnqShrt_3: ", único y corto",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Debe tener al menos ".concat(minLength, " caracteres"); },
        TooLong: function (maxLength) { return "Demasiado largo. Debe tener m\u00E1ximo ".concat(maxLength, " caracteres"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Cada Post",
        EveryPostInTopic: "Recibirás notificación por cada respuesta nueva en esta conversación.",
        EveryPostInCat: "Recibiráss notificación por cada nueva conversación y respuesta en esta categoría.",
        EveryPostInTopicsWithTag: "Recibirás notificaciones de nuevas conversaciones con esta etiqueta, y todas las respuestas en esas conversaciones.",
        EveryPostWholeSite: "Recibirás notificaciones de todas las nuevas conversaciones y respuestas, en todo el sitio.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Nuevas conversaciones",
        NewTopicsInCat: "Serás notificado de nuevas conversaciones en esta categoría.",
        NewTopicsWithTag: "Serás notificado de nuevas conversaciones con esta etiqueta.",
        NewTopicsWholeSite: "Serás notificado de nuevas conversaciones en todo el sitio",
        Tracking: "Siguiendo",
        Normal: "Normal",
        NormalDescr: "Serás notificado si alguien te habla, también indirectamente. Ejemplo, una " +
            "respuesta a una respuesta a tí.",
        //NormalTopic_1: "Serás notificado si alguien te habla o menciona tu  ",
        //NormalTopic_2: "@nombre",
        Hushed: "Reducido",
        HushedDescr: "Serás notificado sólo si alguien te habla directamente.",
        Muted: "Silenciado",
        MutedTopic: "Sin notificaciones."
    },
    // Forum intro text
    fi: {
        Edit: "Editar",
        Hide_1: "Ocultar",
        Hide_2: ", clic ",
        Hide_3: " para volver a abrir"
    },
    // Forum categories
    fcs: {
        All: "Todas"
    },
    // Forum buttons
    fb: {
        TopicList: "Lista de conversaciones",
        // Select category dropdown
        from: "De",
        "in": "en",
        AllCats: "Todas las categorias",
        // Topic sort order
        Active: "Más activas primero",
        ActiveDescr: "Muestra primero las conversaciones con actividad más reciente.",
        New: "Nuevas",
        NewDescr: "Muestra primero las conversaciones más nuevas",
        Top: "Popular",
        TopDescr: "Muestra primero las conversaciones más populares",
        // Topic filter dropdown
        AllTopics: "Todas las conversaciones",
        ShowAllTopics: "Mostrar todas la conversaciones",
        ShowAllTopicsDescr: "Una lista de todas las conversaciones",
        WaitingTopics: "Conversaciones en espera",
        OnlyWaitingDescr_1: "Muestra sólo conversaciones ",
        OnlyWaitingDescr_2: "esperando ",
        OnlyWaitingDescr_3: "que se implemente una solución",
        YourTopics: "Tus conversaciones",
        AssignedToYou: "Asignadas a ti",
        DeletedTopics: "Mostrar borradas",
        ShowDeleted: "Mostrar borradas",
        ShowDeletedDescr: "Mostrar todas las conversaciones, incluso las borradas",
        // Rightmost buttons
        ViewCategories: "Ver categorias",
        EditCat: "Editar categoría",
        CreateCat: "Crear Categoría",
        CreateTopic: "Crear Conversación",
        PostIdea: "Publicar una idea",
        AskQuestion: "Hacer una pregunta",
        ReportProblem: "Informar un problema",
        CreateMindMap: "Crear Mapa Mental",
        CreatePage: "Crear Página"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Explicar íconos...",
        IconExplanation: "Explicación de íconos:",
        ExplGenDisc: "Una conversación general.",
        ExplQuestion: "Una pregunta sin respuesta aceptada.",
        ExplAnswer: "Una pregunta con respuesta aceptada.",
        ExplIdea: "Una idea o sugerencia.",
        ExplProblem: "Un problema",
        ExplPlanned: "Algo que estamos planeando hacer o arreglar.",
        ExplDone: "Algo que ha sido hecho o arreglado.",
        ExplClosed: "Conversación cerrada.",
        ExplPinned: "Conversación que siempre se muestra primero (quizás sólo en su propia categoría).",
        PopularTopicsComma: "Conversaciones populares, ",
        TopFirstAllTime: "Muestra la conversación más popular, de todos los tiempos (en este sitio).",
        TopFirstPastDay: "Muestra conversaciones populares durante el día de ayer.",
        CatHasBeenDeleted: "Esta categoría ha sido eliminada",
        TopicsActiveFirst: "Conversaciones, primero la que tenga actividad mas reciente",
        TopicsNewestFirst: "Conversaciones, la mas nueva primero",
        CreatedOn: "Creada ",
        LastReplyOn: "\nÚltima respuesta ",
        EditedOn: "\nEditada ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "creó la conversación",
        frequentPoster: "participante frecuente",
        mostRecentPoster: "participante más reciente",
        inC: "in: ",
        TitleFixed: "Esto ha sido arreglado",
        TitleDone: "Esto ha sido hecho",
        TitleStarted: "Hemos comenzado esto",
        TitleStartedFixing: "Hemos comenzado a arreglar esto",
        TitleUnsolved: "Este es un problema no resuelto",
        TitleIdea: "Esta es una idea",
        TitlePlanningFix: "Planeamos arreglar esto",
        TitlePlanningDo: "Planeamos hacer esto",
        TitleChat: "Este es un canal de chat",
        TitlePrivateChat: "Este es un canal de chat privado",
        TitlePrivateMessage: "Un mensaje privado",
        TitleInfoPage: "Esta es una página de información",
        TitleDiscussion: "Una conversación",
        IsPinnedGlobally: "\nHa sido destacada, por eso está primero en la lista.",
        IsPinnedInCat: "\nHa sido destacada en esta categoriía, por eso está primero en la lista de esta categoría."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Conversaciones recientes (aquellas esperando)",
        RecentTopicsInclDel: "Conversaciones recientes (incluye borradas)",
        RecentTopics: "Conversaciones recientes",
        _replies: " respuestas",
        _deleted: " (borradas)",
        _defCat: " (categoría por defecto)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Publicaciones recientes",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " en línea en este chat",
        NumOnlForum: " en línea en este foro",
        // Open left-sidebar button title.
        WatchbBtn: "Tus conversaciones",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Tus conversaciones recientes, chats, mensajes directos",
        // Title shown on user profile pages.
        AbtUsr: "Perfil de usuario",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Volver desde perfil de usuario",
        BackFromAdm: "Volver desde área de administración",
        // Title shown on full text search page.
        SearchPg: "Página de búsqueda"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Agregar ...",
        RecentlyViewed: "Vistas recientemente",
        JoinedChats: "Chats",
        ChatChannels: "Canales de chat",
        CreateChat: "Crear canal de chat",
        DirectMsgs: "Mensajes directos",
        NoChats: "Ninguno",
        NoDirMsgs: "Ninguno",
        // The click-topic dropdown menu:
        TopicActions: "Acciones de la conversación",
        ViewPeopleHere: "Ver gente aquí",
        ViewAddRemoveMembers: "Ver / agergar / eliminar miembros",
        ViewChatMembers: "Ver miembros del chat",
        EditChat: "Editar descripción del chat",
        //EditChat: "Editar título y propósito del chat", // Keep, in case adds back edit-title input
        LeaveThisChat: "Abandonar el chat",
        LeaveThisCommunity: "Abandonar esta comunidad",
        JoinThisCommunity: "Unirse a esta comunidad"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Comentarios recientes en esta conversación:",
        NoComments: "No hay comentarios.",
        YourBookmarks: "Tus favoritos:",
        UsersOnline: "Usuarios en línea:",
        UsersOnlineForum: "Usuarios en línea en este foro:",
        UsersInThisChat: "Usuarios en este chat:",
        UsersInThisTopic: "Usuarios en esta conversación:",
        GettingStartedGuide: "Guía del administrador",
        AdminGuide: "Guía del administrador",
        Guide: "Guía",
        // How to hide the sidebar.
        CloseShortcutS: "Cerrar (atajo del teclado: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Agregar más gente",
        // Shown next to one's own username, in a list of users.
        thatsYou: "Este eres tú",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Sólo tú, al parecer",
        YouAnd: "Tú y  ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " person" : " personas";
            var have = numStrangers === 1 ? "ha" : "han";
            return numStrangers + people + " que " + have + " observado sin registrarse";
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "Las respuestas a la izquierda están ordenadas por ",
        bestFirst: "la-mejor-primero.",
        ButBelow: "Pero abajo ",
        insteadBy: " las mismas respuestas están ordenadas por ",
        newestFirst: "nuevas-primero.",
        SoIfLeave: "Si te vas ahora, y vuelves más tarde, abajo encontrarás ",
        allNewReplies: "todas las nuevas respuestas.",
        Click: "Clic",
        aReplyToReadIt: " en una respuesta para leerla — Porque se muestra solo un extracto, abajo."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Clic para cambiar status",
        ClickToViewAnswer: "Clic para ver respuesta",
        ViewAnswer: "Ver respuesta",
        ChangeStatusC: "Cambiar estado a:",
        ChangeCatC: "Cambiar categoría:",
        ChangeTopicTypeC: "Cambiar tipo de conversación:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "una pregunta",
        hasAccptAns: "tiene una respuesta aceptada",
        aProblem: "un problema",
        planToFix: "un plan para arreglar",
        anIdea: "una idea",
        planToDo: "un plan para realizar"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Este formulario ha sido ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "cerrado; ya no puedes llenarlo ni enviarlo.",
        ThisTopicClosed_1: "Esta conversación ha sido ",
        // A Topic-has-been-Closed icon, + the text "cerrada", shown here.
        ThisTopicClosed_2: ". Aún puedes publicar comentarios.",
        ThisPageDeleted: "Esta página ha sido borrada",
        CatDeldPageToo: "Categoría borrada, por ende esta página ha sido borrada también",
        ThreadDeld: "Hilo borrado",
        CmntDeld: "Comentario Borrado",
        PostDeld: "Post borrado",
        DiscDeld: "Conversación borrada",
        PageDeld: "Página borrada",
        TitlePendAppr: "Título pendiente de ser aprobado",
        TextPendingApproval: "Texto pendiente de aprobación",
        TooltipQuestClosedNoAnsw: "Esta pregunta ha sido cerrada sin ninguna respuesta aceptada.",
        TooltipTopicClosed: "Esta conversación está cerrada.",
        TooltipQuestSolved: "Esta es una pregunta resuelta",
        TooltipQuestUnsolved: "Esta es una pregunta no resuelta",
        StatusDone: "Hecho",
        TooltipProblFixed: "Esto ha sido arreglado",
        TooltipDone: "Esto ha sido realizado",
        StatusStarted: "Iniciado",
        TooltipFixing: "Hemos comenzado a arreglar esto",
        TooltipImplementing: "Hemos comenzado a realizar esto",
        StatusPlanned: "Planeado",
        TooltipProblPlanned: "Planeamos arreglar esto",
        TooltipIdeaPlanned: "Planeamos realizar esto",
        StatusNew: "Nuevo",
        StatusNewDtl: "Nueva conversación, en discusión",
        TooltipUnsProbl: "Este es un problema no resuelto",
        TooltipIdea: "Esta es una idea",
        TooltipPersMsg: "Mensaje personal",
        TooltipChat: "# significa canal de chat",
        TooltipPrivChat: "Este es un canal de chat privado",
        TooltipPinnedGlob: "\nDestacada globalmente.",
        TooltipPinnedCat: "\nDestacada en esta categoría.",
        SolvedClickView_1: "Resuelto en post #",
        SolvedClickView_2: ", clic para ver",
        PostHiddenClickShow: "Publiación olculta; clic para ver",
        ClickSeeMoreRepls: "Mostrar más respuestas",
        ClickSeeMoreComments: "Mostrar más comentarios",
        ClickSeeThisComment: "Clic para mostrar este comentario",
        clickToShow: "clic para mostrar",
        ManyDisagree: "Muchos están en desacuerdo con esto:",
        SomeDisagree: "Algunos están en desacuerdo con esto:",
        CmtPendAppr: "Comentario pendiente de aprobación, publicado ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Tu" : "El") + " comentario de abajo está pendiente de aprobación."; },
        _and: " y",
        repliesTo: "responde a",
        InReplyTo: "En respuesta a",
        YourReplyTo: "Tu respuesta a ",
        YourChatMsg: "Tu mensaje de chat: ",
        YourDraft: "Tu borrador",
        YourEdits: "Tus ediciones: ",
        YourProgrNoteC: "Tu nota de progreso:",
        aProgrNote: "una nota de progreso: ",
        ReplyingToC: "Respondiendo a:",
        ScrollToPrevw_1: "Ir a ",
        ScrollToPrevw_2: "vista previa",
        UnfinEdits: "Ediciones no finalizadas",
        ResumeEdting: "Resumir edición",
        DelDraft: "Borrar borrador",
        ClickViewEdits: "Clic para ver ediciones antiguas",
        By: "Por ",
        // Discussion ...
        aboutThisIdea: "sobre si realizar esta idea y como",
        aboutThisProbl: "sobre si arreglar esto y como",
        AddProgrNote: "agregar nota de progreso",
        // Progress ...
        withThisIdea: "con realizar esta idea",
        withThisProbl: "con manejar este problema",
        withThis: "con hacer esto"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Notificaciones acerca de esta conversación:",
        // If is a direct message topic, members listed below this text.
        Msg: "Mensaje",
        SmrzRepls: "Resumir respuestas",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "Hay ".concat(numReplies, " respuestas. Tiempo de lectura estimado: ").concat(minutes, " minutos");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Hecho. Resumidas ".concat(numSummarized, " respuestas, de las ").concat(numShownBefore, " respuestas mostradas previamente.");
        }
    },
    // Post actions
    pa: {
        CloseTopic: "Conversación cerrada",
        CloseOwnQuestionTooltip: "Cerrar esta pregunta si ya no necesitas una respuesta.",
        CloseOthersQuestionTooltip: "Cerrar esta pregunta si no necesita una respuesta, por ejemplo, si " +
            "es off-topic o ya ha sido resuelta en otra conversación.",
        CloseToDoTooltip: "Cerrar este Por-Hacer si no necesita ser hecho o arreglado.",
        CloseTopicTooltip: "Cerrar esta conversación si ya no requiere mayor atención.",
        AcceptBtnExpl: "Aceptar esto como la respuesta a la pregunta o problema",
        SolutionQ: "¿Solución?",
        ClickUnaccept: "Clic para desaceptar esta respuesta",
        PostAccepted: "Este post ha sido aceptado como la respuesta",
        NumLikes: function (num) { return num === 1 ? "1 Me gusta" : num + " Me gusta"; },
        NumDisagree: function (num) { return num + " En desacuerdo"; },
        NumBury: function (num) { return num === 1 ? "1 Enterrar" : num + " Enterrar"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Indeseada" : num + " Indeseadas"; },
        MoreVotes: "Más votos...",
        LikeThis: "Dar Me Gusta",
        LinkToPost: "Enlace a este post",
        Report: "Denunciar",
        ReportThisPost: "Denunciar este post",
        Admin: "Admin",
        DiscIx: "Indice de conversaciones",
        Disagree: "En Desacuerdo",
        DisagreeExpl: "Cilc aquí para demostrar desacuerdo con este post, o para advertir a otros de errores factuales.",
        Bury: "Enterrar",
        BuryExpl: "Clic para que otros posts tengan prioridad antes que este. Sólo el equipo de moderadores podrá ver tu voto.",
        Unwanted: "Indeseado",
        UnwantedExpl: "Si crees que este post no deberia estar en este sitio. Esto reduciría la confianza que tenemos " +
            "en el autor del post. Sólo el equipo de moderadores podrá ver tu voto.",
        AddTags: "Agregar/eliminar etiquetas",
        UnWikify: "Deswikificar",
        Wikify: "Wikificar",
        PinDeleteEtc: "Destacar / Borrar / Categoría ..."
    },
    // Share dialog
    sd: {
        Copied: "Copiado.",
        CtrlCToCopy: "Presiona CTRL+C para copiar.",
        ClickToCopy: "Clic para copiar enlace."
    },
    // Chat
    c: {
        About_1: "Este es el ",
        About_2: " canal de chat, creado por ",
        ScrollUpViewComments: "Ir hacia arriba para ver comentarios anteriores",
        Purpose: "Propósito:",
        edit: "editar",
        'delete': "borrar",
        MessageDeleted: "(Mensaje borrado)",
        JoinThisChat: "Unirse al chat",
        PostMessage: "Publicar mensaje",
        AdvancedEditor: "Editor avanzado",
        TypeHere: "Escribe aquí. Puedes usar Markdown y HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Necesita revisión ",
        AdminHelp: "Ayuda del Admin ",
        StaffHelp: "Ayuda del staff ",
        DraftsEtc: "Borradores, favoritos, tareas",
        MoreNotfs: "Ver todas la notificaciones",
        DismNotfs: "Marcar todo como leído",
        ViewProfile: "Ver tu perfil",
        ViewGroups: "Ver grupos",
        LogOut: "Salir",
        UnhideHelp: "Desocultar mensajes de ayuda"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Ir a:",
        Scroll: "Ir",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "",
        Back_2: "Atrás (B)",
        BackExpl: "Volver a tu posición previa en esta página",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Inicio de la página",
        PgTopHelp: "Ir al inicio de la página. Atajo del teclado: 1",
        Repl: "Respuestas",
        ReplHelp: "Ir a la sección de respuestas. Atajo del teclado: 2",
        Progr: "Progreso",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Ir a la sección de progreso. Atajo del teclado: 3",
        PgBtm: "Final de la página",
        Btm: "Final",
        BtmHelp: "Ir al final de la página. Atajo del teclado: 4",
        // "Atajos del teclado: ..., y B para volver atrás"
        Kbd_1: ", y ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " para volver atrás"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Seleccionar usuarios",
        AddUsers: "Agregar usuarios"
    },
    // About user dialog
    aud: {
        IsMod: "Es un moderador.",
        IsAdm: "Es un administrador.",
        IsDeld: "Se ha desactivado o eliminado.",
        ThisIsGuest: "Este es un usuario invitado, podría de hecho ser cualquiera.",
        ViewInAdm: "Ver en área de administrador",
        ViewProfl: "Ver Perfil",
        ViewComments: "Ver otros comentarios",
        RmFromTpc: "Eliminar de la conversación",
        EmAdrUnkn: "Dirección de correo desconocida — este invitado no recibirá notificaciones de respuestas."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Preferencias",
        Invites: "Invitaciones",
        DraftsEtc: "Borradores etc",
        About: "Acerca de",
        Privacy: "Privacidad",
        Security: "Seguridad",
        Account: "Cuenta",
        Interface: "Interfaz",
        // ----- Overview stats
        JoinedC: "Se unió: ",
        PostsMadeC: "Publicaciones: ",
        LastPostC: "Ultima publicación: ",
        LastSeenC: "Visto por última vez: ",
        TrustLevelC: "Nivel de confianza: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Subir foto",
        ChangePhoto: "Cambiar foto",
        ImgTooSmall: "Imagen demasiado pequeña: debe ser de al menos 100 x 100 pixeles",
        // ----- Activity
        OnlyStaffCanSee: "Sólo el  staff y miembros de alta confianza pueden ver esto",
        OnlyMbrsCanSee: "Sólo gente que ha sido miembro activo por algún tiempo puede ver esto.",
        Nothing: "Nada que mostrar",
        Posts: "Posts",
        NoPosts: "No hay posts.",
        Topics: "Conversaciones",
        NoTopics: "No hay conversaciones.",
        // ----- User status
        UserBanned: "Este usuario ha sido expulsado",
        UserSuspended: function (dateUtc) { return "Este usuario ha sido suspendido hasta ".concat(dateUtc, " UTC"); },
        ReasonC: "Motivo: ",
        DeactOrDeld: "Desactivado o eliminado.",
        isGroup: " (un grupo)",
        isGuest: " — un usuario invitado, podría ser cualquiera",
        isMod: " – moderador",
        isAdmin: " – administrador",
        you: "(tú)",
        // ----- Notifications page
        NoNotfs: "No hay notificaciones",
        NotfsToYouC: "Notificaciones para ti:",
        NotfsToOtherC: function (name) { return "Notificaciones para ".concat(name, ":"); },
        DefNotfsSiteWide: "Notificaciones por defecto, de todo el sitio",
        // The "for" in:  "Notificaciones por defecto, de todo el sitio, para (el nombre de alguien)".
        forWho: "para",
        // ----- Drafts Etc page
        NoDrafts: "No hay borradores",
        YourDraftsC: "Tus borradores:",
        DraftsByC: function (name) { return "Borradores por ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Aquí puedes invitar gente a unirse a este sitio. ",
        InvitesListedBelow: "Invitaciones que ya has enviado en esta lista.",
        NoInvites: "No has invitado a nadie aún.",
        InvitedEmail: "Correo invitado",
        WhoAccepted: "Miembro que aceptó",
        InvAccepted: "Invitación aceptada",
        InvSent: "Invitación enviada",
        JoinedAlready: "Ya se ha unido",
        SendAnInv: "Invitar personas",
        SendInv: "Enviar invitaciones",
        SendInvExpl: "Le enviaremos a tus amigos un breve correo. Ellos harán clic en un enlace " +
            "para unirse inmediatamente, sin registrarse. " +
            "Ellos serán miembros normales, no moderadores ni administradores.",
        //EnterEmail: "Escribir correo",
        InvDone: "Hecho. Se les enviará un correo.",
        NoOneToInv: "Nadie a quien invitar.",
        InvNotfLater: "Se te notificará mas tarde, cuando se les haya invitado.",
        AlreadyInvSendAgainQ: "Ellos ya han sido invitados — ¿Quieres volver a invitarlos?",
        InvErr_1: "Esto resultó en ",
        InvErr_2: "errores",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "Ellos ya se han unido, por lo tanto no han sido invitados:",
        ResendInvsQ: "¿Reenviar invitaciones a estas personas? Ya han sido invitadas.",
        InvAgain: "Invitar nuevamente",
        // ----- Preferences, About
        AboutYou: "Acerca de ti",
        WebLink: "Cualquier sitio web tuyo.",
        NotShownCannotChange: "No se muestra publicamente. No se puede cambiar.",
        // The full name or alias:
        NameOpt: "Nombre (opcional)",
        NotShown: "No se muestra publicamente.",
        // The username:
        MayChangeFewTimes: "Puedes cambiarlo sólo unas cuantas veces.",
        notSpecified: "(no especificado)",
        ChangeUsername_1: "Puedes cambiar tu nombre de usuario solo unas cuantas veces.",
        ChangeUsername_2: "Cambiarlo demasiado a menudo puede confundir a los demás — " +
            "no sabrán como @mencionarte.",
        NotfAboutAll: "Ser notificado acerca de cada post (a menos que hayas silenciado la conversación o categoría)",
        NotfAboutNewTopics: "Ser notificado acerca de nuevas conversaciones (a menos que hayas silenciado la categoría)",
        ActivitySummaryEmails: "Correos de resumen de actividad",
        EmailSummariesToGroup: "Cuando miembros de este grupo no visitan, entonces, por defecto, enviarles un correo " +
            "con resúmenes de conversaciones populares y otras cosas.",
        EmailSummariesToMe: "Cuando no visito el sitio, enviarme correos " +
            "con resúmenes de conversaciones populares y otros temas.",
        AlsoIfTheyVisit: "Enviarles correos incluso si visitan el sitio regularmente.",
        AlsoIfIVisit: "Enviarme correos incluso si visito este sitio regularmente.",
        HowOftenWeSend: "¿Cuán a menudo deben enviarse estos correos?",
        HowOftenYouWant: "¿Cuán a menudo quieres recibir estos correos?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "¿Ocultar tu actividad reciente para extraños y miembros nuevos?",
        HideActivityStrangers_2: "(Pero no para quienes han sido miembros activos por un tiempo.)",
        HideActivityAll_1: "¿Ocultar tu actividad reciente para todos?",
        HideActivityAll_2: "(Excepto para el staff y miembros de confianza.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Correos electrónicos",
        PrimaryDot: "Primario. ",
        VerifiedDot: "Verificado. ",
        NotVerifiedDot: "No verificado. ",
        ForLoginWithDot: function (provider) { return "Para ingreso con ".concat(provider, ". "); },
        MakePrimary: "Hacerlo primario",
        AddEmail: "Agregar dirección de correo",
        TypeNewEmailC: "Escribir una nueva dirección de correo:",
        MaxEmailsInfo: function (numMax) { return "(No puedes agregar mas de ".concat(numMax, " direcciones.)"); },
        EmailAdded_1: "Agregada. Te hemos enviado un mensaje de verificación — ",
        EmailAdded_2: "Revisa tu correo electrónico.",
        SendVerifEmail: "Enviar correo de verificación",
        EmailStatusExpl: "('Primario' significa que puedes ingresar con este correo, y allí enviaremos notificaciones. " +
            "'Verificado' significa que hiciste clic en un enlace de verificación dentro de un correo de verifiación.)",
        // Password:
        ChangePwdQ: "¿Cambiar contraseña?",
        CreatePwdQ: "¿Crear contraseña?",
        WillGetPwdRstEml: "Recibirás un correo de verificación de contraseña.",
        // This is the "None" in:  "Contraseña: ninguna"
        PwdNone: "Ninguna",
        // Logins:
        LoginMethods: "Métodos de ingreso",
        commaAs: ", como: ",
        // One's data:
        YourContent: "Tu contenido",
        DownloadPosts: "Descargar mensajes",
        DownloadPostsHelp: "Crea un archivo JSON con una copia de conversaciones y comentarios que has publicado.",
        DownloadPersData: "Descargar datos personales",
        DownloadPersDataHelp: "Crea un archivo JSON con una copia de tus datos personales, por ejemplo, tu nombre " +
            "(si has especificado uno) y dirección de correo electrónico.",
        // Delete account:
        DangerZone: "Zona de peligo",
        DeleteAccount: "Eliminar cuenta",
        DeleteYourAccountQ: "¿Eliminar tu cuenta? Eliminaremos tu nombre, olvidaremos tu correo, contraseña  " +
            "cualquier identidad virtual (como Facebook o Twitter). " +
            "No podrás ingresar denuevo. Esta acción no se puede deshacer.",
        DeleteUserQ: "¿Eliminar este usuario? Eliminaremos el nombre, olvidaremos el correo electrónico, contraseña y " +
            "otras identidades virtuales (como Facebook o Twitter). " +
            "El usuario no podrá ingresar denuevo. Esta acción no se puede deshacer.",
        YesDelete: "Sí, eliminar"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Miembros del grupo",
        NoMembers: "No hay miembros.",
        MayNotListMembers: "No se pueden mostrar miembros.",
        AddMembers: "Agregar miembros",
        BuiltInCannotModify: "Este es un grupo integrado en el software; no se puede modificar.",
        NumMembers: function (num) { return "".concat(num, " miembros"); },
        YouAreMember: "Eres miembro.",
        CustomGroupsC: "Grupos personalizados:",
        BuiltInGroupsC: "Grupos integrados en el software:",
        DeleteGroup: "Elimina este grupo"
    },
    // Create user dialog
    cud: {
        CreateUser: "Crear usuario",
        CreateAccount: "Crear cuenta",
        EmailC: "Correo electrónico:",
        keptPriv: "se mantendrá en privado",
        forNotfsKeptPriv: "para notificaciones de respuesta, se mantendrá en privado",
        EmailVerifBy_1: "Tu correo ha sido verificado por ",
        EmailVerifBy_2: ".",
        UsernameC: "Nombre de usuario:",
        FullNameC: "Nombre completo:",
        optName: "opcional",
        //OrCreateAcct_1: "O ",
        //OrCreateAcct_2: "crear una cuenta",
        //OrCreateAcct_3: " con ",
        //OrCreateAcct_4: "@NombreDeUsuario",
        //OrCreateAcct_5: " y contraseña",
        DoneLoggedIn: "Cuenta creada. Has ingresado.",
        AlmostDone: "¡Casi listo! Debes confirmar tu dirección de correo. Te hemos " +
            "enviado un correo. Por favor haz clic en el enlace para activar " +
            "tu cuenta. Puedes cerrar esta ventana."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Términos y Privacidad",
        Accept_1: "¿Aceptas nuestros ",
        TermsOfService: "Términos de Servicio",
        TermsOfUse: "Términos de Uso",
        Accept_2: " y ",
        PrivPol: "Política de Privacidad",
        Accept_3_User: "?",
        Accept_3_Owner: " para dueños de sitios?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Sí, acepto"
    },
    // Password input
    pwd: {
        PasswordC: "Contraseña:",
        StrengthC: "Fortaleza: ",
        FairlyWeak: "Bastante débil.",
        toShort: "Demasiado corta",
        TooShort: function (minLength) { return "Demasiado corta. Debe tener por lo menos $minLength} caracteres"; },
        PlzInclDigit: "Por favor incluir un dígito o carácter especial (símbolos)",
        TooWeak123abc: "Demasiado débil. No uses contraseñas cómo '12345' o 'abcde'.",
        AvoidInclC: "Evita incluir (partes de) tu nombre o correo electrónico en la contraseña:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Página no encontrada, o acceso denegado.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "Estás suplantando a alguien, que puede no tener acceso a todas los lugares " +
            "de este sitio web.",
        IfYouThinkExistsThen: "Si crees que esta página existe, ingresa como alguien que tenga acceso a ella. ",
        LoggedInAlready: "(Ya has ingresado, pero ¿quizás es la cuenta equivocada?) ",
        ElseGoToHome_1: "O puedes ",
        ElseGoToHome_2: "ir a la página de inicio.",
        CreateAcconut: "Crear cuenta",
        ContinueWithDots: "Continuar con ...",
        SignUp: "Registrarse",
        LogIn: "Ingresar",
        LogInWithPwd: "Ingresar con contraseña",
        CreateAdmAcct: "Crear cuenta de administrador:",
        AuthRequired: "Se requiere registro para ingresar a este sitio",
        LogInToLike: "Ingresa para dar 'Me Gusta' a este post",
        LogInToSubmit: "Ingresar y publicar",
        LogInToComment: "Ingresa para escribir un comentario",
        LogInToCreateTopic: "Ingresar para iniciar una conversación",
        //AlreadyHaveAcctQ: "¿Tienes una cuenta? ",
        OrLogIn_1: "",
        OrLogIn_2: "Ingresa",
        OrLogIn_3: "",
        //NewUserQ: "¿Nuevo usuario? ",
        SignUpInstead_1: "",
        SignUpInstead_2: "Regístrate",
        SignUpInstead_3: "",
        // MAYBE x3:
        OrTypeName_1: ", o simplemente ",
        OrTypeName_2: "escribe tu nombre",
        OrTypeName_3: "",
        OrCreateAcctHere: "O crea una cuenta:",
        OrTypeName: "O escribe tu nombre:",
        OrLogIn: "O ingresa:",
        YourNameQ: "¿Tu nombre?",
        BadCreds: "Nombre de usuario o contraseñña no válidos",
        UsernameOrEmailC: "Nombre de usuario o correo electrónico:",
        PasswordC: "Contraseña:",
        ForgotPwd: "¿Olvidaste tu contraseña?",
        NoPwd: "Aún no has elegido una contraseña.",
        CreatePwd: "Crear contraseña"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Indícanos que es lo que te preocupa.",
        ThanksHaveReported: "Gracias. Ya lo has denunciado. El staff del foro echará un vistazo.",
        ReportComment: "Denunciar comentario",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Este mensaje contiene datos personales, por ejemplo el nombre real de alguien.",
        OptOffensive: "Este post es abusivo u ofensivo.",
        OptSpam: "Este post contiene publicidad no deseada.",
        OptOther: "Notificar al staff acerca de este post por alguna otra razón."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "Puedes mostrar mensajes de ayuda nuevamente, si has ingresado, " +
            "haciendo clic en tu nombre y luego ",
        YouCanShowAgain_2: "en 'desocultar mensajes de Ayuda'"
    },
    // Editor
    e: {
        SimilarTopicsC: "Conversaciones similares:",
        //WritingSomethingWarning: "¿Estabas escribiendo algo?",
        UploadMaxOneFile: "Lo sentimos pero actualmente solo puedes subir un archivo a la vez",
        PleaseFinishPost: "Primero finaliza de escribir tu post",
        PleaseFinishChatMsg: "Primero finaliza de escribir tu mensaje de chat",
        PleaseFinishMsg: "Primero finaliza de escribir tu mensaje",
        PleaseSaveEdits: "Primero guarda tu edición actual",
        PleaseSaveOrCancel: "Primero guarda o cancela tu nueva conversación",
        CanContinueEditing: "Puedes continuar editando tu texto, si abres el editor nuevamente",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Por favor no borres todo el texto. Escribe algo.",
        PleaseWriteSth: "Por favor escribe algo.",
        PleaseWriteTitle: "Por favor escribe un título de conversación.",
        PleaseWriteMsgTitle: "Por favor escribir un título de mensaje.",
        PleaseWriteMsg: "Por favor escribir un mensaje.",
        exBold: "texto en negrita",
        exEmph: "texto enfatizado",
        exPre: "texto preformateado",
        exQuoted: "texto citado",
        ExHeading: "Encabezado",
        TitlePlaceholder: "Escribe un título",
        EditPost_1: "Editar ",
        EditPost_2: "post ",
        TypeChatMsg: "Escribe un mensaje de chat:",
        YourMsg: "Tu mensaje:",
        CreateTopic: "Crear nueva conversación",
        CreateCustomHtml: "Crear una pagina HTML personalizada (agrega tu propio título <h1>)",
        CreateInfoPage: "Crear una página de información",
        CreateCode: "Crear una página de código de fuente",
        AskQuestion: "Hacer una pregunta",
        ReportProblem: "Informar un problema",
        SuggestIdea: "Sugerir una idea",
        NewChat: "Nuevo canal de chat, título y propósito",
        NewPrivChat: "Nuevo canal privado de chat, título y propósito",
        AppendComment: "Agregar un comentario al final de la página:",
        ReplyTo: "Responder a ",
        ReplyTo_theOrigPost: "el post original",
        ReplyTo_post: "post ",
        AddCommentC: "Agregar un comentario:",
        PleaseSelectPosts: "Seleccionar uno o más post a los cuales responder.",
        Save: "Guardar",
        edits: "ediciones",
        PostReply: "Publicar respuesta",
        PostComment: "Publicar comentario",
        Post: "Publicar",
        comment: "comentario",
        question: "pregunta",
        PostMessage: "Publicar mensaje",
        SimpleEditor: "Editor simple",
        Send: "Enviar",
        message: "mensaje",
        Create: "Crear",
        page: "página",
        chat: "chat",
        idea: "idea",
        topic: "conversación",
        Submit: "Enviar",
        problem: "problema",
        ViewOldEdits: "Ver ediciones anteriores",
        UploadBtnTooltip: "Subir un archivo o imagen",
        BoldBtnTooltip: "Agregar negrita",
        EmBtnTooltip: "Enfatizar",
        QuoteBtnTooltip: "Citar",
        PreBtnTooltip: "Texto preformateado",
        HeadingBtnTooltip: "Encabezado",
        TypeHerePlaceholder: "Escribir aquí. Puedes usar Markdown y HTML. Arrastra y suelta para pegar imagenes.",
        Maximize: "Maximizar",
        ToNormal: "Volver al tamaño normal",
        TileHorizontally: "Mosaico horizontal",
        PreviewC: "Vista previa:",
        TitleExcl: " (se excluye el título)",
        ShowEditorAgain: "Mostrar editor nuevamente",
        Minimize: "Minimizar",
        IPhoneKbdSpace_1: "(este espacio gris está reservado",
        IPhoneKbdSpace_2: "para el teclado iPhone.)",
        PreviewInfo: "Aquí puedes ver como lucirá tu post.",
        CannotType: "No puedes escribir aquí.",
        LoadingDraftDots: "Cargando cualquier borrador...",
        DraftUnchanged: "No hay cambios.",
        CannotSaveDraftC: "No se puede guardar borrador:",
        DraftSavedBrwsr: "Borrador guardado en navegador.",
        DraftSaved: function (nr) { return "Borrador ".concat(nr, " guardado."); },
        DraftDeleted: function (nr) { return "Borrador ".concat(nr, " guardado."); },
        WillSaveDraft: function (nr) { return "Se guardar\u00E1 borrador ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "Guardando borrador ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Eliminando borrador ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Seleccionar categoría"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Seleccionar un tipo de conversación:",
        DiscussionExpl: "Una conversación acerca de algo.",
        QuestionExpl: "Una respuesta puede ser marcada como la respuesta aceptada.",
        ProblExpl: "Para cuando algo está roto o no funciona. Puede ser marcado como arreglado o resuelto.",
        IdeaExpl: "Una sugerencia. Puede ser marcada como realizada o implementada.",
        ChatExpl: "Una conversación, quizás sin fin.",
        PrivChatExpl: "Sólo visible para personas invitadas a unirse al chat.",
        CustomHtml: "Página HTML personalizada",
        InfoPage: "Página de información",
        Code: "Código",
        EmbCmts: "Comentarios incrustados",
        About: "Acerca de",
        PrivChat: "Chat privado",
        Form: "Formulario"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "No hay más comunidades para unirse.",
        SelCmty: "Seleccionar comunidad ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Texto a buscar"
    },
    // No internet
    ni: {
        NoInet: "No hay conexión a internet",
        PlzRefr: "Recarga la página para ver los últimos cambios (hubo una desconexión))",
        RefrNow: "Recargar ahora"
    },
    PostDeleted: function (postNr) { return "Ese post, nr ".concat(postNr, ", ha sido borrado."); },
    NoSuchPost: function (postNr) { return "No existe el post nr ".concat(postNr, " en esta p\u00E1gina."); },
    NoPageHere: "Esta página ha sido borrada, o nunca existió, o puedes no tener acceso a ella.",
    GoBackToLastPage: "Volver a la última página"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_de_DE = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Aktiv",
    Activity: "Aktivität",
    Add: "Hinzufügen",
    AddingDots: "Füge hinzu ...",
    AddComment: "Kommentar hinzufügen",
    Admin: "Admin",
    AdvSearch: "Erweiterte Suche",
    Away: "Abwesend",
    Back: "Zurück",
    BlogN: "Blog",
    Bookmarks: "Lesezeichen",
    Cancel: "Abbrechen",
    Categories: "Kategorien",
    Category: "Kategorie",
    ChangeV: "Ändern",
    ClickToShow: "Klicke zum Anzeigen",
    ChangeDots: "Ändern ...",
    ChatN: "Chat",
    Chatting: "Chattend",
    CheckYourEmail: "Prüfe Deine eMail",
    Close: "Schließen",
    closed: "geschlossen",
    comments: "Kommentare",
    Continue: "Fortfahren",
    Created: "Erstellt",
    Delete: "Löschen",
    Deleted: "Gelöscht",
    DirectMessage: "Private Nachricht",
    Discussion: "Diskussion",
    discussion: "diskussion",
    done: "erledigt",
    EditV: "Bearbeiten",
    Editing: "Bearbeitend",
    EmailC: "eMail: ",
    EmailAddress: "eMail-Adresse",
    EmailAddresses: "eMail-Adressen",
    EmailSentD: "eMail gesendet.",
    Forum: "Forum",
    GetNotifiedAbout: "Benachrichtige mich über",
    GroupsC: "Gruppen:",
    Hide: "Verstecken",
    Home: "Home",
    Idea: "Idee",
    Join: "Beitreten",
    KbdShrtcsC: "Tastaturkürzel: ",
    Loading: "Lade...",
    LoadMore: "Mehr laden ...",
    LogIn: "Anmelden",
    LoggedInAs: "Angemeldet als ",
    LogOut: "Abmelden",
    Maybe: "Vielleicht",
    Manage: "Verwalten",
    Members: "Mitglieder",
    MessageN: "Nachricht",
    MoreDots: "Mehr...",
    Move: "Bewegen",
    Name: "Name",
    NameC: "Name:",
    NewTopic: "Neues Thema",
    NoCancel: "Nein, abbrechen",
    Notifications: "Benachrichtigungen",
    NotImplemented: "(Nicht implementiert)",
    NotYet: "Nicht jetzt",
    NoTitle: "Kein Titel",
    NoTopics: "Keine Themen.",
    Okay: "Okay",
    OkayDots: "Okay ...",
    Online: "Online",
    onePerLine: "eine pro Zeile",
    PreviewV: "Vorschau",
    Problem: "Problem",
    progressN: "Fortschritt",
    Question: "Frage",
    Recent: "Kürzliche",
    Remove: "Entfernen",
    Reopen: "Wiedereröffnen",
    ReplyV: "Antwort",
    Replying: "Antwortend",
    Replies: "Antworten",
    replies: "antworten",
    Save: "Speichern",
    SavingDots: "Speichern ...",
    SavedDot: "Gespeichert.",
    Search: "Suche",
    SendMsg: "Sende Nachricht",
    ShowPreview: "Zeige Vorschau",
    SignUp: "Beitreten",
    Solution: "Lösung",
    started: "gestartet",
    Summary: "Zusammenfassung",
    Submit: "Absenden",
    Tag: "Etikett",
    Tags: "Etiketten",
    Tools: "Werkzeuge",
    Topics: "Themen",
    TopicTitle: "Themenüberschrift",
    TopicType: "Themenart",
    UploadingDots: "Hochladend...",
    Username: "Benutzername",
    Users: "Benutzer",
    Welcome: "Willkommen",
    Wiki: "Wiki",
    Yes: "Ja",
    YesBye: "Ja, Tschüß",
    YesDoThat: "Ja, mache das",
    You: "Du",
    you: "Du",
    // Trust levels.
    Guest: "Gast",
    NewMember: "Neues Mitglied",
    BasicMember: "Mitglied",
    FullMember: "Stamm-Mitglied",
    TrustedMember: "Zuverlässiges Mitglied",
    RegularMember: "Vertrautes Stamm-Mitglied",
    CoreMember: "Zuverlässiger Stammbenutzer",
    // Periods.
    PastDay: "Letzter Tag",
    PastWeek: "Letzte Woche",
    PastMonth: "Letzter Monat",
    PastQuarter: "Letztes Quartal",
    PastYear: "Letztes Jahr",
    AllTime: "Von Anfang an",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "mon",
    daysLtr: "d",
    hoursLtr: "h",
    minsLtr: "m",
    secsLtr: "s",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "Vor 1 Tag" : "Vor ".concat(numDays, " Tagen");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "Vor 1 Stunde" : "Vor ".concat(numHours, " Stunden");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "Vor 1 Minute" : "Vor ".concat(numMins, " Minuten");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "Vor 1 Sekunde" : "Vor ".concat(numSecs, " Sekunden");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "eMail benötigt",
        NoSpcs: "Bitte keine Leerzeichen",
        InvldAddr: "Keine gültige eMail-Adresse",
        NoBadChrs: "Bitte keine Sonderzeichen",
        // Full name input field:
        NotOnlSpcs: "Bitte nicht nur Leerzeichen",
        NoAt: "Bitte kein @",
        // Username input field:
        NoDash: "Bitte keine Bindestriche (-)",
        DontInclAt: "Bitte ohne das @",
        StartEndLtrDgt: "Beginne und ende mit einem Buchstaben oder einer Ziffer",
        OnlLtrNumEtc: "Nur Buchstaben (a-z, A-Z), Ziffern und _ (Unterstrich)",
        // This shown just below the username input:
        UnUnqShrt_1: "Dein ",
        UnUnqShrt_2: "@Benutzername",
        UnUnqShrt_3: ", einzigartig und kurz",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Mindestens ".concat(minLength, " Zeichen"); },
        TooLong: function (maxLength) { return "Zu lang. Bitte nicht mehr als ".concat(maxLength, " Zeichen"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Jedes Posting",
        EveryPostInTopic: "Du wirst bei allen neuen Antworten in diesem Thema benachrichtigt.",
        EveryPostInCat: "Du wirst bei allen neuen Themen und Antworten in dieser Kategorie benachrichtig.",
        EveryPostInTopicsWithTag: "Du wirst bei allen neuen Themen mit diesem Etikett sowie allen Antworten in diesen Themen benachrichtigt.",
        EveryPostWholeSite: "Du wirst bei allen neuen Themen und Antworten überall benachrichtigt.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Neue Themen",
        NewTopicsInCat: "Du wirst bei neuen Themen in dieser Kategorie benachrichtigt.",
        NewTopicsWithTag: "Du wirst bei neuen Themen mit diesem Etikett benachrichtigt.",
        NewTopicsWholeSite: "Du wirst bei neuen Themen überall benachrichtigt.",
        Tracking: "Nachverfolgen",
        Normal: "Normal",
        NormalDescr: "Du wirst benachrichtigt wenn jemand zu Dir spricht, auch indirekt - z.B. eine " +
            "Antwort auf eine Antwort an Dich.",
        //NormalTopic_1: "Du wirst benachrichtigt wenn jemand zu Dir spricht oder Deinen Namen erwähnt ",
        //NormalTopic_2: "@Name",
        Hushed: "Gedämpft",
        HushedDescr: "Du wirst nur benachrichtigt wenn jemand direkt zu Dir spricht.",
        Muted: "Unterdrückt",
        MutedTopic: "Keine Benachrichtigungen."
    },
    // Forum intro text
    fi: {
        Edit: "Bearbeiten",
        Hide_1: "Verstecken",
        Hide_2: ", klicke ",
        Hide_3: " zum Wiedereröffnen"
    },
    // Forum categories
    fcs: {
        All: "Alle"
    },
    // Forum buttons
    fb: {
        TopicList: "Themenliste",
        // Select category dropdown
        from: "von",
        "in": "in",
        // Update: There's no 'in' before any longer, so, now, "Alle" not "Allen".
        AllCats: "Alle Kategorien",
        // Topic sort order
        Active: "Aktive zuerst",
        ActiveDescr: "Zeigt Themen mit neuen Aktivitäten zuerst",
        New: "Neu",
        NewDescr: "Zeigt neue Themen zuerst",
        Top: "Beliebt",
        TopDescr: "Zeigt beliebte Themen zuerst",
        // Topic filter dropdown
        AllTopics: "Alle Themen",
        ShowAllTopics: "Zeige alle Themen",
        ShowAllTopicsDescr: "Es gibt jedoch keine gelöschten Themen",
        WaitingTopics: "Wartende Themen",
        OnlyWaitingDescr_1: "Zeigt nur Themen ",
        OnlyWaitingDescr_2: "die auf eine Lösung warten ",
        OnlyWaitingDescr_3: "oder erledigt werden müssen",
        YourTopics: "Deine Themen",
        AssignedToYou: "Dir zugewiesen",
        DeletedTopics: "Zeige Gelöschte",
        ShowDeleted: "Zeige Gelöschte",
        ShowDeletedDescr: "Zeige alle Themen, auch Gelöschte",
        // Rightmost buttons
        ViewCategories: "Zeige Kategorien",
        EditCat: "Kategorie bearbeiten",
        CreateCat: "Kategorie erstellen",
        CreateTopic: "Thema erstellen",
        PostIdea: "Eine Idee veröffentlichen",
        AskQuestion: "Eine Frage stellen",
        ReportProblem: "Ein Problem berichten",
        CreateMindMap: "Mind Map erstellen",
        CreatePage: "Seite erstellen"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Icon-Bedeutungen...",
        IconExplanation: "Bedeutung der Icons:",
        ExplGenDisc: "Eine allgemeine Diskussion.",
        ExplQuestion: "Eine Frage ohne akzeptierte Lösung.",
        ExplAnswer: "Eine Frage mit akzeptierter Lösung.",
        ExplIdea: "Eine Idee / ein Vorschlag.",
        ExplProblem: "Ein Problem.",
        ExplPlanned: "Etwas, was wir erledigen wollen.",
        ExplDone: "Etwas, was erledigt wurde.",
        ExplClosed: "Thema geschlossen.",
        ExplPinned: "Angeheftetes Thema (ggfs. in seiner eigenen Kategorie).",
        PopularTopicsComma: "Beliebte Themen, ",
        TopFirstAllTime: "Zeigt alle beliebten Themen zuerst.",
        TopFirstPastDay: "Zeigt alle beliebten Themen des letzten Tages.",
        CatHasBeenDeleted: "Diese Kategorie wurde gelöscht",
        TopicsActiveFirst: "Themen, aktive zuerst",
        TopicsNewestFirst: "Themen, neue zuerst",
        CreatedOn: "Erstellt am ",
        LastReplyOn: "\nLetzte Antwort am ",
        EditedOn: "\nBearbeitet am ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "erstellte das Thema",
        frequentPoster: "regelmäßiger Autor",
        mostRecentPoster: "neuester Autor",
        inC: "in: ",
        TitleFixed: "Das wurde behoben",
        TitleDone: "Das wurde erledigt",
        TitleStarted: "Wir haben das begonnen",
        TitleStartedFixing: "Wir haben begonnen das zu beheben",
        TitleUnsolved: "Das ist ein ungelöstes Problem",
        TitleIdea: "Das ist eine Idee",
        TitlePlanningFix: "Wir planen das zu beheben",
        TitlePlanningDo: "Wir planen das zu erledigen",
        TitleChat: "Das ist ein Chat-Kanal",
        TitlePrivateChat: "Das ist ein privater Chat-Kanal",
        TitlePrivateMessage: "Eine private Nachricht",
        TitleInfoPage: "Das ist eine Info-Seite",
        TitleDiscussion: "Eine Diskussion",
        IsPinnedGlobally: "\nEs wurde angeheftet, also wird es zuerst angezeigt.",
        IsPinnedInCat: "\nEs wurde in seiner Kategorie angeheftet, also wird es in seiner Kategorie zuerst angezeigt."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Neueste Themen (welche warten)",
        RecentTopicsInclDel: "Neueste Themen (inklusive Gelöschter)",
        RecentTopics: "Neueste Themen",
        _replies: " Antworten",
        _deleted: " (gelöscht)",
        _defCat: " (Default-Kategorie)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Neueste Beiträge",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online in diesem Chat",
        NumOnlForum: " online in diesem Forum",
        // Open left-sidebar button title.
        WatchbBtn: "Deine Themen",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Deine neuesten Themen, Chats und Direktnachrichten",
        // Title shown on user profile pages.
        AbtUsr: "Über den Benutzer",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Zurück vom Benutzerprofil",
        BackFromAdm: "Zurück aus dem Admin-Bereich",
        // Title shown on full text search page.
        SearchPg: "Suche auf der Seite"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Hinzufügen ...",
        RecentlyViewed: "Zuletzt betrachtete Themen",
        JoinedChats: "Beigetretene Chats",
        ChatChannels: "Chat-Kanäle",
        CreateChat: "Erstelle Chat-Kanal",
        DirectMsgs: "Direktnachrichten",
        NoChats: "Keine",
        NoDirMsgs: "Keine",
        // The click-topic dropdown menu:
        TopicActions: "Themen-Aktionen",
        ViewPeopleHere: "Zeige die Leute hier",
        ViewAddRemoveMembers: "Zeige, erstelle oder lösche Mitglieder",
        ViewChatMembers: "Zeige Chat-Mitglieder",
        EditChat: "Bearbeite die Chat-Beschreibung",
        //EditChat: "Bearbeite Chat-Titel und Zweck", // Keep, in case adds back edit-title input
        LeaveThisChat: "Verlasse diesen Chat",
        LeaveThisCommunity: "Verlasse diese Community",
        JoinThisCommunity: "Trete dieser Community bei"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Neueste Kommentare in diesem Thema:",
        NoComments: "Keine Kommentare.",
        YourBookmarks: "Deine Lesezeichen:",
        UsersOnline: "Benutzer online:",
        UsersOnlineForum: "Benutzer online in diesem Forum:",
        UsersInThisChat: "Benutzer in diesem Chat:",
        UsersInThisTopic: "Benutzer in diesem Thema:",
        GettingStartedGuide: "Admin-Anleitung",
        AdminGuide: "Admin-Anleitung",
        Guide: "Anleitung",
        // How to hide the sidebar.
        CloseShortcutS: "Schließen (Tastenkürzel: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Mehr Leute hinzufügen",
        // Shown next to one's own username, in a list of users.
        thatsYou: "das bist Du",
        // Info about which people are online.
        // Example, in English: "Benutzer online: Du, und 5 Personen, die nicht angemeldet sind"
        OnlyYou: "Scheinbar nur Du",
        YouAnd: "Du, und ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " Person" : " Personen";
            var have = numStrangers === 1 ? "ist" : "sind";
            return numStrangers + people + " die nicht angemeldet " + have;
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "Die Antworten links sind sortiert nach ",
        bestFirst: "Beste zuerst.",
        ButBelow: "Aber unten ",
        insteadBy: " sind die gleichen Antworten stattdessen sortiert nach ",
        newestFirst: "Neueste zuerst.",
        SoIfLeave: "Wenn Du also gehst und später hierher wiederkommst, findet Du unten ",
        allNewReplies: "alle neuen Antworten.",
        Click: "Klicke",
        aReplyToReadIt: " auf eine Antwort unten um sie vollständig zu lesen, da hier nur Auszüge sichtbar sind."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Klicke um den Status zu ändern",
        ClickToViewAnswer: "Klicke um die Antwort zu zeigen",
        ViewAnswer: "Zeige Antwort",
        ChangeStatusC: "Ändere dem Status zu:",
        ChangeCatC: "Ändere die Kategorie:",
        ChangeTopicTypeC: "Ändere den Thementyp:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "eine Frage",
        hasAccptAns: "hat eine akzeptierte Antwort",
        aProblem: "ein Problem",
        planToFix: "geplant zu beheben",
        anIdea: "eine Idee",
        planToDo: "geplant zu erledigen"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Dieses Formular wurde ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "geschlossen - Du kannst es nicht ausfüllen und absenden.",
        ThisTopicClosed_1: "Dieses Thema wurde ",
        // A Topic-has-been-Closed icon, + the text "geschlossen", shown here.
        ThisTopicClosed_2: ". Du kannst immer noch kommentieren.",
        ThisPageDeleted: "Diese Seite wurde gelöscht",
        CatDeldPageToo: "Kategorie gelöscht, also wurde diese Seite ebenfalls gelöscht",
        ThreadDeld: "Thema gelöscht",
        CmntDeld: "Kommentar gelöscht",
        PostDeld: "Beitrag gelöscht",
        DiscDeld: "Diskussion gelöscht",
        PageDeld: "Seite gelöscht",
        PagePendAppr: "Seite wartet auf Freigabe",
        TitlePendAppr: "Titel wartet auf Freigabe",
        TextPendingApproval: "Text wartet auf Freigabe",
        TooltipQuestClosedNoAnsw: "Diese Frage wurde ohne eine akzeptierte Antwort geschlossen.",
        TooltipTopicClosed: "Dieses Thema ist geschlossen.",
        TooltipQuestSolved: "Dies ist eine gelöste Frage",
        TooltipQuestUnsolved: "Dies ist eine ungelöste Frage",
        StatusDone: "Erledigt",
        TooltipProblFixed: "Dies wurde behoben",
        TooltipDone: "Dies wurde erledigt",
        StatusStarted: "Gestartet",
        TooltipFixing: "Wir haben begonnen, das zu beheben",
        TooltipImplementing: "Wir haben begonnen, das zu erledigen",
        StatusPlanned: "Geplant",
        TooltipProblPlanned: "Wir planen das zu beheben",
        TooltipIdeaPlanned: "Wir planen das zu erledigen",
        StatusNew: "Neu",
        StatusNewDtl: "Neues Thema, in Diskussion",
        TooltipUnsProbl: "Dies ist ein ungelöstes Problem",
        TooltipIdea: "Dies ist eine Idee",
        TooltipPersMsg: "Persönliche Nachricht",
        TooltipChat: "# bedeutet Chat-Kanal",
        TooltipPrivChat: "Dies ist ein privater Chat-Kanal",
        TooltipPinnedGlob: "\nGlobal angeheftet.",
        TooltipPinnedCat: "\nIn dieser Kategorie angeheftet.",
        SolvedClickView_1: "Gelöst in Beitrag #",
        SolvedClickView_2: ", klicke zum Anzeigen",
        PostHiddenClickShow: "Beitrag versteckt, klicke zum Anzeigen",
        ClickSeeMoreRepls: "Zeige weitere Antworten",
        ClickSeeMoreComments: "Zeige weitere Kommentare",
        ClickSeeThisComment: "Klicke, um diesen Kommentar anzuzeigen",
        clickToShow: "klicke zum Anzeigen",
        ManyDisagree: "Viele widersprechen dem:",
        SomeDisagree: "Einige widersprechen dem:",
        PendAppr: "Wartet auf Freigabe",
        CmtPendAppr: "Kommentar wartet auf Freigabe, geschrieben ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Dein" : "Der") + " Kommentar unten wartet auf Freigabe."; },
        _and: " und",
        repliesTo: "antwortete auf",
        InReplyTo: "Als Antwort auf",
        YourReplyTo: "Deine Antwort auf ",
        YourChatMsg: "Deine Chat-Nachricht: ",
        YourDraft: "Dein Entwurf",
        YourEdits: "Deine Bearbeitung: ",
        YourProgrNoteC: "Deine Fortschrittsnotiz:",
        aProgrNote: "eine Fortschrittsnotiz: ",
        ReplyingToC: "Antwortend auf:",
        ScrollToPrevw_1: "Scrolle zu ",
        ScrollToPrevw_2: "Vorschau",
        UnfinEdits: "Unfertige Bearbeitungen",
        ResumeEdting: "Setze Bearbeitung fort",
        DelDraft: "Lösche Entwurf",
        ClickViewEdits: "Klicke um alte Bearbeitungen anzuzeigen",
        By: "Von ",
        // Discussion ...
        aboutThisIdea: "darüber, ob und wie diese Idee zu erledigen ist",
        aboutThisProbl: "darüber, ob und wie dies zu beheben ist",
        AddProgrNote: "Füge Fortschrittsnotiz hinzu",
        // Progress ...
        withThisIdea: "mit Erledigung dieser Idee",
        withThisProbl: "mit dem Handling dieses Problems",
        withThis: "mit der Erledigung"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Benachrichtigungen über dieses Thema:",
        // If is a direct message topic, members listed below this text.
        Msg: "Nachricht",
        SmrzRepls: "Zusammenfassung der Antworten",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "Dort sind ".concat(numReplies, " Antworten. Gesch\u00E4tzte Lesezeit: ").concat(minutes, " Minuten");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Erledigt. ".concat(numSummarized, " der vorher ").concat(numShownBefore, " angezeigten Antworten zusammengefasst.");
        }
    },
    // Post actions
    pa: {
        CloseTopic: "Thema schließen",
        CloseOwnQuestionTooltip: "Schließe diese Frage, wenn Du keine Antwort mehr benötigst.",
        CloseOthersQuestionTooltip: "Schließe diese Frage, wenn Du keine Antwort benötigst, z.B. wenn " +
            "es Off-Topic ist oder Du woanders schon eine Antwort bekommen hast.",
        CloseToDoTooltip: "Schließe diese Aufgabe wenn sie nicht mehr erledigt oder behoben werden muss.",
        CloseTopicTooltip: "Schließe dieses Thema wenn es keine weiteren Antworten mehr benötigt.",
        AcceptBtnExpl: "Azeptiere dies als Antwort auf die Frage oder das Problem",
        SolutionQ: "Lösung?",
        ClickUnaccept: "Klicke um diese Antwort nicht mehr zu akzeptieren",
        PostAccepted: "Dieser Beitrag wurde als Antwort akzeptiert",
        NumLikes: function (num) { return num === 1 ? "1 Like" : num + " Likes"; },
        NumDisagree: function (num) { return num === 1 ? "1 Widerspruch" : num + " Widersprüche"; },
        NumBury: function (num) { return num === 1 ? "1 Vergraben" : num + " Vergrabene"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Ungewollt" : num + " Ungewollte"; },
        MoreVotes: "Mehr Abstimmungen...",
        LikeThis: "Like das",
        LinkToPost: "Link zu diesem Beitrag",
        Report: "Melden",
        ReportThisPost: "Melde diesen Beitrag",
        Admin: "Admin",
        DiscIx: "Diskussionsindex",
        Disagree: "Widerspruch",
        DisagreeExpl: "Klicke hier, um dem Beitrag zu widersprechen oder andere vor falschen Aussagen zu warnen.",
        Bury: "Vergraben",
        BuryExpl: "Klicke hier, um andere Beiträge vor diesen Beitrag zu sortieren. Nur das Admin-Team kann Deine Anstimmung sehen.",
        Unwanted: "Ungewollt",
        UnwantedExpl: "Wenn Du diesen Beitrag hier nicht sehen willst. Das reduziert Dein Vertrauen in den Verfasser " +
            "des Beitrags. Nur das Admin-Team kann Deine Abstimmung sehen.",
        AddTags: "Lösche oder füge Tags hinzu",
        UnWikify: "Un-Wikify",
        Wikify: "Wikify",
        PinDeleteEtc: "Anheften / Löschen / Kategorie ..."
    },
    // Share dialog
    sd: {
        Copied: "Kopiert.",
        CtrlCToCopy: "Drücke STRG+C zum Kopieren.",
        ClickToCopy: "Klicke um den Link zu kopieren."
    },
    // Chat
    c: {
        About_1: "Dies ist der ",
        About_2: " Chat-Kanal, erstellt von ",
        ScrollUpViewComments: "Scrolle hoch, um ältere Kommentare zu sehen",
        Purpose: "Zweck:",
        edit: "bearbeiten",
        'delete': "löschen",
        MessageDeleted: "(Nachricht gelöscht)",
        JoinThisChat: "Trete diesem chat bei",
        PostMessage: "Sende Nachricht",
        AdvancedEditor: "Erweiterter Editor",
        TypeHere: "Schreibe hier. Du kannst Markdown und HTML benutzen."
    },
    // My Menu
    mm: {
        NeedsReview: "Benötigt Überprüfung ",
        AdminHelp: "Admin Hilfe ",
        StaffHelp: "Team Hilfe ",
        DraftsEtc: "Entwürfe, Lesezeichen, Aufgaben",
        MoreNotfs: "Zeige alle Benachrichtigungen an",
        DismNotfs: "Markiere alle als gelesen",
        ViewProfile: "Zeige Dein Profil an",
        ViewGroups: "Zeige Gruppen",
        LogOut: "Abmelden",
        UnhideHelp: "Zeige Hilfetexte an"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Scrolle zu:",
        Scroll: "Scrolle",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "",
        Back_2: "Zurück (B)",
        BackExpl: "Scrolle zu Deiner vorherigen Position auf dieser Seite zurück",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Seitenanfang",
        PgTopHelp: "Gehe zum Seitenanfang. Tastenkürzel: 1",
        Repl: "Antworten",
        ReplHelp: "Gehe zu den Antworten. Tastenkürzel: 2",
        Progr: "Fortschritt",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Gehe zu den Fortschrittsnotizen. Tastenkürzel: 3",
        PgBtm: "Seitenende",
        Btm: "Ende",
        BtmHelp: "Gehe zum Seitenende. Tastenkürzel: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", und ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " um zurück zu scrollen"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Wähle Benutzer",
        AddUsers: "Füge Benutzer hinzu"
    },
    // About user dialog
    aud: {
        IsMod: "Ist Moderator.",
        IsAdm: "Ist Administrator.",
        IsDeld: "Ist deaktiviert oder gelöscht.",
        ThisIsGuest: "Dies ist ein Gastbenutzer, es könnte also Jeder sein.",
        ViewInAdm: "Zeige im Adminbereich",
        ViewProfl: "Zeige Profil",
        ViewComments: "Zeige andere Kommentare",
        RmFromTpc: "Aus dem Thema entfernen",
        EmAdrUnkn: "Unbekannte eMail-Adresse - dieser Gast wird nicht über Antworten benachrichtigt."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Einstellungen",
        Invites: "Einladungen",
        DraftsEtc: "Entwürfe etc",
        About: "Über",
        Privacy: "Privatsphäre",
        Security: "Sicherheit",
        Account: "Konto",
        Interface: "Interface",
        // ----- Overview stats
        JoinedC: "Beigetreten: ",
        PostsMadeC: "Geschriebene Beiträge: ",
        LastPostC: "Letzter Beitrag: ",
        LastSeenC: "Zuletzt gesehen: ",
        TrustLevelC: "Vertrauensstufe: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Lade Bild hoch",
        ChangePhoto: "Ändere Bild",
        ImgTooSmall: "Bild zu klein: Es sollten mindestens 100 x 100 Pixel sein",
        // ----- Activity
        OnlyStaffCanSee: "Nur das Team und zuverlässige Stammbenutzer können das sehen.",
        OnlyMbrsCanSee: "Nur Benutzer, die schon eine ganze Weile hier aktiv sind, können das sehen.",
        Nothing: "Nichts anzuzeigen",
        Posts: "Beiträge",
        NoPosts: "Keine Beiträge.",
        Topics: "Themen",
        NoTopics: "Keine Themen.",
        // ----- User status
        UserBanned: "Dieser Benutzer ist verbannt",
        UserSuspended: function (dateUtc) { return "Dieser Benutzer ist bis ".concat(dateUtc, " UTC suspendiert"); },
        ReasonC: "Grund: ",
        DeactOrDeld: "Wurde deaktiviert oder gelöscht.",
        isGroup: " (eine Gruppe)",
        isGuest: " — ein Gastbenutzer, könnte Jeder sein",
        isMod: " – Moderator",
        isAdmin: " – Administrator",
        you: "(Du)",
        // ----- Notifications page
        NoNotfs: "Keine Benachrichtigungen",
        NotfsToYouC: "Benachrichtigungen für Dich:",
        NotfsToOtherC: function (name) { return "Benachrichtigungen an ".concat(name, ":"); },
        DefNotfsSiteWide: "Seitenübergreifende Default-Benachrichtugungen",
        // The "for" in:  "Seitenübergreifende Default-Benachrichtigungen für (someone's name)".
        forWho: "für",
        // ----- Drafts Etc page
        NoDrafts: "Keine Entwürfe",
        YourDraftsC: "Deine Entwürfe:",
        DraftsByC: function (name) { return "Entw\u00FCrfe von ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Hier kannst Du jemanden zu dieser Seite einladen. ",
        InvitesListedBelow: "Einladungen, die Du schon verschickt hast, sind unten aufgelistet.",
        NoInvites: "Du hast noch niemanden eingeladen.",
        InvitedEmail: "Eingeladene eMail",
        WhoAccepted: "Benutzer, die akzeptiert haben",
        InvAccepted: "Einladung akzeptiert",
        InvSent: "Einladung gesendet",
        JoinedAlready: "Bereits beigetreten",
        SendAnInv: "Lade jemanden ein",
        SendInv: "Verschicke Einladungen",
        SendInvExpl: // MISSING I18N changed to pluralis
        "Wir senden Deinen Freunden eine kurze eMail. Sie klicken auf einen Link " +
            "um sofort beizutreten, keine Anmeldung ist erforderlich. " +
            "Sie werden dann normale Benutzer, keine Moderatoren oder Admins.",
        //EnterEmail: "Gebe die eMail-Adresse(n) ein",
        InvDone: "Erledigt. Wir werden ihnen eine eMail schicken.",
        NoOneToInv: "Niemanden einzuladen.",
        InvNotfLater: "Du wirst später benachrichtigt, wenn sie eingeladen wurden.",
        AlreadyInvSendAgainQ: "Diese wurden bereits eingeladen - möchtest Du sie vielleicht nochmal einladen?",
        InvErr_1: "Diese ergaben einen ",
        InvErr_2: "Fehler",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "Diese sind bereits hier, sie wurden daher nicht eingeladen:",
        ResendInvsQ: "Sende diesen Leuten die Einladung erneut? Sie wurden schon eingeladen.",
        InvAgain: "Erneut einladen",
        // ----- Preferences, About
        AboutYou: "Über Dich",
        WebLink: "Irgendwelche Webseiten von Dir..",
        NotShownCannotChange: "Nicht öffentlich (kann nicht geändert werden).",
        // The full name or alias:
        NameOpt: "Name (optional)",
        NotShown: "Nicht öffentlich.",
        // The username:
        MayChangeFewTimes: "Du kannst es nur wenige Mal ändern.",
        notSpecified: "(nicht spezifiziert)",
        ChangeUsername_1: "Du kannst Deinen Benutzernamen nur wenige Male ändern.",
        ChangeUsername_2: "Zu viele Änderungen verwirren andere — " +
            "sie wissen dann nicht, wie sie dich @erwähnen sollen.",
        NotfAboutAll: "Werde über jeden neuen Beitrag benachrichtigt (so lange Du das Thema oder die Kategorie nicht stummschaltest)",
        NotfAboutNewTopics: "Werde über jedes neue Thema benachrichtigt (so lange Du die Kategorie nicht stummschaltest)",
        ActivitySummaryEmails: "eMail-Zusammenfassungen",
        EmailSummariesToGroup: "Wenn Benutzer dieser Gruppe diese nicht regelmäßig besuchen, dann schicke ihnen " +
            "Zusammenfassungen über beliebte Themen und andere Dinge per eMail.",
        EmailSummariesToMe: "Wenn ich hier nicht vorbeischaue, maile mir " +
            "Zusammenfassungen über beliebte Themen und andere Dinge.",
        AlsoIfTheyVisit: "Maile ihnen, auch wenn sie hier regelmäßig vorbeischauen.",
        AlsoIfIVisit: "Maile mir, auch wenn ich hier regelmäßig vorbeischaue.",
        HowOftenWeSend: "Wie oft sollen wir diese Mails senden?",
        HowOftenYouWant: "Wie oft möchtest Du diese Mails?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Verstecke Deine Aktivitäten vor Fremden und neuen Mitgliedern?",
        HideActivityStrangers_2: "(aber nicht vor Benutzern, die hier schon länger aktiv sind.)",
        HideActivityAll_1: "Verstecke Deine Aktivitäten vor Jedem?",
        HideActivityAll_2: "(außer dem Team und zuverlässigen Stammbenutzern.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "eMail-Adresse",
        PrimaryDot: "Primär. ",
        VerifiedDot: "Verifiziert. ",
        NotVerifiedDot: "Nicht verifiziert. ",
        ForLoginWithDot: function (provider) { return "F\u00FCr die Anmeldung mit ".concat(provider, ". "); },
        MakePrimary: "Mache primär",
        AddEmail: "Füge eMail-Adresse hinzu",
        TypeNewEmailC: "Gebe eine neue eMail-Adresse ein:",
        MaxEmailsInfo: function (numMax) { return "(Du kannst nicht mehr als ".concat(numMax, " Adressen hinzuf\u00FCgen.)"); },
        EmailAdded_1: "Hinzugefügt. Wir haben Dir eine Verifizierungs-Mail geschickt — ",
        EmailAdded_2: "prüfe Dein Postfach.",
        SendVerifEmail: "Sende Verifizierungs-Mail",
        EmailStatusExpl: "('Primär' bedeutet, Du kannst Dich mit dieser Adresse anmelden und bekommst Benachrichtigungen dorthin. " +
            "'Verifiziert' bedeutet, Du hast Deine eMail-Adresse mit dem Verifizierungslink bestätigt.)",
        // Password:
        ChangePwdQ: "Ändere Dein Paßwort?",
        CreatePwdQ: "Erstelle Dein Paßwort?",
        WillGetPwdRstEml: "Du bekommst eine eMail zum Zurücksetzen Deines Paßwortes.",
        // This is the "None" in:  "Password: None"
        PwdNone: "Keins",
        // Logins:
        LoginMethods: "Login-Methode",
        commaAs: ", als: ",
        // One's data:
        YourContent: "Dein Inhalt",
        DownloadPosts: "Download Deiner Beiträge",
        DownloadPostsHelp: "Erzeugt eine JSON-Datei mit Deinen Themen und Kommentaren, die Du geschrieben hast.",
        DownloadPersData: "Download Deiner persönlichen Daten",
        DownloadPersDataHelp: "Erzeugt eine JSON-Datei mit Deinen persönlichen Daten, z.B. Dein Name " +
            "(wenn Du ihn angegeben hast) und eMail-Adresse(n).",
        // Delete account:
        DangerZone: "Danger zone",
        DeleteAccount: "Lösche das Konto",
        DeleteYourAccountQ: "Lösche Deine Konto? Wir werden Deinen Namen entfernen und Deine eMail-Adresse(n), Paßwort und " +
            "alle anderen Identitäten (wie Facebook- oder Twitter-Anmeldedaten) löschen. " +
            "Du kannst Dich nicht mehr einloggen. DIES KANN NICHT RÜCKGÄNGIG GEMACHT WERDEN!",
        DeleteUserQ: "Lösche diesen Benutzer? Wir werden den Namen entfernen und die eMail-Adresse(n), Paßwort und " +
            "alle anderen Identitäten (wie Facebook- oder Twitter-Anmeldedaten) löschen. " +
            "Der Benutzer kann sich nicht mehr einloggen. DIES KANN NICHT RÜCKGÄNGIG GEMACHT WERDEN!",
        YesDelete: "Ja, löschen"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Gruppenmitglieder",
        NoMembers: "Keine Mitglieder.",
        MayNotListMembers: "Kann keine Mitglieder auflisten.",
        AddMembers: "Mitglieder hinzufügen",
        BuiltInCannotModify: "Das ist eine vorgegebene Gruppe, nicht modifizierbar.",
        NumMembers: function (num) { return "".concat(num, " Mitglieder"); },
        YouAreMember: "Du bist Mitglied.",
        CustomGroupsC: "Benutzergruppen:",
        BuiltInGroupsC: "Vorgegebene Gruppen:",
        DeleteGroup: "Lösche diese Gruppe"
    },
    // Create user dialog
    cud: {
        CreateUser: "Lege Benutzer an",
        CreateAccount: "Erstelle Konto",
        EmailC: "eMail:",
        keptPriv: "wird nicht beröffentlicht",
        forNotfsKeptPriv: "für Benachrichtigungen, nicht öffentlich",
        EmailVerifBy_1: "Deine eMail wurde verifiziert von ",
        EmailVerifBy_2: ".",
        UsernameC: "Benutzername:",
        FullNameC: "Voller Name:",
        optName: "optional",
        // OrCreateAcct_1: "Oder ",
        // OrCreateAcct_2: "erstelle ein Konto",
        // OrCreateAcct_3: " mit ",
        // OrCreateAcct_4: "@Benutzername",
        // OrCreateAcct_5: " & Paßwort",
        DoneLoggedIn: "Konto erstellt. Du bist angemeldet.",
        AlmostDone: "Fast fertig! Du musst nur noch Deine eMail-Adresse bestätigen. Wir haben Dir " +
            "eine eMail geschickt. Bitte klicke auf den Link in dieser Mail um " +
            "Dein Konto zu aktivieren. Da kannst diese Seite nun schließen."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Nutzungsbedingungen und Datenschutz",
        Accept_1: "Akzeptierst Du unsere ",
        TermsOfService: "Servicebedingungen",
        TermsOfUse: "Nutzungsbedingungen",
        Accept_2: " und ",
        PrivPol: "Datenschutzerklärung",
        Accept_3_User: "?",
        Accept_3_Owner: " für Seitenbetreiber?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Ja, ich akzeptiere"
    },
    // Password input
    pwd: {
        PasswordC: "Paßwort:",
        StrengthC: "Stärke: ",
        FairlyWeak: "Ziemlich schwach.",
        toShort: "zu kurz",
        TooShort: function (minLength) { return "Zu kurz. Es sollten mindestens ".concat(minLength, " Zeichen sein"); },
        PlzInclDigit: "Bitte füge eine Ziffer oder ein Sonderzeichen ein",
        TooWeak123abc: "Zu schwach. Benutze keine Paßworte wie '12345' oder 'abcde'.",
        AvoidInclC: "Vermeide die Benutzung Teile Deines Namens oder der eMail-Adresse im Paßwort:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Seite nicht gefunden oder Zugriff verweigert.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "Du agierst als jemand, der nicht alle Rechte zum Zugriff auf " +
            "diese Seite hat.",
        IfYouThinkExistsThen: "Wenn Du glaubst dass diese Seite existiert, melde Dich als jemand an der Zugriff hat. ",
        LoggedInAlready: "(Du bist bereits angemeldet, ist es das richtige Konto?) ",
        ElseGoToHome_1: "Ansonsten kannst Du ",
        ElseGoToHome_2: "zur Homepage gehen.",
        CreateAcconut: "Erstelle Konto",
        ContinueWithDots: "Fortfahren mit ...",
        SignUp: "Beitreten",
        LogIn: "Anmelden",
        LogInWithPwd: "Mit Paßwort anmelden",
        CreateAdmAcct: "Admin-Konto anlegen:",
        AuthRequired: "Anmeldung erforderlich um auf die Seite zuzugreifen",
        LogInToLike: "Melde Dich an um diesen Beitrag zu liken",
        LogInToSubmit: "Anmelden und absenden",
        LogInToComment: "Melde Dich an um einen Kommentar zu schreiben",
        LogInToCreateTopic: "Melde Dich an um ein Thema zu erstellen",
        //AlreadyHaveAcctQ: "You have an account? ",  // MISSING changed "Already have...?" to "You have...?"
        OrLogIn_1: "Oder ",
        OrLogIn_2: "Melde Dich an",
        OrLogIn_3: "",
        //NewUserQ: "New user? ",
        SignUpInstead_1: "Oder ",
        SignUpInstead_2: "Registriere Dich",
        SignUpInstead_3: "",
        OrTypeName_1: ", oder ",
        OrTypeName_2: "schreibe einen Namen",
        OrTypeName_3: "",
        OrCreateAcctHere: "Oder registriere Dich:",
        OrTypeName: "Oder schreibe Deinen Namen:",
        OrLogIn: "Oder melde Dich an:",
        YourNameQ: "Dein Name?",
        BadCreds: "Falscher Benutzername oder Paßwort",
        UsernameOrEmailC: "Benutzername oder eMail:",
        PasswordC: "Paßwort:",
        ForgotPwd: "Hast Du Dein Paßwort vergessen?",
        NoPwd: "Du hast noch kein Paßwort vergeben.",
        CreatePwd: "Erstelle ein Paßwort"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Bitte schreibe uns, worüber Du besorgt bist.",
        ThanksHaveReported: "Danke. Deine Meldung wurde aufgenommen. Das Team wird sie sich ansehen.",
        ReportComment: "Melde Kommentar",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Dieser Beitrag enthält persönliche Daten, z.B. den Namen einer Person.",
        OptOffensive: "Dieser Beitrag enthält Beleidigungen, Verleumdungen oder verbotene/unerwünschte Äußerungen.",
        OptSpam: "Dieser Beitrag ist unerwünschte Werbung / Spam.",
        OptOther: "Melde den Beitrag aus anderen Gründen."
    },
    // Help message dialog (as in "Tips", not "Private message").
    help: {
        YouCanShowAgain_1: "Du kannst die Hilfetexte erneut anzeigen, wenn Du angemeldet bist, " +
            "auf Deinen Namen klickst und dann auf ",
        YouCanShowAgain_2: "Hilfetexte anzeigen"
    },
    // Editor
    e: {
        SimilarTopicsC: "Ähnliche Themen:",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "Sorry, aber im Moment kannst Du nur eine Datei auf einmal hochladen",
        PleaseFinishPost: "Bitte schreibe zuerst Deinen Beitrag zu Ende",
        PleaseFinishChatMsg: "Bitte schreibe zuerst Deine Chatnachricht zu Ende",
        PleaseFinishMsg: "Bitte schreibe zuerst Deine Nachricht zu Ende",
        PleaseSaveEdits: "Bitte speichere zuerst Deine aktuellen Änderungen",
        PleaseSaveOrCancel: "Bitte speichere zuerst Dein neues Thema oder breche ab",
        CanContinueEditing: "Du kannst mit der Bearbeitung fortfahren, wenn Du den Editor wieder öffnest.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Bitte lösche nicht den gesamten Text. Schreibe etwas.",
        PleaseWriteSth: "Bitte schreibe etwas.",
        PleaseWriteTitle: "Bitte schreibe einen Thementitel.",
        PleaseWriteMsgTitle: "Bitte schreibe einen Nachrichtentitel.",
        PleaseWriteMsg: "Bitte schreibe ein Nachricht.",
        exBold: "Fettschrift",
        exEmph: "hervorgehobener Text",
        exPre: "Vorformatierter Text",
        exQuoted: "zitierter Text",
        ExHeading: "Überschrift",
        TitlePlaceholder: "Schreibe einen Titel - worum geht es, in einem kurzen Satz?",
        EditPost_1: "Bearbeite ",
        EditPost_2: "Beitrag ",
        TypeChatMsg: "Schreibe eine Chatnachricht:",
        YourMsg: "Deine Nachricht:",
        CreateTopic: "Erstelle ein neues Thema",
        CreateCustomHtml: "Erstelle eine HTML-Seite (füge Deinen eigenen <h1>-Titel hinzu)",
        CreateInfoPage: "Erstelle eine Infoseite",
        CreateCode: "Erstelle eine Sourcecode-Seite",
        AskQuestion: "Stelle eine frage",
        ReportProblem: "Melde ein Problem",
        SuggestIdea: "Schlage eine Idee vor",
        NewChat: "Titel und Zweck des Chat-Kanals",
        NewPrivChat: "Titel und Zewck des privaten Chats",
        AppendComment: "Füge einen Kommentar am Seitenende hinzu:",
        ReplyTo: "Antwort auf ",
        ReplyTo_theOrigPost: "den Originalbeitrag",
        ReplyTo_post: "den Beitrag ",
        AddCommentC: "Füge einen Kommentar hinzu:",
        PleaseSelectPosts: "Bitte wähle einen oder mehrere Beiträge zur Antwort aus.",
        Save: "Speichern",
        edits: "Bearbeitungen",
        PostReply: "Schreibe Antwort",
        PostComment: "Schreibe Kommentar",
        Post: "Beitrag",
        comment: "Kommentar",
        question: "Frage",
        PostMessage: "Schreibe Beitrag",
        SimpleEditor: "Einfacher Editor",
        Send: "Sende",
        message: "Nachricht",
        Create: "Erstelle",
        page: "Seite",
        chat: "Chat",
        idea: "Idee",
        topic: "Thema",
        Submit: "Absenden",
        problem: "Problem",
        ViewOldEdits: "Zeige alte Bearbeitungen",
        UploadBtnTooltip: "Lade eine Datei oder ein Bild hoch",
        BoldBtnTooltip: "Ändere den Text zu Fettschrift",
        EmBtnTooltip: "Hervorheben",
        QuoteBtnTooltip: "Zitat",
        PreBtnTooltip: "Vorformatierter Text",
        HeadingBtnTooltip: "Überschrift",
        TypeHerePlaceholder: "Schreibe hier. Du kannst Markdown und HTML benutzen. Drag and drop um Bilder einzufügen.",
        Maximize: "Maximieren",
        ToNormal: "Zurück zur Normaldarstellung",
        TileHorizontally: "Horizontal teilen",
        PreviewC: "Vorschau:",
        TitleExcl: " (ohne Titel)",
        ShowEditorAgain: "Zeige wieder den Editor",
        Minimize: "Minimieren",
        IPhoneKbdSpace_1: "(Dieser graue Bereich ist reserviert",
        IPhoneKbdSpace_2: "für die iPhone-Tastatur.)",
        PreviewInfo: "Hier kannst Du sehen, wie Dein Beitrag aussehen wird.",
        CannotType: "Du kannst hier nicht schreiben.",
        LoadingDraftDots: "Lade alle Entwürfe...",
        DraftUnchanged: "Nicht verändert.",
        CannotSaveDraftC: "Kann Entwurf nicht speichern:",
        DraftSavedBrwsr: "Entwurf im Browser gespeochert.",
        DraftSaved: function (nr) { return "Entwurf ".concat(nr, " gespeichert."); },
        DraftDeleted: function (nr) { return "Entwurf ".concat(nr, " gel\u00F6scht."); },
        WillSaveDraft: function (nr) { return "Werde Entwurf ".concat(nr, " speichern ..."); },
        SavingDraft: function (nr) { return "Speichere Entwirf ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "L\u00F6sche Entwurf ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Wähle Kategorie"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Wähle Kategorietyp:",
        DiscussionExpl: "Eine Diskussion über etwas.",
        QuestionExpl: "Eine Antwort kann als die akzeptierte Antwort markiert werden.",
        ProblExpl: "Wenn etwas kaputt ist oder nicht richtig arbeitet. Kann als erledigt/behoben markiert werden.",
        IdeaExpl: "Ein Vorschlag. Kann als erledigt markiert werden.",
        ChatExpl: "Eine vielleicht nie endende Konversation.",
        PrivChatExpl: "Nur sichtbar für Leute die zu diesem Chat eingeladen werden.",
        CustomHtml: "Eigene HTML-Seite",
        InfoPage: "Infoseite",
        Code: "Code",
        EmbCmts: "Eingebettete Kommentare",
        About: "Über",
        PrivChat: "Privater Chat",
        Form: "Formular"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "Keine weiteren Communities zum Beitreten.",
        SelCmty: "Wähle Community ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Text, nach dem gesucht werden soll"
    },
    // No internet
    ni: {
        NoInet: "Keine Internetverbindung",
        PlzRefr: "Lade die Seite neu um Änderungen zu sehen. (Es gab eine Verbindungsunterbrechung)",
        RefrNow: "Refresh now"
    },
    PostDeleted: function (postNr) { return "Dieser Beitrag, Nr. ".concat(postNr, ", wurde gel\u00F6scht."); },
    NoSuchPost: function (postNr) { return "Es gibt keinen Beitrag Nr. ".concat(postNr, " auf dieser Seite."); },
    NoPageHere: "Diese Seite wurde gelöscht oder hat nie existiert - oder Du hast keine Zugangsberechtigung.",
    GoBackToLastPage: "Gehe zurück zur letzten Seite"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
// Hebrew (not yet but later).
var t_he_IL = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "פעילה",
    Activity: "פעילות",
    Add: "הוספה",
    AddingDots: "מוסיפה ...",
    Admin: "אדמין",
    AdvSearch: "חיפוש מתקדם",
    Away: "רחוקה",
    Back: "חזרה",
    BlogN: "בלוג",
    Bookmarks: "סימניות",
    Cancel: "ביטול",
    Categories: "קטגוריות",
    Category: "קטגוריה",
    ChangeV: "שינוי",
    Continue: "להמשיך",
    ClickToShow: "לחצי בכדי להציג",
    ChangeDots: "משנה ...",
    ChatN: "צ'אט",
    Chatting: "מצ'וטטת",
    CheckYourEmail: "בדקי את תיבת המייל שלך",
    Close: "סגירה",
    closed: "סגור",
    Created: "נוצר",
    Delete: "מחיקה",
    Deleted: "נמחק",
    DirectMessage: "הודעה מיידית",
    Discussion: "דיון",
    discussion: "דיון",
    done: "הסתיים",
    EditV: "עריכה",
    Editing: "עורכת",
    EmailAddress: "כתובת מייל",
    EmailAddresses: "כתובות מייל",
    EmailSentD: "מייל נשלח.",
    Forum: "פורום",
    GetNotifiedAbout: "קבלי התראות על",
    GroupsC: "קבוצות:",
    Hide: "הסתרה",
    Home: "בית",
    Idea: "רעיון",
    Join: "הצטרפות",
    KbdShrtcsC: "קיצורי דרך למקלדת: ",
    Loading: "טוען...",
    LoadMore: "טען עוד ...",
    LogIn: "כנסי",
    LoggedInAs: "מחוברת כ- ",
    LogOut: "צאי",
    Maybe: "אולי",
    Manage: "נהלי",
    Members: "חברות",
    MessageN: "הודעה",
    MoreDots: "עוד...",
    Move: "העבירי",
    Name: "שם",
    NameC: "שם:",
    NewTopic: "נושא חדש",
    NoCancel: "לא, ביטול",
    Notifications: "התראות",
    NotImplemented: "(לא ממומש)",
    NotYet: "עדיין לא",
    NoTitle: "ללא כותרת",
    NoTopics: "ללא נושאים.",
    Okay: "אוקיי",
    OkayDots: "אוקיי ...",
    Online: "אונליין",
    onePerLine: "אחד לכל שורה",
    PreviewV: "תצוגה מקדימה",
    Problem: "בעיה",
    progressN: "התקדמות",
    Question: "שאלה",
    Recent: "לאחרונה",
    Remove: "הסרה",
    Reopen: "פתיחה מחדש",
    ReplyV: "הגיבי",
    Replying: "מגיבה",
    Replies: "תגובות",
    replies: "תגובות",
    Save: "שמירה",
    SavingDots: "שומר ...",
    SavedDot: "נשמר.",
    Search: "חיפוש",
    SendMsg: "שליחת הודעה",
    ShowPreview: "תצוגה מקדימה",
    SignUp: "הצטרפות",
    Solution: "פתרון",
    started: "התחילה",
    Summary: "תקציר",
    Submit: "שליחה",
    Tag: "תג",
    Tags: "תגיות",
    Tools: "כלים",
    Topics: "נושאים",
    TopicTitle: "כותרת הנושא",
    TopicType: "סוג הנושא",
    UploadingDots: "מעלה...",
    Username: "שם משתמש",
    Users: "משתמשים",
    Welcome: "ברוכה הבאה",
    Wiki: "ויקי",
    Yes: "כן",
    YesBye: "כן, ביי",
    YesDoThat: "כן, עשי זאת",
    You: "את",
    you: "את",
    // Trust levels. (female)
    Guest: "אורחת",
    NewMember: "חברה חדשה",
    BasicMember: "חברה בסיסית",
    FullMember: "חברה מלאה",
    TrustedMember: "חברה מהימנה",
    RegularMember: "חברה רגילה",
    CoreMember: "חברת ליבה",
    // Periods.
    PastDay: "יום אחרון",
    PastWeek: "שבוע אחרון",
    PastMonth: "חודש אחרון",
    PastQuarter: "רבעון אחרון",
    PastYear: "שנה אחרונה",
    AllTime: "כל הזמן",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    //
    // HOWEVER these should be *letters* only, not whole words.
    // Does that work in Hebrew? In English: 3d = 3 days, would that be,
    // in Hebrew,  3 ימ  ?
    // (but '3' to the right of the letter, can't place '3' there in VSCode though,
    // it gets confused by RTL and moves '3' to the left.)
    monthsLtr: " חודשים",
    daysLtr: " ימים",
    hoursLtr: " שעות",
    minsLtr: " דקות",
    secsLtr: " שניות",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "לפני יום" : "\u05DC\u05E4\u05E0\u05D9 ".concat(numDays, " \u05D9\u05DE\u05D9\u05DD");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "לפני שעה" : "\u05DC\u05E4\u05E0\u05D9 ".concat(numHours, " \u05E9\u05E2\u05D5\u05EA");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "לפני דקה" : "\u05DC\u05E4\u05E0\u05D9 ".concat(numMins, " \u05D3\u05E7\u05D5\u05EA");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "לפני שניה" : "\u05DC\u05E4\u05E0\u05D9 ".concat(numSecs, " \u05E9\u05E0\u05D9\u05D5\u05EA");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Email required",
        NoSpcs: "No spaces please",
        InvldAddr: "Not a valid email address",
        NoBadChrs: "No weird characters please",
        // Full name input field:
        NotOnlSpcs: "Not just spaces please",
        NoAt: "No @ please",
        // Username input field:
        NoDash: "No dashes (-) please",
        DontInclAt: "Don't include the @",
        StartEndLtrDgt: "Start and end with a letter or a digit",
        OnlLtrNumEtc: "Only letters (a-z, A-Z) and numbers, and _ (underscore)",
        // This shown just below the username input:
        UnUnqShrt_1: "Your ",
        UnUnqShrt_2: "@username",
        UnUnqShrt_3: ", unique and short",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Should be at least ".concat(minLength, " characters"); },
        TooLong: function (maxLength) { return "Too long. Should be at most ".concat(maxLength, " characters"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Every Post",
        EveryPostInTopic: "You'll be notified of all new replies in this topic.",
        EveryPostInCat: "You'll be notified of all new topics and replies, in this category.",
        EveryPostInTopicsWithTag: "You'll be notified of new topics with this tag, and all replies in those topics.",
        EveryPostWholeSite: "You'll be notified of all new topics and replies, anywhere.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "New Topics",
        NewTopicsInCat: "You'll be notified of new topics in this category.",
        NewTopicsWithTag: "You'll be notified of new topics with this tag.",
        NewTopicsWholeSite: "You'll be notified of new topics, anywhere.",
        Tracking: "Tracking",
        Normal: "Normal",
        NormalDescr: "You'll be notified if someone talks to you, also indirectly, e.g. a " +
            "reply to a reply to you.",
        //NormalTopic_1: "You'll be notified if someone talks to you, or mentions your ",
        //NormalTopic_2: "@name",
        Hushed: "Hushed",
        HushedDescr: "You'll be notified only if someone talks directly to you.",
        Muted: "Muted",
        MutedTopic: "No notifications."
    },
    // Forum intro text
    fi: {
        Edit: "Edit",
        Hide_1: "Hide",
        Hide_2: ", click ",
        Hide_3: " to reopen"
    },
    // Forum categories
    fcs: {
        All: "All"
    },
    // Forum buttons
    fb: {
        TopicList: "רשימת הנושאים",
        // Select category dropdown
        from: "from",
        "in": "in",
        AllCats: "All categories",
        // Topic sort order
        Active: "Active first",
        ActiveDescr: "Shows recently active topics first",
        New: "New",
        NewDescr: "Shows newest topics first",
        Top: "Popular",
        TopDescr: "Shows popular topics first",
        // Topic filter dropdown
        AllTopics: "כל הנושאים",
        ShowAllTopics: "Show all topics",
        ShowAllTopicsDescr: "Not deleted topics though",
        WaitingTopics: "Waiting topics",
        OnlyWaitingDescr_1: "Shows only topics ",
        OnlyWaitingDescr_2: "waiting ",
        OnlyWaitingDescr_3: "for a solution or to be implemented and done",
        YourTopics: "Your topics",
        AssignedToYou: "Assigned to you",
        DeletedTopics: "Show deleted",
        ShowDeleted: "Show deleted",
        ShowDeletedDescr: "Shows all topics, including deleted topics",
        // Rightmost buttons
        ViewCategories: "הצגת קטגוריות",
        EditCat: "Edit Category",
        CreateCat: "Create Category",
        CreateTopic: "צור נושא",
        PostIdea: "Post an Idea",
        AskQuestion: "Ask a Question",
        ReportProblem: "Report a Problem",
        CreateMindMap: "Create Mind Map",
        CreatePage: "Create Page"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Explain icons...",
        IconExplanation: "Icon explanation:",
        ExplGenDisc: "A general discussion.",
        ExplQuestion: "A question with no accepted answer.",
        ExplAnswer: "A question with an accepted answer.",
        ExplIdea: "An idea / suggestion.",
        ExplProblem: "A problem.",
        ExplPlanned: "Something we're planning to do or fix.",
        ExplDone: "Something that's been done or fixed.",
        ExplClosed: "Topic closed.",
        ExplPinned: "Topic always listed first (perhaps only in its own category).",
        PopularTopicsComma: "Popular topics, ",
        TopFirstAllTime: "Shows the most popular topics first, all time.",
        TopFirstPastDay: "Shows topics popular during the past day.",
        CatHasBeenDeleted: "This category has been deleted",
        TopicsActiveFirst: "נושאים פעילים לאחרונה",
        TopicsNewestFirst: "Topics, newest first",
        CreatedOn: "Created on ",
        LastReplyOn: "\nLast reply on ",
        EditedOn: "\nEdited on ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "created the topic",
        frequentPoster: "frequent poster",
        mostRecentPoster: "most recent poster",
        inC: "in: ",
        TitleFixed: "This has been fixed",
        TitleDone: "This has been done",
        TitleStarted: "We've started this",
        TitleStartedFixing: "We've started fixing this",
        TitleUnsolved: "This is an unsolved problem",
        TitleIdea: "This is an idea",
        TitlePlanningFix: "We're planning to fix this",
        TitlePlanningDo: "We're planning to do this",
        TitleChat: "This is a chat channel",
        TitlePrivateChat: "This is a private chat channel",
        TitlePrivateMessage: "A private message",
        TitleInfoPage: "This is an info page",
        TitleDiscussion: "A discussion",
        IsPinnedGlobally: "\nIt has been pinned, so it's listed first.",
        IsPinnedInCat: "\nIt has been pinned in its category, so is listed first, in its category."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Recent topics (those waiting)",
        RecentTopicsInclDel: "Recent topics (including deleted)",
        RecentTopics: "נושאים אחרונים",
        _replies: " replies",
        _deleted: " (deleted)",
        _defCat: " (default category)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Recent posts",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online in this chat",
        NumOnlForum: " online in this forum",
        // Open left-sidebar button title.
        WatchbBtn: "Your topics",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Your recent topics, joined chats, direct messages",
        // Title shown on user profile pages.
        AbtUsr: "About User",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Back from user profile",
        BackFromAdm: "Back from admin area",
        // Title shown on full text search page.
        SearchPg: "Search Page"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Add ...",
        RecentlyViewed: "Recently viewed topics",
        JoinedChats: "Joined Chats",
        ChatChannels: "Chat Channels",
        CreateChat: "Create chat channel",
        DirectMsgs: "Direct Messages",
        NoChats: "None",
        NoDirMsgs: "None",
        // The click-topic dropdown menu:
        TopicActions: "Topic actions",
        ViewPeopleHere: "View people here",
        ViewAddRemoveMembers: "View / add / remove members",
        ViewChatMembers: "View chat members",
        EditChat: "Edit chat description",
        //EditChat: "Edit chat title and purpose", // Keep, in case adds back edit-title input
        LeaveThisChat: "Leave this chat",
        LeaveThisCommunity: "Leave this community",
        JoinThisCommunity: "Join this community"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Recent comments in this topic:",
        NoComments: "No comments.",
        YourBookmarks: "Your bookmarks:",
        UsersOnline: "Users online:",
        UsersOnlineForum: "Users online in this forum:",
        UsersInThisChat: "Users in this chat:",
        UsersInThisTopic: "Users in this topic:",
        GettingStartedGuide: "Admin Guide",
        AdminGuide: "Admin Guide",
        Guide: "Guide",
        // How to hide the sidebar.
        CloseShortcutS: "Close (keyboard shortcut: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Add more people",
        // Shown next to one's own username, in a list of users.
        thatsYou: "that's you",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Only you, it seems",
        YouAnd: "You, and ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " person" : " people";
            var have = numStrangers === 1 ? "has" : "have";
            return numStrangers + people + " who " + have + " not logged in";
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "The replies to the left are sorted by ",
        bestFirst: "best-first.",
        ButBelow: "But below ",
        insteadBy: " the same replies are instead sorted by ",
        newestFirst: "newest-first.",
        SoIfLeave: "So if you leave, and come back here later, below you'll find ",
        allNewReplies: "all new replies.",
        Click: "Click",
        aReplyToReadIt: " a reply below to read it — because only an excerpt is shown, below."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Click to change status",
        ClickToViewAnswer: "Click to view answer",
        ViewAnswer: "View answer",
        ChangeStatusC: "Change status to:",
        ChangeCatC: "Change category:",
        ChangeTopicTypeC: "Change topic type:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "a question",
        hasAccptAns: "has an accepted answer",
        aProblem: "a problem",
        planToFix: "plan to fix",
        anIdea: "an idea",
        planToDo: "plan to do"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "This form has been ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "closed; you can no longer fill it in and post it.",
        ThisTopicClosed_1: "This topic has been ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". You can still post comments.",
        ThisPageDeleted: "This page has been deleted",
        CatDeldPageToo: "Category deleted, so this page was deleted too",
        ThreadDeld: "Thread deleted",
        CmntDeld: "Comment deleted",
        PostDeld: "Post deleted",
        DiscDeld: "Discussion deleted",
        PageDeld: "Page deleted",
        TitlePendAppr: "Title pending approval",
        TextPendingApproval: "Text pending approval",
        TooltipQuestClosedNoAnsw: "This question has been closed without any accepted answer.",
        TooltipTopicClosed: "This topic is closed.",
        TooltipQuestSolved: "This is a solved question",
        TooltipQuestUnsolved: "This is an unsolved question",
        StatusDone: "Done",
        TooltipProblFixed: "This has been fixed",
        TooltipDone: "This has been done",
        StatusStarted: "Started",
        TooltipFixing: "We've started fixing this",
        TooltipImplementing: "We've started doing this",
        StatusPlanned: "Planned",
        TooltipProblPlanned: "We're planning to fix this",
        TooltipIdeaPlanned: "We're planning to do this",
        StatusNew: "New",
        StatusNewDtl: "New topic, under discussion",
        TooltipUnsProbl: "This is an unsolved problem",
        TooltipIdea: "This is an idea",
        TooltipPersMsg: "Personal message",
        TooltipChat: "# means Chat Channel",
        TooltipPrivChat: "This is a private chat channel",
        TooltipPinnedGlob: "\nPinned globally.",
        TooltipPinnedCat: "\nPinned in this category.",
        SolvedClickView_1: "Solved in post #",
        SolvedClickView_2: ", click to view",
        PostHiddenClickShow: "Post hidden; click to show",
        ClickSeeMoreRepls: "Show more replies",
        ClickSeeMoreComments: "Show more comments",
        ClickSeeThisComment: "Click to show this comment",
        clickToShow: "click to show",
        ManyDisagree: "Many disagree with this:",
        SomeDisagree: "Some disagree with this:",
        CmtPendAppr: "Comment pending approval, posted ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Your" : "The") + " comment below is pending approval."; },
        _and: " and",
        repliesTo: "replies to",
        InReplyTo: "In reply to",
        YourReplyTo: "Your reply to ",
        YourChatMsg: "Your chat message: ",
        YourDraft: "Your draft",
        YourEdits: "Your edits: ",
        YourProgrNoteC: "Your progress note:",
        aProgrNote: "a progress note: ",
        ReplyingToC: "Replying to:",
        ScrollToPrevw_1: "Scroll to ",
        ScrollToPrevw_2: "preview",
        UnfinEdits: "Unfinished edits",
        ResumeEdting: "Resume editing",
        DelDraft: "Delete draft",
        ClickViewEdits: "Click to view old edits",
        By: "By ",
        // Discussion ...
        aboutThisIdea: "about how and if to do this idea",
        aboutThisProbl: "about how and if to fix this",
        AddProgrNote: "Add progress note",
        // Progress ...
        withThisIdea: "with doing this idea",
        withThisProbl: "with handling this problem",
        withThis: "with doing this"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Notifications about this topic:",
        // If is a direct message topic, members listed below this text.
        Msg: "Message",
        SmrzRepls: "Summarize Replies",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "There are ".concat(numReplies, " replies. Estimated reading time: ").concat(minutes, " minutes");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Done. Summarized ".concat(numSummarized, " replies, of the ").concat(numShownBefore, " replies previously shown.");
        }
    },
    // Post actions
    pa: {
        CloseOwnQuestionTooltip: "Close this question if you don't need an answer any more.",
        CloseOthersQuestionTooltip: "Close this question if it doesn't need an answer, e.g. if " +
            "it is off-topic or already answered in another topic.",
        CloseToDoTooltip: "Close this To-Do if it does not need to be done or fixed.",
        CloseTopicTooltip: "Close this topic if it needs no further consideration.",
        AcceptBtnExpl: "Accept this as the answer to the question or problem",
        SolutionQ: "Solution?",
        ClickUnaccept: "Click to un-accept this answer",
        PostAccepted: "This post has been accepted as the answer",
        NumLikes: function (num) { return num === 1 ? "1 Like" : num + " Likes"; },
        NumDisagree: function (num) { return num + " Disagree"; },
        NumBury: function (num) { return num === 1 ? "1 Bury" : num + " Burys"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Unwanted" : num + " Unwanteds"; },
        MoreVotes: "More votes...",
        LikeThis: "Like this",
        LinkToPost: "Link to this post",
        Report: "Report",
        ReportThisPost: "Report this post",
        Admin: "Admin",
        DiscIx: "Discussions index",
        Disagree: "Disagree",
        DisagreeExpl: "Click here to disagree with this post, or to warn others about factual errors.",
        Bury: "Bury",
        BuryExpl: "Click to sort other posts before this post. Only the forum staff can see your vote.",
        Unwanted: "Unwanted",
        UnwantedExpl: "If you do not want this post on this website. This would reduce the trust I have " +
            "in the post author. Only the forum staff can see your vote.",
        AddTags: "Add/remove tags",
        UnWikify: "Un-Wikify",
        Wikify: "Wikify",
        PinDeleteEtc: "Pin / Delete / Category ..."
    },
    // Share dialog
    sd: {
        Copied: "Copied.",
        CtrlCToCopy: "Hit CTRL+C to copy.",
        ClickToCopy: "Click to copy link."
    },
    // Chat
    c: {
        About_1: "This is the ",
        About_2: " chat channel, created by ",
        ScrollUpViewComments: "Scroll up to view older comments",
        Purpose: "Purpose:",
        edit: "edit",
        'delete': "delete",
        MessageDeleted: "(Message deleted)",
        JoinThisChat: "Join this chat",
        PostMessage: "Post message",
        AdvancedEditor: "Advanced editor",
        TypeHere: "Type here. You can use Markdown and HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Needs review ",
        AdminHelp: "Admin help ",
        StaffHelp: "Staff help ",
        DraftsEtc: "Drafts, bookmarks, tasks",
        MoreNotfs: "View all notifications",
        DismNotfs: "Mark all as read",
        ViewProfile: "View your profile",
        ViewGroups: "View groups",
        LogOut: "Log out",
        UnhideHelp: "Unhide help messages"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Scroll to:",
        Scroll: "Scroll",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "B",
        Back_2: "ack",
        BackExpl: "Scroll back to your previous position on this page",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Page top",
        PgTopHelp: "Go to the top of the page. Keyboard shortcut: 1",
        Repl: "Replies",
        ReplHelp: "Go to the Replies section. Shortcut: 2",
        Progr: "Progress",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Go to the Progress section. Shortcut: 3",
        PgBtm: "Page bottom",
        Btm: "Bottom",
        BtmHelp: "Go to the bottom of the page. Shortcut: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", and ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " to scroll back"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Select users",
        AddUsers: "Add users"
    },
    // About user dialog
    aud: {
        IsMod: "Is moderator.",
        IsAdm: "Is administrator.",
        IsDeld: "Is deactivated or deleted.",
        ThisIsGuest: "This is a guest user, could in fact be anyone.",
        ViewInAdm: "View in Admin Area",
        ViewProfl: "View Profile",
        ViewComments: "View other comments",
        RmFromTpc: "Remove from topic",
        EmAdrUnkn: "Email address unknown — this guest won't be notified about replies."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Preferences",
        Invites: "Invites",
        DraftsEtc: "Drafts etc",
        About: "About",
        Privacy: "Privacy",
        Security: "Security",
        Account: "Account",
        Interface: "Interface",
        // ----- Overview stats
        JoinedC: "Joined: ",
        PostsMadeC: "Posts made: ",
        LastPostC: "Last post: ",
        LastSeenC: "Last seen: ",
        TrustLevelC: "Trust level: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Upload photo",
        ChangePhoto: "Change photo",
        ImgTooSmall: "Image too small: should be at least 100 x 100",
        // ----- Activity
        OnlyStaffCanSee: "Only staff and trusted core members, can see this.",
        OnlyMbrsCanSee: "Only people who have been active members for a while can see this.",
        Nothing: "Nothing to show",
        Posts: "Posts",
        NoPosts: "No posts.",
        Topics: "Topics",
        NoTopics: "No topics.",
        // ----- User status
        UserBanned: "This user is banned",
        UserSuspended: function (dateUtc) { return "This user is suspended until ".concat(dateUtc, " UTC"); },
        ReasonC: "Reason: ",
        DeactOrDeld: "Has been deactivated or deleted.",
        isGroup: " (a group)",
        isGuest: " — a guest user, could be anyone",
        isMod: " – moderator",
        isAdmin: " – administrator",
        you: "(you)",
        // ----- Notifications page
        NoNotfs: "No notifications",
        NotfsToYouC: "Notifications to you:",
        NotfsToOtherC: function (name) { return "Notifications to ".concat(name, ":"); },
        DefNotfsSiteWide: "Default notifications, site wide",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "for",
        // ----- Drafts Etc page
        NoDrafts: "No drafts",
        YourDraftsC: "Your drafts:",
        DraftsByC: function (name) { return "Drafts by ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Here you can invite people to join this site. ",
        InvitesListedBelow: "Invites that you have already sent are listed below.",
        NoInvites: "You have not invited anyone yet.",
        InvitedEmail: "Invited email",
        WhoAccepted: "Member who accepted",
        InvAccepted: "Invitation accepted",
        InvSent: "Invitation sent",
        JoinedAlready: "Joined already",
        SendAnInv: "Invite people",
        SendInv: "Send invites",
        SendInvExpl: // MISSING I18N changed to pluralis
        "We'll send your friends a brief email. They'll click a link " +
            "to join immediately, no login required. " +
            "They'll become normal members, not moderators or admins.",
        //EnterEmail: "Enter email(s)",
        InvDone: "Done. I'll send them an email.",
        NoOneToInv: "No one to invite.",
        InvNotfLater: "I'll notify you later, when I've invited them.",
        AlreadyInvSendAgainQ: "These have been invited already — maybe you'd like to invite them again?",
        InvErr_1: "These resulted in ",
        InvErr_2: "errors",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "These have joined already, so I didn't invite them:",
        ResendInvsQ: "Re-send invitations to these people? They have been invited already.",
        InvAgain: "Invite again",
        // ----- Preferences, About
        AboutYou: "About you",
        WebLink: "Any website or page of yours.",
        NotShownCannotChange: "Not shown publicly. Cannot be changed.",
        // The full name or alias:
        NameOpt: "Name (optional)",
        NotShown: "Not shown publicly.",
        // The username:
        MayChangeFewTimes: "You may change it only a few times.",
        notSpecified: "(not specified)",
        ChangeUsername_1: "You may change your username only a few times.",
        ChangeUsername_2: "Changing it too often can make others confused — " +
            "they won't know how to @mention you.",
        NotfAboutAll: "Be notified about every new post (unless you mute the topic or category)",
        NotfAboutNewTopics: "Be notified about new topics (unless you mute the category)",
        ActivitySummaryEmails: "Activity summary emails",
        EmailSummariesToGroup: "When members of this group don't visit here, then, by default, email them " +
            "summaries of popular topics and other stuff.",
        EmailSummariesToMe: "When I don't visit here, email me " +
            "summaries of popular topics and other stuff.",
        AlsoIfTheyVisit: "Email them also if they visit here regularly.",
        AlsoIfIVisit: "Email me also if I visit here regularly.",
        HowOftenWeSend: "How often shall we send these emails?",
        HowOftenYouWant: "How often do you want these emails?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Hide your recent activity for strangers and new members?",
        HideActivityStrangers_2: "(But not for those who have been active members for a while.)",
        HideActivityAll_1: "Hide your recent activity for everyone?",
        HideActivityAll_2: "(Except for staff and trusted core members.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Email addresses",
        PrimaryDot: "Primary. ",
        VerifiedDot: "Verified. ",
        NotVerifiedDot: "Not verified. ",
        ForLoginWithDot: function (provider) { return "For login with ".concat(provider, ". "); },
        MakePrimary: "Make Primary",
        AddEmail: "Add email address",
        TypeNewEmailC: "Type a new email address:",
        MaxEmailsInfo: function (numMax) { return "(You cannot add more than ".concat(numMax, " addresses.)"); },
        EmailAdded_1: "Added. We've sent you a verification email — ",
        EmailAdded_2: "check your email inbox.",
        SendVerifEmail: "Send verification email",
        EmailStatusExpl: "('Primary' means you can login via this address, and we send notifications to it. " +
            "'Verified' means you clicked a verification link in an address verification email.)",
        // Password:
        ChangePwdQ: "Change password?",
        CreatePwdQ: "Create password?",
        WillGetPwdRstEml: "You'll get a reset password email.",
        // This is the "None" in:  "Password: None"
        PwdNone: "None",
        // Logins:
        LoginMethods: "Login methods",
        commaAs: ", as: ",
        // One's data:
        YourContent: "Your content",
        DownloadPosts: "Download posts",
        DownloadPostsHelp: "Creates a JSON file with a copy of topics and comments you've posted.",
        DownloadPersData: "Download personal data",
        DownloadPersDataHelp: "Creates a JSON file with a copy of your personal data, e.g. your name " +
            "(if you specified a name) and email address.",
        // Delete account:
        DangerZone: "Danger zone",
        DeleteAccount: "Delete account",
        DeleteYourAccountQ: "Delete your account? We'll remove your name, forget your email address, password and " +
            "any online identities (like Facebook or Twitter login). " +
            "You won't be able to login again. This cannot be undone.",
        DeleteUserQ: "Delete this user? We'll remove the name, forget the email address, password and " +
            "online identities (like Facebook or Twitter login). " +
            "The user won't be able to login again. This cannot be undone.",
        YesDelete: "Yes, delete"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Group members",
        NoMembers: "No members.",
        MayNotListMembers: "May not list members.",
        AddMembers: "Add Members",
        BuiltInCannotModify: "This is a built-in group; it cannot be modified.",
        NumMembers: function (num) { return "".concat(num, " members"); },
        YouAreMember: "You're a member.",
        CustomGroupsC: "Custom groups:",
        BuiltInGroupsC: "Built-in groups:",
        DeleteGroup: "Delete this group"
    },
    // Create user dialog
    cud: {
        CreateUser: "Create User",
        CreateAccount: "Create Account",
        EmailC: "Email:",
        keptPriv: "will be kept private",
        forNotfsKeptPriv: "for reply notifications, kept private",
        EmailVerifBy_1: "Your email has been verified by ",
        EmailVerifBy_2: ".",
        UsernameC: "Username:",
        FullNameC: "Full name:",
        optName: "optional",
        DoneLoggedIn: "Account created. You have been logged in.",
        AlmostDone: "Almost done! You just need to confirm your email address. We have " +
            "sent an email to you. Please click the link in the email to activate " +
            "your account. You can close this page."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Terms and Privacy",
        Accept_1: "Do you accept our ",
        TermsOfService: "Terms of Service",
        TermsOfUse: "Terms of Use",
        Accept_2: " and ",
        PrivPol: "Privacy Policy",
        Accept_3_User: "?",
        Accept_3_Owner: " for site owners?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Yes I accept"
    },
    // Password input
    pwd: {
        PasswordC: "Password:",
        StrengthC: "Strength: ",
        FairlyWeak: "Fairly weak.",
        toShort: "too short",
        TooShort: function (minLength) { return "Too short. Should be at least ".concat(minLength, " characters"); },
        PlzInclDigit: "Please include a digit or special character",
        TooWeak123abc: "Too weak. Don't use passwords like '12345' or 'abcde'.",
        AvoidInclC: "Avoid including (parts of) your name or email in the password:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Page not found, or Access Denied.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "You're impersonating someone, who might not have access to all parts " +
            "of this website.",
        IfYouThinkExistsThen: "If you think the page exists, log in as someone who may access it. ",
        LoggedInAlready: "(You are logged in already, but perhaps it's the wrong account?) ",
        ElseGoToHome_1: "Otherwise, you can ",
        ElseGoToHome_2: "go to the homepage.",
        CreateAcconut: "Create account",
        ContinueWithDots: "Continue with ...",
        SignUp: "הירשם",
        LogIn: "התחברות",
        LogInWithPwd: "Log in with Password",
        CreateAdmAcct: "Create admin account:",
        AuthRequired: "Authentication required to access this site",
        LogInToLike: "Log in to Like this post",
        LogInToSubmit: "Log in and submit",
        LogInToComment: "Log in to write a comment",
        LogInToCreateTopic: "Log in to create topic",
        OrLogIn_1: "Or ",
        OrLogIn_2: "Log in",
        OrLogIn_3: " instead",
        SignUpInstead_1: "",
        SignUpInstead_2: "Sign up",
        SignUpInstead_3: " instead",
        OrTypeName_1: ", or just ",
        OrTypeName_2: "type a name",
        OrTypeName_3: "",
        OrCreateAcctHere: "Or create account:",
        OrTypeName: "Or type your name:",
        OrLogIn: "Or log in:",
        YourNameQ: "Your name?",
        BadCreds: "Wrong username or password",
        UsernameOrEmailC: "Username or email:",
        PasswordC: "Password:",
        ForgotPwd: "Did you forget your password?",
        NoPwd: "You have not yet chosen a password.",
        CreatePwd: "Create password"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Please tell us what you are concerned about.",
        ThanksHaveReported: "Thanks. You have reported it. The forum staff will take a look.",
        ReportComment: "Report Comment",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "This post contains personal data, for example someones' real name.",
        OptOffensive: "This post contains offensive or abusive content.",
        OptSpam: "This post is an unwanted advertisement.",
        OptOther: "Notify staff about this post for some other reason."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "You can show help messages again, if you are logged in, by " +
            "clicking your name and then ",
        YouCanShowAgain_2: "Unhide help messages"
    },
    // Editor
    e: {
        SimilarTopicsC: "Similar topics:",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "Sorry but currently you can upload only one file at a time",
        PleaseFinishPost: "Please first finish writing your post",
        PleaseFinishChatMsg: "Please first finish writing your chat message",
        PleaseFinishMsg: "Please first finish writing your message",
        PleaseSaveEdits: "Please first save your current edits",
        PleaseSaveOrCancel: "Please first either save or cancel your new topic",
        CanContinueEditing: "You can continue editing your text, if you open the editor again.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Please don't delete all text. Write something.",
        PleaseWriteSth: "Please write something.",
        PleaseWriteTitle: "Please write a topic title.",
        PleaseWriteMsgTitle: "Please write a message title.",
        PleaseWriteMsg: "Please write a message.",
        exBold: "bold text",
        exEmph: "emphasized text",
        exPre: "preformatted text",
        exQuoted: "quoted text",
        ExHeading: "Heading",
        TitlePlaceholder: "Type a title — what is this about, in one brief sentence?",
        EditPost_1: "Edit ",
        EditPost_2: "post ",
        TypeChatMsg: "Type a chat message:",
        YourMsg: "Your message:",
        CreateTopic: "Create new topic",
        CreateCustomHtml: "Create a custom HTML page (add your own <h1> title)",
        CreateInfoPage: "Create an info page",
        CreateCode: "Create a source code page",
        AskQuestion: "Ask a question",
        ReportProblem: "Report a problem",
        SuggestIdea: "Suggest an idea",
        NewChat: "New chat channel title and purpose",
        NewPrivChat: "New private chat title and purpose",
        AppendComment: "Append a comment at the bottom of the page:",
        ReplyTo: "להגיב ל ",
        ReplyTo_theOrigPost: "the Original Post",
        ReplyTo_post: "post ",
        AddCommentC: "Add a comment:",
        PleaseSelectPosts: "Please select one or more posts to reply to.",
        Save: "Save",
        edits: "edits",
        PostReply: "פרסם תגובה",
        Post: "Post",
        comment: "comment",
        question: "question",
        PostMessage: "Post message",
        SimpleEditor: "Simple editor",
        Send: "Send",
        message: "message",
        Create: "Create",
        page: "page",
        chat: "chat",
        idea: "idea",
        topic: "topic",
        Submit: "Submit",
        problem: "problem",
        ViewOldEdits: "View old edits",
        UploadBtnTooltip: "Upload a file or image",
        BoldBtnTooltip: "Make text bold",
        EmBtnTooltip: "Emphasize",
        QuoteBtnTooltip: "Quote",
        PreBtnTooltip: "Preformatted text",
        HeadingBtnTooltip: "Heading",
        TypeHerePlaceholder: "Type here. You can use Markdown and HTML. Drag and drop to paste images.",
        Maximize: "Maximize",
        ToNormal: "Back to normal",
        TileHorizontally: "Tile horizontally",
        PreviewC: "Preview:",
        TitleExcl: " (title excluded)",
        ShowEditorAgain: "Show editor again",
        Minimize: "Minimize",
        IPhoneKbdSpace_1: "(This gray space is reserved",
        IPhoneKbdSpace_2: "for the iPhone keyboard.)",
        PreviewInfo: "Here you can preview how your post will look.",
        CannotType: "You cannot type here.",
        LoadingDraftDots: "Loading any draft...",
        DraftUnchanged: "Unchanged.",
        CannotSaveDraftC: "Cannot save draft:",
        DraftSavedBrwsr: "Draft saved, in browser.",
        DraftSaved: function (nr) { return "Draft ".concat(nr, " saved."); },
        DraftDeleted: function (nr) { return "Draft ".concat(nr, " deleted."); },
        WillSaveDraft: function (nr) { return "Will save draft ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "Saving draft ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Deleting draft ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Select category"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Select topic type:",
        DiscussionExpl: "A discussion about something.",
        QuestionExpl: "One answer can be marked as the accepted answer.",
        ProblExpl: "If something is broken or doesn't work. Can be marked as fixed/solved.",
        IdeaExpl: "A suggestion. Can be marked as done/implemented.",
        ChatExpl: "A perhaps never-ending conversation.",
        PrivChatExpl: "Only visible to people that get invited to join the chat.",
        CustomHtml: "Custom HTML page",
        InfoPage: "Info page",
        Code: "Code",
        EmbCmts: "Embedded comments",
        About: "About",
        PrivChat: "Private Chat",
        Form: "Form"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "No more communities to join.",
        SelCmty: "Select community ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Text to search for"
    },
    // No internet
    ni: {
        NoInet: "No internet connection",
        PlzRefr: "Refresh page to see any latest changes. (There was a disconnection)",
        RefrNow: "Refresh now"
    },
    PostDeleted: function (postNr) { return "That post, nr ".concat(postNr, ", has been deleted."); },
    NoSuchPost: function (postNr) { return "There's no post nr ".concat(postNr, " on this page."); },
    NoPageHere: "This page has been deleted, or it never existed, or you may not access it.",
    GoBackToLastPage: "Go back to last page"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_lv_LV = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Aktīvs",
    Activity: "Aktivitāte",
    Add: "Pievienot",
    AddingDots: "Pievieno ...",
    AddComment: "Pievienot komentāru",
    Admin: "Admins",
    AdvSearch: "Papildināta meklēšana",
    Away: "Izgājis",
    Back: "Atpakaļ",
    BlogN: "Blogs",
    Bookmarks: "Grāmatzīmes",
    Cancel: "Atcelt",
    Categories: "Kategorijas",
    Category: "Kategorija",
    ChangeV: "Mainīt",
    Continue: "Turpināt",
    ClickToShow: "Klikšķināt, lai parādītu",
    ChangeDots: "Maina ...",
    ChatN: "Čats",
    Chatting: "Tērzēšana",
    CheckYourEmail: "Pārbaudi savu e-pastu",
    Close: "Aizvērt",
    closed: "aizvērts",
    comments: "komentāri",
    Created: "Izveidots",
    Delete: "Dzēst",
    Deleted: "Dzēsts",
    DirectMessage: "Ziņojums",
    Discussion: "Diskusija",
    discussion: "diskusija",
    done: "kārtībā",
    EditV: "Labot",
    Editing: "Labo",
    EmailC: "Epasts: ",
    EmailAddress: "E-pasta adrese",
    EmailAddresses: "E-pasta adreses",
    EmailSentD: "E-pasts nosūtīts.",
    Forum: "Forums",
    GetNotifiedAbout: "Saņemt paziņojumus par",
    GroupsC: "Grupas:",
    Hide: "Slēpt",
    Home: "Sākums",
    Idea: "Ideja",
    Join: "Pievienoties",
    KbdShrtcsC: "Klaviatūras īsceļi: ",
    Loading: "Atver...",
    LoadMore: "Atvērt vēl ...",
    LogIn: "Ienākt",
    LoggedInAs: "Ienāci kā ",
    LogOut: "Iziet",
    Maybe: "Varbūt",
    Manage: "Pārvaldīt",
    Members: "Biedri",
    MessageN: "Ziņa",
    MoreDots: "Vairāk...",
    Move: "Pārvietot",
    Name: "Vārds",
    NameC: "Vārds:",
    NewTopic: "Jauna tēma",
    NoCancel: "Nē, atcelt",
    Notifications: "Paziņojumi",
    NotImplemented: "(Nav ieviests)",
    NotYet: "Vēl nē",
    NoTitle: "Nav virsraksta",
    NoTopics: "Nav tēmas.",
    Okay: "Ok",
    OkayDots: "Ok ...",
    Online: "Online",
    onePerLine: "pa vienam katram rindā",
    PreviewV: "Priekšskatījums",
    Problem: "Problēma",
    progressN: "progress",
    Question: "Jautājums",
    Recent: "Nesens",
    Remove: "Aizvākt",
    Reopen: "Atvērt",
    ReplyV: "Atbildēt",
    Replying: "Atbild",
    Replies: "Atbildes",
    replies: "atbildes",
    Save: "Saglabāt",
    SavingDots: "Saglabā ...",
    SavedDot: "Saglabāts.",
    Search: "Meklēt",
    SendMsg: "Sūtīt ziņu",
    ShowPreview: "Rādīt priekšskatījumu",
    SignUp: "Reģistrēties",
    Solution: "Risinājums",
    started: "uzsākts",
    Summary: "Kopsavilkums",
    Submit: "Apstiprināt",
    Tag: "Tag",
    Tags: "Tags",
    Tools: "Rīki",
    Topics: "Tēmas",
    TopicTitle: "Tēmas virsraksts",
    TopicType: "Tēmas tips",
    UploadingDots: "Augšupielādē...",
    Username: "Lietotājvārds",
    Users: "Lietotāji",
    Welcome: "Laipni lūdzam",
    Wiki: "Wiki",
    Yes: "Jā",
    YesBye: "Jā, uz redzi",
    YesDoThat: "Jā",
    You: "Tu",
    you: "tu",
    // Trust levels.
    Guest: "Viesis",
    NewMember: "Jauns lietotājs",
    BasicMember: "Pamata lietotājs",
    FullMember: "Pilns lietotājs",
    TrustedMember: "Uzticams lietotājs",
    RegularMember: "Uzticams regulārs",
    CoreMember: "Galvenais biedrs",
    // Periods.
    PastDay: "Iepriekšējā diena",
    PastWeek: "Iepriekšējā nedēļa",
    PastMonth: "Iepriekšējais mēnesis",
    PastQuarter: "Iepriekšējais ceturksnis",
    PastYear: "Iepriekšējais gads",
    AllTime: "Visu laiku",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "mēn",
    daysLtr: "d",
    hoursLtr: "h",
    minsLtr: "m",
    secsLtr: "s",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "pirms 1 dienas" : "".concat(numDays, " days ago");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "pirms 1 stundas" : "".concat(numHours, " hours ago");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "pirms 1 minūtes" : "".concat(numMins, " minutes ago");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "pirms 1 sekundes" : "".concat(numSecs, " seconds ago");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Epasts ir obligāts",
        NoSpcs: "Nav atļautas atstarpes",
        InvldAddr: "Nederīga epasta adrese",
        NoBadChrs: "Nav atļautas īpašas rakstzīmes",
        // Full name input field:
        NotOnlSpcs: "Nav atļautas atstarpes",
        NoAt: "Nav atļauts simbols @",
        // Username input field:
        NoDash: "Nav atļautas domuzīmes (-)",
        DontInclAt: "Neiekļaut @",
        StartEndLtrDgt: "Sākas un beidzas ar burtu vai ciparu",
        OnlLtrNumEtc: "Tikai burti (a-z, A-Z) un cipari, un _ (apakšsvītra)",
        // This shown just below the username input:
        UnUnqShrt_1: "Tavs ",
        UnUnqShrt_2: "@lietotājvārds",
        UnUnqShrt_3: ", unikāls un īss",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Par \u012Bsu - j\u0101satur vismaz ".concat(minLength, " rakstz\u012Bmes"); },
        TooLong: function (maxLength) { return "Par garu - j\u0101satur ne vair\u0101k k\u0101 ".concat(maxLength, " rakstz\u012Bmes"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Katrs ieraksts",
        EveryPostInTopic: "Tiks paziņots par visām jaunām atbildēm šajā tēmā.",
        EveryPostInCat: "Tiks paziņots par visām jaunām tēmām un atbildēm šajā sadaļā.",
        EveryPostInTopicsWithTag: "Tiks paziņots par jaunām tēmām ar šo tagu, kā arī par atbildēm šajās tēmās.",
        EveryPostWholeSite: "Tiks paziņots par pilnīgi visām jaunām tēmām un ierakstiem.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Jaunas tēmas",
        NewTopicsInCat: "Tiks paziņots par jaunām tēmām šajā sadaļā.",
        NewTopicsWithTag: "Tiks paziņots par jaunām tēmām ar šo tagu.",
        NewTopicsWholeSite: "Tiks par paziņots par pilnīgi visām jaunām tēmām.",
        Tracking: "Izsekošana",
        Normal: "Normal",
        NormalDescr: "Tiks paziņots, kad kāds uzsāks saziņu, arī netiešā veidā, piemēram - " +
            "atbildot uz tavu atbildi.",
        //NormalTopic_1: "Tiks paziņots, ja kāds uzsāks saziņu vai pieminēs tavu ",
        //NormalTopic_2: "@lietotājvārdu",
        Hushed: "Apklusināts",
        HushedDescr: "Tiks paziņots tikai tad, ja kāds tiešā veidā uzsāks saziņu.",
        Muted: "Izslēgts",
        MutedTopic: "Bez paziņojumiem."
    },
    // Forum intro text
    fi: {
        Edit: "Labot",
        Hide_1: "Slēpt",
        Hide_2: ", klikšķini ",
        Hide_3: " lai atvērtu"
    },
    // Forum categories
    fcs: {
        All: "Visas"
    },
    // Forum buttons
    fb: {
        TopicList: "Tēmu saraksts",
        // Select category dropdown
        from: "no",
        "in": "iekš",
        AllCats: "Visas sadaļas",
        // Topic sort order
        Active: "Aktīvās",
        ActiveDescr: "Rāda vispirms aktīvās tēmas",
        New: "Jaunās",
        NewDescr: "Rāda vispirms jaunās tēmas",
        Top: "Populārās",
        TopDescr: "Rāda vispirms populārās tēmas",
        // Topic filter dropdown
        AllTopics: "Visas tēmas",
        ShowAllTopics: "Rādīt visas tēmas",
        ShowAllTopicsDescr: "Dzēstās tēmas netiek rādītas",
        WaitingTopics: "Neatrisinātas tēmas",
        OnlyWaitingDescr_1: "Rāda tikai tēmas ",
        OnlyWaitingDescr_2: "gaidot ",
        OnlyWaitingDescr_3: "risinājumu vai ieviešanu",
        YourTopics: "Tavas tēmas",
        AssignedToYou: "Nodotas tavā pārraudzībā",
        DeletedTopics: "Rādīt dzēstās",
        ShowDeleted: "Rādīt dzēstās",
        ShowDeletedDescr: "Rādīt visas tēmas, ieskaitot arī dzēstās",
        // Rightmost buttons
        ViewCategories: "Skatīt sadaļas",
        EditCat: "Labot sadaļu",
        CreateCat: "Izveidot sadaļu",
        CreateTopic: "Izveidot tēmu",
        PostIdea: "Publicēt ideju",
        AskQuestion: "Uzdot jautājumu",
        ReportProblem: "Ziņot par problēmu",
        CreateMindMap: "Izveidot prāta karti",
        CreatePage: "Izveidot lapu"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Paskaidro ikonas...",
        IconExplanation: "Ikonu paskaidrojumi:",
        ExplGenDisc: "Parasta diskusija.",
        ExplQuestion: "Jautājums bez apstiprinātas atbildes.",
        ExplAnswer: "Jautājums ar apstiprinātu atbildi.",
        ExplIdea: "Ideja / ierosinājums.",
        ExplProblem: "Problēma.",
        ExplPlanned: "Plānots jaunievedums vai labojums.",
        ExplDone: "Paveikts jaunievedums vai labojums.",
        ExplClosed: "Slēgta tēma.",
        ExplPinned: "Vienmēr augšpusē rādīt atēma (varbūt tikai savā sadaļā).",
        PopularTopicsComma: "Populāras tēmas, ",
        TopFirstAllTime: "Rāda vispirms visu laiku populārākās tēmas.",
        TopFirstPastDay: "Rāda pēdējās dienās populārās tēmas.",
        CatHasBeenDeleted: "Šī sadaļa tika izdzēsta",
        TopicsActiveFirst: "Tēmas, vispirms aktīvās",
        TopicsNewestFirst: "Tēmas, vispirms jaunās",
        CreatedOn: "Izveidots ",
        LastReplyOn: "\nPēdējā atbilde ",
        EditedOn: "\nLabots ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "izveidoja šo tēmu",
        frequentPoster: "regulārs publicētājs",
        mostRecentPoster: "nesenākais publicētājs",
        inC: "in: ",
        TitleFixed: "Šis ir izlabots",
        TitleDone: "Šis ir paveikts",
        TitleStarted: "Šo mēs esam uzsākuši",
        TitleStartedFixing: "Šo mēs esam sākuši labot",
        TitleUnsolved: "Šī ir neatrisināta problēma",
        TitleIdea: "Šī ir ideja",
        TitlePlanningFix: "Šo mēs plānojam izlabot",
        TitlePlanningDo: "Šo mēs plānojam pabeikt",
        TitleChat: "Šis ir čata kanāls",
        TitlePrivateChat: "Šis ir privāts čata kanāls",
        TitlePrivateMessage: "Privāta ziņa",
        TitleInfoPage: "Šī ir info lapa",
        TitleDiscussion: "Diskusija",
        IsPinnedGlobally: "\nTas ir izcelts, lai tiktu attēlots kā pirmais.",
        IsPinnedInCat: "\nTas ir izcelts savā sadaļā, lai tiktu attēlots kā pirmais savā sadaļā."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Nesenās tēmas (ieskaitot procesā)",
        RecentTopicsInclDel: "Nesenās tēmas (ieskaitot dzēstās)",
        RecentTopics: "Nesenās tēmas",
        _replies: " atbildes",
        _deleted: " (dzēstas)",
        _defCat: " (noklusētā sadaļa)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Nesenie ieraksti",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online šajā čatā",
        NumOnlForum: " online šajā forumā",
        // Open left-sidebar button title.
        WatchbBtn: "Tavas tēmas",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Tavas nesenās tēmas, čati un ziņojumi",
        // Title shown on user profile pages.
        AbtUsr: "Par lietotāju",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Atpakaļ no lietotāja profila",
        BackFromAdm: "Atpakaļ no adminpaneļa",
        // Title shown on full text search page.
        SearchPg: "Meklēšanas lapa"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Pievienot ...",
        RecentlyViewed: "Nesen aplūkotas tēasm",
        JoinedChats: "Čati",
        ChatChannels: "Čata kanāli",
        CreateChat: "Izveidot čata kanālu",
        DirectMsgs: "Ziņojums",
        NoChats: "Nav",
        NoDirMsgs: "Nav",
        // The click-topic dropdown menu:
        TopicActions: "Tēmas opcijas",
        ViewPeopleHere: "Skatīt cilvēkus šeit",
        ViewAddRemoveMembers: "Skatīt / pievienot / noņemt biedrus",
        ViewChatMembers: "Skatīt čata biedrus",
        EditChat: "Labot čata aprakstu",
        //EditChat: "Labot čata nosaukumu un mērķi", // Keep, in case adds back edit-title input
        LeaveThisChat: "Pamest šo čatu",
        LeaveThisCommunity: "Pamest šo kopienu",
        JoinThisCommunity: "Pievienoties šai kopienai"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Nesenie kometāri šajā tēmā:",
        NoComments: "Nav komentāru.",
        YourBookmarks: "Tavas grāmatzīmes:",
        UsersOnline: "Lietotāji online:",
        UsersOnlineForum: "Lietotāj online šajā forumā:",
        UsersInThisChat: "Lietotāji šajā čatā:",
        UsersInThisTopic: "Lietotāji šajā tēmā:",
        GettingStartedGuide: "Admina gids",
        AdminGuide: "Admina gids",
        Guide: "Gigs",
        // How to hide the sidebar.
        CloseShortcutS: "Aizvērt (keyboard shortcut: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Pievienot vēl cilvēkus",
        // Shown next to one's own username, in a list of users.
        thatsYou: "tas esi tu",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Izskatās, ka tikai tu",
        YouAnd: "Tu un ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " persona," : " cilvēki,";
            var have = numStrangers === 1 ? " kura" : " kuri";
            return numStrangers + people + " nav" + have + " ienākuši";
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "Atbildes kreisajā pusē tiek kārtotas kā ",
        bestFirst: "labākās vispirms.",
        ButBelow: "Bet lejā ",
        insteadBy: " tās pašas atbildes tiek kārtotas kā ",
        newestFirst: "jaunākās vispirms.",
        SoIfLeave: "Līdz ar to, ja iziesi un atnāksi vēlāk atpakaļ, lejā atradīsi ",
        allNewReplies: "visas jaunās atbildes.",
        Click: "Klikšķini",
        aReplyToReadIt: " uz atbildes lejā, lai to izlasītu — jo lejā tiek rādīta tikai atbildes daļa."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Klikšķini, lai mainītu statusu",
        ClickToViewAnswer: "Klikšķini, lai aplūkotu atbildi",
        ViewAnswer: "Skatīt atbildi",
        ChangeStatusC: "Mainīt statusu uz:",
        ChangeCatC: "Mainīt sadaļu:",
        ChangeTopicTypeC: "Mainīt tēmas tipu:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "jautājums",
        hasAccptAns: "ir apstiprināta atbilde",
        aProblem: "problēma",
        planToFix: "plāns izlabot",
        anIdea: "ideja",
        planToDo: "plāns ieviest"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Šī forma ir ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "aizvērta; tu vairs nevari to aizpildīt un iesniegt.",
        ThisTopicClosed_1: "Šī tēma ir ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". Tu joprojām vari publicēt komentārus.",
        ThisPageDeleted: "Šī lapa ir dzēsta",
        CatDeldPageToo: "Sadaļa dzēsta, līdz ar to arī šī lapa tika izdzēsta",
        ThreadDeld: "Tēma dzēsta",
        CmntDeld: "Komentārs dzēsts",
        PostDeld: "Ieraksts dzēsts",
        DiscDeld: "Diskusija dzēsta",
        PageDeld: "Lapa dzēsta",
        TitlePendAppr: "Nosaukums gaida apstiprinājumu",
        TextPendingApproval: "Teksts gaida apstiprinājumu",
        TooltipQuestClosedNoAnsw: "Šis jautājums tika aizvērts bez nevienas apstiprinātas atbides.",
        TooltipTopicClosed: "Šī tēma ir aizvērta.",
        TooltipQuestSolved: "Šis ir atrisināts jautājums",
        TooltipQuestUnsolved: "Šis ir neatrisināts jautājums",
        StatusDone: "Pabeigts",
        TooltipProblFixed: "Šis ir izlabots",
        TooltipDone: "Šis ir pabeigts",
        StatusStarted: "Uzsākts",
        TooltipFixing: "Mēs esam sākuši šo labot",
        TooltipImplementing: "Mēs esam sākuši šo darīt",
        StatusPlanned: "Plānots",
        TooltipProblPlanned: "Mēs plānojam šo izlabot",
        TooltipIdeaPlanned: "Mēs plānojam šo paveikt",
        StatusNew: "Jauns",
        StatusNewDtl: "Jauna diskusiju tēma",
        TooltipUnsProbl: "Šī ir neatrisināta problēma",
        TooltipIdea: "Šī ir ideja",
        TooltipPersMsg: "Privāta ziņa",
        TooltipChat: "# nozīmē čata kanāls",
        TooltipPrivChat: "Šis ir privāts čata kanāls",
        TooltipPinnedGlob: "\nPiesprausts globāli.",
        TooltipPinnedCat: "\nPiepsprausts šajā sadaļā.",
        SolvedClickView_1: "Atrisināts ierakstā #",
        SolvedClickView_2: " - klikšķini, lai apskatītu",
        PostHiddenClickShow: "Ieraksts paslēpts; klikškini, lai parādītu",
        ClickSeeMoreRepls: "Klikšķini, lai parādītu vairāk atbildes",
        ClickSeeMoreComments: "Klikšķini, lai parādītu vairāk komentārus",
        ClickSeeThisComment: "Klikšķini, lai parādītu šo komentāru",
        clickToShow: "klikšķini, lai parādītu",
        ManyDisagree: "Daudzi šim nepiekrīt:",
        SomeDisagree: "Daži šim nepiekrīt:",
        CmtPendAppr: "Komentārs gaida apstiprināšanu, publicēts ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Tavs" : "The") + " komentārs lejā gaida apstiprinājumu."; },
        _and: " un",
        repliesTo: "atbildes uz",
        InReplyTo: "Atbildē uz",
        YourReplyTo: "Your reply to ",
        YourChatMsg: "Your chat message: ",
        YourDraft: "Your draft",
        YourEdits: "Your edits: ",
        YourProgrNoteC: "Your progress note:",
        aProgrNote: "a progress note: ",
        ReplyingToC: "Replying to:",
        ScrollToPrevw_1: "Scroll to ",
        ScrollToPrevw_2: "preview",
        UnfinEdits: "Unfinished edits",
        ResumeEdting: "Atsākt rediģēšanu",
        DelDraft: "Dzēst melnrakstu",
        ClickViewEdits: "Klikšķini, lai skatītu vecos labojumus",
        By: "Autors: ",
        // Discussion ...
        aboutThisIdea: "par to, kā šo ieviest šo ideju",
        aboutThisProbl: "par to, kā šo izlabot šo problēmu",
        AddProgrNote: "Pievienot progresa piezīmi",
        // Progress ...
        withThisIdea: "ieviešot šo ideju",
        withThisProbl: "labojot šo problēmu",
        withThis: "nodarbojoties ar šo"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Paziņojumi par šo tēmu:",
        // If is a direct message topic, members listed below this text.
        Msg: "Ziņa",
        SmrzRepls: "Apkopo atbildes",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "Kop\u0113jais atbil\u017Eu skaits : ".concat(numReplies, ". Aptuvenais las\u012B\u0161anas laiks: ").concat(minutes, " min\u016Btes");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Pabeigts. Kop\u0101 ".concat(numSummarized, " atbildes, no iepriek\u0161 r\u0101d\u012Bt\u0101m ").concat(numShownBefore, " atbild\u0113m.");
        }
    },
    // Post actions
    pa: {
        CloseTopic: "Aizvērt šo tēmu",
        CloseOwnQuestionTooltip: "Aizvērt šo jautājumu, ja tev vairs nav nepieciešama atbilde.",
        CloseOthersQuestionTooltip: "Aizvērt šo jautājumu, ja uz to nav nepieciešama atbilde, piemēram - ja " +
            "tā ir beztēma vai uz to ir sniegta atbilde jau kādā citā tēmā.",
        CloseToDoTooltip: "Aizvērt, ja šo nav nepieciešams ieviest vai izlabot.",
        CloseTopicTooltip: "Aizvērt šo tēmu, ja tā vairs nav aktuāla.",
        AcceptBtnExpl: "Apstiprināt šo kā atbildi",
        SolutionQ: "Risinājuns?",
        ClickUnaccept: "Klikšķināt, lai atceltu apstiprināto atbildi",
        PostAccepted: "Šis ieraksts ir apstiprināts kā atbilde",
        NumLikes: function (num) { return num === 1 ? "1 Patīk" : num + " Patīk"; },
        NumDisagree: function (num) { return num + " Nepiekrīt"; },
        NumBury: function (num) { return num === 1 ? "1 Aprakt" : num + " Aprakt"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Nevajadzīgs" : num + " Nevajadzīgs"; },
        MoreVotes: "Vairāk balsis...",
        LikeThis: "Kā šis",
        LinkToPost: "Saite uz šo ierakstu",
        Report: "Ziņot",
        ReportThisPost: "Ziņot par šo ierakstu",
        Admin: "Admins",
        DiscIx: "Diskusijas saturs",
        Disagree: "Nepiekrīt",
        DisagreeExpl: "Klikšķināt šeit, ja nepiekrīti ar šo ierakstu, vai arī lai brīdinātu citus par kļūdām.",
        Bury: "Aprakt",
        BuryExpl: "Klikšķināt, lai sakārtotu pārējos ierakstus pirms šī ieraksta. Tikai foruma komanda var redzēt tavu balsi.",
        Unwanted: "Nevajadzīgs",
        UnwantedExpl: "Ja nevēlies, lai šis ieraksts atrodas lapā. Tas samazinātu manu ticību " +
            "šī ieraksta autoram. Tikai foruma komanda var redzēt tavu balsi.",
        AddTags: "Pievienot/noņemt tagus",
        UnWikify: "Un-Wikify",
        Wikify: "Wikify",
        PinDeleteEtc: "Piespraust / Dzēst / Sadaļa ..."
    },
    // Share dialog
    sd: {
        Copied: "Nokopēts.",
        CtrlCToCopy: "Spied CTRL+C, lai nokopētu.",
        ClickToCopy: "Klikšķini, lai nokopētu saiti."
    },
    // Chat
    c: {
        About_1: "Šis ir ",
        About_2: " čata kanāls, ko izveidoja ",
        ScrollUpViewComments: "Skrollē uz augšu, lai redzētu vecākus komentārus",
        Purpose: "Mērķis:",
        edit: "labot",
        'delete': "dzēst",
        MessageDeleted: "(ziņa dzēsta)",
        JoinThisChat: "Pievienoties šim čatam",
        PostMessage: "Publicēt ziņu",
        AdvancedEditor: "Papildināts rediģētājs",
        TypeHere: "Raksti šeit. Vari izmantot Markdown un HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Nepieciešams pārskats ",
        AdminHelp: "Admina palīdzība ",
        StaffHelp: "Komandas palīdzība ",
        DraftsEtc: "Melnraksti, grāmatzīmes, uzdevumi",
        MoreNotfs: "Skatīt visus paziņojumus",
        DismNotfs: "Atzīmēt visu kā izlasītu",
        ViewProfile: "Skatīt savu profilu",
        ViewGroups: "Skatīt grupas",
        LogOut: "Iziet",
        UnhideHelp: "Parādīt palīdzības ziņojumus"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Skrollēt uz:",
        Scroll: "Skrollēt",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "",
        Back_2: "Atpakaļ (B)",
        BackExpl: "Skrollē atpakaļ uz iepriekšējo vietu šajā lapā",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Lapas augša",
        PgTopHelp: "Doties uz lapas augšu. Klaviatūras īsceļš: 1",
        Repl: "Atbildes",
        ReplHelp: "Doties uz atbilžu sadaļu. Īsceļš: 2",
        Progr: "Progress",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Doties uz progresa sadaļu. Īsceļš: 3",
        PgBtm: "Lapas leja",
        Btm: "Lejasdaļa",
        BtmHelp: "Doties uz lapas lejasdaļu. Īsceļš: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", un ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " lai skrollētu atpakaļ"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Izvēlēties lietotājus",
        AddUsers: "Pievienot lietotājus"
    },
    // About user dialog
    aud: {
        IsMod: "Ir moderators.",
        IsAdm: "Ir administrators.",
        IsDeld: "Ir deaktivizēts vai dzēsts.",
        ThisIsGuest: "Šis ir viesis, principā var būt jebkurš.",
        ViewInAdm: "Skatīt adminpanelī",
        ViewProfl: "Skatīt profilu",
        ViewComments: "Skatīt citus komentārus",
        RmFromTpc: "Izņemt no tēmas",
        EmAdrUnkn: "Epasta adrese nav zināma — šim viesim netiks paziņots par jaunām atbildēm."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Iestatījumi",
        Invites: "Uzaicinājumi",
        DraftsEtc: "Melnraksti u.tml.",
        About: "Par",
        Privacy: "Privātums",
        Security: "Drošība",
        Account: "Konts",
        Interface: "Saskarne",
        // ----- Overview stats
        JoinedC: "Pievienojās: ",
        PostsMadeC: "Izveidoti ieraksti: ",
        LastPostC: "Pēdējais ieraksts: ",
        LastSeenC: "Pēdējais apmeklējums: ",
        TrustLevelC: "Uzticamības līmenis: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Augšupielādēt attēlu",
        ChangePhoto: "Mainīt attēlu",
        ImgTooSmall: "Attēls ir pārāk mazs: minimālais izmērs ir 100 x 100",
        // ----- Activity
        OnlyStaffCanSee: "Tikai komandas biedri var šo redzēt.",
        OnlyMbrsCanSee: "Tikai aktīvi biedri var šo redzēt.",
        Nothing: "Nav nekā, ko rādīt",
        Posts: "Ieraksti",
        NoPosts: "Nav ierakstu.",
        Topics: "Tēmas",
        NoTopics: "Nav tēmu.",
        // ----- User status
        UserBanned: "Šis lietotājs ir bloķēts",
        UserSuspended: function (dateUtc) { return "\u0160is lietot\u0101js ir blo\u0137\u0113ts l\u012Bdz ".concat(dateUtc, " UTC"); },
        ReasonC: "Iemesls: ",
        DeactOrDeld: "Ir deaktivizēts vai dzēsts.",
        isGroup: " (grupa)",
        isGuest: " — viesis, var būt jebkurš",
        isMod: " – moderators",
        isAdmin: " – administrators",
        you: "(tu)",
        // ----- Notifications page
        NoNotfs: "Nav paziņojumu",
        NotfsToYouC: "Paziņojumi tev:",
        NotfsToOtherC: function (name) { return "Pazi\u0146ojumi priek\u0161 ".concat(name, ":"); },
        DefNotfsSiteWide: "Noklusējuma paziņojumi, vietne plaša",
        // The "for" in:  "Noklusējuma paziņojumi (visā lapā) ".
        forWho: "priekš",
        // ----- Drafts Etc page
        NoDrafts: "Nav melnrakstu",
        YourDraftsC: "Tavi melraksti:",
        DraftsByC: function (name) { return "Lietot\u0101ja ".concat(name, " melnraksti:"); },
        // ----- Invites page
        InvitesIntro: "Šeit vari uzaicināt lietotājus pievienoties šai saitei. ",
        InvitesListedBelow: "Zemāk ir ielūgumi, kurus esi jau izsūtījis.",
        NoInvites: "tu vēl nevienu neesi uzaicinājis.",
        InvitedEmail: "Uzaicināts epasts",
        WhoAccepted: "Akceptējušais biedrs",
        InvAccepted: "Uzaicinājums apstiprināts",
        InvSent: "Uzaicinājums nosūtīts",
        JoinedAlready: "Jau pievienojies",
        SendAnInv: "Uzaicināt cilvēkus",
        SendInv: "Sūtīt uzaicinājumus",
        SendInvExpl: // MISSING I18N changed to pluralis
        "Mēs nosūtīsim taviem draugiem īsu vēstuli, un viņiem būs jānoklikšķina uz saites " +
            "lai uzreiz pievienotos, bez ienākšanas. " +
            "Viņi kļūs par normāliem lietotājiem (un nevis moderatoriem vai admninistratoriem).",
        //EnterEmail: "Ievadīt epastu(s)",
        InvDone: "Kārtībā, tagad nosūtīšu viņiem epasta vēstuli.",
        NoOneToInv: "Nav neviena, ko uzaicināt.",
        InvNotfLater: "Paziņosim vēlāk, kad būsim viņus ielūguši.",
        AlreadyInvSendAgainQ: "Šie ir jau uzaicināti — varbūt vēlies viņus uzaicināt atkārtoti?",
        InvErr_1: "Radās ",
        InvErr_2: "kļūdas",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "Šie ir jau pievienojušies, līdz ar to netika uzaicināti:",
        ResendInvsQ: "Sūtit uzaicinājumus atkārtoti šiem cilvēkiem? Viņi jau ir uzaicināti.",
        InvAgain: "Uzaicināt atkārtoti",
        // ----- Preferences, About
        AboutYou: "Par tevi",
        WebLink: "Jebkura tava lapa.",
        NotShownCannotChange: "Nerādīt publiski - nevar tikt mainīts.",
        // The full name or alias:
        NameOpt: "Vārds (pēc izvēles)",
        NotShown: "Netiek rādīts publiski.",
        // The username:
        MayChangeFewTimes: "Vari to mainīt tikai dažas reizses.",
        notSpecified: "(nav noteikts)",
        ChangeUsername_1: "Savu lietotājvārdu vari mainīt tikai dažas reizes.",
        ChangeUsername_2: "Pārāk bieža tā mainīšana var mulsināt citus lietotājus — " +
            "viņi vairs nezinās, kā tevi @pieminēt.",
        NotfAboutAll: "Saņemt paziņojumu par katru jaunu ierakstu (kamēr vien netiek izslēgta tēma vai sadaļa)",
        NotfAboutNewTopics: "Saņemt paziņojumus par jaunām tēmām (ja vien nav apklusināta sadaļa)",
        ActivitySummaryEmails: "Aktivitāšu apkopojuma epasti",
        EmailSummariesToGroup: "Ja šīs grupas biedri neapmeklē šo vienu, tad pēc noklusējuma sūtīt viņiem e-pastu ar " +
            "populārāko tēmu apkopojumu un citām svarīgām lietām.",
        EmailSummariesToMe: "Ja es neapmeklēu šo vietu, sūtīt man e-pastu ar " +
            "populārāko tēmu apkopojumu un citām svarīgām lietām.",
        AlsoIfTheyVisit: "Sūtīt viņiem e-pastus arī tad, ja viņi šeit iegriežas regulāri.",
        AlsoIfIVisit: "Sūtīt man e-pastus arī tad, ja es šeit iegriežos regulāri.",
        HowOftenWeSend: "Cik bieži šādus e-pastu sūtīt?",
        HowOftenYouWant: "Cik bieži tu vēlies šādus e-pastus?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Paslēpt savas nesenās aktivitātes no svešiniekiem un jauniem lietotājiem?",
        HideActivityStrangers_2: "(Izņemot tos, kuri ir bijuši aktīvi jau kādu laiku.)",
        HideActivityAll_1: "Paslēpt savas nesenās aktivitātes no visiem?",
        HideActivityAll_2: "(Izņemot foruma komandas biedrus.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Epasta adreses",
        PrimaryDot: "Primārā. ",
        VerifiedDot: "Apstiprināta. ",
        NotVerifiedDot: "Nav apstiprināta. ",
        ForLoginWithDot: function (provider) { return "Ien\u0101k\u0161anai ar ".concat(provider, ". "); },
        MakePrimary: "Uzstādīt kā primāro",
        AddEmail: "Pievienot epasta adresi",
        TypeNewEmailC: "Ievadīt jaunu epasta adresi:",
        MaxEmailsInfo: function (numMax) { return "(Tu nevari pievienot vair\u0101k k\u0101 ".concat(numMax, " adreses.)"); },
        EmailAdded_1: "Pievienots. Tev tika nosūtīta apstiprinājuma vēstule — ",
        EmailAdded_2: "pārbaudi savu epastu.",
        SendVerifEmail: "Sūtīt apstiprinājuma epastu",
        EmailStatusExpl: "('Primārā: varat ar to ienākt, kā arī uz to tiek sūtīti paziņojumi. " +
            "'Apstiprināta: ir aktivizēta nosūtītā apstiprinājuma saite.)",
        // Password:
        ChangePwdQ: "Mainīt paroli?",
        CreatePwdQ: "Izveidot paroli?",
        WillGetPwdRstEml: "Saņemsi paroles atiestatīšanas epastu.",
        // This is the "None" in:  "Password: None"
        PwdNone: "Nav",
        // Logins:
        LoginMethods: "Ienākšanas veidi",
        commaAs: ", piemēram: ",
        // One's data:
        YourContent: "Tavs saturs",
        DownloadPosts: "Lejupielādēt ierakstus",
        DownloadPostsHelp: "Izveido JSON failu ar visu tevis publicēto tēmu un komentāru kopijām.",
        DownloadPersData: "Lejupielādēt privātos datus",
        DownloadPersDataHelp: "Izveido JSON failu ar visu tavu privāto datu kopijām, piemēram - tavu vārdu " +
            "(ja ir norādīts) un epasta adresi.",
        // Delete account:
        DangerZone: "Bīstama zona",
        DeleteAccount: "Dzēst kontu",
        DeleteYourAccountQ: "Dzēst savu kontu? Tiks aizvākts tavs vārds, aizmirsta epasta adrese, parole un " +
            "jebkādas online identitātes (piemēram - Facebook vai Twitter ienākšanas dati). " +
            "Nevarēsi vairs ienākt - šo darbību nevar atcelt.",
        DeleteUserQ: "Dzēst šo lietotāju? Tiks aizvākts vārds, aizmirsta epasta adrese, parole un " +
            "jebkādas online identitātes (piemēram - Facebook vai Twitter ienākšanas dati). " +
            "Šis lietotājs nevarēs vairs ienākt - šo darbību nevar atcelt.",
        YesDelete: "Jā, dzēst"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Grupas biedri",
        NoMembers: "Nav biedru.",
        MayNotListMembers: "Var nerādīt biedrus.",
        AddMembers: "Pievienot biedrus",
        BuiltInCannotModify: "Šī ir iebūvēta grupa; to nav iespējams rediģēt.",
        NumMembers: function (num) { return "".concat(num, " biedri"); },
        YouAreMember: "Tu esi biedrs.",
        CustomGroupsC: "Īpašas grupas:",
        BuiltInGroupsC: "Iebūvētas grupas:",
        DeleteGroup: "Dzēst šo grupu"
    },
    // Create user dialog
    cud: {
        CreateUser: "Izveidot lietotāju",
        CreateAccount: "Izveidot kontu",
        EmailC: "Epasts:",
        keptPriv: "tiks saglabāts privāti",
        forNotfsKeptPriv: "paziņojumiem par atbildēm, saglabāts privāti",
        EmailVerifBy_1: "Tavu epastu apstiprināja ",
        EmailVerifBy_2: ".",
        UsernameC: "Lietotājvārds:",
        FullNameC: "Pilns vārds:",
        optName: "pēc izvēles",
        //OrCreateAcct_1: "Vai ",
        //OrCreateAcct_2: "izveidot kontu",
        //OrCreateAcct_3: " ar ",
        //OrCreateAcct_4: "@lietotājvārds",
        //OrCreateAcct_5: " & parole",
        DoneLoggedIn: "Konts izveidots. Tu esi ienācis.",
        AlmostDone: "Gandrīz jau gatavs! Tev vēl tikai vajag apstiprināt savu epasta adresi. Tev tika " +
            "nosūtīta epasta vēstule. Noklikšķini uz saņemtās saites, lai aktivizētu savu kontu." +
            " Vari aizvērt šo lapu."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Nosacījumi un Privātums",
        Accept_1: "Vai piekrīti mūsu ",
        TermsOfService: "Noteikumiem",
        TermsOfUse: "Lietošanas Nosacījumiem",
        Accept_2: " un ",
        PrivPol: "Privātuma Politikai",
        Accept_3_User: "?",
        Accept_3_Owner: " vietnes īpašniekiem?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Jā, es piekrītu"
    },
    // Password input
    pwd: {
        PasswordC: "Parole:",
        StrengthC: "Drošums: ",
        FairlyWeak: "Diezgan vāja.",
        toShort: "par īsu",
        TooShort: function (minLength) { return "Par \u012Bsu - j\u0101b\u016Bt vismaz ".concat(minLength, " rakstz\u012Bmes garai"); },
        PlzInclDigit: "Iekļauj arī vismaz vienu ciparu vai simbolu",
        TooWeak123abc: "Par vāju - neizmanto tādas paroles kā '12345' vai 'abcde'.",
        AvoidInclC: "Izvairies parolē iekļaut savu vārdu vai epastu, vai to daļas:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Lapa nav atrasta vai arī nav pieejas tiesību.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "You're impersonating someone, who might not have access to all parts " +
            "of this website.",
        IfYouThinkExistsThen: "Ja domā, ka lapa pastāv, ienāc kā lietotājs ar pieeju tai. ",
        LoggedInAlready: "(Tu jau esi jau ienācis, bet varbūt ar nepareizu kontu?) ",
        ElseGoToHome_1: "Ja ne, tad vari ",
        ElseGoToHome_2: "doties uz sākumlapu.",
        CreateAcconut: "Izveidot kontu",
        ContinueWithDots: "Turpināt ar ...",
        SignUp: "Reģistrēties",
        LogIn: "Ienākt",
        LogInWithPwd: "Ienākt ar paroli",
        CreateAdmAcct: "Izveidot admina kontu:",
        AuthRequired: "Nepieciešama autorizācija, lai piekļūtu šai saitei",
        LogInToLike: "Ienāc, lai nobalsotu par šo ierakstu",
        LogInToSubmit: "Ienāc un iesūti",
        LogInToComment: "Ienāc, lai uzrakstītu komentāru",
        LogInToCreateTopic: "Ienāc, lai izveidotu tēmu",
        //AlreadyHaveAcctQ: "Tev jau ir konts? ",  // MISSING changed "Already have...?" to "You have...?"
        OrLogIn_1: "",
        OrLogIn_2: "Ienākt",
        OrLogIn_3: "",
        //NewUserQ: "Jauns lietotājs? ",
        SignUpInstead_1: "",
        SignUpInstead_2: "Reģistrēties",
        SignUpInstead_3: "",
        // MAYBE x3: viaa Google Translate
        OrTypeName_1: ", vai vienkārši ",
        OrTypeName_2: "ierakstiet savu vārdu",
        OrTypeName_3: "",
        OrCreateAcctHere: "Vai izveido kontu:",
        OrTypeName: "Vai ievadi savu vārdu:",
        OrLogIn: "Vai ienāc:",
        YourNameQ: "Tavs vārds?",
        BadCreds: "Nepareizs lietotājvārds vai parole",
        UsernameOrEmailC: "Lietotājvārds vai epasts:",
        PasswordC: "Parole:",
        ForgotPwd: "Vai aizmirsi savu paroli?",
        NoPwd: "Tu neesi vēl izvēlējies paroli.",
        CreatePwd: "Izveidot paroli"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Pastāsti, par vēlies ziņot.",
        ThanksHaveReported: "Paldies par ziņojumu, foruma komanda to izskatīs.",
        ReportComment: "Ziņojuma komentārs",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Ieraksts satur privātu informāciju, piemēram - īsto vārdu vai epastu.",
        OptOffensive: "Šis ieraksts ir rupjš vai aizskarošs.",
        OptSpam: "Šis ieraksts satur nevajadzīgu reklāmu.",
        OptOther: "Paziņot foruma komandai par šo ierakstu cita iemesla dēļ."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "Tu vari atkal rādīt palīdzības lapas, ja esi ienācis, " +
            "klik''skinot uz sava vārda un tad uz ",
        YouCanShowAgain_2: "Rādīt palīdzības ziņojumus"
    },
    // Editor
    e: {
        SimilarTopicsC: "Līdzīgas tēmas:",
        //WritingSomethingWarning: "Tu kaut ko raksti?",
        UploadMaxOneFile: "Diemžāl pašlaik vienlaicīgi tu vari augšupielādēt tikai vienu failu",
        PleaseFinishPost: "Pabeidz rakstīt savu ierakstu",
        PleaseFinishChatMsg: "Pabeidz rakstīt savu čata ziņu",
        PleaseFinishMsg: "Pabeidz vispirms savu ziņu",
        PleaseSaveEdits: "Pabeidz savu iesākto labojumu",
        PleaseSaveOrCancel: "Vispirms saglabā vai atcel savu jauno tēmu",
        CanContinueEditing: "Vari turpināt rediģēt savu tekstu, atverot rediģētāju no jauna.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Neizdzēs visu tekstu, ieraksti kaut ko.",
        PleaseWriteSth: "Ieraksti kaut ko.",
        PleaseWriteTitle: "Ieraksti tēmas nosaukumu.",
        PleaseWriteMsgTitle: "Ieraksti ziņas nosaukumu.",
        PleaseWriteMsg: "Raksti ziņu.",
        exBold: "treknrakstā",
        exEmph: "ar pasvītrojumu",
        exPre: "iepriekš formatēts",
        exQuoted: "citēts",
        ExHeading: "Virsraksts",
        TitlePlaceholder: "Ievadi nosaukumu - īsumā, par ko būs šī tēma?",
        EditPost_1: "Labot ",
        EditPost_2: "ieraksts ",
        TypeChatMsg: "Ievadi čata ziņu:",
        YourMsg: "Tava ziņa:",
        CreateTopic: "Izveidot jaunu tēmu",
        CreateCustomHtml: "Izveidot pielāgotu HTML lapu (pievienot savu <h1> nosaukumu)",
        CreateInfoPage: "Izveidot info lapu",
        CreateCode: "Izveidot izejas koda lapu",
        AskQuestion: "Uzdot jautājumu",
        ReportProblem: "Ziņot par kļūdu vai problēmu",
        SuggestIdea: "Ierosināt ideju",
        NewChat: "Jaunā čata kanāla nosaukums un mērķis",
        NewPrivChat: "Jaunā privātā čata nosaukums un mērķis",
        AppendComment: "Pievieno komentāru lapas lejasdaļā:",
        ReplyTo: "Atbildēt uz ",
        ReplyTo_theOrigPost: "oriģinālais ieraksts",
        ReplyTo_post: "ieraksts ",
        AddCommentC: "Pievieno komentāru:",
        PleaseSelectPosts: "Izvēlies vienu vai vairākus ierakstus, uz kuriem atbildēt.",
        Save: "Saglabāt",
        edits: "izmaiņas",
        PostReply: "Ieraksta atbilde",
        PostComment: "Ieraksta komentārs",
        Post: "Ieraksts",
        comment: "komentārs",
        question: "jautājums",
        PostMessage: "Publicēt ziņu",
        SimpleEditor: "Vienkāršs rediģētājs",
        Send: "Sūtīt",
        message: "ziņu",
        Create: "Izveidot",
        page: "lapu",
        chat: "čatu",
        idea: "ideju",
        topic: "tēmu",
        Submit: "Publicēt",
        problem: "problēmu",
        ViewOldEdits: "Skatīt iepriekšējos labojumus",
        UploadBtnTooltip: "Augšupielādēt failu vai attēlu",
        BoldBtnTooltip: "Pārveidot tekstu treknrakstā",
        EmBtnTooltip: "Pasvītrojums",
        QuoteBtnTooltip: "Citāts",
        PreBtnTooltip: "Iepriekš formatēts teksts",
        HeadingBtnTooltip: "Virsraksts",
        TypeHerePlaceholder: "Raksti šeit - vari izmantot Markdown and HTML. Ievelc un atlaid attēlus, lai iekopētu tos.",
        Maximize: "Maksimizēt",
        ToNormal: "Atpakaļ uz normālu",
        TileHorizontally: "Izkārtojums horizontāli",
        PreviewC: "Priekšskatījums:",
        TitleExcl: " (izņemot nosaukumu)",
        ShowEditorAgain: "Rādīt atkal rediģētāju",
        Minimize: "Minimizēt",
        IPhoneKbdSpace_1: "(Šis pelēkais laukums ir rezervēts",
        IPhoneKbdSpace_2: "iPhone klaviatūrai.)",
        PreviewInfo: "Te vari apskatīties, kā tavs ieraksts izskatīsies pēc publicēšanas.",
        CannotType: "Te nav iespējams neko ievadīt.",
        LoadingDraftDots: "Tiek atvērts melnraksts...",
        DraftUnchanged: "Bez izmaiņām.",
        CannotSaveDraftC: "Nevar saglabāt melnrakstu:",
        DraftSavedBrwsr: "Draft saved, in browser.",
        DraftSaved: function (nr) { return "Melnraksts ".concat(nr, " saglab\u0101ts."); },
        DraftDeleted: function (nr) { return "Melnraksts ".concat(nr, " izdz\u0113sts."); },
        WillSaveDraft: function (nr) { return "Melnraksts ".concat(nr, " tiks saglab\u0101ts ..."); },
        SavingDraft: function (nr) { return "Saglab\u0101 melnrakstu ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Dz\u0113\u0161 melnrakstu ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Izvēlēties sadaļu"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Izvēlēties tēmas tipu:",
        DiscussionExpl: "Diskusija par kaut ko.",
        QuestionExpl: "Viena no atbildēm var tikt atzīmēta kā apstiprināta atbilde.",
        ProblExpl: "Ja kaut kas ir salūzis vai nestrādā; var atzīmēt kā izlabotu/atrisinātu.",
        IdeaExpl: "Ieteikums; var atzīmēt kā pabeigtu/iestrādātu.",
        ChatExpl: "Iespējama nebeidzama saruna.",
        PrivChatExpl: "Redzams tikai uzaicinātiem lietotājiem.",
        CustomHtml: "Pielāgota HTML lapa",
        InfoPage: "Info lapa",
        Code: "Kods",
        EmbCmts: "Iegulti komentāri",
        About: "Par",
        PrivChat: "Privāts čats",
        Form: "Forma"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "Nav citu kopienu.",
        SelCmty: "Izvēlēties kopienu ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Meklējamais teksts"
    },
    // No internet
    ni: {
        NoInet: "Nav pieslēguma",
        PlzRefr: "Ielādēt lapu atkārtoti, lai redzētu pēdējās izmaiņas. (Bija atslēgšanās)",
        RefrNow: "Pārlādēt"
    },
    PostDeleted: function (postNr) { return "Ieraksts nr ".concat(postNr, " ir ticis izdz\u0113sts."); },
    NoSuchPost: function (postNr) { return "\u0160aj\u0101 t\u0113m\u0101 nav ieraksta nr ".concat(postNr, "."); },
    NoPageHere: "Šī lapa ir izdzēsta vai nekad nav eksistējusi, vai arī jums nav tai pieejas.",
    GoBackToLastPage: "Doties atpakaļ uz iepriekšējo lapu"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_nl_NL = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Actief",
    Activity: "Activiteit",
    Add: "Voeg toe",
    AddingDots: "Toevoegen ...",
    AddComment: "Geef commentaar",
    Admin: "Admin",
    AdvSearch: "Geavanceerd zoeken",
    Away: "Afwezig",
    Back: "Terug",
    BlogN: "Blog",
    Bookmarks: "Bladwijzers",
    Cancel: "Annuleer",
    Categories: "Categoriën",
    Category: "Categorie",
    ChangeV: "Wijzig",
    ClickToShow: "Klik om te zien",
    ChangeDots: "Wijzig ...",
    ChatN: "Chat",
    Chatting: "Chatten",
    CheckYourEmail: "E-mail nazien",
    Close: "Sluiten",
    closed: "gesloten",
    comments: "commentaren",
    Continue: "Ga verder",
    Created: "Gemaakt",
    Delete: "Verwijder",
    Deleted: "Verwijderd",
    DirectMessage: "Direct bericht",
    Discussion: "Discussie",
    discussion: "discussie",
    done: "gedaan",
    EditV: "Wijzig",
    Editing: "Wijzigen",
    EmailC: "E-mail: ",
    EmailAddress: "E-mail adres",
    EmailAddresses: "E-mail adressen",
    EmailSentD: "E-mail verzonden.",
    Forum: "Forum",
    GetNotifiedAbout: "Krijg meldingen over",
    GroupsC: "Groepen:",
    Hide: "Verberg",
    Home: "Begin",
    Idea: "Idee",
    Join: "Neem deel",
    KbdShrtcsC: "Toetsenbord shortcuts: ",
    Loading: "Laden...",
    LoadMore: "Toon meer ...",
    LogIn: "Log In",
    LoggedInAs: "Ingelogd als ",
    LogOut: "Log uit",
    Maybe: "Misschien",
    Manage: "Beheer",
    Members: "Leden",
    MessageN: "Bericht",
    MoreDots: "Meer...",
    Move: "Verhuis",
    Name: "Naam",
    NameC: "Naam:",
    NewTopic: "Nieuw onderwerp",
    NoCancel: "Nee, annuleer",
    Notifications: "Meldingen",
    NotImplemented: "(Niet geïmplementeerd)",
    NotYet: "Nog niet",
    NoTitle: "Geen titel",
    NoTopics: "Geen onderwerpen.",
    Okay: "Ok",
    OkayDots: "Ok ...",
    Online: "Online",
    onePerLine: "één per lijn",
    PreviewV: "Voorbeeld",
    Problem: "Probleem",
    progressN: "vooruitgang",
    Question: "Vraag",
    Recent: "Recent",
    Remove: "Verwijder",
    Reopen: "Heropenen",
    ReplyV: "Antwoord",
    Replying: "Antwoorden",
    Replies: "Antwoorden",
    replies: "antwoorden",
    Save: "Bewaar",
    SavingDots: "Bewaren ...",
    SavedDot: "Bewaard.",
    Search: "Zoek",
    SendMsg: "Bericht versturen",
    ShowPreview: "Toon voorbeeld",
    SignUp: "Registreer",
    Solution: "Oplossing",
    started: "Begonnen",
    Summary: "Overzicht",
    Submit: "Verzenden",
    Tag: "Tag",
    Tags: "Tags",
    Tools: "Gereedschap",
    Topics: "Onderwerpen",
    TopicTitle: "Onderwerp titel",
    TopicType: "Onderwerp type",
    UploadingDots: "Opladen...",
    Username: "Gebruikersnaam",
    Users: "Gebruikers",
    Welcome: "Welkom",
    Wiki: "Wiki",
    Yes: "Ja",
    YesBye: "Ja, tot ziens",
    YesDoThat: "Ja, doe dit",
    You: "U",
    you: "u",
    // Trust levels.
    Guest: "Gast",
    NewMember: "Nieuw lid",
    BasicMember: "Basis lid",
    FullMember: "Volledig lid",
    TrustedMember: "Vertrouwd lid",
    RegularMember: "Vertrouwd regelmatig",
    CoreMember: "Kern lid",
    // Periods.
    PastDay: "Gisteren",
    PastWeek: "Verleden week",
    PastMonth: "Verleden maand",
    PastQuarter: "Verleden kwartaal",
    PastYear: "Verleden jaar",
    AllTime: "Altijd",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "m",
    daysLtr: "d",
    hoursLtr: "u",
    minsLtr: "min",
    secsLtr: "sec",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "1 dag geleden" : "".concat(numDays, " dagen geleden");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1 uur geleden" : "".concat(numHours, " uren geleden");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1 minuut geleden" : "".concat(numMins, " minuten geleden");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1 second geleden" : "".concat(numSecs, " seconden geleden");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "E-mail vereist",
        NoSpcs: "Gelieve geen spaties te gebruiken",
        InvldAddr: "Geen geldig e-mail adres",
        NoBadChrs: "Gelieve geen vreemde tekens te gebruiken",
        // Full name input field:
        NotOnlSpcs: "Niet enkel spaties gebruiken",
        NoAt: "Gelieve geen @ gebruiken",
        // Username input field:
        NoDash: "Gelieve geen (-) gebruiken",
        DontInclAt: "Zonder de @",
        StartEndLtrDgt: "Start and end with a letter or a digit",
        OnlLtrNumEtc: "Alleen letters (a-z, A-Z) en nummers, en _ (laag streepje)",
        // This shown just below the username input:
        UnUnqShrt_1: "Uw ",
        UnUnqShrt_2: "@gebruikersnaam",
        UnUnqShrt_3: ", uniek en kort",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Moet minimum ".concat(minLength, " karakters bevatten"); },
        TooLong: function (maxLength) { return "Te lang. Mag maximum ".concat(maxLength, " karakters bevatten"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Elk bericht",
        EveryPostInTopic: "U zal een melding krijgen voor elk nieuw antwoord in dit onderwerp.",
        EveryPostInCat: "U zal een melding krijgen voor alle nieuwe onderwerpen en antwoorden, in deze categorie.",
        EveryPostInTopicsWithTag: "U zal een melding krijgen voor alle nieuwe onderwerpen met deze tag, en alle antwoorden in deze onderwerpen.",
        EveryPostWholeSite: "U zal een melding krijgen voor alle nieuwe onderwerpen en alle antwoorden, overal.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Nieuwe onderwerpen",
        NewTopicsInCat: "U zal een notificatie krijgen voor alle nieuwe onderwerpen in deze categorie.",
        NewTopicsWithTag: "U zal een melding krijgen voor alle nieuwe onderwerpen met deze tag.",
        NewTopicsWholeSite: "U zal een melding krijgen voor alle nieuwe onderwerpen, overal.",
        Tracking: "Tracking",
        Normal: "Normaal",
        NormalDescr: "U zal een melding krijgen als iemand met U praat, alsook indirect, bijv. een " +
            "antwoord op een uw antwoord.",
        //NormalTopic_1: "You'll be notified if someone talks to you, or mentions your ",
        //NormalTopic_2: "@name",
        Hushed: "Beperkt",
        HushedDescr: "U zal een melding krijgen, alleen als iemand rechtstreeks met u praat.",
        Muted: "Geen",
        MutedTopic: "Geen meldingen."
    },
    // Forum intro text
    fi: {
        Edit: "Bewerk",
        Hide_1: "Verberg",
        Hide_2: ", klik ",
        Hide_3: " heropenen"
    },
    // Forum categories
    fcs: {
        All: "Alle"
    },
    // Forum buttons
    fb: {
        TopicList: "Onderwerpen lijst",
        // Select category dropdown
        from: "van",
        "in": "in",
        AllCats: "Alle categorieën",
        // Topic sort order
        Active: "Recent actieve eerst",
        ActiveDescr: "Toont de recent actieve onderwerpen eerst",
        New: "Nieuw",
        NewDescr: "Toont de nieuwste onderwerpen eerst",
        Top: "Populair",
        TopDescr: "Toont de populairste onderwerpen eerst",
        // Topic filter dropdown
        AllTopics: "Alle onderwerpen",
        ShowAllTopics: "Toon alle onderwerpen",
        ShowAllTopicsDescr: "Evenwel niet verwijderde onderwerpen",
        WaitingTopics: "Onderwerpen in afwachting",
        OnlyWaitingDescr_1: "Toon alleen onderwerpen ",
        OnlyWaitingDescr_2: "wachtend ",
        OnlyWaitingDescr_3: "op een oplossing of geïmplementeerd te worden",
        YourTopics: "Uw onderwerpen",
        AssignedToYou: "Toegewezen aan jou",
        DeletedTopics: "Toon verwijderde",
        ShowDeleted: "Toon verwijderde",
        ShowDeletedDescr: "Toont alle onderwerpen, inclusief verwijderde",
        // Rightmost buttons
        ViewCategories: "Overzicht categorieën",
        EditCat: "Bewerk categorie",
        CreateCat: "Maak categorie",
        CreateTopic: "Maak onderwerp",
        PostIdea: "Waar denk u aan",
        AskQuestion: "Stel een vraag",
        ReportProblem: "Meld een probleem",
        CreateMindMap: "Maak een Mind Map",
        CreatePage: "Maak pagina"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Uitleg icons...",
        IconExplanation: "Icon uitleg:",
        ExplGenDisc: "Een algemene discussie.",
        ExplQuestion: "Een vraag zonder aanvaard antwoord.",
        ExplAnswer: "Een vraag met een aanvaard antwoord.",
        ExplIdea: "Een idee / suggestie.",
        ExplProblem: "Een probleem.",
        ExplPlanned: "Iets dat we plannen om te doen of te herstellen.",
        ExplDone: "Iets dat gedaan of hersteld werd.",
        ExplClosed: "Onderwerp gesloten.",
        ExplPinned: "Onderwerp altijd bovenaan (misschien alleen in zijn eigen categorie).",
        PopularTopicsComma: "Populaire onderwerpen, ",
        TopFirstAllTime: "Toont de populaire onderwerpen eerst, altijd.",
        TopFirstPastDay: "Toont de populaire onderwerpen van de verleden dag.",
        CatHasBeenDeleted: "Deze categorie werd verwijderd",
        TopicsActiveFirst: "Onderwerpen, recent actieve eerst",
        TopicsNewestFirst: "Onderwerpen, nieuw eerst",
        CreatedOn: "Gemaakt op ",
        LastReplyOn: "\nLaatste antwoord op ",
        EditedOn: "\nGwijzigd op ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "maakte het onderwerp",
        frequentPoster: "frequente poster",
        mostRecentPoster: "meest recente poster",
        inC: "in: ",
        TitleFixed: "Dit werd hersteld",
        TitleDone: "Dit werd gedaan",
        TitleStarted: "We zijn hiermee begonnen",
        TitleStartedFixing: "We zijn begonnen met de herstelling",
        TitleUnsolved: "Dit is een niet opgelost probleem",
        TitleIdea: "Dit is een idee",
        TitlePlanningFix: "We gaan dit herstellen",
        TitlePlanningDo: "We gaan dit doen",
        TitleChat: "Dit is een chat kanaal",
        TitlePrivateChat: "Dit is een privé chat kanaal",
        TitlePrivateMessage: "Een privé bericht",
        TitleInfoPage: "Dit is een info pagina",
        TitleDiscussion: "Een discussie",
        IsPinnedGlobally: "\nHet werd gepind, dus het staat bovenaan.",
        IsPinnedInCat: "\nHet werd gepind in de categorie, dus het staat bovenaan in de categorie."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Recente onderwerpen (die wachten)",
        RecentTopicsInclDel: "Recente onderwerpen (inclusief verwijderde)",
        RecentTopics: "Recente onderwerpen",
        _replies: " antwoorden",
        _deleted: " (verwijderd)",
        _defCat: " (standaard categorie)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Recente berichten",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online in deze chat",
        NumOnlForum: " online in dit forum",
        // Open left-sidebar button title.
        WatchbBtn: "Uw onderwerpen",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Uw recente onderwerpen, toegetreden chats, directe berichten",
        // Title shown on user profile pages.
        AbtUsr: "Over gebruiker",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Terug naar gebruikers profiel",
        BackFromAdm: "Terug naar admin omgeving",
        // Title shown on full text search page.
        SearchPg: "Zoek pagina"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Voeg toe ...",
        RecentlyViewed: "Recent bekeken onderwerpen",
        JoinedChats: "Deelgenomen Chats",
        ChatChannels: "Chat kanalen",
        CreateChat: "Maak chat kanaal",
        DirectMsgs: "Directe berichten",
        NoChats: "Geen",
        NoDirMsgs: "Geen",
        // The click-topic dropdown menu:
        TopicActions: "Onderwerp acties",
        ViewPeopleHere: "Overzicht personen",
        ViewAddRemoveMembers: "Overzicht / toevoegen / verwijder leden",
        ViewChatMembers: "Overzicht chat leden",
        EditChat: "Bewerk chat omschrijving",
        //EditChat: "Edit chat title and purpose", // Keep, in case adds back edit-title input
        LeaveThisChat: "Verlaat deze chat",
        LeaveThisCommunity: "Verlaat deze gemeenschap",
        JoinThisCommunity: "Deelnemen aan deze gemeenschap"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Recente opmerkingen in dit onderwerp:",
        NoComments: "Geen opmerkingen.",
        YourBookmarks: "Uw boekwijzers:",
        UsersOnline: "Gebruikers online:",
        UsersOnlineForum: "Gebruikers online in dit forum:",
        UsersInThisChat: "Gebruikers in deze chat:",
        UsersInThisTopic: "Gebruikers in dit onderwerp:",
        GettingStartedGuide: "Admin gids",
        AdminGuide: "Admin gids",
        Guide: "Gids",
        // How to hide the sidebar.
        CloseShortcutS: "Sluit (keyboard shortcut: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Meer personen toevoegen",
        // Shown next to one's own username, in a list of users.
        thatsYou: "dat bent u",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "U bent hier blijkbaar alleen",
        YouAnd: "U, en ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " persoon" : " personen";
            //const have = numStrangers === 1 ? "heeft" : "hebben";
            var zijn = numStrangers === 1 ? "is" : "zijn";
            return numStrangers + people + " die niet ingelogd" + zijn;
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "De antwoorden links zijn gesorteerd volgens ",
        bestFirst: "beste-eerst.",
        ButBelow: "Maar beneden ",
        insteadBy: " dezelfde antwoorden zijn in plaats daarvan gesorteerd volgens ",
        newestFirst: "nieuwste-eerst.",
        SoIfLeave: "Indien u verlaat en later terug komt, vind u hieronder ",
        allNewReplies: "alle nieuwe antwoorden.",
        Click: "Klik",
        aReplyToReadIt: " een antwoord hieronder om te lezen — omdat er alleen een uittreksel getoond wordt, onderaan."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Klik om status te wijzigen",
        ClickToViewAnswer: "Klik om het antwoord te zien",
        ViewAnswer: "Antwoord zien",
        ChangeStatusC: "Verander status naar:",
        ChangeCatC: "Verander categorie:",
        ChangeTopicTypeC: "Verander onderwerp type:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "een vraag",
        hasAccptAns: "heeft een aanvaard antwoord",
        aProblem: "een probleem",
        planToFix: "plan om te herstellen",
        anIdea: "een idee",
        planToDo: "plan om te doen"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Dit formulier werd ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "gesloten; u kan het niet langer invullen noch er berichten in plaatsen.",
        ThisTopicClosed_1: "Dit onderwerp werd ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". U kan nog opmerkingen plaatsen.",
        ThisPageDeleted: "Deze pagina werd verwijderd",
        CatDeldPageToo: "Ze behoorde tot een verwijderde categorie, dus deze pagina is ook verwijderd",
        ThreadDeld: "Draad verwijderd",
        CmntDeld: "Opmerking verwijderd",
        PostDeld: "Bericht verwijderd",
        DiscDeld: "Discussie verwijderd",
        PageDeld: "Pagina verwijderd",
        PagePendAppr: "Pagina wachtend op goedkeuring",
        TitlePendAppr: "Titel wachtend op goedkeuring",
        TextPendingApproval: "Tekst wachtend op goedkeuring",
        TooltipQuestClosedNoAnsw: "Deze vraag werd afgesloten zonder een aanvaard antwoord.",
        TooltipTopicClosed: "Dit onderwerp is gesloten.",
        TooltipQuestSolved: "Deze vraag werd opgelost",
        TooltipQuestUnsolved: "Deze vraag is niet opgelost",
        StatusDone: "Gedaan",
        TooltipProblFixed: "Dit werd hersteld",
        TooltipDone: "Dit werd gedaan",
        StatusStarted: "Gestart",
        TooltipFixing: "We zijn begonnen met de herstelling",
        TooltipImplementing: "We begonnen met de implementatie",
        StatusPlanned: "Gepland",
        TooltipProblPlanned: "We gaan dit herstellen",
        TooltipIdeaPlanned: "We gaan dit doen",
        StatusNew: "Nieuw",
        StatusNewDtl: "Nieuw onderwerp, onder discussie",
        TooltipUnsProbl: "Dit is een niet opgelost probleem",
        TooltipIdea: "Dit is een idee",
        TooltipPersMsg: "Persoonlijk bericht",
        TooltipChat: "# betekent chat kanaal",
        TooltipPrivChat: "Dit is een privé chat kanaal",
        TooltipPinnedGlob: "\nGlobaal gepind.",
        TooltipPinnedCat: "\nGepind in deze categorie.",
        SolvedClickView_1: "Opgelost in bericht #",
        SolvedClickView_2: ", klik om te zien",
        PostHiddenClickShow: "Bericht verborgen; klik om te tonen",
        ClickSeeMoreRepls: "Toon meer antwoorden",
        ClickSeeMoreComments: "Toon meer opmerkingen",
        ClickSeeThisComment: "Klik om deze opmerking te tonen",
        clickToShow: "klik om te tonen",
        ManyDisagree: "Velen zijn niet akkoord met:",
        SomeDisagree: "Sommigen zijn niet akkoord met:",
        PendAppr: "Wachtend op goedkeuring",
        CmtPendAppr: "Opmerking in afwachting goedkeuring, gepost ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Uw" : "De") + " onderstaande opmerking is in afwachting van goedkeuring."; },
        _and: " en",
        repliesTo: "antwoorden op",
        InReplyTo: "In antwoord op",
        YourReplyTo: "Uw antwoord op ",
        YourChatMsg: "Uw chat bericht: ",
        YourDraft: "Uw concept",
        YourEdits: "Uw bewerkingen: ",
        YourProgrNoteC: "Uw vooruitgang nota:",
        aProgrNote: "een vooruitgang nota: ",
        ReplyingToC: "Antwoorden op:",
        ScrollToPrevw_1: "Scroll naar ",
        ScrollToPrevw_2: "voorbeeld",
        UnfinEdits: "Niet beëindigde bewerkingen",
        ResumeEdting: "Hervat bewerken",
        DelDraft: "Verwijder concept",
        ClickViewEdits: "Klik om oude bewerkingen te zien",
        By: "Door ",
        // Discussion ...
        aboutThisIdea: "over als en hoe we dit idee uitvoeren",
        aboutThisProbl: "over als en hoe we dit gaan herstellen",
        AddProgrNote: "Voeg vooruitgang nota toe",
        // Progress ...
        withThisIdea: "met de uitvoering van dit idee",
        withThisProbl: "met de afhandeling van dit probleem",
        withThis: "met de uitvoering van dit"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Meldingen over dit onderwerp:",
        // If is a direct message topic, members listed below this text.
        Msg: "Bericht",
        SmrzRepls: "Samenvatting antwoorden",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "Aantal antwoorden = ".concat(numReplies, " . Geschatte leestijd: ").concat(minutes, " minutes");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Gedaan. Samengevat ".concat(numSummarized, " antwoorden, van de ").concat(numShownBefore, " voordien getoonde antwoorden.");
        }
    },
    // Post actions
    pa: {
        CloseTopic: "Sluit onderwerp",
        CloseOwnQuestionTooltip: "Sluit deze vraag als u geen antwoord meer nodig hebt.",
        CloseOthersQuestionTooltip: "Sluit deze vraag als het geen antwoord nodig heeft, bijv. als " +
            "het buiten het onderwerp valt of reeds beantwoord werd in een ander onderwerp.",
        CloseToDoTooltip: "Sluit deze To-Do als het niet moet gedaan of hersteld worden.",
        CloseTopicTooltip: "Sluit dit onderwerp als het verder overwogen moet worden.",
        AcceptBtnExpl: "Aanvaard dit als een antwoord op de vraag of het probleem",
        SolutionQ: "Oplossing?",
        ClickUnaccept: "Klik om aanvaarden van het antwoord ongedaan te maken",
        PostAccepted: "Deze post werd aanvaard als antwoord",
        NumLikes: function (num) { return num === 1 ? "1 Vind-ik-leuk" : num + " Vind-ik-leuks"; },
        NumDisagree: function (num) { return num + " Oneens"; },
        NumBury: function (num) { return num === 1 ? "1 Begraving" : num + " Begravingen"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Ongewenst" : num + " Ongewenste"; },
        MoreVotes: "Meer stemmen...",
        LikeThis: "Zoals dit",
        LinkToPost: "Link naar deze post",
        Report: "Rapport",
        ReportThisPost: "Rapporteer deze post",
        Admin: "Admin",
        DiscIx: "Discussies index",
        Disagree: "Oneens",
        DisagreeExpl: "Klik hier als u oneens bent met deze post, of om anderen te waarschuwen voor feitelijke fouten.",
        Bury: "Begraven",
        BuryExpl: "Klik om andere posts voor deze te sorteren. Alleen forummedewerkers kunnen uw stem zien.",
        Unwanted: "Ongewenst",
        UnwantedExpl: "Als u deze post niet op deze website wilt. Dit kan mijn vertrouwen verkleinen " +
            "in de auteur van deze post author. Alleen forummedewerkers kunnen uw stem zien.",
        AddTags: "Toevoegen/verwijderen tags",
        UnWikify: "Un-Wikify",
        Wikify: "Wikify",
        PinDeleteEtc: "Pin / Verwijder / Categorie ..."
    },
    // Share dialog
    sd: {
        Copied: "Gekopieerd.",
        CtrlCToCopy: "CTRL+C om te kopiëren.",
        ClickToCopy: "Klik om link te kopiëren."
    },
    // Chat
    c: {
        About_1: "Dit is het ",
        About_2: " chat kanaal, gemaakt door ",
        ScrollUpViewComments: "Omhoog scrollen om oudere opmerkingen te zien",
        Purpose: "Doel:",
        edit: "bewerk",
        'delete': "verwijder",
        MessageDeleted: "(Bericht verwijderd)",
        JoinThisChat: "Doe mee aan deze chat",
        PostMessage: "Post bericht",
        AdvancedEditor: "Geavanceerde editor",
        TypeHere: "Typ hier. Je kan Markdown en HTML gebruiken."
    },
    // My Menu
    mm: {
        NeedsReview: "Moet worden herzien ",
        AdminHelp: "Admin help ",
        StaffHelp: "Forummedewerkers help ",
        DraftsEtc: "Concepten, boekwijzers, taken",
        MoreNotfs: "Alle meldingen bekijken",
        DismNotfs: "Alles als gelezen markeren",
        ViewProfile: "Uw profiel bekijken",
        ViewGroups: "Bekijk groepen",
        LogOut: "Uitloggen",
        UnhideHelp: "Toon help berichten"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Scrollen naar:",
        Scroll: "Scrollen",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "B",
        Back_2: "ack",
        BackExpl: "Scroll back naar uw voorgaande positie op deze pagina",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Pagina bovenkant",
        PgTopHelp: "Ga naar de bovenkant van de pagina. Toetsenbord shortcut: 1",
        Repl: "Antwoorden",
        ReplHelp: "Ga naar de antwoorden sectie. Shortcut: 2",
        Progr: "Vooruitgang",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Ga naar de vooruitgang sectie. Shortcut: 3",
        PgBtm: "Pagina onderkant",
        Btm: "Onderkant",
        BtmHelp: "Ga naar de onderkant van de pagina. Shortcut: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", en ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " om terug te scrollen"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Gebruikers selecteren",
        AddUsers: "Gebruikers toevoegen"
    },
    // About user dialog
    aud: {
        IsMod: "Is moderator.",
        IsAdm: "Is administrator.",
        IsDeld: "Is gedeactiveerd of verwijderd.",
        ThisIsGuest: "Dit is een gast, het kan iedereen zijn.",
        ViewInAdm: "Admin omgeving bekijken",
        ViewProfl: "Profiel bekijken",
        ViewComments: "Andere opmerkingen bekijken",
        RmFromTpc: "Uit het onderwerp verwijderen",
        EmAdrUnkn: "Onbekend e-mail adres — deze gast zal geen meldingen krijgen over de antwoorden."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Voorkeuren",
        Invites: "Uitnodigingen",
        DraftsEtc: "Concepten etc",
        About: "Over",
        Privacy: "Privacy",
        Security: "Veiligheid",
        Account: "Account",
        Interface: "Interface",
        // ----- Overview stats
        JoinedC: "Deel genomen: ",
        PostsMadeC: "Gepost: ",
        LastPostC: "Laatste post: ",
        LastSeenC: "Laatst gezien: ",
        TrustLevelC: "Vertrouwings niveau: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Foto uploaden",
        ChangePhoto: "Foto kiezen",
        ImgTooSmall: "Afbeelding te klein: moet ten minste 100 x 100 zijn",
        // ----- Activity
        OnlyStaffCanSee: "Alleen forummedewerkers en vertrouwde kernleden kunnen dit zien.",
        OnlyMbrsCanSee: "Alleen mensen die een tijdje actief waren kunnen dit zien.",
        Nothing: "Niets om te tonen",
        Posts: "Posts",
        NoPosts: "Geen posts.",
        Topics: "Onderwerpen",
        NoTopics: "Geen onderwerpen.",
        // ----- User status
        UserBanned: "Deze gebruiker werd uitgesloten",
        UserSuspended: function (dateUtc) { return "Deze gebruiker werd geschorst tot ".concat(dateUtc, " UTC"); },
        ReasonC: "Reden: ",
        DeactOrDeld: "Werd gedesactiveerd or verwijderd.",
        isGroup: " (een groep)",
        isGuest: " — een gast gebruiker, kan iedereen zijn",
        isMod: " – moderator",
        isAdmin: " – administrator",
        you: "(U)",
        // ----- Notifications page
        NoNotfs: "Geen meldingen",
        NotfsToYouC: "Meldingen aan u:",
        NotfsToOtherC: function (name) { return "Meldingen aan ".concat(name, ":"); },
        DefNotfsSiteWide: "Standaard meldingen, volledige site",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "voor",
        // ----- Drafts Etc page
        NoDrafts: "Geen concepten",
        YourDraftsC: "Uw concepten:",
        DraftsByC: function (name) { return "Concepten van ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Hier kan je mensen uitnodigen om deel te nemen aan deze site. ",
        InvitesListedBelow: "Reeds verstuurde uitnodingingen staan hieronder.",
        NoInvites: "U hebt nog niemand uitgenodigd.",
        InvitedEmail: "Uitgenodigd e-mail",
        WhoAccepted: "Aanvaard door lid",
        InvAccepted: "Uitnodiging aanvaard",
        InvSent: "Uitnodiging verstuurd",
        JoinedAlready: "Deelnemend",
        SendAnInv: "Nodig uit",
        SendInv: "Uitnoding versturen",
        SendInvExpl: // MISSING I18N changed to pluralis
        "Al uw vrienden krijgen een e-mail, met een link." +
            "onmiddellijk deelnemen, geen login vereist. " +
            "Ze worden gewone leden, geen moderators of admins.",
        //EnterEmail: "Enter email(s)",
        InvDone: "Gedaan. Ik verstuur ze een e-mail.",
        NoOneToInv: "Niemand om uit te nodigen.",
        InvNotfLater: "Ik stuur u een melding, als ik ze uitgenodigd heb.",
        AlreadyInvSendAgainQ: "Deze werden reeds uitgenodigd — wilt u ze  opnieuw uitnodigen?",
        InvErr_1: "Dit gaf ",
        InvErr_2: "foutmeldingen",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "Deze zijn al deelnemers, ze werden niet opnieuw uitgenodigd:",
        ResendInvsQ: "Uitnodigingen opnieuw versturen aan deze personen? Ze werden reeds uitgenodigd.",
        InvAgain: "Opnieuw uitnodigen",
        // ----- Preferences, About
        AboutYou: "Over u",
        WebLink: "Elke website of pagina van u.",
        NotShownCannotChange: "Niet publiek getoond. Kan niet gewijzigd worden.",
        // The full name or alias:
        NameOpt: "Naam (optioneel)",
        NotShown: "Niet publiek getoond.",
        // The username:
        MayChangeFewTimes: "U mag deze maar enkele keren wijzigen.",
        notSpecified: "(niet gespecifieerd)",
        ChangeUsername_1: "U mag uw gebruikersnaam maar enkele keren wijzigen.",
        ChangeUsername_2: "Het teveel wijzigen kan verwarringen teweeg brengen — " +
            "men zal niet meer weten hoe u te @vernoemen.",
        NotfAboutAll: "Krijg melding over elke nieuwe post (tenzij meldingen uitgeschakeld zijn voor het onderwerp of categorie)",
        NotfAboutNewTopics: "Krijg melding over nieuwe onderwerpen (tenzij meldingen uitgeschakeld zijn voor deze categorie)",
        ActivitySummaryEmails: "E-mails met activiteitenoverzicht",
        EmailSummariesToGroup: "Als leden van deze groep hier niet bezoeken, stuur ze standaard een e-mail " +
            "overzichten van populaire onderwerpen en andere dingen.",
        EmailSummariesToMe: "Als ik hier niet bezoek, stuur me een e-mail " +
            "overzichten van populaire onderwerpen en andere dingen.",
        AlsoIfTheyVisit: "Stuur ook een e-mail als ze regelmatige bezoekers zijn.",
        AlsoIfIVisit: "Stuur me ook een e-mail als ik hier regelmatig kom.",
        HowOftenWeSend: "Hoe dikwijls dienen we dezz e-mails te versturen?",
        HowOftenYouWant: "Hoe dikwijls wenst u deze e-mails te ontvangen?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Uw recente activiteiten voor vreemden en nieuwe leden verbergen?",
        HideActivityStrangers_2: "(Maar voor de leden die een tijdje actief waren.)",
        HideActivityAll_1: "Uw recente activiteit voor iedereen verbergen?",
        HideActivityAll_2: "(Behalve voor forummedewerkers en vertrouwde kernleden.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "E-mail adressen",
        PrimaryDot: "Primair. ",
        VerifiedDot: "Gecontroleerd. ",
        NotVerifiedDot: "Niet gecontroleerd. ",
        ForLoginWithDot: function (provider) { return "Om in te loggen met ".concat(provider, ". "); },
        MakePrimary: "Primair maken",
        AddEmail: "E-mail adres toevoegen",
        TypeNewEmailC: "Typ een nieuw e-mail adres:",
        MaxEmailsInfo: function (numMax) { return "(Niet meer dan ".concat(numMax, " adressen toevoegen.)"); },
        EmailAdded_1: "Toegevoegd. We hebben u een e-mail gestuurd ter controle — ",
        EmailAdded_2: "check uw e-mail postvak IN.",
        SendVerifEmail: "Verzend verificatie e-mail",
        EmailStatusExpl: "('Primair' betekent dat u kan inloggen via dit adres, en we sturen er meldingen naar. " +
            "'Gecontroleerd' betekent dat u op de verificatie link geklikt hebt in de verificatie mail.)",
        // Password:
        ChangePwdQ: "Wijzig wachtwoord?",
        CreatePwdQ: "Maak wachtwoord?",
        WillGetPwdRstEml: "U zal een e-mail krijgen om het wachtwoord te resetten.",
        // This is the "None" in:  "Password: None"
        PwdNone: "Geen",
        // Logins:
        LoginMethods: "Inlog methoden",
        commaAs: ", als: ",
        // One's data:
        YourContent: "Uw inhoud",
        DownloadPosts: "Posts downloaden",
        DownloadPostsHelp: "Maakt een JSON bestand met een kopie van onderwerpen en reacties dat je gepost hebt.",
        DownloadPersData: "Persoonlijke data downloaden",
        DownloadPersDataHelp: "Maakt een JSON bestand met een kopie van uw persoonlijke dat, bijv. uw naam " +
            "(indien u een naam vermeldde) en een e-mail adres.",
        // Delete account:
        DangerZone: "Gevaren zone",
        DeleteAccount: "Verwijder account",
        DeleteYourAccountQ: "Uw account verwijderen? We verwijderen uw naam, vergeten uw e-mail adres, wachtwoord en " +
            "alle online identificaties (zoals Facebook of Twitter login). " +
            "U hierna niet meer inloggen. U kunt dit niet ongedaan maken.",
        DeleteUserQ: "Deze gebruiker verwijderen? We verwijderen de naam, vergeten het e-mail adres, wachtwoord en " +
            "alle online identificaties (zoals Facebook of Twitter login). " +
            "De gebruiker kan hierna niet meer inloggen. Dit niet ongedaan gemaakt worden.",
        YesDelete: "JA, verwijderen"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Groepsleden",
        NoMembers: "Geen leden.",
        MayNotListMembers: "Mag geen leden vermelden.",
        AddMembers: "Leden toevoegen",
        BuiltInCannotModify: "Dit is een ingebouwde groep; ze kan niet gewijzigd worden.",
        NumMembers: function (num) { return "".concat(num, " leden"); },
        YouAreMember: "U bent lid.",
        CustomGroupsC: "Aangepaste groepen:",
        BuiltInGroupsC: "Ingebouwde groepen:",
        DeleteGroup: "Verwijder deze groep"
    },
    // Create user dialog
    cud: {
        CreateUser: "Maak gebruiker",
        CreateAccount: "Maak account",
        EmailC: "E-mail:",
        keptPriv: "Zal privé blijven",
        forNotfsKeptPriv: "voor het melden van antwoorden, blijft privé",
        EmailVerifBy_1: "Uw e-mail werd geverificeerd door ",
        EmailVerifBy_2: ".",
        UsernameC: "Gebruikersnaam:",
        FullNameC: "Naam:",
        optName: "optioneel",
        //OrCreateAcct_1: "of ",
        //OrCreateAcct_2: "Maak een account",
        //OrCreateAcct_3: " met ",
        //OrCreateAcct_4: "@gebruikersnaam",
        //OrCreateAcct_5: " & wachtwoord",
        DoneLoggedIn: "Account aangemaakt. U werd ingelogd.",
        AlmostDone: "Bijna gedaan! U moet uw e-mail adres bevestigen. We hebben " +
            "u een e-mail verstuurd. klik op de link om te activeren " +
            "Uw account. U kan deze pagina sluiten."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Voorwaarden en Privacy",
        Accept_1: "Aanvaard u onze ",
        TermsOfService: "Service voorwaarden",
        TermsOfUse: "Gebruiksvoorwaarden",
        Accept_2: " en ",
        PrivPol: "Privacybeleid",
        Accept_3_User: "?",
        Accept_3_Owner: " voor site eigenaars?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "JA ik aanvaard"
    },
    // Password input
    pwd: {
        PasswordC: "Wachtwoord:",
        StrengthC: "Sterkte: ",
        FairlyWeak: "Redelijk zwak.",
        toShort: "te kort",
        TooShort: function (minLength) { return "Te kort. Moet ten minste ".concat(minLength, " karakters zijn"); },
        PlzInclDigit: "Voeg een cijfer of speciaal teken toe",
        TooWeak123abc: "Te zwak. Gebruik geen wachtwoorden zoals '12345' of 'abcde'.",
        AvoidInclC: "Vermijd het opnemen van (delen van) uw naam of e-mailadres in het wachtwoord:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Pagina niet gevonden of toegang geweigerd.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "U doet zich voor als iemand die misschien geen toegang heeft tot alle delen " +
            "van deze website.",
        IfYouThinkExistsThen: "Als u denkt dat de pagina bestaat, log dan in als iemand die er toegang toe heeft. ",
        LoggedInAlready: "(U bent al ingelogd, maar misschien is het het verkeerde account?) ",
        ElseGoToHome_1: "U kan anders ",
        ElseGoToHome_2: "naar de startpagina gaan.",
        CreateAcconut: "Account maken",
        ContinueWithDots: "Ga verder met ...",
        SignUp: "Deelnemen",
        LogIn: "Inloggen",
        LogInWithPwd: "Inloggen met wachtwoord",
        CreateAdmAcct: "Maak een admin account:",
        AuthRequired: "Authentificatie vereist om deze site te bezoeken",
        LogInToLike: "Log in om deze post leuk te vinden",
        LogInToSubmit: "Log in en dien in",
        LogInToComment: "Log in om te reageren",
        LogInToCreateTopic: "Log in om een onderwerp te aan te maken",
        //AlreadyHaveAcctQ: "Hebt u een account? ",  // MISSING changed "Already have...?" to "You have...?"
        OrLogIn_1: "",
        OrLogIn_2: "Log in",
        OrLogIn_3: " anders",
        //NewUserQ: "Nieuwe gebruiker? ",
        SignUpInstead_1: "",
        SignUpInstead_2: "Account aanmaken",
        SignUpInstead_3: " anders",
        // MAYBE x3: Used Google Translate:
        OrTypeName_1: ", of typ gewoon ",
        OrTypeName_2: "je naam",
        OrTypeName_3: "",
        OrCreateAcctHere: "Of account aanmaken:",
        OrTypeName: "Of typ uw naam:",
        OrLogIn: "Of log in:",
        YourNameQ: "Uw naam?",
        BadCreds: "Verkeerde gebruikersnaam of wachtwoord",
        UsernameOrEmailC: "Gebruikersnaam of e-mail:",
        PasswordC: "Wachtwoord:",
        ForgotPwd: "Wachtwoord vergeten?",
        NoPwd: "U hebt nog geen wachtwoord gekozen.",
        CreatePwd: "Wachtwoord maken"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Vertel ons waarover u zich zorgen maakt.",
        ThanksHaveReported: "Bedankt. U heeft het gemeld. De forummedewerkers zullen een kijkje nemen.",
        ReportComment: "Reactie rapporteren",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Dit bericht bevat persoonlijke gegevens, bijvoorbeeld iemands echte naam.",
        OptOffensive: "Dit bericht bevat aanstootgevende of beledigende inhoud.",
        OptSpam: "Dit bericht is een ongewenste advertentie.",
        OptOther: "Stel het personeel om een andere reden op de hoogte van dit bericht."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "U kunt hulpberichten opnieuw laten zien, als u bent ingelogd, door " +
            "te klikken op uw naam en dan ",
        YouCanShowAgain_2: "Help berichten verbergen"
    },
    // Editor
    e: {
        SimilarTopicsC: "Gelijkaardige onderwerpen:",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "Sorry, maar momenteel kunt u slechts één bestand tegelijk uploaden",
        PleaseFinishPost: "Voltooi eerst het schrijven van uw bericht",
        PleaseFinishChatMsg: "Voltooi eerst het schrijven van uw chatbericht",
        PleaseFinishMsg: "Maak eerst uw bericht af",
        PleaseSaveEdits: "Sla eerst uw huidige bewerkingen op",
        PleaseSaveOrCancel: "Sla eerst uw nieuwe onderwerp op of annuleer het",
        CanContinueEditing: "U kunt doorgaan met het bewerken van uw tekst als u de editor opnieuw opent.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Verwijder niet alle tekst. Schrijf iets.",
        PleaseWriteSth: "Schrijf iets.",
        PleaseWriteTitle: "Schrijf een onderwerptitel.",
        PleaseWriteMsgTitle: "Schrijf een berichttitel.",
        PleaseWriteMsg: "Schrijf een bericht.",
        exBold: "vetgedrukte tekst",
        exEmph: "benadrukte tekst",
        exPre: "vooraf opgemaakte tekst",
        exQuoted: "geciteerde tekst",
        ExHeading: "Rubriek",
        TitlePlaceholder: "Typ een titel - waar gaat dit over, in één korte zin?",
        EditPost_1: "Bewerk ",
        EditPost_2: "post ",
        TypeChatMsg: "Typ een chatbericht:",
        YourMsg: "Uw bericht:",
        CreateTopic: "Maak een nieuw onderwerp",
        CreateCustomHtml: "Maak een aangepaste HTML-pagina (voeg uw eigen <h1> titel)",
        CreateInfoPage: "Maak een info-pagina",
        CreateCode: "Maak een broncodepagina",
        AskQuestion: "Stel een vraag",
        ReportProblem: "Meld een probleem",
        SuggestIdea: "Stel een idee voor",
        NewChat: "Nieuwe titel en doel van chatkanalen",
        NewPrivChat: "Nieuwe titel en doel voor privéchat",
        AppendComment: "Voeg een opmerking toe onderaan de pagina:",
        ReplyTo: "Antwoord aan ",
        ReplyTo_theOrigPost: "het oorspronkelijke bericht",
        ReplyTo_post: "bericht ",
        AddCommentC: "Voeg een reactie toe:",
        PleaseSelectPosts: "Selecteer een of meer berichten om op te reageren.",
        Save: "Bewaar",
        edits: "wijzigingen",
        PostReply: "Antwoord posten",
        PostComment: "Reactie posten",
        Post: "Bericht",
        comment: "reactie",
        question: "vraag",
        PostMessage: "Bericht posten",
        SimpleEditor: "Eenvoudige editor",
        Send: "Verstuur",
        message: "bericht",
        Create: "Maak",
        page: "pagina",
        chat: "chat",
        idea: "idee",
        topic: "onderwerp",
        Submit: "Indienen",
        problem: "probleem",
        ViewOldEdits: "Overzicht oude wijzigingen",
        UploadBtnTooltip: "Upload een bestand of afbeelding",
        BoldBtnTooltip: "Maak tekst vetgedrukt",
        EmBtnTooltip: "Benadrukken",
        QuoteBtnTooltip: "Citaat",
        PreBtnTooltip: "Voorgeformatteerde tekst",
        HeadingBtnTooltip: "Rubriek",
        TypeHerePlaceholder: "Typ hier. U kunt Markdown en HTML gebruiken. Sleep en zet neer om afbeeldingen te plakken.",
        Maximize: "Maximaliseren",
        ToNormal: "Terug naar normaal",
        TileHorizontally: "Tegel horizontaal",
        PreviewC: "Voorbeeld:",
        TitleExcl: " (titel uitgesloten)",
        ShowEditorAgain: "Toon editor opnieuw",
        Minimize: "Minimaliseren",
        IPhoneKbdSpace_1: "(Deze grijze ruimte is gereserveerd",
        IPhoneKbdSpace_2: "voor het iPhone-toetsenbord.)",
        PreviewInfo: "Hier kunt u een voorbeeld bekijken van hoe uw bericht eruit zal zien.",
        CannotType: "U kunt hier niet typen.",
        LoadingDraftDots: "Een concept laden ...",
        DraftUnchanged: "Ongewijzigd.",
        CannotSaveDraftC: "Kan concept niet opslaan:",
        DraftSavedBrwsr: "Concept opgeslagen in browser.",
        DraftSaved: function (nr) { return "Concept ".concat(nr, " bewaard."); },
        DraftDeleted: function (nr) { return "Concept ".concat(nr, " verwijderd."); },
        WillSaveDraft: function (nr) { return "Zal concept ".concat(nr, " bewaren..."); },
        SavingDraft: function (nr) { return "Bewaren van concept ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Verwijderen van concept ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Categorie selecteren"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Selecteer onderwerptype:",
        DiscussionExpl: "Een discussie over iets.",
        QuestionExpl: "Een antwoord kan worden gemarkeerd als het geaccepteerde antwoord.",
        ProblExpl: "Als er iets kapot is of niet werkt. Kan worden gemarkeerd als opgelost / opgelost.",
        IdeaExpl: "Een suggestie. Kan worden gemarkeerd als klaar / geïmplementeerd.",
        ChatExpl: "Een misschien nooit eindigend gesprek.",
        PrivChatExpl: "Alleen zichtbaar voor mensen die worden uitgenodigd om deel te nemen aan de chat.",
        CustomHtml: "Aangepaste HTML-pagina",
        InfoPage: "Info pagina",
        Code: "Code",
        EmbCmts: "Ingesloten opmerkingen",
        About: "Over",
        PrivChat: "Private Chat",
        Form: "Formulier"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "Geen communities meer om lid te worden.",
        SelCmty: "Selecteer community ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Tekst om naar te zoeken"
    },
    // No internet
    ni: {
        NoInet: "Geen internet verbinding",
        PlzRefr: "Vernieuw de pagina om de laatste wijzigingen te zien. (De verbinding was verbroken)",
        RefrNow: "Nu vernieuwen"
    },
    PostDeleted: function (postNr) { return "Bericht, nr ".concat(postNr, ", is verwijderd."); },
    NoSuchPost: function (postNr) { return "Er is geen bericht met nr ".concat(postNr, " op deze pagina."); },
    NoPageHere: "Deze pagina is verwijderd, of heeft nooit bestaan, of u hebt er misschien geen toegang toe.",
    GoBackToLastPage: "Ga terug naar de laatste pagina"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_pl_PL = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Aktwny",
    Activity: "Aktywność",
    Add: "Dodaj",
    AddingDots: "Dodawanie ...",
    AddComment: "Dodaj komentarz",
    Admin: "Admin",
    AdvSearch: "Wyszukiwanie zaawansowane",
    Away: "Zaraz wracam",
    Back: "Z powrotem",
    BlogN: "Blog",
    Bookmarks: "Zakładki",
    Cancel: "Anuluj",
    Categories: "Kategorie",
    Category: "Kategoria",
    ChangeV: "Zmiana",
    Continue: "Kontynuuj",
    ClickToShow: "Kliknij, aby pokazać",
    ChangeDots: "Zmień ...",
    ChatN: "Czat",
    Chatting: "Rozmawiają",
    CheckYourEmail: "Sprawdź skrzynkę mailową",
    Close: "Zamknij",
    closed: "zamknięty",
    comments: "komentarze",
    Created: "Utworzony",
    Delete: "Usuń",
    Deleted: "Usunięte",
    DirectMessage: "Bezpośrednia wiadomość",
    Discussion: "Dyskusja",
    discussion: "dyskusja",
    done: "zrobione",
    EditV: "Edytuj",
    Editing: "Edytowane",
    EmailC: "Email: ",
    EmailAddress: "Adres email",
    EmailAddresses: "Adresy mailowe",
    EmailSentD: "Wysłano mail.",
    Forum: "Forum",
    GetNotifiedAbout: "Powiadamiaj mnie o",
    GroupsC: "Grupy:",
    Hide: "Ukryj",
    Home: "Strona domowa",
    Idea: "Pomysł",
    Join: "Dołącz",
    KbdShrtcsC: "Skróty klawiszowe: ",
    Loading: "Ładowanie...",
    LoadMore: "Załaduj więcej ...",
    LogIn: "Zaloguj",
    LoggedInAs: "Zalogowany jako ",
    LogOut: "Wyloguj",
    Maybe: "Być może",
    Manage: "Zarządzaj",
    Members: "Członkowie",
    MessageN: "Wiadomość",
    MoreDots: "Więcej...",
    Move: "Przenieś",
    Name: "Imię",
    NameC: "Imię:",
    NewTopic: "Nowy wątek",
    NoCancel: "Ne, anuluj",
    Notifications: "Powiadomienia",
    NotImplemented: "(Nie zaimplementowano)",
    NotYet: "Jeszcze nie",
    NoTitle: "Bez tytułu",
    NoTopics: "Brak wątków.",
    Okay: "Ok",
    OkayDots: "Ok ...",
    Online: "Online",
    onePerLine: "jeden na wiersz",
    PreviewV: "Podgląd",
    Problem: "Problem",
    progressN: "postęp",
    Question: "Pytanie",
    Recent: "Ostatni",
    Remove: "Usuń",
    Reopen: "Otwórz ponownie",
    ReplyV: "Odpowiedz",
    Replying: "Odpowiadam",
    Replies: "Odpowiedzi",
    replies: "odpowiedzi",
    Save: "Zapisz",
    SavingDots: "Zapisywanie ...",
    SavedDot: "Zapisano.",
    Search: "Szukaj",
    SendMsg: "Wyślij wiadomość",
    ShowPreview: "Pokaż podgląd",
    SignUp: "Zarejestruj się",
    Solution: "Rozwiązanie",
    started: "rozpoczęto",
    Summary: "Podsumowanie",
    Submit: "Zatwierdź",
    Tag: "Tag",
    Tags: "Tagi",
    Tools: "Narzędzia",
    Topics: "Wątki",
    TopicTitle: "Tytuł wątku",
    TopicType: "Typ wątku",
    UploadingDots: "Przesyłanie...",
    Username: "Nazwa użytkownika",
    Users: "Użytkownicy",
    Welcome: "Witaj",
    Wiki: "Wiki",
    Yes: "Tak",
    YesBye: "Tak, do widzenia",
    YesDoThat: "Tak, zrób to",
    You: "Ty",
    you: "ty",
    // Trust levels.
    Guest: "Gość",
    NewMember: "Nowy członek",
    BasicMember: "Uczestnik dyskusji",
    FullMember: "Dyskutant",
    TrustedMember: "Zaufany członek",
    RegularMember: "Częsty bywalec",
    CoreMember: "Personel forum",
    // Periods.
    PastDay: "Ostatni dzień",
    PastWeek: "Ostatni tydzień",
    PastMonth: "Ostatni miesiąc",
    PastQuarter: "Ostatni kwartał",
    PastYear: "Ostatni rok",
    AllTime: "Od początku",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "mc",
    daysLtr: "d",
    hoursLtr: "h",
    minsLtr: "m",
    secsLtr: "s",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "wczoraj" : "".concat(numDays, " dni temu");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "godzinę temu" : "".concat(numHours, " godzin temu");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "minutę temu" : "".concat(numMins, " minut temu");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "kilka sekund temu" : "".concat(numSecs, " sekund temu");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Adres email wymagany",
        NoSpcs: "Bez spacji",
        InvldAddr: "Nieprawidłowy adres email",
        NoBadChrs: "Bez specjanych znaków",
        // Full name input field:
        NotOnlSpcs: "Nie uzupełniaj tego pola tylko spacjami",
        NoAt: "Nie używaj znaku @",
        // Username input field:
        NoDash: "Nie używaj myślników (-)",
        DontInclAt: "Nie wpisuj @",
        StartEndLtrDgt: "Zacznij i zakończ literą lub cyfrą",
        OnlLtrNumEtc: "Tylko litery (a-z, A-Z) i liczby oraz _ (podkreślnik)",
        // This shown just below the username input:
        UnUnqShrt_1: "Twoja ",
        UnUnqShrt_2: "@nazwaUżytkownika",
        UnUnqShrt_3: ", unikalna i krótka",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Powinny by\u0107 conajmniej ".concat(minLength, " znaki"); },
        TooLong: function (maxLength) { return "Za d\u0142ugie. Powinny by\u0107 maksymalnie ".concat(maxLength, " znak\u00F3w"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Wszystkie powiadomienia",
        EveryPostInTopic: "Będziesz otrzymywać powiadomienia o wszystkich odpowiedziach w tym wątku.",
        EveryPostInCat: "Będziesz otrzymywać powiadomienia o wszystkich nowych wątkach i odpowiedziach w tej kategorii.",
        EveryPostInTopicsWithTag: "Będziesz otrzymywać powiadomienia o nowych wątkach z tym tagiem i o każdym poście w tych wątkach.",
        EveryPostWholeSite: "Będziesz otrzymywać powiadomienia o wszystkich nowych wątkach i odpowiedziach.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Powiadamiaj tylko o nowych wątkach",
        NewTopicsInCat: "Będziesz otrzymywać powiadomienia o wszystkich nowych wątkach w tej kategorii.",
        NewTopicsWithTag: "Powiadamiaj o nowych wątkach z tym tagiem.",
        NewTopicsWholeSite: "Będziesz otrzymywać powiadomienia o wszystkich nowych wątkach.",
        Tracking: "Śledzone",
        Normal: "Podstawowe powiadomienia",
        NormalDescr: "Będziesz powiadamiany, gdy ktoś pisze do Ciebie, także niewprost, np. " +
            "odpowiada na Twoją odpowiedź.",
        //NormalTopic_1: "Otrzymasz powiadomienie, gdy ktoś Ci odpowie lub wspomni Twoją ",
        //NormalTopic_2: "@nazwęUżytkownika",
        Hushed: "Wyciszony",
        HushedDescr: "Będziesz powiadamiany, gdy ktoś pisze bezpośrednio do Ciebie.",
        Muted: "Brak powiadomień",
        MutedTopic: "Brak powiadomień o tym wątku."
    },
    // Forum intro text
    fi: {
        Edit: "Edytuj",
        Hide_1: "Ukryj",
        Hide_2: ", kliknij ",
        Hide_3: " aby otworzyć ponownie"
    },
    // Forum categories
    fcs: {
        All: "Wszystkie"
    },
    // Forum buttons
    fb: {
        TopicList: "Lista wątków",
        // Select category dropdown
        from: "od",
        "in": "w",
        AllCats: "Wszystkie kategorie",
        // Topic sort order
        Active: "Aktywne",
        ActiveDescr: "Ostatnio aktywne jako pierwsze",
        New: "Nowy",
        NewDescr: "Nowe jako pierwsze",
        Top: "Top",
        TopDescr: "Popularne jako pierwsze",
        // Topic filter dropdown
        AllTopics: "Wszystkie wątki",
        ShowAllTopics: "Pokaż wszystkie wątki",
        ShowAllTopicsDescr: "Nie usunięte wątki",
        WaitingTopics: "Oczekujące wątki",
        OnlyWaitingDescr_1: "Pokaż tylko pytania ",
        OnlyWaitingDescr_2: "oczekujące ",
        OnlyWaitingDescr_3: "na rozwiązanie, oraz pomysły i problemy którymi jeszcze nikt się nie zajął",
        YourTopics: "Twoje wątki",
        AssignedToYou: "Przypisane do Ciebie",
        DeletedTopics: "Wątki usuniętę",
        ShowDeleted: "Pokaż usunięte",
        ShowDeletedDescr: "Pokaż wszystkie wątki łącznie z usuniętymi",
        // Rightmost buttons
        ViewCategories: "Pokaż kategorie",
        EditCat: "Edytuj kategorię",
        CreateCat: "Utwórz kategorię",
        CreateTopic: "Nowy wątek",
        PostIdea: "Opublikuj pomysł",
        AskQuestion: "Zadaj pytanie",
        ReportProblem: "Zgłoś problem",
        CreateMindMap: "Utwórz mapę myśli",
        CreatePage: "Utwórz stronę"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Objaśnij znaczenie ikon...",
        IconExplanation: "Znaczenie ikon:",
        ExplGenDisc: "Ogólna dyskusja.",
        ExplQuestion: "Pytanie bez zaakceptowanej odpowiedzi.",
        ExplAnswer: "Pytanie z zaakceptowaną odpowiedzią.",
        ExplIdea: "Pomysł / sugestja.",
        ExplProblem: "Problem.",
        ExplPlanned: "Coś, co zamierzamy zrobić lub naprawić.",
        ExplDone: "Coś, co zostało zrobione lub naprawione.",
        ExplClosed: "Wątek zamknięty.",
        ExplPinned: "Temat zawsze jest wyswietlany jako pierwszy.",
        PopularTopicsComma: "Popularne wątki, ",
        TopFirstAllTime: "Wyświetla najpopulanrniejsz wątki z calego czasu.",
        TopFirstPastDay: "Wyświetla najpopularniejsze wątki z ostatniego dnia.",
        CatHasBeenDeleted: "Ta kategoria została usunięta",
        TopicsActiveFirst: "Ostatnio aktywne wątki jako pierwsze",
        TopicsNewestFirst: "Najnowsze wątki jako pierwsze",
        CreatedOn: "Utworzony ",
        LastReplyOn: "\nOstatnia odpowiedź ",
        EditedOn: "\nEdytowany ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "utworzył wątek",
        frequentPoster: "często piszący",
        mostRecentPoster: "napisał ostatni post",
        inC: "w: ",
        TitleFixed: "To zostało naprawione",
        TitleDone: "To zostało zrobione",
        TitleStarted: "Zaczęliśy to",
        TitleStartedFixing: "Zaczęliśmy to naprawiać",
        TitleUnsolved: "To nierozwiązany problem",
        TitleIdea: "To jest pomysł",
        TitlePlanningFix: "Planujemy to naprawić",
        TitlePlanningDo: "Planujemy to zrobić",
        TitleChat: "To jest kanał czatowy",
        TitlePrivateChat: "To jest prywatny kanał czatowy",
        TitlePrivateMessage: "Prywatna wiadomość",
        TitleInfoPage: "To jest strona informacyjna",
        TitleDiscussion: "Dyskusja",
        IsPinnedGlobally: "\nTo zostało przypięte, więc jest wyświetlane jako pierwsze.",
        IsPinnedInCat: "\nTo zostało przypięte w tej kategorii, więc jest wyświetlane jako pierwsze w tej kategorii."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Ostatnie wątki (oczekujące)",
        RecentTopicsInclDel: "Ostatnie wątki (włącznie z usuniętymi)",
        RecentTopics: "Ostatnie wątki",
        _replies: " odpowiedzi",
        _deleted: " (usunięty)",
        _defCat: " (domyślna kategoria)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Najnowsze posty",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online na tym czacie",
        NumOnlForum: " online na tym forum",
        // Open left-sidebar button title.
        WatchbBtn: "Twoje wątki",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Twoje najnowsze wątki, czaty i wiadomości bezpośrednie",
        // Title shown on user profile pages.
        AbtUsr: "O użytkowniku",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Wyjdź z profilu użytkownika",
        BackFromAdm: "Wyjdź z przestrzeni administracyjnej",
        // Title shown on full text search page.
        SearchPg: "Przeszukaj stronę"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Dodaj ...",
        RecentlyViewed: "Ostatnio przeglądane",
        JoinedChats: "Otwarte czaty",
        ChatChannels: "Czaty",
        CreateChat: "Utwórz czat",
        DirectMsgs: "Wiadomości bezpośrednie",
        NoChats: "Żaden",
        NoDirMsgs: "Żaden",
        // The click-topic dropdown menu:
        TopicActions: "Opcje wątku",
        ViewPeopleHere: "Wyświetl użytkowników którzy tutaj są",
        ViewAddRemoveMembers: "Wyświetl / dodaj / usuń członków",
        ViewChatMembers: "Wyświetl członków czatu",
        EditChat: "Edytuj opis czatu",
        //EditChat: "Edytuj tytuł i opis czatu", // Keep, in case adds back edit-title input
        LeaveThisChat: "Opuść czat",
        LeaveThisCommunity: "Opuść społeczność",
        JoinThisCommunity: "Dołącz do społeczności"
    },
    // Contextbar (the sidebar to the right), code currently in sidebar.ts (not renamed yet)
    cb: {
        RecentComments: "Ostatnie komentarze w tym wątku:",
        NoComments: "Brak komentarzy.",
        YourBookmarks: "Twoje zakładki:",
        UsersOnline: "Użytkownicy online:",
        UsersOnlineForum: "Użytkownicy online na tym forum:",
        UsersInThisChat: "Użytkownicy na tym czacie:",
        UsersInThisTopic: "Użytkownicy w tym wątku:",
        GettingStartedGuide: "Przewodnik wprowadzający",
        AdminGuide: "Przewodnik administratora",
        Guide: "Przewodnik",
        // How to hide the sidebar.
        CloseShortcutS: "Zamknij (skrót klawiaturowy: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Dodaj więcej osób",
        // Shown next to one's own username, in a list of users.
        thatsYou: "to Ty",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Tylko Ty",
        YouAnd: "Ty, oraz ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " użytkownik" : " użytkowników";
            var have = numStrangers === 1 ? "" : "";
            return numStrangers + people + " którzy " + have + " nie są zalogowani";
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "Odpowiedzi po lewej są sortowane według ",
        bestFirst: "najpierw najlepsze.",
        ButBelow: "ale poniżej ",
        insteadBy: " te same odpowiedzi są sortowane według: ",
        newestFirst: "najpierw najnowsze.",
        SoIfLeave: "Więc jeśli wrócisz tu później, poniżej znajdziesz ",
        allNewReplies: "wszystkie nowe odpowiedzi.",
        Click: "Kliknij",
        aReplyToReadIt: " aby zobaczyć całą odpowiedź."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Kliknij, aby zmienić status",
        ClickToViewAnswer: "Kliknij, aby zobaczyć odpowiedź",
        ViewAnswer: "Zobacz odpowiedź",
        ChangeStatusC: "Zmień status na:",
        ChangeCatC: "Zmień kategorię:",
        ChangeTopicTypeC: "Zmień typ wątku:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "pytanie",
        hasAccptAns: "ma zaakceptowaną odpowiedź",
        aProblem: "problem",
        planToFix: "plan naprawy",
        anIdea: "idea",
        planToDo: "plan do zrobienia"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Ten wątek ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "został zamknięty, nie możesz już tutaj pisać.",
        ThisTopicClosed_1: "Ten wątek został ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        // ... "zamknięty" ...
        ThisTopicClosed_2: ". Wciąż możesz komentować.",
        ThisPageDeleted: "Ta strona została usunięta",
        CatDeldPageToo: "Kategoria została usunięta, więc ta strona również",
        ThreadDeld: "Wątek usunięty",
        CmntDeld: "Komentarz usunięty",
        PostDeld: "Post usunięty",
        DiscDeld: "Dyskusja usunięta",
        PageDeld: "Strona usunięta",
        PagePendAppr: "Strona oczekuje na zatwierdzenie",
        TitlePendAppr: "Tytuł oczekuje na zatwierdzenie",
        TextPendingApproval: "Tekst oczekuje na zatwierdzenie",
        TooltipQuestClosedNoAnsw: "To pytanie zostało zamknięte. Żadna odpowiedź nie została zaakceptowana.",
        TooltipTopicClosed: "Ten wątek jest zamknięty.",
        TooltipQuestSolved: "Zaakceptowano odpowiedź na to pytanie",
        TooltipQuestUnsolved: "Nie zaakceptowano żadnej odpowiedzi na to pytanie",
        StatusDone: "Zrobione",
        TooltipProblFixed: "To zostało naprawione",
        TooltipDone: "To zostało ukończone",
        StatusStarted: "Rozpoczęty",
        TooltipFixing: "Właśnie się tym zajmujemy",
        TooltipImplementing: "Właśnie to implementujemy",
        StatusPlanned: "Zaplanowany",
        TooltipProblPlanned: "Planujemy to naprawić",
        TooltipIdeaPlanned: "Planujemy to zaimplementować",
        StatusNew: "Nowy",
        StatusNewDtl: "Nowy wątek, trwa dyskusja",
        TooltipUnsProbl: "To jest nie rozwiązany problem",
        TooltipIdea: "To jest pomysł",
        TooltipPersMsg: "Wiadomość prywatna",
        TooltipChat: "# oznacza czat",
        TooltipPrivChat: "To jest prywatny czat",
        TooltipPinnedGlob: "\nPrzypiętny globalnie.",
        TooltipPinnedCat: "\nPrzypięty w tej kategorii.",
        SolvedClickView_1: "Rozwiązanie w poście nr ",
        SolvedClickView_2: ", kliknij, aby wyświetlić",
        PostHiddenClickShow: "Post ukryty; kliknij, aby zobaczyć",
        ClickSeeMoreRepls: "Kliknij, aby zobaczyć więcej odpowiedzi",
        ClickSeeMoreComments: "Kliknij, aby zobaczyć więcej komentarzy",
        ClickSeeThisComment: "Kliknij, aby zobaczyć ten komentarz",
        clickToShow: "kliknij, aby zobaczyć",
        ManyDisagree: "Wielu się z tym nie zgadza:",
        SomeDisagree: "Niektórzy nie zgadzają się z tym:",
        PendAppr: "W oczekiwaniu na zatwierdzenie",
        CmtPendAppr: "Komentarz oczekuje na zatwierdzenie ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Twój" : "Poniższy") + " komentarz oczekuje na zatwierdzenie."; },
        _and: " i",
        repliesTo: "odpowiedzi dla",
        InReplyTo: "W odpowiedzi do",
        YourReplyTo: "Twoje odpowiedzi dla ",
        YourChatMsg: "Twoja wiadomość na chacie: ",
        YourDraft: "Twój szkic",
        YourEdits: "Twoje poprawki: ",
        YourProgrNoteC: "Twoja notatka postępu:",
        aProgrNote: "notatka postępu: ",
        ReplyingToC: "Odpowiadając na:",
        ScrollToPrevw_1: "Przesuwając do ",
        ScrollToPrevw_2: "podgląd",
        UnfinEdits: "Niezakończone poprawki",
        ResumeEdting: "Przywrócona edycja",
        DelDraft: "Usunięty szkic",
        ClickViewEdits: "Kliknij, aby zobaczyć poprzednie wersje",
        By: "Przez ",
        // Discussion ...
        aboutThisIdea: "o tym jak i czy zrealizować ten pomysł",
        aboutThisProbl: "o tym jak i czy poprawić to",
        AddProgrNote: "Dodaj notatkę postępu",
        // Progress ...
        withThisIdea: "z realizacją tego pomysłu",
        withThisProbl: "z rozwiązaniem tego problemu",
        withThis: "z realizacją tego"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Powiadomienia dotyczące tego wątku:",
        // If is a direct message topic, members listed below this text.
        Msg: "Wyślij wiadomość do",
        SmrzRepls: "Podsumowanie odpowiedzi",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "".concat(numReplies, " odpowiedzi. Szacowany czas czytania: ").concat(minutes, " minut");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Zrobione. Podsumowano ".concat(numSummarized, " odpowiedzi z ").concat(numShownBefore, " wcze\u015Bniej pokazanych odpowiedzi.");
        }
    },
    // Post actions
    pa: {
        CloseTopic: "Zamknij temat",
        CloseOwnQuestionTooltip: "Zamknij ten wątek, jeśli nie potrzebujesz już odpowiedzi.",
        CloseOthersQuestionTooltip: "Zamknij ten wątek, jeśli już nie jest potrzebna odpowiedź, np. gdy " +
            "odpowiedź znajduje się w innym temacie.",
        CloseToDoTooltip: "Oznacz jako zakończone.",
        CloseTopicTooltip: "Zamknij ten wątek jeśli nie wymaga on dalszej dyskusji.",
        AcceptBtnExpl: "Zaakceptuj tę odpowiedź jako rozwiązanie problemu",
        SolutionQ: "Rozwiązanie?",
        ClickUnaccept: "Kliknij aby odznaczyć akceptację tej odpowiedzi",
        PostAccepted: "Ta odpowiedź została oznaczona jako rozwiązanie",
        NumLikes: function (num) { return num === 1 ? "1 polubienie" : num + " polubienia"; },
        NumDisagree: function (num) { return num + " nie zgadza się z tym"; },
        NumBury: function (num) { return num + " zakop"; },
        NumUnwanted: function (num) { return num + " niepożądany"; },
        MoreVotes: "więcej głosów...",
        LikeThis: "Lubię to",
        LinkToPost: "Link do tego postu",
        Report: "Zgłoś",
        ReportThisPost: "Zgłoś ten post",
        Admin: "Admin",
        DiscIx: "Indeks dyskusji",
        Disagree: "Nie zgadzam się",
        DisagreeExpl: "Kliknij tutaj, aby wyrazić swój sprzeciw lub aby ostrzec innych przed błędami merytorycznymi.",
        Bury: "Zakop",
        BuryExpl: "Kliknij, jeśli ten post nie zasługuje, aby być wyświetlany jako pierwszy. Tylko personel forum widzi Twój głos.",
        Unwanted: "Niechciany",
        UnwantedExpl: "Kliknij, jeśli nie chcesz, aby ten post znajdował się na tej stronie. To zredukuje karmę autora wypowiedzi. " +
            "Tylko personel forum widzi Twój głos.",
        AddTags: "Dodaj/usuń tagi",
        UnWikify: "Usuń z wiki",
        Wikify: "Umieść w wiki",
        PinDeleteEtc: "Przypnij / Usuń / Kategoria ..."
    },
    // Share dialog
    sd: {
        Copied: "Skopiowano do schowka.",
        CtrlCToCopy: "Wciśnij CTRL+C, aby skopiować.",
        ClickToCopy: "Kliknij, aby skopiować link."
    },
    // Chat
    c: {
        About_1: "To jest ",
        About_2: " pokój rozmów, utworzony przez ",
        ScrollUpViewComments: "Przewiń do góry, aby wyświetlić starsze komentarze",
        Purpose: "Przeznaczenie:",
        edit: "edytuj",
        'delete': "usuń",
        MessageDeleted: "(wiadomość usunięta)",
        JoinThisChat: "Wejdź do tego czatu",
        PostMessage: "Wyślij wiadomość",
        AdvancedEditor: "Zaawansowany edytor",
        TypeHere: "Pisz tutaj. Możesz użyć języka Markdown lub HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Wymaga sprawdzenia ",
        AdminHelp: "Poproś Admina o pomoc ",
        StaffHelp: "Poproś załogę forum o pomoc ",
        DraftsEtc: "Szkice, zakładki, zadania",
        MoreNotfs: "Wyświetl więcej powiadomień",
        DismNotfs: "Zaznacz wszystkie jako przeczytane",
        ViewProfile: "Wyświetl swój profil",
        ViewGroups: "Pokaż grupy",
        LogOut: "Wyloguj",
        UnhideHelp: "Włącz wyświetlanie wskazówek"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Przewiń do:",
        Scroll: "Przewiń",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "",
        Back_2: "Z powrotem (B)",
        BackExpl: "Przewiń do poprzedniej pozycji na tej stronie",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Góra strony",
        PgTopHelp: "Idź na górę strony. Skrót klawiszowy: 1",
        Repl: "Replies",
        ReplHelp: "Przejdź do sekcji odpowiedzi. Skrót klawiszowy: 2",
        Progr: "Postępy",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Idź do sekcji postępów. Skrót klawiszowy: 3",
        PgBtm: "Dół strony",
        Btm: "Dolny",
        BtmHelp: "Idź na dół strony. Skrót klawiszowy: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", i ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " aby przewinąć w tył"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Zaznacz użytkowników",
        AddUsers: "Dodaj użytkowników"
    },
    // About user dialog
    aud: {
        IsMod: "Moderator.",
        IsAdm: "Administrator.",
        IsDeld: "Użytkownik dezaktywowany lub usunięty.",
        ThisIsGuest: "Ten użytkownik to anonimowy gość.",
        ViewInAdm: "Wyświetl w panelu administratora",
        ViewProfl: "Wyświetl profil",
        ViewComments: "Wyświetl inne komentarze",
        RmFromTpc: "Usuń z wątku",
        EmAdrUnkn: "Nieznany adres email - nie będziesz powiadomiony o odpowiedziach."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Ustawienia",
        Invites: "Zaproszenia",
        DraftsEtc: "Szkice etc",
        About: "O mnie",
        Privacy: "Prywatność",
        Security: "Bezpieczeństwo",
        Account: "Konto",
        Interface: "Interfejs",
        // ----- Overview stats
        JoinedC: "Dołączył: ",
        PostsMadeC: "Liczba postów: ",
        LastPostC: "Ostatni post: ",
        LastSeenC: "Ostatnio widziany: ",
        TrustLevelC: "Poziom zaufania: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Prześlij avatar",
        ChangePhoto: "Zmień avatar",
        ImgTooSmall: "Obraz jest zbyt mały, powinien mieć wymiary conajmniej 100 x 100",
        // ----- Activity
        OnlyStaffCanSee: "Tylko personel i zaufani użytkownicy mogą to zobaczyć.",
        OnlyMbrsCanSee: "Tylko użytkownicy, którzy byli aktywni przez jakiś czas mogą to zobaczyć.",
        Nothing: "Nic do pokazania",
        Posts: "Odpowiedzi",
        NoPosts: "Brak odpowiedzi.",
        Topics: "Wątki",
        NoTopics: "Brak wątków.",
        // ----- User status
        UserBanned: "Ten użytkownik został zbanowany",
        UserSuspended: function (dateUtc) { return "Ten u\u017Cytkownik jest zawieszony do ".concat(dateUtc, " UTC"); },
        ReasonC: "Powód: ",
        DeactOrDeld: "Dezaktywowany lub usunięty.",
        isGroup: " (grupa)",
        isGuest: " — anonimowy gość, może być kimkolwiek",
        isMod: " – moderator",
        isAdmin: " – administrator",
        you: "(Ty)",
        // ----- Notifications page
        NoNotfs: "Brak powiadomień",
        NotfsToYouC: "Powiadomienia dla Ciebie:",
        NotfsToOtherC: function (name) { return "Powiadomienia dla ".concat(name, ":"); },
        DefNotfsSiteWide: "Domyślne powiadomienia, dla całego forum",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "dla",
        // ----- Drafts Etc page
        NoDrafts: "Brak szkiców",
        YourDraftsC: "Twoje szkice:",
        DraftsByC: function (name) { return "Szkice napisane przez ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Tutaj możesz zapraszać ludzi, aby dołączyli do tej społeczności. ",
        InvitesListedBelow: "Zaproszenia, które już wysłałeś są wymienione poniżej.",
        NoInvites: "Jeszcze nikogo nie zaprosiłeś.",
        InvitedEmail: "Zaproszony adres email",
        WhoAccepted: "Użytkownik, który zaakceptował zaproszenie",
        InvAccepted: "Zaproszenie zaakceptowane",
        InvSent: "Zaproszenie wysłane",
        JoinedAlready: "Już połączone",
        SendAnInv: "Wyślij zaproszenie",
        SendInv: "Wyślij zaproszenie",
        SendInvExpl: "Wyślemy Twojemu przyjacielowi krótkiego email'a z odnośnikiem " +
            "umożliwiającym natychmiastowe dołączenie, bez logowania. " +
            "Twój przyjaciel zostanie podstawowym członkiem, nie moderatorem, ani adminem.",
        //EnterEmail: "Wpisz adres email",
        InvDone: "Zrobione. Zaraz wyślę wiadomość.",
        NoOneToInv: "Nie ma kogo zaprosić.",
        InvNotfLater: "Powiadomię Ciebie później, kiedy ich zaproszę.",
        AlreadyInvSendAgainQ: "Ci zostali już zaproszeni — może chcesz ich zaprosić ponownie?",
        InvErr_1: "Te zakończyły się ",
        InvErr_2: "błędami",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "Te są juz użytkownikami, więc ich nie zaprosiłem:",
        ResendInvsQ: "Wysłać ponowne zaproszenia do tych ludzi? Oni byli już zapraszani.",
        InvAgain: "Zaproś ponownie",
        // ----- Preferences, About
        AboutYou: "O Tobie",
        WebLink: "Adres Twojej strony internetowej.",
        NotShownCannotChange: "Nie pokywane publicznie. Nie może być zmieniony.",
        // The full name or alias:
        NameOpt: "Imię (opcjonalne)",
        NotShown: "To nie jest informacja widoczna publicznie.",
        // The username:
        MayChangeFewTimes: "Możesz zmienić ją tylko kilka razy.",
        notSpecified: "(nie określono)",
        ChangeUsername_1: "Możesz zmienić nazwę użytkownika tylko kilka razy.",
        ChangeUsername_2: "Zmienianie jej zbyt często może zbić innych z tropu — " +
            "nie będą wiedzieli kogo @wskazać mając na myśli Ciebie.",
        NotfAboutAll: "Powiadamiaj mnie o każdym nowym poście i zmianach w poście (dopóki nie wyłączysz powiadomień dla wątku lub kategorii)",
        NotfAboutNewTopics: "Powiadamiaj mnie o każdym nowym poście (dopóki nie wyłączysz powiadomień dla kategorii)",
        ActivitySummaryEmails: "Email'e z podsumowaniem aktywności",
        EmailSummariesToGroup: "Jeśli użytkownicy tej grupy nie zaglądają tutaj, wyślij im email'e " +
            "z podsumowaniem popularnych wątków.",
        EmailSummariesToMe: "Jeśli tu nie zaglądam, wyślij mi email " +
            "z podsumowaniem popularnych wątków.",
        AlsoIfTheyVisit: "Wyślij email'e także wtedy, gdy regularnie odwiedzają to miejsce.",
        AlsoIfIVisit: "Wyślij email'e także wtedy, gdy regularnie odwiedzam to miejsce.",
        HowOftenWeSend: "Jak często powinniśmy wysyłać te email'e?",
        HowOftenYouWant: "Jak często chcesz otrzymywać te email'e?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Czy chcesz ukryć swoją aktywność przed niezalogowanymi i nowymi użytkownikami?",
        HideActivityStrangers_2: "(Ale nie przed tymi, którzy są już aktywni od jakiegoś czasu.)",
        HideActivityAll_1: "Czy chcesz ukryć swoją aktywność przed wszystkimi?",
        HideActivityAll_2: "(Z wyjątkiem załogi forum i zaufanych użytkowników.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Adres email",
        PrimaryDot: "Podstawowy. ",
        VerifiedDot: "Zweryfikowany. ",
        NotVerifiedDot: "Nie zweryfikowany. ",
        ForLoginWithDot: function (provider) { return "Logowanie przy u\u017Cyciu ".concat(provider, ". "); },
        MakePrimary: "Uczyń domyślnym",
        AddEmail: "Dodaj adres email",
        TypeNewEmailC: "Podaj nowy adres email:",
        MaxEmailsInfo: function (numMax) { return "(Nie mo\u017Cesz doda\u0107 wi\u0119cej ni\u017C ".concat(numMax, " adres\u00F3w.)"); },
        EmailAdded_1: "Dodano. Wysłaliśmy link weryfikacyjny na podany adres email — ",
        EmailAdded_2: "sprawdź swoją skrzynkę.",
        SendVerifEmail: "Wyślij link weryfikacyjny",
        EmailStatusExpl: "('Domyślny' oznacza, że możesz zalogować się za pomocą tego adresu i że na ten adres wysyłamy powiadomienia. " +
            "'Zweryfikowany' oznacza, że kliknąłeś w wysłany link weryfikacyjny.)",
        // Password:
        ChangePwdQ: "Zmień hasło?",
        CreatePwdQ: "Utwórz hasło?",
        WillGetPwdRstEml: "Otrzymasz mail z ponownym ustawieniem hasła.",
        // This is the "None" in:  "Password: None"
        PwdNone: "Żadne",
        // Logins:
        LoginMethods: "Metody logowania",
        commaAs: ", jako: ",
        // One's data:
        YourContent: "Treści utworzone przez Ciebie",
        DownloadPosts: "Pobierz swoje posty",
        DownloadPostsHelp: "Tworzy plik JSON zawierający wątki i komentarze utworzone przez Ciebie.",
        DownloadPersData: "Pobierz dane osobiste",
        DownloadPersDataHelp: "Tworzy plik JSON zawierający Twoje dane osobiste, " +
            "np. Twoje imię (jeśli je podałeś) i adres email.",
        // Delete account:
        DangerZone: "Danger zone",
        DeleteAccount: "Usuń konto",
        DeleteYourAccountQ: "Czy na pewno chcesz usunąć swoje konto? Twoje imię, adres email, hasło " +
            "i tożsamości online (jeżeli zalogowałeś się przez Facebooka lub Twittera) zostaną zapomniane. " +
            "Nie będziesz mógł się ponownie zalogować. Nie można cofnąc tej operacji.",
        DeleteUserQ: "Czy na pewno chcesz usunąć użytkownika? Twoje imię, adres email, hasło " +
            "i tożsamości online (jeżeli zalogowałeś się przez Facebooka lub Twittera) zostaną zapomniane. " +
            "Nie będziesz mógł się ponownie zalogować. Nie można cofnąc tej operacji.",
        YesDelete: "Tak, usuń"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Członkowie grup",
        NoMembers: "Brak członków.",
        MayNotListMembers: "Nie można wyświetlić członków.",
        AddMembers: "Dodaj członków",
        BuiltInCannotModify: "To jest grupa wbudowana; nie może być zmodyfikowana.",
        NumMembers: function (num) { return "".concat(num, " cz\u0142onk\u00F3w"); },
        YouAreMember: "Jesteś członkiem.",
        CustomGroupsC: "Opcjonalne grupy:",
        BuiltInGroupsC: "Wbudowane grupy:",
        DeleteGroup: "Usuń tę grupę"
    },
    // Create user dialog
    cud: {
        CreateUser: "Utwórz użytkownika",
        CreateAccount: "Utwórz konto",
        EmailC: "Email:",
        keptPriv: "nie będzie publicznie dostępny",
        forNotfsKeptPriv: "otrzymywać powiadomienia o odpowiedziach, nie będzie publicznie dostępny",
        EmailVerifBy_1: "Twój email został zweryfikowany przez ",
        EmailVerifBy_2: ".",
        UsernameC: "Nazwa użytkownika:",
        FullNameC: "Pełne imię:",
        optName: "opcjonalny",
        //OrCreateAcct_1: "Albo ",
        //OrCreateAcct_2: "utwórz konto",
        //OrCreateAcct_3: " z ",
        //OrCreateAcct_4: "@nazwą",
        //OrCreateAcct_5: " i hasłem",
        DoneLoggedIn: "Konto utworzone. Zostałeś zalogowany.",
        AlmostDone: "Prawie skończone! Musisz tylko potwierdzić adres email." +
            " Wysłaliśmy do Ciebie email. Proszę kliknąc w link w wysłanej wiadomości, aby aktywować " +
            "konto. Możesz zamknąć tę stronę."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Warunki i polityka prywatności",
        Accept_1: "Czy akceptujesz nasze ",
        TermsOfService: "Warunki Usługi",
        TermsOfUse: "Warunki Użytkowania",
        Accept_2: " i ",
        PrivPol: "Politykę Prywatności",
        Accept_3_User: "?",
        Accept_3_Owner: " dla właścicieli społeczności?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Tak, akceptuję"
    },
    // Password input
    pwd: {
        PasswordC: "Hasło:",
        StrengthC: "Siła hasła: ",
        FairlyWeak: "Słabe.",
        toShort: "za krótkie",
        TooShort: function (minLength) { return "Za kr\u00F3tkie. Powinno mie\u0107 conajmniej ".concat(minLength, " liter"); },
        PlzInclDigit: "Proszę użyć cyfry lub znaku specjalnego",
        TooWeak123abc: "Za słabe. Nie używaj hasł takich jak '12345' lub 'abcde'.",
        AvoidInclC: "Unikaj umieszczania (części) swoje imienia albo adresu email:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Strona nie istnieje lub nie masz uprawnień aby ją zobaczyć.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "Jesteś zalogowany jako użytkownik nie mający dostępu do wszystkich części " +
            "tego serwisu.",
        IfYouThinkExistsThen: "Jeśli myślisz, że taka strona istnieje, zaloguj się jak użytkownik, który może mieć do niej dostęp. ",
        LoggedInAlready: "(Już jesteś zalogowany, może użyłeś złego konta?) ",
        ElseGoToHome_1: "W przeciwnym razie możesz ",
        ElseGoToHome_2: "przejść na stronę główną.",
        CreateAcconut: "Utwórz  konto",
        ContinueWithDots: "Kontynuuj z ...",
        SignUp: "Zarejestruj się",
        LogIn: "Zaloguj się",
        LogInWithPwd: "Zaloguj się przy użyciu hasła",
        CreateAdmAcct: "Utwórz konto administratora:",
        AuthRequired: "Do uzyskania dostępu do tej witryny wymagane jest uwierzytelnienie",
        LogInToLike: "Zaloguj się, aby polubić ten post",
        LogInToSubmit: "Zaloguj się i prześlij",
        LogInToComment: "Zaloguj się, aby napisać komentarz",
        LogInToCreateTopic: "Zaloguj się, aby utworzyć nowy wątek",
        //AlreadyHaveAcctQ: "Posiadasz już konto? ",
        OrLogIn_1: "",
        OrLogIn_2: "Zaloguj się",
        OrLogIn_3: "",
        //NewUserQ: "Nie posiadasz jeszcze konta? ",
        SignUpInstead_1: "",
        SignUpInstead_2: "Zarejestruj się",
        SignUpInstead_3: "",
        // MAYBE x3: Google Translate + looked at OrTypeName.
        OrTypeName_1: ", lub po prostu ",
        OrTypeName_2: "wpisz swoje imię",
        OrTypeName_3: "",
        OrCreateAcctHere: "Lub utwórz nowe konto:",
        OrTypeName: "Lub wpisz swoje imię:",
        OrLogIn: "Lub zaloguj się:",
        YourNameQ: "Twoje imię?",
        BadCreds: "Zła nazwa użytkownika lub hasło",
        UsernameOrEmailC: "Nazwa użytkownika lub email:",
        PasswordC: "Hasło:",
        ForgotPwd: "Zapomniałeś hasła?",
        NoPwd: "Nie utworzyłeś jeszcze hasła.",
        CreatePwd: "Utwórz hasło"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Powiedz nam, co Cię niepokoi.",
        ThanksHaveReported: "Dzięki. Zgłoszenie zostało przyjęte. Personel forum zajmie się tą sprawą.",
        ReportComment: "Zgłoś komentarz",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Ten post zawiera czyjeś dane osobiste, np. prawdziwe imię/nazwisko.",
        OptOffensive: "Ten post zawiera obraźliwe treści.",
        OptSpam: "Ten post jest niechcianą reklamą.",
        OptOther: "Powiadom personel forum o tym poście z innego powodu."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "Możesz włączyć komunikaty pomocy ponownie, jeśli jesteś zalogowany, poprzez " +
            "kliknięcie na nazwę użytkownika i następnie na ",
        YouCanShowAgain_2: "pokaż komunikaty pomocy"
    },
    // Editor
    e: {
        SimilarTopicsC: "Podobne wątki:",
        //WritingSomethingWarning: "Pisałeś coś?",
        UploadMaxOneFile: "Przepraszamy ale obecnie możesz przesłać tylko jeden plik na raz",
        PleaseFinishPost: "Najpierw zakończ pisanie swojego posta",
        PleaseFinishChatMsg: "Najpierw zakończ pisanie wiadomości na czacie",
        PleaseFinishMsg: "Najpierw zakończ pisanie wiadomości",
        PleaseSaveEdits: "Najpierw zapisz aktualne zmiany",
        PleaseSaveOrCancel: "Najpierw zapisz lub anuluj nowy temat",
        CanContinueEditing: "Możesz kontynuować edycję tekstu, jeśli ponownie otworzysz edytor.",
        //"(Ale tekst zostanie utracony, jeśli opuścisz tę stronę.)",
        PleaseDontDeleteAll: "Proszę nie usuwaj całej treści. Napisz coś.",
        PleaseWriteSth: "Proszę, napisz coś.",
        PleaseWriteTitle: "Wpisz tytuł tematu.",
        PleaseWriteMsgTitle: "Wpisz tytuł wiadomości.",
        PleaseWriteMsg: "Napisz wiadomość.",
        exBold: "pogrubiony tekst",
        exEmph: "wyróżnij tekst",
        exPre: "preformatowany tekst",
        exQuoted: "cytat",
        ExHeading: "Nagłówek",
        TitlePlaceholder: "Wpisz tytuł - o co chodzi, w jednym krótkim zdaniu?",
        EditPost_1: "Edytuj ",
        EditPost_2: "post ",
        TypeChatMsg: "Napisz wiadomość na czacie:",
        YourMsg: "Twoja wiadomość:",
        CreateTopic: "Utwórz nowy temat",
        CreateCustomHtml: "Utwórz niestandardową stronę HTML (dodaj swój własny tytuł <h1>)",
        CreateInfoPage: "Utwórz stronę z informacjami",
        CreateCode: "Utwórz stronę z kodem źródłowym",
        AskQuestion: "Zadaj pytanie",
        ReportProblem: "Zgłoś problem",
        SuggestIdea: "Zasugreuj pomysł",
        NewChat: "Nazwa i cel nowego kanału czatowego",
        NewPrivChat: "Nazwa i cel nowego prywatnego kanału czatowego",
        AppendComment: "Napisz komentarz na dole strony:",
        ReplyTo: "Owpowiedz na ",
        ReplyTo_theOrigPost: "post rozpoczynający dyskusję",
        ReplyTo_post: "post ",
        AddCommentC: "Dodaj komentarz:",
        PleaseSelectPosts: "Wybierz jeden lub więcej postów, na które chcesz odpowiedzieć.",
        Save: "Zapisz",
        edits: "zmiany",
        PostReply: "Odpowiedz na post",
        PostComment: "Wyślij komentarz",
        Post: "Post",
        comment: "komentarz",
        question: "pytanie",
        PostMessage: "Wyślij wiadomość",
        SimpleEditor: "Prosty edytor",
        Send: "Wyślij",
        message: "wiadomość",
        Create: "Utwórz",
        page: "stronę",
        chat: "czat",
        idea: "pomysł",
        topic: "wątek",
        Submit: "Zgłoś",
        problem: "problem",
        ViewOldEdits: "Wyświetl poprzednie zmiany",
        UploadBtnTooltip: "Prześlij plik lub obraz",
        BoldBtnTooltip: "Utwórz pogrubiony tekst",
        EmBtnTooltip: "Podkreśl",
        QuoteBtnTooltip: "Zacytuj",
        PreBtnTooltip: "Tekst preformatowany",
        HeadingBtnTooltip: "Nagłówek",
        TypeHerePlaceholder: "Pisz tutaj. Możesz użyć Markdown i HTML. Przeciągnij i upuść, aby umieścić obraz.",
        Maximize: "Zmaksymalizuj",
        ToNormal: "Powrót do normalnego rozmiaru",
        TileHorizontally: "Ułożenie poziome",
        PreviewC: "Podgląd:",
        TitleExcl: " (tytuł wykluczony)",
        ShowEditorAgain: "Ponownie pokaż edytor",
        Minimize: "Zminimalizuj",
        IPhoneKbdSpace_1: "(To szare miejsce jest zarezerwowane",
        IPhoneKbdSpace_2: "dla klawiatury iPhone'a.)",
        PreviewInfo: "Tutaj możesz zobaczyć, jak będzie wyglądać Twój post.",
        CannotType: "Nie możesz tutaj pisać.",
        LoadingDraftDots: "Ładuję jakiś szkic...",
        DraftUnchanged: "Nie zmieniony.",
        CannotSaveDraftC: "Nie mogę zapamiętać szkicu:",
        DraftSavedBrwsr: "Szkic zachowany, na liście.",
        DraftSaved: function (nr) { return "Szkic ".concat(nr, " zachowany."); },
        DraftDeleted: function (nr) { return "Szkic ".concat(nr, " usuni\u0119ty."); },
        WillSaveDraft: function (nr) { return "B\u0119dzie zapami\u0119tany szkic ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "Zachowuj\u0119 szkic ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Usuwam szkic ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Wybierz kategorię"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Wybierz:",
        DiscussionExpl: "Dyskusja na jakiś temat.",
        QuestionExpl: "Tylko jedna odpowiedź może zostać oznaczona jako zaakceptowana.",
        ProblExpl: "Jeśli coś jest zepsute lub nie działa. Może być oznaczony jako rozwiązany.",
        IdeaExpl: "Sugestia. Może być oznaczona jako zrobione/zaimplementowane.",
        ChatExpl: "Prawdopodobnie niekończąca się dyskusja.",
        PrivChatExpl: "Widoczne tylko dla osób, które otrzymały zaproszenie do dołączenia do czatu.",
        CustomHtml: "Niestandardowa strona HTML",
        InfoPage: "Strona informacyjna",
        Code: "Kod źródłowy",
        EmbCmts: "Zagnieżdżone komentarze",
        About: "O",
        PrivChat: "Czat prywatny",
        Form: "Formularz"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "Nie ma więcej spoełczności do których mógłbyś dołączyć.",
        SelCmty: "Wybierz społeczność ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Tekst do wyszukania"
    },
    // No internet
    ni: {
        NoInet: "Brak dostępu do internetu",
        PlzRefr: "Odśwież stronę aby zoabzcyć zmiany. (Było chwilowe rozłączenie)",
        RefrNow: "Odświeżam teraz"
    },
    //
    PostDeleted: function (postNr) { return "Ten w\u0105tek, nr ".concat(postNr, ", zosta\u0142 usuni\u0119ty."); },
    NoSuchPost: function (postNr) { return "Nie ma w\u0105tku nr ".concat(postNr, " na tej stronie."); },
    NoPageHere: "Ta strona została usunięta, lub nigdy nie istniała lub nie masz praw aby ją obejrzeć.",
    GoBackToLastPage: "Wróć do poprzedniej strony"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_pt_BR = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Ativo",
    Activity: "Atividade",
    Add: "Adicionar",
    AddingDots: "Adicionando ...",
    Admin: "Administrador",
    AdvSearch: "Advanced search",
    Away: "Ausente",
    Back: "Back",
    BlogN: "Blog",
    Bookmarks: "Favoritos",
    Cancel: "Cancelar",
    Categories: "Categorias",
    Category: "Categoria",
    ChangeV: "Change",
    Continue: "Continuar",
    ClickToShow: "Click to show",
    ChangeDots: "Modificar ...",
    ChatN: "Chat",
    Chatting: "Chatting",
    CheckYourEmail: "Check your email",
    Close: "Fechar",
    closed: "fechado",
    Created: "Criado",
    Delete: "Deletar",
    Deleted: "Deleted",
    DirectMessage: "Direct message",
    Discussion: "Discussão",
    discussion: "discussão",
    done: "done",
    EditV: "Editar",
    Editing: "Editing",
    EmailAddress: "Email",
    EmailAddresses: "Email addresses",
    EmailSentD: "Email sent.",
    Forum: "Fórum",
    GetNotifiedAbout: "Get notified about",
    GroupsC: "Groups:",
    Hide: "Ocultar",
    Home: "Home",
    Idea: "Ideia",
    Join: "Join",
    KbdShrtcsC: "Keyboard shortcuts: ",
    Loading: "Carregando...",
    LoadMore: "Mostrar mais ...",
    LogIn: "Logado",
    LoggedInAs: "Logado como ",
    LogOut: "Encerrar sessão",
    Maybe: "Maybe",
    Manage: "Manage",
    Members: "Members",
    MessageN: "Mensagem",
    MoreDots: "Mais...",
    Move: "Mover",
    Name: "Nomear",
    NameC: "Nome:",
    NewTopic: "New topic",
    NoCancel: "No, cancel",
    Notifications: "Notifications",
    NotImplemented: "(Não implementado)",
    NotYet: "Ainda não",
    NoTitle: "No title",
    NoTopics: "Nenhum tópico.",
    Okay: "Ok",
    OkayDots: "Ok ...",
    Online: "Online",
    onePerLine: "one per line",
    PreviewV: "Prever",
    Problem: "Problema",
    progressN: "progress",
    Question: "Pergunta",
    Recent: "Recente",
    Remove: "Remover",
    Reopen: "Reabrir",
    ReplyV: "Responder",
    Replying: "Replying",
    Replies: "Respostas",
    replies: "respostas",
    Save: "Salvar",
    SavingDots: "Salvando ...",
    SavedDot: "Salvo.",
    Search: "Search",
    SendMsg: "Enviar Mensagem",
    ShowPreview: "Show preview",
    SignUp: "Cadastrar-se",
    Solution: "Solução",
    started: "started",
    Summary: "Resumo",
    Submit: "Enviar",
    Tag: "Tag",
    Tags: "Tags",
    Tools: "Tools",
    Topics: "Tópicos",
    TopicTitle: "Topic title",
    TopicType: "Tipo do tópico",
    UploadingDots: "Fazendo upload...",
    Username: "Nome de usuário",
    Users: "Usuários",
    Welcome: "Bem-vindo",
    Wiki: "Wiki",
    Yes: "Yes",
    YesBye: "Yes, bye",
    YesDoThat: "Yes, do that",
    You: "You",
    you: "você",
    // Trust levels.
    Guest: "Convidado",
    NewMember: "Novo membro",
    BasicMember: "Membro básico",
    FullMember: "Membro completo",
    TrustedMember: "Membro confiável",
    RegularMember: "Membro comum",
    CoreMember: "Membro do núcleo",
    // Periods.
    PastDay: "Últimas 24 horas",
    PastWeek: "Semana Passada",
    PastMonth: "Mês Passado",
    PastQuarter: "Trimestre Passado",
    PastYear: "Ano Passado",
    AllTime: "Todos os Períodos",
    // MISSING  5 letter fields below
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "mon",
    daysLtr: "d",
    hoursLtr: "h",
    minsLtr: "m",
    secsLtr: "s",
    // MISSING  4  "N nnnn ago" fields below:
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "1 day ago" : "".concat(numDays, " days ago");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1 hour ago" : "".concat(numHours, " hours ago");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1 minute ago" : "".concat(numMins, " minutes ago");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1 second ago" : "".concat(numSecs, " seconds ago");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Email required",
        NoSpcs: "No spaces please",
        InvldAddr: "Not a valid email address",
        NoBadChrs: "No weird characters please",
        // Full name input field:
        NotOnlSpcs: "Not just spaces please",
        NoAt: "No @ please",
        // Username input field:
        NoDash: "No dashes (-) please",
        DontInclAt: "Don't include the @",
        StartEndLtrDgt: "Start and end with a letter or a digit",
        OnlLtrNumEtc: "Only letters (a-z, A-Z) and numbers, and _ (underscore)",
        // This shown just below the username input:
        UnUnqShrt_1: "Your ",
        UnUnqShrt_2: "@username",
        UnUnqShrt_3: ", único e curto",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Should be at least ".concat(minLength, " characters"); },
        TooLong: function (maxLength) { return "Too long. Should be at most ".concat(maxLength, " characters"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Observando Tudo",
        EveryPostInTopic: "You'll be notified of all new replies in this topic.",
        EveryPostInCat: "You'll be notified of all new topics and replies, in this category.",
        EveryPostInTopicsWithTag: "You'll be notified of new topics with this tag, and every post in those topics",
        EveryPostWholeSite: "You'll be notified of all new topics and replies, anywhere.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Observando o Primeiro",
        NewTopicsInCat: "You'll be notified of new topics in this category.",
        NewTopicsWithTag: "You'll be notified of new topics with this tag",
        NewTopicsWholeSite: "You'll be notified of new topics, anywhere.",
        Tracking: "Rastreando",
        Normal: "Normal",
        NormalDescr: "You'll be notified if someone talks to you, also indirectly, e.g. a " + // MISSING
            "reply to a reply to you.",
        Hushed: "Hushed",
        HushedDescr: "You'll be notified only if someone talks directly to you.",
        Muted: "Silenciado",
        MutedTopic: "No notifications about this topic."
    },
    // Forum intro text
    fi: {
        Edit: "Editar",
        Hide_1: "Ocultar",
        Hide_2: ", clique ",
        Hide_3: " para reabrir"
    },
    // Forum categories
    fcs: {
        All: "Todas"
    },
    // Forum buttons
    fb: {
        TopicList: "Lista de tópicos",
        // Select category dropdown
        from: "from",
        "in": "in",
        AllCats: "Todas as categorias",
        // Topic sort order
        Active: "Ativo",
        ActiveDescr: "Mostra tópicos mais recentemente ativos primeiro",
        New: "Novo",
        NewDescr: "Mostra tópicos mais novos primeiro",
        Top: "Topo",
        TopDescr: "Mostra tópicos mais populares primeiro",
        // Topic filter dropdown
        AllTopics: "Todos os tópicos",
        ShowAllTopics: "Mostrar todos os tópicos",
        ShowAllTopicsDescr: "Não mostra tópicos deletados",
        WaitingTopics: "Waiting topics",
        OnlyWaitingDescr_1: "Mostra somente perguntas ",
        OnlyWaitingDescr_2: "aguardando ",
        OnlyWaitingDescr_3: "por uma solução, além de ideias e problemas ainda não tratados",
        YourTopics: "Your topics",
        AssignedToYou: "Assigned to you",
        DeletedTopics: "Show deleted",
        ShowDeleted: "Mostrar deletados",
        ShowDeletedDescr: "Mostrar todos os tópicos, incluindo deletados",
        // Rightmost buttons
        ViewCategories: "View categories",
        EditCat: "Editar Categoria",
        CreateCat: "Criar Categoria",
        CreateTopic: "Criar Tópico",
        PostIdea: "Postar uma Ideia",
        AskQuestion: "Fazer uma Pergunta",
        ReportProblem: "Reportar um Problema",
        CreateMindMap: "Criar Mapa Menal",
        CreatePage: "Criar Página"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Explicar ícones...",
        IconExplanation: "Explicação do ícone:",
        ExplGenDisc: "Uma discussão geral.",
        ExplQuestion: "Uma pergunta sem resposta aceita.",
        ExplAnswer: "Uma pergunta sem resposta aceita.",
        ExplIdea: "Uma ideia / sugestão.",
        ExplProblem: "Um problema.",
        ExplPlanned: "Algo que estamos planejando fazer ou consertar.",
        ExplDone: "Algo que já foi concluído ou consertado.",
        ExplClosed: "Tópico fechado.",
        ExplPinned: "Tópico sempre listados primeiro (talvez somente em sua própria categoria).",
        PopularTopicsComma: "Tópicos populares, ",
        TopFirstAllTime: "Mostra os tópicos mais populares primeiro, em qualquer período.",
        TopFirstPastDay: "Mostra tópicos populares durante as últimas 24 horas.",
        CatHasBeenDeleted: "Esta categoria foi deletada",
        TopicsActiveFirst: "Tópicos, mais recentemente ativo primeiro",
        TopicsNewestFirst: "Tópicos, mais novo primeiro",
        CreatedOn: "Criado em ",
        LastReplyOn: "\nÚltima resposta em ",
        EditedOn: "\nEditado em ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "criado no tópico",
        frequentPoster: "membro frequente",
        mostRecentPoster: "membro mais recente",
        inC: "em: ",
        TitleFixed: "Consertado",
        TitleDone: "Concluído",
        TitleStarted: "Iniciamos",
        TitleStartedFixing: "Começamos a consertar",
        TitleUnsolved: "É um problema não resolvido",
        TitleIdea: "É uma ideia",
        TitlePlanningFix: "Planejamos consertar",
        TitlePlanningDo: "Planejamos fazer",
        TitleChat: "É um canal de chat",
        TitlePrivateChat: "É um canal privado de chat",
        TitlePrivateMessage: "Uma mensagem privada",
        TitleInfoPage: "Uma página de informação",
        TitleDiscussion: "Uma discussão",
        IsPinnedGlobally: "\nFoi fixado, por isso é listado primeiro.",
        IsPinnedInCat: "\nFoi fixado nesta categoria, por isso é listado primeiro, nesta categoria."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Tópicos recentes (os que estão aguardando)",
        RecentTopicsInclDel: "Tópicos recentes (incluindo deletados)",
        RecentTopics: "Tópicos recentes",
        _replies: " respostas",
        _deleted: " (deletado)",
        _defCat: " (categoria padrão)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Recent posts",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online in this chat",
        NumOnlForum: " online in this forum",
        // Open left-sidebar button title.
        WatchbBtn: "Your topics",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Your recent topics, joined chats, direct messages",
        // Title shown on user profile pages.
        AbtUsr: "About User",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Back from user profile",
        BackFromAdm: "Back from admin area",
        // Title shown on full text search page.
        SearchPg: "Search Page"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Adicionar ...",
        RecentlyViewed: "Visualizada recentemente",
        JoinedChats: "Chats associados",
        ChatChannels: "Canais de chat",
        CreateChat: "Criar canal de chat",
        DirectMsgs: "Mensagens Diretas",
        NoChats: "Nenhum",
        NoDirMsgs: "Nenhuma",
        // The click-topic dropdown menu:
        TopicActions: "Ações do tópico",
        ViewPeopleHere: "Visualizar pessoas aqui",
        ViewAddRemoveMembers: "Visualizar / adicionar / remover membros",
        ViewChatMembers: "Visualizar membros do chat",
        EditChat: "Editar propósito do chat",
        //EditChat: "Editar título e propósito do chat", // Keep, in case adds back edit-title input
        LeaveThisChat: "Desassociar-se deste chat",
        LeaveThisCommunity: "Desassociar-se desta comunidade",
        JoinThisCommunity: "Associar-se a esta comunidade"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Comentários recentes neste tópico:",
        NoComments: "Nenhum comentário.",
        YourBookmarks: "Seus favoritos:",
        UsersOnline: "Usuários online:",
        UsersOnlineForum: "Usuários online neste fórum:",
        UsersInThisChat: "Usuários neste chat:",
        UsersInThisTopic: "Usuários neste tópico:",
        GettingStartedGuide: "Guia de Introdução",
        AdminGuide: "Guia do Administrador",
        Guide: "Guia",
        // How to hide the sidebar.
        CloseShortcutS: "Fechar (atalho do teclado: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Adicionar mais pessoas",
        // Shown next to one's own username, in a list of users.
        thatsYou: "é você",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Só você, parece",
        YouAnd: "Você, e ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? "pessoa" : "pessoas";
            var loggedIn = numStrangers === 1 ? "logou" : "logaram";
            return "".concat(numStrangers, " ").concat(people, " que n\u00E3o se ").concat(loggedIn);
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "As respostas à esquerda são ordenadas por ",
        bestFirst: "melhores primeiro.",
        ButBelow: "Mas abaixo ",
        insteadBy: " as mesmas respostas são ordenadas por ",
        newestFirst: "mais recentes primeiro.",
        SoIfLeave: "Então se você sair, e voltar aqui mais tarde, você vai encontrar abaixo ",
        allNewReplies: "todas as respostas mais recentes.",
        Click: "Clique",
        aReplyToReadIt: " em uma resposta abaixo para ler — porque só um trecho é exibido abaixo."
    },
    // Change page dialog    MISSING
    cpd: {
        ClickToChange: "Click to change status",
        ClickToViewAnswer: "Click to view answer",
        ViewAnswer: "View answer",
        ChangeStatusC: "Change status to:",
        ChangeCatC: "Change category:",
        ChangeTopicTypeC: "Change topic type:"
    },
    // Page doing status, PageDoingStatus    MISSING
    pds: {
        aQuestion: "a question",
        hasAccptAns: "has an accepted answer",
        aProblem: "a problem",
        planToFix: "plan to fix",
        anIdea: "an idea",
        planToDo: "plan to do"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Este formulário foi foi ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "fechado; você não pode mais preenchê-lo e enviá-lo.",
        ThisTopicClosed_1: "Este tópico foi ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". Você ainda pode postar comentários.",
        ThisPageDeleted: "Esta página foi deletada",
        CatDeldPageToo: "Categoria deletada; esta página foi deletada também",
        ThreadDeld: "Thread deleted",
        CmntDeld: "Comment deleted",
        PostDeld: "Post deleted",
        DiscDeld: "Discussion deleted",
        PageDeld: "Página deletada",
        TitlePendAppr: "Titulo pendente de aprovação",
        TextPendingApproval: "Texto pendente de aprovação",
        TooltipQuestClosedNoAnsw: "Esta questão foi fechada sem respostas aceitas.",
        TooltipTopicClosed: "Este tópico está fechado.",
        TooltipQuestSolved: "Isto é uma pergunta respondida",
        TooltipQuestUnsolved: "Isto é uma pergunta não respondida",
        StatusDone: "Done",
        TooltipProblFixed: "Isto foi consertado",
        TooltipDone: "Isto foi concluído",
        StatusStarted: "Started",
        TooltipFixing: "No momento estamos consertando isto",
        TooltipImplementing: "No momento estamos implementando isto",
        StatusPlanned: "Planned",
        TooltipProblPlanned: "Estamos planejando consertar isto",
        TooltipIdeaPlanned: "Estamos planejando implementar isto",
        StatusNew: "New",
        StatusNewDtl: "New topic, under discussion",
        TooltipUnsProbl: "Isto é um problema não resolvido",
        TooltipIdea: "Isto é uma ideia",
        TooltipPersMsg: "Mensagem pessoal",
        TooltipChat: "# significa Canal de Chat",
        TooltipPrivChat: "Isto é um canal de chat privado",
        TooltipPinnedGlob: "\nFixado globalmente.",
        TooltipPinnedCat: "\nFixado nesta categoria.",
        SolvedClickView_1: "Resolvido no post #",
        SolvedClickView_2: ", clique para visualizar",
        PostHiddenClickShow: "Post ocultado; clique para mostrar",
        ClickSeeMoreRepls: "Clique para mostrar mais respostas",
        ClickSeeMoreComments: "Clique para mostrar mais comentários",
        ClickSeeThisComment: "Clique para mostrar este comentário",
        clickToShow: "clique para mostrar",
        ManyDisagree: "Muitos discordam disso:",
        SomeDisagree: "Alguns discordam disso:",
        CmtPendAppr: "Comentário pendente de aprovação, postado ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Seu" : "O") + " comentário abaixo está pendente de aprovação."; },
        _and: " e",
        repliesTo: "replies to",
        InReplyTo: "Em resposta a",
        YourReplyTo: "Your reply to ",
        YourChatMsg: "Your chat message: ",
        YourDraft: "Your draft",
        YourEdits: "Your edits: ",
        YourProgrNoteC: "Your progress note:",
        aProgrNote: "a progress note: ",
        ReplyingToC: "Replying to:",
        ScrollToPrevw_1: "Scroll to ",
        ScrollToPrevw_2: "preview",
        UnfinEdits: "Unfinished edits",
        ResumeEdting: "Resume editing",
        DelDraft: "Delete draft",
        ClickViewEdits: "Clique para visualizar edições antigas",
        By: "Por ",
        // Discussion ...
        aboutThisIdea: "about how and if to do this idea",
        aboutThisProbl: "about how and if to fix this",
        AddProgrNote: "Add progress note",
        // Progress ...
        withThisIdea: "with doing this idea",
        withThisProbl: "with handling this problem",
        withThis: "with doing this"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Notifications about this topic:",
        // If is a direct message topic, members listed below this text.
        Msg: "Message",
        SmrzRepls: "Summarize Replies",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "There are ".concat(numReplies, " replies. Estimated reading time: ").concat(minutes, " minutes");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Done. Summarized ".concat(numSummarized, " replies, of the ").concat(numShownBefore, " replies previously shown.");
        }
    },
    // Post actions
    pa: {
        CloseOwnQuestionTooltip: "Feche esta pergunta se você não precisa mais de uma resposta.",
        CloseOthersQuestionTooltip: "Feche esta pergunta se você não precisa de uma resposta, por exemplo, se " +
            "é uma pergunta não-relacionada ou já respondida em outro tópico.",
        CloseToDoTooltip: "Feche esta tarefa se ela não precisar ser concluída ou consertada.",
        CloseTopicTooltip: "Feche este tópico se ele não precisa mais de consideração.",
        AcceptBtnExpl: "Aceitar isto como a resposta para a pergunta ou problema",
        SolutionQ: "Solução?",
        ClickUnaccept: "Clique para desafazer a aceitação desta resposta",
        PostAccepted: "Este post foi aceitado como resposta",
        NumLikes: function (num) { return num === 1 ? "1 Curte" : num + " Curtem"; },
        NumDisagree: function (num) { return num === 1 ? "1 Discorda" : "".concat(num, " Discordam"); },
        NumBury: function (num) { return num === 1 ? "1 Enterra" : "".concat(num, " Enterras"); },
        NumUnwanted: function (num) { return num === 1 ? "1 Indesejado" : "".concat(num, " Indesejados"); },
        MoreVotes: "Mais votos...",
        LikeThis: "Curtir isso",
        LinkToPost: "Link para este post",
        Report: "Denunciar",
        ReportThisPost: "Denunciar este post",
        Admin: "Administrador",
        DiscIx: "Discussions index",
        Disagree: "Discordar",
        DisagreeExpl: "Clique aqui para discordar deste post, ou para avisar outras pessoas sobre erros factuais.",
        Bury: "Enterrar",
        BuryExpl: "Clique aqui para posicionar outros posts antes deste post. Só o staff do fórum pode ver seu voto.",
        Unwanted: "Indesejado",
        UnwantedExpl: "Se você não quer este post neste site. Isso vai diminuir a confiança que eu tenho no autor do post" +
            "Só o staff do fórum pode ver seu voto.",
        AddTags: "Adicionar/remover marcadores",
        UnWikify: "Desfazer Wikificação",
        Wikify: "Wikificar",
        PinDeleteEtc: "Fixar / Deletar / Categoria ..."
    },
    // Share dialog
    sd: {
        Copied: "Copied.",
        CtrlCToCopy: "Hit CTRL+C to copy.",
        ClickToCopy: "Click to copy link."
    },
    // Chat
    c: {
        About_1: "Este é o canal de chat ",
        About_2: ", criado por ",
        ScrollUpViewComments: "Role para cima para ver comentários anteriores",
        Purpose: "Propósito:",
        edit: "editar",
        'delete': "deletar",
        MessageDeleted: "(Mensagem deletada)",
        JoinThisChat: "Associar-se a este chat",
        PostMessage: "Postar mensagem",
        AdvancedEditor: "Editor avançado",
        TypeHere: "Digite aqui. Você pode usar Markdown e HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Precisa de revisão ",
        AdminHelp: "Ajuda do administrador ",
        StaffHelp: "Ajuda do staff ",
        DraftsEtc: "Drafts, bookmarks, tasks",
        MoreNotfs: "Ver mais notificações",
        DismNotfs: "Mark all as read",
        ViewProfile: "Visualizar seu perfil",
        ViewGroups: "View groups",
        LogOut: "Encerrar sessão",
        UnhideHelp: "Revelar mensagens de ajuda"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Scroll to:",
        Scroll: "Scroll",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "B",
        Back_2: "ack",
        BackExpl: "Scroll back to your previous position on this page",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Page top",
        PgTopHelp: "Go to the top of the page. Shortcut: 1 (on a keyboard)",
        Repl: "Replies",
        ReplHelp: "Go to the Replies section. Shortcut: 2",
        Progr: "Progress",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Go to the Progress section. Shortcut: 3",
        PgBtm: "Page bottom",
        Btm: "Bottom",
        BtmHelp: "Go to the bottom of the page. Shortcut: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", and ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " to scroll back"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Select users",
        AddUsers: "Add users"
    },
    // About user dialog
    aud: {
        IsMod: "Is moderator.",
        IsAdm: "Is administrator.",
        IsDeld: "Is deactivated or deleted.",
        ThisIsGuest: "Este é um usuário convidado; na realidade, pode ser qualquer pessoa.",
        ViewInAdm: "View in Admin Area",
        ViewProfl: "View Profile",
        ViewComments: "Visualizar outros comentários",
        RmFromTpc: "Remove from topic",
        EmAdrUnkn: "Email address unknown — this guest won't be notified about replies."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Preferências",
        Invites: "Convites",
        DraftsEtc: "Drafts etc",
        About: "Sobre",
        Privacy: "Privacidade",
        Security: "Segurança",
        Account: "Conta",
        Interface: "Interface",
        // ----- Overview stats
        JoinedC: "Associados: ",
        PostsMadeC: "Posts feitos: ",
        LastPostC: "Último post: ",
        LastSeenC: "Visto por último em: ",
        TrustLevelC: "Nível de confiança: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Fazer upload de foto",
        ChangePhoto: "Mudar foto",
        ImgTooSmall: "Imagem pequena demais: deve ser >= 100 x 100",
        // ----- Activity
        OnlyStaffCanSee: "Only staff and trusted core members, can see this.",
        OnlyMbrsCanSee: "Only people who have been active members for a while can see this.",
        Nothing: "Nothing to show",
        Posts: "Posts",
        NoPosts: "No posts.",
        Topics: "Topics",
        NoTopics: "No topics.",
        // ----- User status
        UserBanned: "Este usuário foi banido",
        UserSuspended: function (dateUtc) { return "Este usu\u00E1rio foi suspenso at\u00E9 ".concat(dateUtc, " UTC"); },
        ReasonC: "Motivo: ",
        DeactOrDeld: "Foi desativado ou deletado.",
        isGroup: " (um gruop)",
        isGuest: " — um usuário convidado, pode ser qualquer pessoa",
        isMod: " – moderador",
        isAdmin: " – administrador",
        you: "(você)",
        // ----- Notifications page
        NoNotfs: "Nenhuma notificação",
        NotfsToYouC: "Notificação para você:",
        NotfsToOtherC: function (name) { return "Notifica\u00E7\u00E3o para ".concat(name, ":"); },
        DefNotfsSiteWide: "Default notifications, site wide",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "for",
        // ----- Drafts Etc page
        NoDrafts: "No drafts",
        YourDraftsC: "Your drafts:",
        DraftsByC: function (name) { return "Drafts by ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Aqui você pode convidar pessoas para se associar a este site. ",
        InvitesListedBelow: "Convites que você já enviou são listados abaixo..",
        NoInvites: "Você não citou ninguém ainda.",
        InvitedEmail: "Email do convidado",
        WhoAccepted: "Membro que aceitou",
        InvAccepted: "Convite aceito",
        InvSent: "Convite enviado",
        JoinedAlready: "Joined already",
        SendAnInv: "Enviar um Convite",
        SendInv: "Enviar Convite",
        SendInvExpl: "Vamos enviar um email curto para seu amigo, e a pessoa deve então clicar em um link " +
            "para se associar imediatamente, sem necessidade de login. " +
            "A pessoa vai se tornar um membro comum, não um moderador ou administrador.",
        //EnterEmail: "Digite o email",
        InvDone: "Concluído. Enviando um email para a pessoa.",
        // MISSING x 9:
        NoOneToInv: "No one to invite.",
        InvNotfLater: "I'll notify you later, when I've invited them.",
        AlreadyInvSendAgainQ: "These have been invited already — maybe you'd like to invite them again?",
        InvErr_1: "These resulted in ",
        InvErr_2: "errors",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "These have joined already, so I didn't invite them:",
        ResendInvsQ: "Re-send invitations to these people? They have been invited already.",
        InvAgain: "Invite again",
        // ----- Preferences, About
        AboutYou: "Sobre você",
        WebLink: "Qualquer site ou página sua.",
        NotShownCannotChange: "Não mostrado publicamente. Não pode ser mudado.",
        // The full name or alias:
        NameOpt: "Nome (opcional)",
        NotShown: "Não mostrado publicamente.",
        // The username:
        MayChangeFewTimes: "Você só pode mudá-lo algumas vezes.",
        notSpecified: "(não especificado)",
        ChangeUsername_1: "Você só pode mudar seu nome de usuário algumas vezes.",
        ChangeUsername_2: "Mudá-lo frequentemente pode deixar outras pessoas confusas — " +
            "eles não vão saber como @mencionar você.",
        NotfAboutAll: "Seja notificado de qualquer novo post (exceto se você silenciar o tópico ou categoria)",
        NotfAboutNewTopics: "Be notified about new topics (unless you mute the category)",
        ActivitySummaryEmails: "Emails com resumo de atividades",
        EmailSummariesToGroup: "Quando membros deste grupo não fizerem uma visita por aqui, então, por padrão, envie email para eles " +
            "com resumos de tópicos populares e outras coisas.",
        EmailSummariesToMe: "Quando não fizer uma visita por aqui, me envie email com " +
            "resumos de tópicos populares e outras coisas.",
        AlsoIfTheyVisit: "Envie emails para eles também se eles fizerem visitas por aqui regularmente.",
        AlsoIfIVisit: "Envie emails para mim também se eu fizer visitas por aqui regularmente.",
        HowOftenWeSend: "Com que frequência devemos enviar estes emails?",
        HowOftenYouWant: "Com que frequência você quer receber estes emails?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Ocultar sua atividade recente para estranhos e membros novos?",
        HideActivityStrangers_2: "(Mas não para aqueles que não foram membros ativos por um tempo.)",
        HideActivityAll_1: "Ocultar sua atividade recente para todo mundo?",
        HideActivityAll_2: "(Exceto para staff e membros do núcleo e confiáveis.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Endereços de email",
        PrimaryDot: "Primário. ",
        VerifiedDot: "Verificado. ",
        NotVerifiedDot: "Não verificado. ",
        ForLoginWithDot: function (provider) { return "Para login com ".concat(provider, ". "); },
        MakePrimary: "Tornar Primário",
        AddEmail: "Adicione endereço de email",
        TypeNewEmailC: "Digite um novo endereço de email:",
        MaxEmailsInfo: function (numMax) { return "(Voc\u00EA n\u00E3o pode adicionar mais do que ".concat(numMax, " endere\u00E7os.)"); },
        EmailAdded_1: "Adicionado. Acabamos de enviar um email de verificação — ",
        EmailAdded_2: "cheque sua caixa de entrada de email.",
        SendVerifEmail: "Enviar email de verificação",
        EmailStatusExpl: "('Primário' significa que você pode fazer login usando este endereço, e que nós enviamos notificações para ele. " +
            "'Verificado' significa que você clicou no link de verificação em um email de verificação.)",
        // Password:     // MISSING x 4
        ChangePwdQ: "Change password?",
        CreatePwdQ: "Create password?",
        WillGetPwdRstEml: "You'll get a reset password email.",
        // This is the "None" in:  "Password: None"
        PwdNone: "None",
        // Logins:
        LoginMethods: "Métodos de login",
        commaAs: ", como: ",
        // One's data:
        YourContent: "Seu conteúdo",
        DownloadPosts: "Fazer download de posts",
        DownloadPostsHelp: "Cria um arquivo JSON com uma cópia de tópicos e comentários que você postou.",
        DownloadPersData: "Fazer download de dados pessoais",
        DownloadPersDataHelp: "Cria um arquivo JSON com uma cópia dos seus dados pessoais, por exemplo seu nome, " +
            "(se você especificou um nome) e endereço de email.",
        // Delete account:
        DangerZone: "Zona de perigo",
        DeleteAccount: "Deletar conta",
        DeleteYourAccountQ: "Deletar sua conta? Vamos remover seu nome, esquecer seu endereço de email, senha e " +
            "quaisquer identidades online (como o login do Facebook ou do Twitter). " +
            "Você não vai poder mais fazer login novamente. Esta operação não pode ser desfeita.",
        DeleteUserQ: "Deletar este usuário? Vamos remover o nome, esquecer o endereço de email, senha e " +
            "quaisquer identidades online (como o login do Facebook ou do Twitter). " +
            "Este usuário não vai poder mais fazer login novamente. Esta operação não pode ser desfeita.",
        YesDelete: "Sim, deletar"
    },
    // Group profile page   MISSING
    gpp: {
        GroupMembers: "Group members",
        NoMembers: "No members.",
        MayNotListMembers: "May not list members.",
        AddMembers: "Add Members",
        BuiltInCannotModify: "This is a built-in group; it cannot be modified.",
        NumMembers: function (num) { return "".concat(num, " members"); },
        YouAreMember: "You're a member.",
        CustomGroupsC: "Custom groups:",
        BuiltInGroupsC: "Built-in groups:",
        DeleteGroup: "Delete this group"
    },
    // Create user dialog
    cud: {
        CreateUser: "Criar Usuário",
        CreateAccount: "Criar Conta",
        EmailC: "Email:",
        keptPriv: "será mantido privado",
        forNotfsKeptPriv: "para notificações de resposta, mantido privado",
        EmailVerifBy_1: "Seu email foi verificado por ",
        EmailVerifBy_2: ".",
        UsernameC: "Nome de usuário:",
        FullNameC: "Nome completo:",
        optName: "opcional",
        //OrCreateAcct_1: "Ou ",
        //OrCreateAcct_2: "crie uma conta",
        //OrCreateAcct_3: " com ",
        //OrCreateAcct_4: "@nomedeusuario",
        //OrCreateAcct_5: " & senha",
        DoneLoggedIn: "Conta criada. Você está logado.",
        AlmostDone: "Quase concluído! VOcê só precisa confirmar seu endereço de email. Enviamos " +
            "um email para você. Por favor, clique no link no email para ativar " +
            "sua conta. Você pode fechar esta página."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Termos e Privacidade",
        Accept_1: "Você aceita nossos ",
        TermsOfService: "Termos de Serviço",
        TermsOfUse: "Termos de Uso",
        Accept_2: " e ",
        PrivPol: "Política de Privacidade",
        Accept_3_User: "?",
        Accept_3_Owner: " para dono de sites?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Sim eu acieto"
    },
    // Password input
    pwd: {
        PasswordC: "Senha:",
        StrengthC: "Força: ",
        FairlyWeak: "Bem fraca.",
        toShort: "muit curta",
        TooShort: function (minLength) { return "Muito curta. Tem que ter pelo menos ".concat(minLength, " caracteres"); },
        PlzInclDigit: "Por favor, inclua um dígito ou caractere especial",
        TooWeak123abc: "Muito fraca. Não use senhas como '12345' ou 'abcde'.",
        AvoidInclC: "Evite incluir (partes de) seu nome ou email na senha:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Página não encontrada, ou Acesso Negado.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "Vocês está personificando alguém, que pode não ter acesso a todas as partes " +
            "deste site.",
        IfYouThinkExistsThen: "Se você acha que a página existe, faça login como alguém que tenha acesso a ela. ",
        LoggedInAlready: "(Você já está logado, mas talvez esta é a conta errada?) ",
        ElseGoToHome_1: "Como alternativa, você pode ",
        ElseGoToHome_2: "ir à página inicial.",
        CreateAcconut: "Criar conta",
        ContinueWithDots: "Continue com ...",
        SignUp: "Cadastrar-se",
        LogIn: "Fazer login",
        LogInWithPwd: "Login com Senha",
        CreateAdmAcct: "Criar conta de administrador:",
        AuthRequired: "Autenticação obrigatória para acessar este site",
        LogInToLike: "Faça login para Curtir este post",
        LogInToSubmit: "Faça login para enviar",
        LogInToComment: "Faça login para escrever um comentário",
        LogInToCreateTopic: "Faça login para criar um tópico",
        //AlreadyHaveAcctQ: "Já tem uma conta? ",
        OrLogIn_1: "",
        OrLogIn_2: "Fazer login",
        OrLogIn_3: " em vez disso",
        //NewUserQ: "Novo usuário? ",
        SignUpInstead_1: "",
        SignUpInstead_2: "Cadastre-se",
        SignUpInstead_3: " em vez disso",
        // MAYBE x3:
        OrTypeName_1: ", ou apenas ",
        OrTypeName_2: "digite seu nome",
        OrTypeName_3: "",
        OrCreateAcctHere: "Ou crei uma conta:",
        OrTypeName: "Ou digite seu nome:",
        OrLogIn: "Ou faça login:",
        YourNameQ: "Seu nome?",
        BadCreds: "Nome de usuário ou senha incorretos",
        UsernameOrEmailC: "Nome de usuário ou email:",
        PasswordC: "Senha:",
        ForgotPwd: "Esqueceu sua senha?",
        NoPwd: "You have not yet chosen a password.",
        CreatePwd: "Create password"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Por favor informe o que perturba você.",
        ThanksHaveReported: "Obrigado. Você denunciou isto. O staff do fórum vai examinar.",
        ReportComment: "Reportar Comentário",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Este post contém dados pessoais, por exemplo o nome real de alguém.",
        OptOffensive: "Este post contém conteúdo ofensivo ou abusivo.",
        OptSpam: "Este post é uma propaganda indesejada.",
        OptOther: "Notificar staff sobre este post por uma outra razão."
    },
    // Help message dialog   // MISSING the 2 fields below:
    help: {
        YouCanShowAgain_1: "You can show help messages again, if you are logged in, by " +
            "clicking your name and then ",
        YouCanShowAgain_2: "Unhide help messages"
    },
    // Editor
    e: {
        SimilarTopicsC: "Similar topics:",
        //WritingSomethingWarning: "Você estava escrevendo alguma coisa?",
        UploadMaxOneFile: "Desculpe, mas atualmente você só pode fazer upoad de apenas um arquivo por vez",
        PleaseFinishPost: "Por favor termine primeiro de escrever seu post",
        PleaseFinishChatMsg: "Por favor termine primeiro de escrever sua mensagem de chat",
        PleaseFinishMsg: "Por favor termine primeiro de escrever sua mensagem",
        PleaseSaveEdits: "Por favor salve primeiro suas edições atuais",
        PleaseSaveOrCancel: "Por favor salve ou cancele seu seu novo tópico",
        CanContinueEditing: "Você pode continuar editando seu texto, se você abrir o editor novamente.",
        //"(Mas o texto atual vai ser perdido se você for embora desta página.)",
        PleaseDontDeleteAll: "Por favor, não delete todo o texto. Escreva algo.",
        PleaseWriteSth: "Por favor escreva algo.",
        PleaseWriteTitle: "Por favor, escreva um título do tópico.",
        PleaseWriteMsgTitle: "Por favor escreva o título da mensagem.",
        PleaseWriteMsg: "Por favor escreva uma mensagem.",
        exBold: "negrito",
        exEmph: "itálico",
        exPre: "preformatado",
        exQuoted: "citação",
        ExHeading: "Cabeçalho",
        TitlePlaceholder: "Digite um título — do que se trata, em uma frase curta?",
        EditPost_1: "Editar ",
        EditPost_2: "post ",
        TypeChatMsg: "Digite uma mensagem de chat:",
        YourMsg: "Sua mensagem:",
        CreateTopic: "Criar novo tópico",
        CreateCustomHtml: "Criar uma página HTML personalizada (adicione seu próprio título em <h1>)",
        CreateInfoPage: "Criar uma página de informação",
        CreateCode: "Criar uma página de código fonte",
        AskQuestion: "Fazer uma pergunta",
        ReportProblem: "Reportar um problema",
        SuggestIdea: "Sugerir uma ideia",
        NewChat: "Novo título e propósito do canal de chat",
        NewPrivChat: "Novo título e propósito do canal de chat privado",
        AppendComment: "Adicionar um comentário ao fim da página:",
        ReplyTo: "Responder ao ",
        ReplyTo_theOrigPost: "Post Original",
        ReplyTo_post: "post ",
        AddCommentC: "Add a comment:",
        PleaseSelectPosts: "Por favor selecione um ou mais posts para responder.",
        Save: "Salvar",
        edits: "edições",
        PostReply: "Postar resposta",
        Post: "Postar",
        comment: "comentário",
        question: "pergunta",
        PostMessage: "Postar mensagem",
        SimpleEditor: "Editor simples",
        Send: "Enviar",
        message: "mensagem",
        Create: "Criar",
        page: "página",
        chat: "chat",
        idea: "ideia",
        topic: "tópico",
        Submit: "Enviar",
        problem: "problema",
        ViewOldEdits: "Visualizar edições anteriores",
        UploadBtnTooltip: "Fazer upload de arquivo ou imagem",
        BoldBtnTooltip: "Tornar texto negrito",
        EmBtnTooltip: "Tornar texto itálico",
        QuoteBtnTooltip: "Citação",
        PreBtnTooltip: "Texto pré-formatado",
        HeadingBtnTooltip: "Cabeçalho",
        TypeHerePlaceholder: "Digite aqui. Você pode usar Markdown e HTML. Arraste e solte para colar imagens.",
        Maximize: "Maximizar",
        ToNormal: "De volta ao normal",
        TileHorizontally: "Dispor horizontalmente",
        PreviewC: "Pré-visualização:",
        TitleExcl: " (título excluído)",
        ShowEditorAgain: "Mostrar editor novamente",
        Minimize: "Minimizar",
        IPhoneKbdSpace_1: "(Este espaço cinza está reservado",
        IPhoneKbdSpace_2: "para o teclado do iPhone.)",
        PreviewInfo: "Aqui você pode pré-visualizar como seu post vai ficar.",
        CannotType: "Você não pode digitar aqui.",
        LoadingDraftDots: "Loading any draft...",
        DraftUnchanged: "Unchanged.",
        CannotSaveDraftC: "Cannot save draft:",
        DraftSavedBrwsr: "Draft saved, in browser.",
        DraftSaved: function (nr) { return "Draft ".concat(nr, " saved."); },
        DraftDeleted: function (nr) { return "Draft ".concat(nr, " deleted."); },
        WillSaveDraft: function (nr) { return "Will save draft ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "Saving draft ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Deleting draft ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Select category"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Selecionar tipo de tópico:",
        DiscussionExpl: "Uma discussão sobre algo.",
        QuestionExpl: "Uma resposta pode ser marcada como a resposta aceita.",
        ProblExpl: "Se algo está quebrado ou não funciona. Pode ser marcado como consertado/resolvido.",
        IdeaExpl: "Uma sugestão. Pode ser marcado como concluído/implementado.",
        ChatExpl: "Uma conversação provavelmente sem fim.",
        PrivChatExpl: "Só visível para pessoas convidadas a se associar ao chat.",
        CustomHtml: "Página HTML personalizada",
        InfoPage: "Página de informação",
        Code: "Código",
        EmbCmts: "Comentários incorporados",
        About: "Sobre",
        PrivChat: "Chat Privado",
        Form: "Formulário"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "No more communities to join.",
        SelCmty: "Select community ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Text to search for"
    },
    // No internet    // MISSING x 3
    ni: {
        NoInet: "No internet connection",
        PlzRefr: "Refresh page to see any latest changes. (There was a disconnection)",
        RefrNow: "Refresh now"
    },
    // MISSING:
    PostDeleted: function (postNr) { return "That post, nr ".concat(postNr, ", has been deleted."); },
    NoSuchPost: function (postNr) { return "There's no post nr ".concat(postNr, " on this page."); },
    NoPageHere: "This page has been deleted, or it never existed, or you may not access it.",
    GoBackToLastPage: "Go back to last page"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_ru_RU = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Активный",
    Activity: "Активность",
    Add: "Добавить",
    AddingDots: "Добавить ...",
    Admin: "Админ",
    AdvSearch: "Расширенный поиск",
    Away: "Прочь",
    Back: "Назад",
    BlogN: "Блог",
    Bookmarks: "Закладки",
    Cancel: "Отмена",
    Categories: "Категории",
    Category: "Категория",
    ChangeV: "Изменить",
    Continue: "Продолжить",
    ClickToShow: "Нажмите, чтобы показать",
    ChangeDots: "Изменить ...",
    ChatN: "Чат",
    Chatting: "Беседы",
    CheckYourEmail: "Проверьте свой email",
    Close: "Закрыть",
    closed: "закрыто",
    Created: "Created",
    Delete: "Удалить",
    Deleted: "Удалено",
    DirectMessage: "Прямое сообщение",
    Discussion: "Обсуждение",
    discussion: "обсуждение",
    done: "готово",
    EditV: "Ред",
    Editing: "Редактировать",
    EmailAddress: "Email адрес",
    EmailAddresses: "Email адрес",
    EmailSentD: "Email отправлен.",
    Forum: "Форум",
    GetNotifiedAbout: "Получать уведомления об",
    GroupsC: "Группы:",
    Hide: "Спрятать",
    Home: "Главная",
    Idea: "Идея",
    Join: "Присоединиться",
    KbdShrtcsC: "Горячие клавиши: ",
    Loading: "Загрузка...",
    LoadMore: "Загрузить больше ...",
    LogIn: "Войти",
    LoggedInAs: "Войти как ",
    LogOut: "Выйти",
    Maybe: "Возможно",
    Manage: "Управлять",
    Members: "Участники",
    MessageN: "Сообщение",
    MoreDots: "Больше...",
    Move: "Переехать",
    Name: "Имя",
    NameC: "Имя:",
    NewTopic: "Новая тема",
    NoCancel: "Нет, отменить",
    Notifications: "Уведомления",
    NotImplemented: "(Не реализована)",
    NotYet: "Еще нет",
    NoTitle: "Без названия",
    NoTopics: "Нет тем.",
    Okay: "Хорошо",
    OkayDots: "Хорошо ...",
    Online: "В сети",
    onePerLine: "по одному в строке",
    PreviewV: "Предварительный просмотр",
    Problem: "Проблема",
    progressN: "прогресс",
    Question: "Вопрос",
    Recent: "Последний",
    Remove: "Удалить",
    Reopen: "Возобновить",
    ReplyV: "Ответить",
    Replying: "Ответ",
    Replies: "Ответы",
    replies: "ответы",
    Save: "Сохранить",
    SavingDots: "Сохранение ...",
    SavedDot: "Сохраненный.",
    Search: "Поиск",
    SendMsg: "Отправить сообщение",
    ShowPreview: "Show preview",
    SignUp: "Войти",
    Solution: "Решение",
    started: "началось",
    Summary: "Итого",
    Submit: "Submit",
    Tag: "Tag",
    Tags: "Tags",
    Tools: "Инструменты",
    Topics: "Темы",
    TopicTitle: "Название темы",
    TopicType: "Тип темы",
    UploadingDots: "Выгрузка...",
    Username: "Имя пользователя",
    Users: "Пользователи",
    Welcome: "Добро пожаловать!",
    Wiki: "Вики",
    Yes: "Да",
    YesBye: "Да, пока",
    YesDoThat: "Да, сделать",
    You: "Ты",
    you: "ты",
    // Trust levels.
    Guest: "Гость",
    NewMember: "Новый участник",
    BasicMember: "Основной участник",
    FullMember: "Полноценный участник",
    TrustedMember: "Доверенный участник",
    RegularMember: "Доверенный постоянный",
    CoreMember: "Основной участник",
    // Periods.
    PastDay: "Вчера",
    PastWeek: "Прошлая Неделя",
    PastMonth: "Прошлый Месяц",
    PastQuarter: "Прошлый Квартал",
    PastYear: "Прошлый Год",
    AllTime: "Все Время",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "м",
    daysLtr: "д",
    hoursLtr: "ч",
    minsLtr: "м",
    secsLtr: "с",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "1 день назад" : "".concat(numDays, " \u0434\u043D\u0435\u0439 \u043D\u0430\u0437\u0430\u0434");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1 час назад" : "".concat(numHours, " \u0447\u0430\u0441\u043E\u0432 \u043D\u0430\u0437\u0430\u0434");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1 минуту назад" : "".concat(numMins, " \u043C\u0438\u043D\u0443\u0442 \u043D\u0430\u0437\u0430\u0434");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1 секунду назад" : "".concat(numSecs, " \u0441\u0435\u043A\u0443\u043D\u0434 \u043D\u0430\u0437\u0430\u0434");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Требуется Email",
        NoSpcs: "Без пробелов, пожалуйста",
        InvldAddr: "Неверный email",
        NoBadChrs: "Без странных символов, пожалуйста",
        // Full name input field:
        NotOnlSpcs: "Без пробелов, пожалуйста",
        NoAt: "Без @ пожалуйста",
        // Username input field:
        NoDash: "Без тире (-) пожалуйста",
        DontInclAt: "Не вставляйте @",
        StartEndLtrDgt: "В начали и в конце должна быть буква или цифра",
        OnlLtrNumEtc: "Только буквы (a-z, A-Z) и цифры, и _ (нижнее подчеркивание)",
        // This shown just below the username input:
        UnUnqShrt_1: "Твой ",
        UnUnqShrt_2: "@username",
        UnUnqShrt_3: ", уникальный и короткий",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "\u0414\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043C\u0438\u043D\u0438\u043C\u0443\u043C ".concat(minLength, " \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432"); },
        TooLong: function (maxLength) { return "\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u0434\u043B\u0438\u043D\u043D\u044B\u0439. \u0414\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C ".concat(maxLength, " \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Каждый пост",
        EveryPostInTopic: "Вы будете уведомлены обо всех новых ответах в этой теме.",
        EveryPostInCat: "Вы будете уведомлены обо всех новых темах и ответах в этой категории.",
        EveryPostInTopicsWithTag: "Вы будете уведомлены о новых темах с этим тегом, и все ответах в этих темах.",
        EveryPostWholeSite: "Вы будете получать уведомления обо всех новых темах и ответах, где угодно.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Новые темы",
        NewTopicsInCat: "Вы будете получать уведомления о новых темах в этой категории.",
        NewTopicsWithTag: "Вы будете получать уведомления о новых темах с этим тегом.",
        NewTopicsWholeSite: "Вы будете получать уведомления о всех новых темах.",
        Tracking: "Отслеживать",
        Normal: "Обычный",
        NormalDescr: "Вы будете уведомлены, если кто-то говорит с вами, также косвенно, например, " +
            "ответить на ответ вам.",
        //NormalTopic_1: "You'll be notified if someone talks to you, or mentions your ",
        //NormalTopic_2: "@name",
        Hushed: "Замяли",
        HushedDescr: "Вы будете уведомлены, только если кто-то говорит напрямую с вами.",
        Muted: "Приглушенный",
        MutedTopic: "Нет уведомлений."
    },
    // Forum intro text
    fi: {
        Edit: "Ред",
        Hide_1: "Скрыть",
        Hide_2: ", щелчок ",
        Hide_3: " вновь открыть"
    },
    // Forum categories
    fcs: {
        All: "Все"
    },
    // Forum buttons
    fb: {
        TopicList: "Список тем",
        // Select category dropdown
        from: "с",
        "in": "в",
        AllCats: "Все категории",
        // Topic sort order
        Active: "Активен первым",
        ActiveDescr: "Сначала показать последние активные темы",
        New: "Новый",
        NewDescr: "Сначала показать новые темы",
        Top: "Популярные",
        TopDescr: "Сначала показать популярные темы",
        // Topic filter dropdown
        AllTopics: "Все темы",
        ShowAllTopics: "Показать все темы",
        ShowAllTopicsDescr: "Не удаленные темы, хотя",
        WaitingTopics: "Ожидание темы",
        OnlyWaitingDescr_1: "Показывает только темы ",
        OnlyWaitingDescr_2: "ожидания ",
        OnlyWaitingDescr_3: "для решения или для реализации и выполнения",
        YourTopics: "Ваши темы",
        AssignedToYou: "Назначено вам",
        DeletedTopics: "Показать удаленные",
        ShowDeleted: "Показать удаленные",
        ShowDeletedDescr: "Показать все темы, включая удаленные темы",
        // Rightmost buttons
        ViewCategories: "Посмотреть категории",
        EditCat: "Изменить Категорию",
        CreateCat: "Создать Категорию",
        CreateTopic: "Создать Тему",
        PostIdea: "Добавить Идею",
        AskQuestion: "Задать вопрос",
        ReportProblem: "Сообщить о проблеме",
        CreateMindMap: "Создать Mind Map",
        CreatePage: "Создать Страницу"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Поясняющие иконки...",
        IconExplanation: "Поясняющие иконки:",
        ExplGenDisc: "Общее обсуждение.",
        ExplQuestion: "Вопрос без ответа.",
        ExplAnswer: "Вопрос с принятым ответом.",
        ExplIdea: "Идея / предложение.",
        ExplProblem: "Проблема.",
        ExplPlanned: "Что-то, что мы планируем сделать или исправить.",
        ExplDone: "Что-то, что было сделано или исправлено.",
        ExplClosed: "Тема закрыта.",
        ExplPinned: "Тема всегда указана первой (возможно, только в своей категории).",
        PopularTopicsComma: "Популярные темы, ",
        TopFirstAllTime: "Сначала показать самые популярные темы, за все время.",
        TopFirstPastDay: "Показать темы, популярные за прошедший день.",
        CatHasBeenDeleted: "Эта категория была удалена",
        TopicsActiveFirst: "Темы, недавно активные в первую очередь",
        TopicsNewestFirst: "Темы, сначала новые",
        CreatedOn: "Создано на ",
        LastReplyOn: "\nПоследний ответить на ",
        EditedOn: "\nОтредактировано на ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "создал тему",
        frequentPoster: "частый постер",
        mostRecentPoster: "самый последний постер",
        inC: "в: ",
        TitleFixed: "Было исправлено",
        TitleDone: "Было сделано",
        TitleStarted: "Мы начали это",
        TitleStartedFixing: "Мы начали это исправлять",
        TitleUnsolved: "Нерешенная проблема",
        TitleIdea: "Идея",
        TitlePlanningFix: "Мы планируем это исправить",
        TitlePlanningDo: "Мы планируем сделать это",
        TitleChat: "Канал чата",
        TitlePrivateChat: "Частный канал чата",
        TitlePrivateMessage: "Личное сообщение",
        TitleInfoPage: "Информационная страница",
        TitleDiscussion: "Обсуждение",
        IsPinnedGlobally: "\nОн был закреплен, поэтому он указан первым.",
        IsPinnedInCat: "\nОн был закреплен в своей категории, поэтому занял первое место в своей категории."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Последние темы (что ждут)",
        RecentTopicsInclDel: "Последние темы (включая удаленные)",
        RecentTopics: "Последние темы",
        _replies: " ответы",
        _deleted: " (удален)",
        _defCat: " (категория по умолчанию)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Недавние Посты",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " онлайн в этом чате",
        NumOnlForum: " онлайн на этом форуме",
        // Open left-sidebar button title.
        WatchbBtn: "Ваши темы",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Ваши последние темы, присоединенные чаты, прямые сообщения",
        // Title shown on user profile pages.
        AbtUsr: "О пользователе",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Вернуться из профиля пользователя",
        BackFromAdm: "Вернуться из админки",
        // Title shown on full text search page.
        SearchPg: "Страница поиска"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Добавить ...",
        RecentlyViewed: "Недавно просмотренные темы",
        JoinedChats: "Вступившие в Чаты",
        ChatChannels: "Каналы чата",
        CreateChat: "Создать канал чата",
        DirectMsgs: "Прямые сообщения",
        NoChats: "Нет",
        NoDirMsgs: "Нет",
        // The click-topic dropdown menu:
        TopicActions: "Тематические действия",
        ViewPeopleHere: "Посмотреть людей здесь",
        ViewAddRemoveMembers: "Просмотреть / добавить / удалить участников",
        ViewChatMembers: "Просмотр участников чата",
        EditChat: "Изменить описание чата",
        //EditChat: "Edit chat title and purpose", // Keep, in case adds back edit-title input
        LeaveThisChat: "Покинуть этот чат",
        LeaveThisCommunity: "Покинуть это сообщество",
        JoinThisCommunity: "Присоединяйтесь к этому сообществу"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Последние комментарии в этой теме:",
        NoComments: "Комментариев нет.",
        YourBookmarks: "Ваши закладки:",
        UsersOnline: "Пользователи онлайн:",
        UsersOnlineForum: "Пользователи онлайн на этом форуме:",
        UsersInThisChat: "Пользователи в этом чате:",
        UsersInThisTopic: "Пользователи в этой теме:",
        GettingStartedGuide: "Руководство Админа",
        AdminGuide: "Руководство Админа",
        Guide: "Руководство",
        // How to hide the sidebar.
        CloseShortcutS: "Закрыть (сочетание клавиш: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Добавить больше людей",
        // Shown next to one's own username, in a list of users.
        thatsYou: "это ты",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Кажется, только ты",
        YouAnd: "Ты и ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " человек" : " люди";
            var have = numStrangers === 1 ? "имеет" : "имеют";
            return numStrangers + people + " кто " + have + " не вошел";
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "Ответы слева отсортированы по ",
        bestFirst: "самый первый.",
        ButBelow: "Но ниже ",
        insteadBy: " одни и те же ответы сортируются по ",
        newestFirst: "новые впереди.",
        SoIfLeave: "Так что если вы уйдете и вернетесь сюда позже, ниже вы найдете ",
        allNewReplies: "все новые ответы.",
        Click: "Нажмите",
        aReplyToReadIt: " ответ ниже, чтобы его прочитать - потому что только выдержка показана ниже."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Нажмите, чтобы изменить статус",
        ClickToViewAnswer: "Нажмите, чтобы посмотреть ответ",
        ViewAnswer: "Посмотреть ответ",
        ChangeStatusC: "Изменить статус на:",
        ChangeCatC: "Изменить категорию:",
        ChangeTopicTypeC: "Изменить тип темы:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "вопрос",
        hasAccptAns: "имеет принятый ответ",
        aProblem: "проблема",
        planToFix: "планирую исправить",
        anIdea: "идея",
        planToDo: "планирую сделать"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Эта форма была ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "закрыто; Вы больше не можете заполнить и опубликовать его.",
        ThisTopicClosed_1: "Эта тема была ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". Вы все еще можете оставлять комментарии.",
        ThisPageDeleted: "Эта страница была удалена",
        CatDeldPageToo: "Категория удалена, поэтому эта страница также была удалена",
        ThreadDeld: "Тема удалена",
        CmntDeld: "Комментарий удален",
        PostDeld: "Пост удален",
        DiscDeld: "Обсуждение удалено",
        PageDeld: "Страница удалена",
        TitlePendAppr: "Название в ожидании утверждения",
        TextPendingApproval: "Текст в ожидании утверждения",
        TooltipQuestClosedNoAnsw: "Вопрос был закрыт без принятого ответа.",
        TooltipTopicClosed: "Тема закрыта.",
        TooltipQuestSolved: "Решенный вопрос",
        TooltipQuestUnsolved: "Нерешенный вопрос",
        StatusDone: "Готово",
        TooltipProblFixed: "Исправлено",
        TooltipDone: "Сделано",
        StatusStarted: "Началось",
        TooltipFixing: "Мы начали исправлять",
        TooltipImplementing: "Мы начали делать",
        StatusPlanned: "Запланированные",
        TooltipProblPlanned: "Мы планируем исправить",
        TooltipIdeaPlanned: "Мы планируем сделать",
        StatusNew: "НОвый",
        StatusNewDtl: "Новая тема, обсуждается",
        TooltipUnsProbl: "Нерешенная проблема",
        TooltipIdea: "Эта идея",
        TooltipPersMsg: "Личное сообщение",
        TooltipChat: "# означает канал чата",
        TooltipPrivChat: "Это частный канал чата",
        TooltipPinnedGlob: "\nПрикреплено глобально.",
        TooltipPinnedCat: "\nЗакреплено в этой категории.",
        SolvedClickView_1: "Решено в посте #",
        SolvedClickView_2: ", нажмите, чтобы посмотреть",
        PostHiddenClickShow: "Сообщение скрыто; нажмите, чтобы показать",
        ClickSeeMoreRepls: "Нажмите, чтобы показать больше ответов",
        ClickSeeMoreComments: "Нажмите, чтобы показать больше комментариев",
        ClickSeeThisComment: "Нажмите, чтобы показать этот комментарий",
        clickToShow: "нажмите, чтобы показать",
        ManyDisagree: "Многие с этим не согласны:",
        SomeDisagree: "Некоторые не согласны с этим:",
        CmtPendAppr: "Комментарий в ожидании одобрения, опубликовано ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Ваш" : "") + " комментарий ниже ожидает одобрения."; },
        _and: " и",
        repliesTo: "ответы на",
        InReplyTo: "В ответ на",
        YourReplyTo: "Your reply to ",
        YourChatMsg: "Your chat message: ",
        YourDraft: "Your draft",
        YourEdits: "Your edits: ",
        YourProgrNoteC: "Your progress note:",
        aProgrNote: "a progress note: ",
        ReplyingToC: "Replying to:",
        ScrollToPrevw_1: "Scroll to ",
        ScrollToPrevw_2: "preview",
        UnfinEdits: "Unfinished edits",
        ResumeEdting: "Resume editing",
        DelDraft: "Delete draft",
        ClickViewEdits: "Нажмите, чтобы посмотреть старые правки",
        By: " ",
        // Discussion ...
        aboutThisIdea: "о том, как и если сделать эту идею",
        aboutThisProbl: "о том, как и если это исправить",
        AddProgrNote: "Добавить заметку о прогрессе",
        // Progress ...
        withThisIdea: "с выполнением этой идеи",
        withThisProbl: "с решением этой проблемы",
        withThis: "с этим"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Уведомления на эту тему:",
        // If is a direct message topic, members listed below this text.
        Msg: "Сообщение",
        SmrzRepls: "Подытожить ответы",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "There are ".concat(numReplies, " replies. Estimated reading time: ").concat(minutes, " minutes");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Done. Summarized ".concat(numSummarized, " replies, of the ").concat(numShownBefore, " replies previously shown.");
        }
    },
    // Post actions
    pa: {
        CloseOwnQuestionTooltip: "Закройте этот вопрос, если вам больше не нужен ответ.",
        CloseOthersQuestionTooltip: "Закройте этот вопрос, если он не нуждается в ответе, например, если " +
            "это не по теме или уже ответили в другой теме.",
        CloseToDoTooltip: "Закройте это задание, если это не нужно делать или исправлять.",
        CloseTopicTooltip: "Закройте эту тему, если она не нуждается в дальнейшем рассмотрении.",
        AcceptBtnExpl: "Примите это как ответ на вопрос или проблему",
        SolutionQ: "Решение?",
        ClickUnaccept: "Нажмите, чтобы отменить этот ответ",
        PostAccepted: "Пост был принят в качестве ответа",
        NumLikes: function (num) { return num === 1 ? "1 Нравится" : num + " Нравится"; },
        NumDisagree: function (num) { return num + " не соглашаться"; },
        NumBury: function (num) { return num === 1 ? "1 Закопал" : num + " Закопали"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Против" : num + " Против"; },
        MoreVotes: "Больше голосов...",
        LikeThis: "Нравится",
        LinkToPost: "Ссылка на этот пост",
        Report: "Сообщить",
        ReportThisPost: "Сообщить об этом сообщении",
        Admin: "Админ",
        DiscIx: "Указатель дискуссий",
        Disagree: "Не согласен",
        DisagreeExpl: "Нажмите здесь, чтобы не согласиться с этим сообщением или предупредить других о фактических ошибках.",
        Bury: "Похронить",
        BuryExpl: "Нажмите, чтобы отсортировать другие сообщения перед этим сообщением. Только сотрудники форума могут видеть ваш голос.",
        Unwanted: "Ненужный",
        UnwantedExpl: "Если вы не хотите этот пост на этом сайте. Это уменьшило бы мое доверие " +
            "в посте автора. Только сотрудники форума могут видеть ваш голос.",
        AddTags: "Добавить/Удалить теги",
        UnWikify: "Un-Wikify",
        Wikify: "Wikify",
        PinDeleteEtc: "Прикрипить / Удалить / Категория ..."
    },
    // Share dialog
    sd: {
        Copied: "Скопировать.",
        CtrlCToCopy: "Нажмите CTRL + C, чтобы скопировать.",
        ClickToCopy: "Нажмите, чтобы скопировать ссылку."
    },
    // Chat
    c: {
        About_1: "Это ",
        About_2: " канал чата, созданный ",
        ScrollUpViewComments: "Прокрутите вверх, чтобы просмотреть старые комментарии",
        Purpose: "Цель:",
        edit: "ред",
        'delete': "удалить",
        MessageDeleted: "(Сообщение удалено)",
        JoinThisChat: "Присоединяйтесь к чату",
        PostMessage: "Отправить сообщение",
        AdvancedEditor: "Расширенный редактор",
        TypeHere: "Введите здесь. Вы можете использовать Markdown и HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Нужен обзор ",
        AdminHelp: "Справка Админа ",
        StaffHelp: "Помощь персонала ",
        DraftsEtc: "Черновики, закладки, задания",
        MoreNotfs: "Посмотреть все уведомления",
        DismNotfs: "отметить все как прочитанное",
        ViewProfile: "Просмотр вашего профиля",
        ViewGroups: "Просмотр групп",
        LogOut: "Выйти",
        UnhideHelp: "Показать справочные сообщения"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Прокрутить до:",
        Scroll: "Прокрутить",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "",
        Back_2: "Назад (B)",
        BackExpl: "Вернитесь к своей предыдущей позиции на этой странице",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Верх страницы",
        PgTopHelp: "Перейти к началу страницы. Клавиша: 1",
        Repl: "Ответы",
        ReplHelp: "Перейдите в раздел Ответы. Клавиша: 2",
        Progr: "Прогресс",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Перейти в раздел Прогресс. Клавиша: 3",
        PgBtm: "Вниз страницы",
        Btm: "Низ",
        BtmHelp: "Перейти в конец страницы. Клавиша: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", и ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " прокрутить назад"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Выберите пользователей",
        AddUsers: "Добавить пользователей"
    },
    // About user dialog
    aud: {
        IsMod: "Модератор.",
        IsAdm: "Администратор.",
        IsDeld: "Деактивирован или удален.",
        ThisIsGuest: "Гостем, может быть кто угодно.",
        ViewInAdm: "Посмотреть в админке",
        ViewProfl: "Просмотреть профиль",
        ViewComments: "Посмотреть другие комментарии",
        RmFromTpc: "Удалить из темы",
        EmAdrUnkn: "Email адрес неизвестен - этот гость не будет уведомлен об ответах."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Предпочтения",
        Invites: "Пригласить",
        DraftsEtc: "Черновики",
        About: "About",
        Privacy: "Конфиденциальность",
        Security: "Безопасность",
        Account: "Аккаунт",
        Interface: "Интерфейс",
        // ----- Overview stats
        JoinedC: "Регистрация: ",
        PostsMadeC: "Посты сделаны: ",
        LastPostC: "Последний пост: ",
        LastSeenC: "В последний раз смотрел: ",
        TrustLevelC: "Уровень доверия: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Загрузить фото",
        ChangePhoto: "Изменить фото",
        ImgTooSmall: "Изображение слишком маленькое: должно быть не менее 100 х 100",
        // ----- Activity
        OnlyStaffCanSee: "Могут видеть только сотрудники и доверенные основные участники.",
        OnlyMbrsCanSee: "Только люди, которые были активными участниками некоторое время, могут видеть это.",
        Nothing: "Нечего показать",
        Posts: "Посты",
        NoPosts: "Нет Постов.",
        Topics: "Темы",
        NoTopics: "Нет Тем.",
        // ----- User status
        UserBanned: "Пользователь забанен",
        UserSuspended: function (dateUtc) { return "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C \u043F\u0440\u0438\u043E\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D \u0434\u043E ".concat(dateUtc, " UTC"); },
        ReasonC: "Причина: ",
        DeactOrDeld: "Был деактивирован или удален.",
        isGroup: " (группа)",
        isGuest: " — гостем, может быть кто угодно",
        isMod: " – модератор",
        isAdmin: " – администратор",
        you: "(ты)",
        // ----- Notifications page
        NoNotfs: "Нет уведомлений",
        NotfsToYouC: "Уведомления для вас:",
        NotfsToOtherC: function (name) { return "\u0423\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F \u0434\u043B\u044F ".concat(name, ":"); },
        DefNotfsSiteWide: "Уведомления по умолчанию для всего сайта",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "for",
        // ----- Drafts Etc page
        NoDrafts: "Нет Черновиков",
        YourDraftsC: "Ваши черновики:",
        DraftsByC: function (name) { return "\u0427\u0435\u0440\u043D\u043E\u0432\u0438\u043A\u0438 ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Здесь вы можете пригласить людей присоединиться к этому сайту. ",
        InvitesListedBelow: "Приглашения, которые вы уже отправили, перечислены ниже.",
        NoInvites: "Вы еще никого не пригласили.",
        InvitedEmail: "Приглашенный email",
        WhoAccepted: "Участник, который принял",
        InvAccepted: "Приглашение принято",
        InvSent: "Приглашение отправлено",
        JoinedAlready: "Уже присоединился",
        SendAnInv: "Пригласить людей",
        SendInv: "Отправить приглашения",
        SendInvExpl: // MISSING I18N changed to pluralis
        "Мы отправим вашим друзьям краткое email. They'll click a link " +
            "присоединиться немедленно, не требуется вход в систему. " +
            "Они станут обычными участниками, а не модераторами или администраторами.",
        //EnterEmail: "Enter email(s)",
        InvDone: "Готово. Я отправлю им email.",
        NoOneToInv: "Никого не приглашать.",
        InvNotfLater: "Я сообщу тебе позже, когда я их пригласил.",
        AlreadyInvSendAgainQ: "Они уже были приглашены - может быть, вы хотели бы пригласить их снова?",
        InvErr_1: "Это привело к ",
        InvErr_2: "ошибке",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "Они уже присоединились, поэтому я не пригласил их:",
        ResendInvsQ: "Повторно отправить приглашения этим людям? Их уже пригласили.",
        InvAgain: "Пригласить снова",
        // ----- Preferences, About
        AboutYou: "О вас",
        WebLink: "Любой ваш сайт или страница.",
        NotShownCannotChange: "Не показывается публично. Не может быть изменено.",
        // The full name or alias:
        NameOpt: "Имя (необязательно)",
        NotShown: "Не показывается публично.",
        // The username:
        MayChangeFewTimes: "Вы можете изменить это только несколько раз.",
        notSpecified: "(не определено)",
        ChangeUsername_1: "Вы можете изменить свое имя пользователя только несколько раз.",
        ChangeUsername_2: "Слишком частое изменение может запутать других — " +
            "они не будут знать, как вас упомянуть.",
        NotfAboutAll: "Получать уведомления о каждом новом сообщении (если вы не отключите тему или категорию)",
        NotfAboutNewTopics: "Получать уведомления о новых темах (если вы не заглушите категорию)",
        ActivitySummaryEmails: "Emails с описанием активности",
        EmailSummariesToGroup: "Когда члены этой группы не заходят сюда, по умолчанию отправьте им электронное письмо " +
            "Сводка популярных тем и прочего.",
        EmailSummariesToMe: "Когда я не посещаю здесь, напишите мне " +
            "Сводка популярных тем и прочего.",
        AlsoIfTheyVisit: "Напишите им также, если они посещают здесь регулярно.",
        AlsoIfIVisit: "Напишите мне также, если я посещаю здесь регулярно.",
        HowOftenWeSend: "Как часто отправлять письма?",
        HowOftenYouWant: "Как часто вы хотите получать письма?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Скрыть свою недавнюю активность для незнакомцев и новых членов?",
        HideActivityStrangers_2: "(Но не для тех, кто некоторое время был активным участником.)",
        HideActivityAll_1: "Скрыть свою недавнюю активность для всех?",
        HideActivityAll_2: "(За исключением администрации и доверенных основных членов.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Email адрес",
        PrimaryDot: "Основной. ",
        VerifiedDot: "Подтвержденный. ",
        NotVerifiedDot: "Не подтверждено. ",
        ForLoginWithDot: function (provider) { return "\u0414\u043B\u044F \u0432\u0445\u043E\u0434\u0430 \u0447\u0435\u0440\u0435\u0437 ".concat(provider, ". "); },
        MakePrimary: "Сделать основной",
        AddEmail: "Добавить email адрес",
        TypeNewEmailC: "Введите новый email адрес:",
        MaxEmailsInfo: function (numMax) { return "(\u0412\u044B \u043D\u0435 \u043C\u043E\u0436\u0435\u0442\u0435 \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C ".concat(numMax, " \u0430\u0434\u0440\u0435\u0441\u043E\u0432.)"); },
        EmailAdded_1: "Добавлен. Мы отправили вам письмо с подтверждением — ",
        EmailAdded_2: "проверьте свою электронную почту.",
        SendVerifEmail: "Отправить письмо с подтверждением",
        EmailStatusExpl: "('Основной' означает, что вы можете войти через этот адрес, и мы отправляем на него уведомления. " +
            "'Подтвержден' означает, что вы нажали ссылку для подтверждения в электронном письме с подтверждением адреса.)",
        // Password:
        ChangePwdQ: "Измени пароль?",
        CreatePwdQ: "Создать пароль?",
        WillGetPwdRstEml: "Вы получите код для сброса пароля по электронной почте.",
        // This is the "None" in:  "Password: None"
        PwdNone: "Нет",
        // Logins:
        LoginMethods: "Способы входа",
        commaAs: ", как: ",
        // One's data:
        YourContent: "Ваш контент",
        DownloadPosts: "Скачать посты",
        DownloadPostsHelp: "Создает JSON файл с копией опубликованных вами тем и комментариев.",
        DownloadPersData: "Скачать личные данные",
        DownloadPersDataHelp: "Создает файл JSON с копией ваших личных данных, например, твое имя " +
            "(если вы указали имя) и адрес электронной почты.",
        // Delete account:
        DangerZone: "Опасная зона",
        DeleteAccount: "Удалить аккаунт",
        DeleteYourAccountQ: "Удалить ваш аккаунт? Мы удалим ваше имя, забудем ваш адрес электронной почты, пароль и " +
            "любые онлайн-идентификаторы (например, Facebook или Twitter). " +
            "Вы не сможете снова войти. И это не может быть отменено.",
        DeleteUserQ: "Удалить этого пользователя? Мы удалим имя, забудем адрес электронной почты, пароль и " +
            "онлайн-идентификаторы (например, Facebook или Twitter). " +
            "Пользователь не сможет снова войти. И это не может быть отменено.",
        YesDelete: "Да, удалить"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Участники группы",
        NoMembers: "Нет участников.",
        MayNotListMembers: "Может не быть списка участников.",
        AddMembers: "Добавить участников",
        BuiltInCannotModify: "Встроенная группа; не может быть изменена.",
        NumMembers: function (num) { return "".concat(num, " \u0443\u0447\u0430\u0441\u0442\u043D\u0438\u043A\u043E\u0432"); },
        YouAreMember: "Вы участник.",
        CustomGroupsC: "Пользовательские группы:",
        BuiltInGroupsC: "Встроенные группы:",
        DeleteGroup: "Удалить эту группу"
    },
    // Create user dialog
    cud: {
        CreateUser: "Создать пользователя",
        CreateAccount: "Регистрация",
        EmailC: "Email:",
        keptPriv: "будет храниться в тайне",
        forNotfsKeptPriv: "для ответных уведомлений, закрытых",
        EmailVerifBy_1: "Ваш адрес электронной почты был подтвержден ",
        EmailVerifBy_2: ".",
        UsernameC: "Имя:",
        FullNameC: "Полное имя:",
        optName: "по желанию",
        //OrCreateAcct_1: "Или ",
        //OrCreateAcct_2: "завести аккаунт",
        //OrCreateAcct_3: " с участием ",
        //OrCreateAcct_4: "@username",
        //OrCreateAcct_5: " & пароль",
        DoneLoggedIn: "Аккаунт создан. Вы вошли.",
        AlmostDone: "Почти сделано! Вам просто нужно подтвердить свой адрес электронной почты. У нас есть " +
            "отправил вам электронное письмо. Пожалуйста, нажмите на ссылку в письме, чтобы активировать " +
            "ваш аккаунт. Вы можете закрыть эту страницу."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Условия и Конфиденциальность",
        Accept_1: "Вы принимаете наши ",
        TermsOfService: "Условия Использования",
        TermsOfUse: "Условия Эксплуатации",
        Accept_2: " и ",
        PrivPol: "Политику конфиденциальности",
        Accept_3_User: "?",
        Accept_3_Owner: " для владельцев сайтов?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Да я принимаю"
    },
    // Password input
    pwd: {
        PasswordC: "Пароль:",
        StrengthC: "Сложность: ",
        FairlyWeak: "Очень слабый.",
        toShort: "слишком короткий",
        TooShort: function (minLength) { return "\u0421\u043B\u0438\u0448\u043A\u043E\u043C \u043A\u043E\u0440\u043E\u0442\u043A\u0438\u0439. \u0414\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u0445\u043E\u0442\u044F \u0431\u044B ".concat(minLength, " \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432"); },
        PlzInclDigit: "Пожалуйста, включите цифру или специальный символ",
        TooWeak123abc: "Слишком слабый. Не используйте пароли, такие как '12345' или 'abcde'.",
        AvoidInclC: "Не используйте в пароле ваше имя или адрес электронной почты:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Страница не найдена или Доступ запрещен.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "Вы выдает себя за кого-то, кто не может иметь доступ к этой части " +
            "сайта.",
        IfYouThinkExistsThen: "Если вы считаете, что страница существует, войдите в систему как пользователь, который может получить к ней доступ. ",
        LoggedInAlready: "(Вы уже вошли в систему, но, возможно, это не та учетная запись?) ",
        ElseGoToHome_1: "В противном случае вы можете ",
        ElseGoToHome_2: "перейти на главную страницу.",
        CreateAcconut: "Регистрация",
        ContinueWithDots: "Продолжить с ...",
        SignUp: "Зарегистрироваться",
        LogIn: "Войти",
        LogInWithPwd: "Войти с паролем",
        CreateAdmAcct: "Создать аккаунт администратора:",
        AuthRequired: "Требуется аутентификация для доступа к сайту",
        LogInToLike: "Войдите, чтобы поставить Нравится посту",
        LogInToSubmit: "Войдите и отправьте",
        LogInToComment: "Войдите, чтобы оставить комментарий",
        LogInToCreateTopic: "Войдите, чтобы создать тему",
        //AlreadyHaveAcctQ: "У вас есть аккаунт? ",  // MISSING changed "Already have...?" to "You have...?"
        OrLogIn_1: "",
        OrLogIn_2: "Войти",
        OrLogIn_3: " вместо",
        //NewUserQ: "Новый пользователь? ",
        SignUpInstead_1: "",
        SignUpInstead_2: "Зарегистрироваться",
        SignUpInstead_3: " вместо",
        // MAYBE x3:
        OrTypeName_1: ", или просто ",
        OrTypeName_2: "введите свое имя",
        OrTypeName_3: "",
        OrCreateAcctHere: "Или создать аккаунт:",
        OrTypeName: "Или введите свое имя:",
        OrLogIn: "Или войти:",
        YourNameQ: "Твое имя?",
        BadCreds: "Неверное имя пользователя или пароль",
        UsernameOrEmailC: "Имя пользователя или адрес email:",
        PasswordC: "Пароль:",
        ForgotPwd: "Вы забыли свой пароль?",
        NoPwd: "Вы еще не выбрали пароль.",
        CreatePwd: "Создать пароль"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Пожалуйста, расскажите нам, что вас беспокоит.",
        ThanksHaveReported: "Благодарю. Вы сообщили об этом. Сотрудники форума посмотрят.",
        ReportComment: "Пожаловаться на комментарий",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Этот пост содержит личные данные, например, чье-то настоящее имя.",
        OptOffensive: "Этот пост содержит оскорбительное или оскорбительное содержание.",
        OptSpam: "Этот пост является нежелательной рекламой.",
        OptOther: "Сообщить сотрудникам об этой посте по какой-то другой причине."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "Вы можете снова видеть справочные сообщения, если вы вошли в систему, " +
            "щелкнув свое имя, а затем ",
        YouCanShowAgain_2: "Показать справочные сообщения"
    },
    // Editor
    e: {
        SimilarTopicsC: "Похожие темы:",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "Извините, но в настоящее время вы можете загружать только один файл за раз",
        PleaseFinishPost: "Пожалуйста, сначала закончите писать свой пост",
        PleaseFinishChatMsg: "Пожалуйста, сначала закончите писать свое сообщение в чате",
        PleaseFinishMsg: "Пожалуйста, сначала закончите писать свое сообщение",
        PleaseSaveEdits: "Пожалуйста, сначала сохраните ваши текущие изменения",
        PleaseSaveOrCancel: "Пожалуйста, сначала сохраните или отмените новую тему",
        CanContinueEditing: "Вы можете продолжить редактировать свой текст, если снова откроете редактор.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Пожалуйста, не удаляйте весь текст. Напиши что-нибудь.",
        PleaseWriteSth: "Пожалуйста, напишите что-нибудь.",
        PleaseWriteTitle: "Пожалуйста, напишите название темы.",
        PleaseWriteMsgTitle: "Пожалуйста, напишите название сообщения.",
        PleaseWriteMsg: "Пожалуйста, напишите сообщение.",
        exBold: "жирный текст",
        exEmph: "выделенный текст",
        exPre: "преформатированный текст",
        exQuoted: "цитируемый текст",
        ExHeading: "Заголовок",
        TitlePlaceholder: "Введите название - что это, в одном коротком предложении?",
        EditPost_1: "Ред ",
        EditPost_2: "пост ",
        TypeChatMsg: "Введите сообщение чата:",
        YourMsg: "Твое сообщение:",
        CreateTopic: "Создать новую тему",
        CreateCustomHtml: "Создать пользовательскую HTML-страницу (добавь свой <h1> заголовок)",
        CreateInfoPage: "Создать информационную страницу",
        CreateCode: "Создать страницу с исходным кодом",
        AskQuestion: "Задайте вопрос",
        ReportProblem: "Сообщить о проблеме",
        SuggestIdea: "Предложить идею",
        NewChat: "Название и назначение нового канала чата",
        NewPrivChat: "Название и цель нового приватного чата",
        AppendComment: "Добавить комментарий внизу страницы:",
        ReplyTo: "Ответить на ",
        ReplyTo_theOrigPost: "Оригинальный Пост",
        ReplyTo_post: "пост ",
        AddCommentC: "Add a comment:",
        PleaseSelectPosts: "Пожалуйста, выберите одно или несколько сообщений для ответа.",
        Save: "Сохранить",
        edits: "ред",
        PostReply: "Ответить",
        Post: "Пост",
        comment: "комментарий",
        question: "вопрос",
        PostMessage: "Отправить сообщение",
        SimpleEditor: "Простой редактор",
        Send: "Отправить",
        message: "сообщение",
        Create: "Создать",
        page: "страницу",
        chat: "чат",
        idea: "идею",
        topic: "тему",
        Submit: "Отправить",
        problem: "проблема",
        ViewOldEdits: "Посмотреть старые правки",
        UploadBtnTooltip: "Загрузить файл или изображение",
        BoldBtnTooltip: "Сделать текст жирным",
        EmBtnTooltip: "Подчеркнуть",
        QuoteBtnTooltip: "Цитата",
        PreBtnTooltip: "Предварительно отформатированный текст",
        HeadingBtnTooltip: "Заголовок",
        TypeHerePlaceholder: "Введите здесь. Вы можете использовать Markdown и HTML. Перетащите, чтобы вставить изображения.",
        Maximize: "Максимизация",
        ToNormal: "Вернуться к нормальному",
        TileHorizontally: "Плитка горизонтально",
        PreviewC: "Превью:",
        TitleExcl: " (название исключено)",
        ShowEditorAgain: "Показать редактор снова",
        Minimize: "Минимизировать",
        IPhoneKbdSpace_1: "(Это серое пространство зарезервировано",
        IPhoneKbdSpace_2: "для клавиатуры iPhone.)",
        PreviewInfo: "Здесь вы можете просмотреть, как будет выглядеть ваш пост.",
        CannotType: "Вы не можете здесь печатать.",
        LoadingDraftDots: "Загрузка любого черновика ...",
        DraftUnchanged: "Без изменений.",
        CannotSaveDraftC: "Не удается сохранить черновик:",
        DraftSavedBrwsr: "Draft saved, in browser.",
        DraftSaved: function (nr) { return "\u0427\u0435\u0440\u043D\u043E\u0432\u0438\u043A ".concat(nr, " \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D."); },
        DraftDeleted: function (nr) { return "\u0427\u0435\u0440\u043D\u043E\u0432\u0438\u043A ".concat(nr, " \u0443\u0434\u0430\u043B\u0435\u043D."); },
        WillSaveDraft: function (nr) { return "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442 \u0447\u0435\u0440\u043D\u043E\u0432\u0438\u043A ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "\u0421\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435 \u0447\u0435\u0440\u043D\u043E\u0432\u0438\u043A\u0430 ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "\u0423\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u0447\u0435\u0440\u043D\u043E\u0432\u0438\u043A\u0430 ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Выберите категорию"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Выберите тип темы:",
        DiscussionExpl: "Дискуссия о чем-то.",
        QuestionExpl: "Один ответ может быть помечен как принятый ответ.",
        ProblExpl: "Если что-то сломано или не работает. Может быть помечен как исправленный/решенный.",
        IdeaExpl: "Предложение. Может быть помечено как выполненное/выполненное.",
        ChatExpl: "Возможно, бесконечный разговор.",
        PrivChatExpl: "Видны только тем, кого пригласили присоединиться к чату.",
        CustomHtml: "Пользовательская HTML-страница",
        InfoPage: "Информационная страница",
        Code: "Код",
        EmbCmts: "Встроенные комментарии",
        About: "About",
        PrivChat: "Приватный чат",
        Form: "Форма"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "Нет больше сообществ, чтобы присоединиться.",
        SelCmty: "Выберите сообщество ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Текст для поиска"
    },
    // No internet
    ni: {
        NoInet: "Подключение к Интернету отсутствует",
        PlzRefr: "Обновите страницу, чтобы увидеть последние изменения. (Было отключение)",
        RefrNow: "Обновить сейчас"
    },
    PostDeleted: function (postNr) { return "\u041F\u043E\u0441\u0442, \u043D\u043E\u043C\u0435\u0440 ".concat(postNr, ", \u0431\u044B\u043B \u0443\u0434\u0430\u043B\u0435\u043D."); },
    NoSuchPost: function (postNr) { return "\u041D\u0430 \u044D\u0442\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u043D\u0435\u0442 \u043F\u043E\u0441\u0442\u0430, \u043D\u043E\u043C\u0435\u0440 ".concat(postNr, "."); },
    NoPageHere: "Эта страница была удалена, или ее никогда не было, или вы не можете получить к ней доступ.",
    GoBackToLastPage: "Вернуться на последнюю страницу"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_sv_SE = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Aktiva",
    Activity: "Aktivitet",
    Add: "Lägg till",
    AddingDots: "Lägger till ...",
    Admin: "Admin",
    AdvSearch: "Avancerad sökning",
    Away: "Borta",
    Back: "Tillbaks",
    BlogN: "Blogg",
    Bookmarks: "Bokmärken",
    Cancel: "Ångra",
    Categories: "Kategorier",
    Category: "Kategori",
    ChangeV: "Ändra",
    Continue: "Fortsätt",
    ClickToShow: "Tryck för att visa",
    ChangeDots: "Ändra ...",
    ChatN: "Chatt",
    Chatting: "Chattar",
    CheckYourEmail: "Kolla din mejl",
    Close: "Stäng",
    closed: "Stängd",
    Created: "Skapad",
    Delete: "Ta bort",
    Deleted: "Borttagen",
    DirectMessage: "Direktmeddelande",
    Discussion: "Diskussion",
    discussion: "diskussion",
    done: "klart",
    EditV: "Editera",
    Editing: "Editerar",
    EmailAddress: "Meljadress",
    EmailAddresses: "Mejladresser",
    EmailSentD: "Mejl skickat.",
    Forum: "Forum",
    GetNotifiedAbout: "Bli notifierad om",
    GroupsC: "Grupper:",
    Hide: "Göm",
    Home: "Hem",
    Idea: "Idé",
    Join: "Joina",
    KbdShrtcsC: "Keyboard shortcuts: ",
    Loading: "Laddar...",
    LoadMore: "Mer ...",
    LogIn: "Logga in",
    LoggedInAs: "Logged in as ",
    LogOut: "Logga ut",
    Maybe: "Kanske",
    Manage: "Manage",
    Members: "Medlemmar",
    MessageN: "Meddelande",
    MoreDots: "Mer...",
    Move: "Flytta",
    Name: "Namn",
    NameC: "Namn:",
    NewTopic: "Nytt ämne",
    NoCancel: "Nej, ångra",
    Notifications: "Notifications",
    NotImplemented: "(Not implemented)",
    NotYet: "Not yet",
    NoTitle: "No title",
    NoTopics: "No topics.",
    Okay: "Okej",
    OkayDots: "Okej ...",
    Online: "Online",
    onePerLine: "en per rad",
    PreviewV: "Preview",
    Problem: "Problem",
    progressN: "progress",
    Question: "Fråga",
    Recent: "Recent",
    Remove: "Ta bort",
    Reopen: "Öppna",
    ReplyV: "Svara",
    Replying: "Svarar",
    Replies: "Svar",
    replies: "svar",
    Save: "Spara",
    SavingDots: "Sparar ...",
    SavedDot: "Saved.",
    Search: "Sök",
    SendMsg: "Skicka Meddelande",
    ShowPreview: "Förhandsgranska",
    SignUp: "Signa Upp",
    Solution: "Lösning",
    started: "Påbörjat",
    Summary: "Sammanfattning",
    Submit: "Skicka",
    Tag: "Tagg",
    Tags: "Tagsar",
    Tools: "Verktyg",
    Topics: "Ämnen",
    TopicTitle: "Ämnenstitel",
    TopicType: "Ämnestyp",
    UploadingDots: "Laddar upp...",
    Username: "Användarnamn",
    Users: "Medlemmar",
    Welcome: "Välkommen",
    Wiki: "Wiki",
    Yes: "Ja",
    YesBye: "Ja, hej då",
    YesDoThat: "Ja, gör det",
    You: "Du",
    you: "du",
    // Trust levels.
    Guest: "Gäst",
    NewMember: "Ny medlem",
    BasicMember: "Grundmedlem",
    FullMember: "Full medlem",
    TrustedMember: "Betrodd medlem",
    RegularMember: "Betrodd reguljär",
    CoreMember: "Kärnmedlem",
    // Periods.
    PastDay: "Senaste Dagen",
    PastWeek: "Senaste Veckan",
    PastMonth: "Senaste Månaden",
    PastQuarter: "Senaste Kvartalet",
    PastYear: "Senaste Året",
    AllTime: "All Tid",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "mån",
    daysLtr: "d",
    hoursLtr: "t",
    minsLtr: "m",
    secsLtr: "s",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "1 dag sedan" : "".concat(numDays, " dagar sedan");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1 timme sedan" : "".concat(numHours, " timmar sedan");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1 minut sedan" : "".concat(numMins, " minuter sedan");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1 sekund sedan" : "".concat(numSecs, " sekunder sedan");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Email required",
        NoSpcs: "No spaces please",
        InvldAddr: "Not a valid email address",
        NoBadChrs: "No weird characters please",
        // Full name input field:
        NotOnlSpcs: "Not just spaces please",
        NoAt: "No @ please",
        // Username input field:
        NoDash: "No dashes (-) please",
        DontInclAt: "Don't include the @",
        StartEndLtrDgt: "Start and end with a letter or a digit",
        OnlLtrNumEtc: "Only letters (a-z, A-Z) and numbers, and _ (underscore)",
        // This shown just below the username input:
        UnUnqShrt_1: "Your ",
        UnUnqShrt_2: "@username",
        UnUnqShrt_3: ", unique and short",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "Should be at least ".concat(minLength, " characters"); },
        TooLong: function (maxLength) { return "Too long. Should be at most ".concat(maxLength, " characters"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Every Post",
        EveryPostInTopic: "You'll be notified of all new replies in this topic.",
        EveryPostInCat: "You'll be notified of all new topics and replies, in this category.",
        EveryPostInTopicsWithTag: "You'll be notified of new topics with this tag, and all replies in those topics.",
        EveryPostWholeSite: "You'll be notified of all new topics and replies, anywhere.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "New Topics",
        NewTopicsInCat: "You'll be notified of new topics in this category.",
        NewTopicsWithTag: "You'll be notified of new topics with this tag.",
        NewTopicsWholeSite: "You'll be notified of new topics, anywhere.",
        Tracking: "Tracking",
        Normal: "Normal",
        NormalDescr: "You'll be notified if someone talks to you, also indirectly, e.g. a " +
            "reply to a reply to you.",
        //NormalTopic_1: "You'll be notified if someone talks to you, or mentions your ",
        //NormalTopic_2: "@name",
        Hushed: "Hushed",
        HushedDescr: "You'll be notified only if someone talks directly to you.",
        Muted: "Muted",
        MutedTopic: "No notifications."
    },
    // Forum intro text
    fi: {
        Edit: "Edit",
        Hide_1: "Hide",
        Hide_2: ", click ",
        Hide_3: " to reopen"
    },
    // Forum categories
    fcs: {
        All: "Alla"
    },
    // Forum buttons
    fb: {
        TopicList: "Ämneslista",
        // Select category dropdown
        from: "från",
        "in": "i",
        AllCats: "Alla kategorier",
        // Topic sort order
        Active: "Aktiva först",
        ActiveDescr: "Visar nyligen aktiva samtalsämnen först",
        New: "Nya",
        NewDescr: "Visar nyligen skapade ämnen först",
        Top: "Populära",
        TopDescr: "Visar populära ämnen först",
        // Topic filter dropdown
        AllTopics: "Alla ämnen",
        ShowAllTopics: "Visa alla ämnen",
        ShowAllTopicsDescr: "Dock inte raderade ämnen",
        WaitingTopics: "Väntande ämnen",
        OnlyWaitingDescr_1: "Visar bara ämnen som ",
        OnlyWaitingDescr_2: "väntar ",
        OnlyWaitingDescr_3: "på ett svar eller på att bli implementerade och gjorda",
        YourTopics: "Dina ämnen",
        AssignedToYou: "Tilldelade till dig",
        DeletedTopics: "Raderade ämnen",
        ShowDeleted: "Show deleted",
        ShowDeletedDescr: "Shows all topics, including deleted topics",
        // Rightmost buttons
        ViewCategories: "Visa kategorier",
        EditCat: "Editera Kategori",
        CreateCat: "Skapa Kategori",
        CreateTopic: "Skapa Ämne",
        PostIdea: "Posta en idé",
        AskQuestion: "Fråga något",
        ReportProblem: "Rapportera ett problem",
        CreateMindMap: "Skapa en Mind Map",
        CreatePage: "Skapa en sida"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Förklara ikoner ...",
        IconExplanation: "Icon explanation:",
        ExplGenDisc: "A general discussion.",
        ExplQuestion: "A question with no accepted answer.",
        ExplAnswer: "A question with an accepted answer.",
        ExplIdea: "An idea / suggestion.",
        ExplProblem: "A problem.",
        ExplPlanned: "Something we're planning to do or fix.",
        ExplDone: "Something that's been done or fixed.",
        ExplClosed: "Topic closed.",
        ExplPinned: "Topic always listed first (perhaps only in its own category).",
        PopularTopicsComma: "Popular topics, ",
        TopFirstAllTime: "Shows the most popular topics first, all time.",
        TopFirstPastDay: "Shows topics popular during the past day.",
        CatHasBeenDeleted: "This category has been deleted",
        TopicsActiveFirst: "Ämnen, nyligen aktiva först",
        TopicsNewestFirst: "Ämnen, nya först",
        CreatedOn: "Skapat ",
        LastReplyOn: "\nSenaste svaret ",
        EditedOn: "\nÄndrat ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "skapade ämnet",
        frequentPoster: "har skrivit mycket",
        mostRecentPoster: "senaste repliken",
        inC: "i: ",
        TitleFixed: "Detta har fixats",
        TitleDone: "Detta har gjorts",
        TitleStarted: "Har påbörjats",
        TitleStartedFixing: "Har börjat fixa",
        TitleUnsolved: "Detta är ett olöst problem",
        TitleIdea: "Detta är en ide",
        TitlePlanningFix: "Vi planerar att fixa detta",
        TitlePlanningDo: "Vi planerar att göraa detta",
        TitleChat: "Detta är en chatt",
        TitlePrivateChat: "Detta är en privat chatt",
        TitlePrivateMessage: "Detta är ett privat meddelande",
        TitleInfoPage: "Detta är en informationssida",
        TitleDiscussion: "Ett samtal",
        IsPinnedGlobally: "\nFastnålat, så visas först.",
        IsPinnedInCat: "\nFastnålat i sin kategori, så visas först, där."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Senaste ämnena (som väntar på svar)",
        RecentTopicsInclDel: "Senaste ämnena (inkl. borttagna)",
        RecentTopics: "Senaste ämnena",
        _replies: " svar",
        _deleted: " (borttaget)",
        _defCat: " (default kategori)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Senaste replikerna",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " online i denna chatt",
        NumOnlForum: " online i detta forum",
        // Open left-sidebar button title.
        WatchbBtn: "Dina ämnen",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Dina ämnen, chattar, direkta meddelanden",
        // Title shown on user profile pages.
        AbtUsr: "Om hen",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Tillbaks från hens profil",
        BackFromAdm: "Tillbaks från Admin Area",
        // Title shown on full text search page.
        SearchPg: "Söksida"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Lägg till ...",
        RecentlyViewed: "Nyss besökt",
        JoinedChats: "Dina chattar",
        ChatChannels: "Chattkanaler",
        CreateChat: "Skapa chat",
        DirectMsgs: "Direkta meddelanden",
        NoChats: "Inget",
        NoDirMsgs: "Inget",
        // The click-topic dropdown menu:
        TopicActions: "Topic actions",
        ViewPeopleHere: "Se vilka som är här",
        ViewAddRemoveMembers: "Visa / lägg till / ta bort medlemmar",
        ViewChatMembers: "Visa chattmedlemmar",
        EditChat: "Ändra chattens title och syfte",
        LeaveThisChat: "Lämna chatten",
        LeaveThisCommunity: "Lämna denna community",
        JoinThisCommunity: "Gå med i denna community"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Senaste inläggen i detta ämnet:",
        NoComments: "Inget.",
        YourBookmarks: "Dina bokmärken:",
        UsersOnline: "Folk online:",
        UsersOnlineForum: "Folk online i detta forum:",
        UsersInThisChat: "Folk i chatten:",
        UsersInThisTopic: "Folk i detta samtal:",
        GettingStartedGuide: "Admin Guide",
        AdminGuide: "Admin Guide",
        Guide: "Guide",
        // How to hide the sidebar.
        CloseShortcutS: "Stäng (genäg: 'S')",
        // ----- Online users list / Users in current topic
        AddPeople: "Lägg till fler",
        // Shown next to one's own username, in a list of users.
        thatsYou: "det är du",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Bara du, tycks det",
        YouAnd: "Du, och ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? "en annan" : "".concat(numStrangers, " andra");
            return people + " som inte har loggat in";
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "Replikerna till vänster är sorterade ",
        bestFirst: "bäst-först.",
        ButBelow: "Men nedan ",
        insteadBy: " är samma repliker istället sorterade ",
        newestFirst: "nyast-först.",
        SoIfLeave: "Så om du är borta en stund, och kommer tillbaks, så hittar du ",
        allNewReplies: "alla nya repliker, nedanför.",
        Click: "Clicka",
        aReplyToReadIt: " på en replik nedan, för att se hela — " +
            "ty nedan visas endast utdrag."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Click to change status",
        ClickToViewAnswer: "Click to view answer",
        ViewAnswer: "View answer",
        ChangeStatusC: "Change status to:",
        ChangeCatC: "Change category:",
        ChangeTopicTypeC: "Change topic type:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "en fråga",
        hasAccptAns: "har en lösning",
        aProblem: "ett problem",
        planToFix: "planerar fixa",
        anIdea: "en idé",
        planToDo: "planerar göra"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "This form has been ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "closed; you can no longer fill it in and post it.",
        ThisTopicClosed_1: "This topic has been ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". You can still post comments.",
        ThisPageDeleted: "This page has been deleted",
        CatDeldPageToo: "Category deleted, so this page was deleted too",
        ThreadDeld: "Thread deleted",
        CmntDeld: "Comment deleted",
        PostDeld: "Post deleted",
        DiscDeld: "Discussion deleted",
        PageDeld: "Page deleted",
        TitlePendAppr: "Title pending approval",
        TextPendingApproval: "Text pending approval",
        TooltipQuestClosedNoAnsw: "This question has been closed without any accepted answer.",
        TooltipTopicClosed: "This topic is closed.",
        TooltipQuestSolved: "This is a solved question",
        TooltipQuestUnsolved: "This is an unsolved question",
        StatusDone: "Done",
        TooltipProblFixed: "This has been fixed",
        TooltipDone: "This has been done",
        StatusStarted: "Started",
        TooltipFixing: "We're currently fixing this",
        TooltipImplementing: "We're currently implementing this",
        StatusPlanned: "Planned",
        TooltipProblPlanned: "We're planning to fix this",
        TooltipIdeaPlanned: "We're planning to implement this",
        StatusNew: "New",
        StatusNewDtl: "New topic, under discussion",
        TooltipUnsProbl: "This is an unsolved problem",
        TooltipIdea: "This is an idea",
        TooltipPersMsg: "Personal message",
        TooltipChat: "# means Chat Channel",
        TooltipPrivChat: "This is a private chat channel",
        TooltipPinnedGlob: "\nPinned globally.",
        TooltipPinnedCat: "\nPinned in this category.",
        SolvedClickView_1: "Löst i post #",
        SolvedClickView_2: ", clicka för att se",
        PostHiddenClickShow: "Post hidden; click to show",
        ClickSeeMoreRepls: "Show more replies",
        ClickSeeMoreComments: "Show more comments",
        ClickSeeThisComment: "Click to show this comment",
        clickToShow: "click to show",
        ManyDisagree: "Many disagree with this:",
        SomeDisagree: "Some disagree with this:",
        CmtPendAppr: "Comment pending approval, posted ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Your" : "The") + " comment below is pending approval."; },
        _and: " and",
        repliesTo: "svarar till",
        InReplyTo: "Svar till",
        YourReplyTo: "Ditt svar till ",
        YourChatMsg: "Ditt meddelande: ",
        YourDraft: "Ditt utkast",
        YourEdits: "Dina ändringar: ",
        YourProgrNoteC: "Your progress note:",
        aProgrNote: "a progress note: ",
        ReplyingToC: "Svarar till:",
        ScrollToPrevw_1: "Skrolla to ",
        ScrollToPrevw_2: "förhandsgranska",
        UnfinEdits: "Påbörjade ändringar",
        ResumeEdting: "Fortsätt skriva",
        DelDraft: "Radera utkast",
        ClickViewEdits: "Clicka för att se gamla ändringar",
        By: "Av ",
        // Discussion ...
        aboutThisIdea: "about how and if to do this idea",
        aboutThisProbl: "about how and if to fix this",
        AddProgrNote: "Add progress note",
        // Progress ...
        withThisIdea: "with doing this idea",
        withThisProbl: "with handling this problem",
        withThis: "with doing this"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Notifications about this topic:",
        // If is a direct message topic, members listed below this text.
        Msg: "Message",
        SmrzRepls: "Sammanfatta Diskussion",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "There are ".concat(numReplies, " replies. Estimated reading time: ").concat(minutes, " minutes");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "Done. Summarized ".concat(numSummarized, " replies, of the ").concat(numShownBefore, " replies previously shown.");
        }
    },
    // Post actions
    pa: {
        CloseOwnQuestionTooltip: "Close this question if you don't need an answer any more.",
        CloseOthersQuestionTooltip: "Close this question if it doesn't need an answer, e.g. if " +
            "it is off-topic or already answered in another topic.",
        CloseToDoTooltip: "Close this To-Do if it does not need to be done or fixed.",
        CloseTopicTooltip: "Close this topic if it needs no further consideration.",
        AcceptBtnExpl: "Accept this as the answer to the question or problem",
        SolutionQ: "Solution?",
        ClickUnaccept: "Click to un-accept this answer",
        PostAccepted: "This post has been accepted as the answer",
        NumLikes: function (num) { return num + " Gillar"; },
        NumDisagree: function (num) { return num + " Håller ej med"; },
        NumBury: function (num) { return num + " Flytta nedåt"; },
        NumUnwanted: function (num) { return num + " Oönskad"; },
        MoreVotes: "Fler röster...",
        LikeThis: "Gilla",
        LinkToPost: "Link to this post",
        Report: "Anmäl",
        ReportThisPost: "Anmäl detta",
        Admin: "Admin",
        DiscIx: "Andra diskussioner",
        Disagree: "Håller ej med",
        DisagreeExpl: "Click here to disagree with this post, or to warn others about factual errors.",
        Bury: "Flyta ner",
        BuryExpl: "Click to sort other posts before this post. Only the forum staff can see your vote.",
        Unwanted: "Oönskad",
        UnwantedExpl: "If you do not want this post on this website. This would reduce the trust I have " +
            "in the post author. Only the forum staff can see your vote.",
        AddTags: "Add/remove tags",
        UnWikify: "Un-Wikify",
        Wikify: "Wikify",
        PinDeleteEtc: "Pin / Delete / Category ..."
    },
    // Share dialog
    sd: {
        Copied: "Copied.",
        CtrlCToCopy: "Hit CTRL+C to copy.",
        ClickToCopy: "Click to copy link."
    },
    // Chat
    c: {
        About_1: "This is the ",
        About_2: " chat channel, created by ",
        ScrollUpViewComments: "Scroll up to view older comments",
        Purpose: "Syfte:",
        edit: "editera",
        'delete': "ta bort",
        MessageDeleted: "(Meddelande borttaget)",
        JoinThisChat: "Gå med i denna chatt",
        PostMessage: "Skicka meddelande",
        AdvancedEditor: "Avancerad editor",
        TypeHere: "Skriv här. Du kan använda Markdown och HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Needs review ",
        AdminHelp: "Admin help ",
        StaffHelp: "Staff help ",
        DraftsEtc: "Drafts, bookmarks, tasks",
        MoreNotfs: "View all notifications",
        DismNotfs: "Mark all as read",
        ViewProfile: "View your profile",
        ViewGroups: "View groups",
        LogOut: "Log out",
        UnhideHelp: "Unhide help messages"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Scroll to:",
        Scroll: "Scroll",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "B",
        Back_2: "ack",
        BackExpl: "Scroll back to your previous position on this page",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Page top",
        PgTopHelp: "Go to the top of the page. Keyboard shortcut: 1",
        Repl: "Replies",
        ReplHelp: "Go to the Replies section. Shortcut: 2",
        Progr: "Progress",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Go to the Progress section. Shortcut: 3",
        PgBtm: "Page bottom",
        Btm: "Bottom",
        BtmHelp: "Go to the bottom of the page. Shortcut: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", and ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " to scroll back"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Select users",
        AddUsers: "Add users"
    },
    // About user dialog
    aud: {
        IsMod: "Is moderator.",
        IsAdm: "Is administrator.",
        IsDeld: "Is deactivated or deleted.",
        ThisIsGuest: "This is a guest user, could in fact be anyone.",
        ViewInAdm: "View in Admin Area",
        ViewProfl: "View Profile",
        ViewComments: "View other comments",
        RmFromTpc: "Remove from topic",
        EmAdrUnkn: "Email address unknown — this guest won't be notified about replies."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Preferenser",
        Invites: "Inbjudningar",
        DraftsEtc: "Utkast etc",
        About: "Om dig",
        Privacy: "Privacy",
        Security: "Säkerhet",
        Account: "Konto",
        Interface: "Gränssnitt",
        // ----- Overview stats
        JoinedC: "Joined: ",
        PostsMadeC: "Posts made: ",
        LastPostC: "Last post: ",
        LastSeenC: "Last seen: ",
        TrustLevelC: "Trust level: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Upload photo",
        ChangePhoto: "Change photo",
        ImgTooSmall: "Image too small: should be at least 100 x 100",
        // ----- Activity
        OnlyStaffCanSee: "Only staff and trusted core members, can see this.",
        OnlyMbrsCanSee: "Only people who have been active members for a while can see this.",
        Nothing: "Nothing to show",
        Posts: "Posts",
        NoPosts: "No posts.",
        Topics: "Topics",
        NoTopics: "No topics.",
        // ----- User status
        UserBanned: "This user is banned",
        UserSuspended: function (dateUtc) { return "This user is suspended until ".concat(dateUtc, " UTC"); },
        ReasonC: "Reason: ",
        DeactOrDeld: "Has been deactivated or deleted.",
        isGroup: " (a group)",
        isGuest: " — a guest user, could be anyone",
        isMod: " – moderator",
        isAdmin: " – administrator",
        you: "(you)",
        // ----- Notifications page
        NoNotfs: "No notifications",
        NotfsToYouC: "Notifications to you:",
        NotfsToOtherC: function (name) { return "Notifications to ".concat(name, ":"); },
        DefNotfsSiteWide: "Default notifications, site wide",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "for",
        // ----- Drafts Etc page
        NoDrafts: "No drafts",
        YourDraftsC: "Your drafts:",
        DraftsByC: function (name) { return "Drafts by ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Here you can invite people to join this site. ",
        InvitesListedBelow: "Invites that you have already sent are listed below.",
        NoInvites: "You have not invited anyone yet.",
        InvitedEmail: "Invited email",
        WhoAccepted: "Member who accepted",
        InvAccepted: "Invitation accepted",
        InvSent: "Invitation sent",
        JoinedAlready: "Joined already",
        SendAnInv: "Invite people",
        SendInv: "Send invites",
        SendInvExpl: "We'll send your friends a brief email. They'll click a link " +
            "to join immediately, no login required. " +
            "They'll become normal members, not moderators or admins.",
        //EnterEmail: "Enter email(s)",
        InvDone: "Done. I'll send them an email.",
        NoOneToInv: "No one to invite.",
        InvNotfLater: "I'll notify you later, when I've invited them.",
        AlreadyInvSendAgainQ: "These have been invited already — maybe you'd like to invite them again?",
        InvErr_1: "These resulted in ",
        InvErr_2: "errors",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "These have joined already, so I didn't invite them:",
        ResendInvsQ: "Re-send invitations to these people? They have been invited already.",
        InvAgain: "Invite again",
        // ----- Preferences, About
        AboutYou: "About you",
        WebLink: "Any website or page of yours.",
        NotShownCannotChange: "Not shown publicly. Cannot be changed.",
        // The full name or alias:
        NameOpt: "Name (optional)",
        NotShown: "Not shown publicly.",
        // The username:
        MayChangeFewTimes: "You may change it only a few times.",
        notSpecified: "(not specified)",
        ChangeUsername_1: "You may change your username only a few times.",
        ChangeUsername_2: "Changing it too often can make others confused — " +
            "they won't know how to @mention you.",
        NotfAboutAll: "Be notified about every new post (unless you mute the topic or category)",
        NotfAboutNewTopics: "Be notified about new topics (unless you mute the category)",
        ActivitySummaryEmails: "Activity summary emails",
        EmailSummariesToGroup: "When members of this group don't visit here, then, by default, email them " +
            "summaries of popular topics and other stuff.",
        EmailSummariesToMe: "When I don't visit here, email me " +
            "summaries of popular topics and other stuff.",
        AlsoIfTheyVisit: "Email them also if they visit here regularly.",
        AlsoIfIVisit: "Email me also if I visit here regularly.",
        HowOftenWeSend: "How often shall we send these emails?",
        HowOftenYouWant: "How often do you want these emails?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Hide your recent activity for strangers and new members?",
        HideActivityStrangers_2: "(But not for those who have been active members for a while.)",
        HideActivityAll_1: "Hide your recent activity for everyone?",
        HideActivityAll_2: "(Except for staff and trusted core members.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Email addresses",
        PrimaryDot: "Primary. ",
        VerifiedDot: "Verified. ",
        NotVerifiedDot: "Not verified. ",
        ForLoginWithDot: function (provider) { return "For login with ".concat(provider, ". "); },
        MakePrimary: "Make Primary",
        AddEmail: "Add email address",
        TypeNewEmailC: "Type a new email address:",
        MaxEmailsInfo: function (numMax) { return "(You cannot add more than ".concat(numMax, " addresses.)"); },
        EmailAdded_1: "Added. We've sent you a verification email — ",
        EmailAdded_2: "check your email inbox.",
        SendVerifEmail: "Send verification email",
        EmailStatusExpl: "('Primary' means you can login via this address, and we send notifications to it. " +
            "'Verified' means you clicked a verification link in an address verification email.)",
        // Password:
        ChangePwdQ: "Change password?",
        CreatePwdQ: "Create password?",
        WillGetPwdRstEml: "You'll get a reset password email.",
        // This is the "None" in:  "Password: None"
        PwdNone: "None",
        // Logins:
        LoginMethods: "Login methods",
        commaAs: ", as: ",
        // One's data:
        YourContent: "Your content",
        DownloadPosts: "Download posts",
        DownloadPostsHelp: "Creates a JSON file with a copy of topics and comments you've posted.",
        DownloadPersData: "Download personal data",
        DownloadPersDataHelp: "Creates a JSON file with a copy of your personal data, e.g. your name " +
            "(if you specified a name) and email address.",
        // Delete account:
        DangerZone: "Danger zone",
        DeleteAccount: "Delete account",
        DeleteYourAccountQ: "Delete your account? We'll remove your name, forget your email address, password and " +
            "any online identities (like Facebook or Twitter login). " +
            "You won't be able to login again. This cannot be undone.",
        DeleteUserQ: "Delete this user? We'll remove the name, forget the email address, password and " +
            "online identities (like Facebook or Twitter login). " +
            "The user won't be able to login again. This cannot be undone.",
        YesDelete: "Yes, delete"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Group members",
        NoMembers: "No members.",
        MayNotListMembers: "May not list members.",
        AddMembers: "Add Members",
        BuiltInCannotModify: "This is a built-in group; it cannot be modified.",
        NumMembers: function (num) { return "".concat(num, " members"); },
        YouAreMember: "You're a member.",
        CustomGroupsC: "Custom groups:",
        BuiltInGroupsC: "Built-in groups:",
        DeleteGroup: "Delete this group"
    },
    // Create user dialog
    cud: {
        CreateUser: "Create User",
        CreateAccount: "Create Account",
        EmailC: "Email:",
        keptPriv: "will be kept private",
        forNotfsKeptPriv: "for reply notifications, kept private",
        EmailVerifBy_1: "Your email has been verified by ",
        EmailVerifBy_2: ".",
        UsernameC: "Username:",
        FullNameC: "Full name:",
        optName: "optional",
        //OrCreateAcct_1: "Or ",
        //OrCreateAcct_2: "create an account",
        //OrCreateAcct_3: " with ",
        //OrCreateAcct_4: "@username",
        //OrCreateAcct_5: " & password",
        DoneLoggedIn: "Account created. You have been logged in.",
        AlmostDone: "Almost done! You just need to confirm your email address. We have " +
            "sent an email to you. Please click the link in the email to activate " +
            "your account. You can close this page."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Terms and Privacy",
        Accept_1: "Do you accept our ",
        TermsOfService: "Terms of Service",
        TermsOfUse: "Terms of Use",
        Accept_2: " and ",
        PrivPol: "Privacy Policy",
        Accept_3_User: "?",
        Accept_3_Owner: " for site owners?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Yes I accept"
    },
    // Password input
    pwd: {
        PasswordC: "Lösenord:",
        StrengthC: "Styrka: ",
        FairlyWeak: "Ganska svagt.",
        toShort: "för kort",
        TooShort: function (minLength) { return "F\u00F6r kort. Ska vara minst ".concat(minLength, " bokst\u00E4ver"); },
        PlzInclDigit: "Ta med en siffra eller ett specialtecken (t.ex. !?@) också",
        TooWeak123abc: "För svagt. Använd inte lösenord som '12345' eller 'abcde'.",
        AvoidInclC: "Ha inte med (delar av) ditt namn eller email i lösenordet:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Page not found, or Access Denied.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "You're impersonating someone, who might not have access to all parts " +
            "of this website.",
        IfYouThinkExistsThen: "If you think the page exists, log in as someone who may access it. ",
        LoggedInAlready: "(You are logged in already, but perhaps it's the wrong account?) ",
        ElseGoToHome_1: "Otherwise, you can ",
        ElseGoToHome_2: "go to the homepage.",
        CreateAcconut: "Create account",
        ContinueWithDots: "Continue with ...",
        SignUp: "Sign up",
        LogIn: "Log in",
        LogInWithPwd: "Log in with Password",
        CreateAdmAcct: "Create admin account:",
        AuthRequired: "Authentication required to access this site",
        LogInToLike: "Log in to Like this post",
        LogInToSubmit: "Log in and submit",
        LogInToComment: "Log in to write a comment",
        LogInToCreateTopic: "Log in to create topic",
        //AlreadyHaveAcctQ: "Already have an account? ",
        OrLogIn_1: "Eller ",
        OrLogIn_2: "Logga in",
        OrLogIn_3: " istället",
        //NewUserQ: "New user? ",
        SignUpInstead_1: "Eller ",
        SignUpInstead_2: "Skapa konto",
        SignUpInstead_3: " istället",
        OrTypeName_1: ", eller bara ",
        OrTypeName_2: "skriv ditt namn",
        OrTypeName_3: "",
        OrCreateAcctHere: "Or create account:",
        OrTypeName: "Or type your name:",
        OrLogIn: "Or log in:",
        YourNameQ: "Your name?",
        BadCreds: "Wrong username or password",
        UsernameOrEmailC: "Username or email:",
        PasswordC: "Password:",
        ForgotPwd: "Did you forget your password?",
        NoPwd: "You have not yet chosen a password.",
        CreatePwd: "Create password"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Please tell us what you are concerned about.",
        ThanksHaveReported: "Thanks. You have reported it. The forum staff will take a look.",
        ReportComment: "Report Comment",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "This post contains personal data, for example someones' real name.",
        OptOffensive: "This post contains offensive or abusive content.",
        OptSpam: "This post is an unwanted advertisement.",
        OptOther: "Notify staff about this post for some other reason."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "You can show help messages again, if you are logged in, by " +
            "clicking your name and then ",
        YouCanShowAgain_2: "Unhide help messages"
    },
    // Editor
    e: {
        SimilarTopicsC: "Similar topics:",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "Sorry but currently you can upload only one file at a time",
        PleaseFinishPost: "Please first finish writing your post",
        PleaseFinishChatMsg: "Please first finish writing your chat message",
        PleaseFinishMsg: "Please first finish writing your message",
        PleaseSaveEdits: "Please first save your current edits",
        PleaseSaveOrCancel: "Please first either save or cancel your new topic",
        CanContinueEditing: "You can continue editing your text, if you open the editor again.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Please don't delete all text. Write something.",
        PleaseWriteSth: "Please write something.",
        PleaseWriteTitle: "Please write a topic title.",
        PleaseWriteMsgTitle: "Please write a message title.",
        PleaseWriteMsg: "Please write a message.",
        exBold: "bold text",
        exEmph: "emphasized text",
        exPre: "preformatted text",
        exQuoted: "quoted text",
        ExHeading: "Heading",
        TitlePlaceholder: "Skriv en titel — vad handlar detta om, i en kort mening?",
        EditPost_1: "Editera ",
        EditPost_2: "post ",
        TypeChatMsg: "Skriv ett chattmeddelande:",
        YourMsg: "Ditt meddelande:",
        CreateTopic: "Skapa nytt ämne",
        CreateCustomHtml: "Create a custom HTML page (add your own <h1> title)",
        CreateInfoPage: "Create an info page",
        CreateCode: "Create a source code page",
        AskQuestion: "Fråga något",
        ReportProblem: "Rapportera problem",
        SuggestIdea: "Föreslå en idé",
        NewChat: "New chat channel title and purpose",
        NewPrivChat: "New private chat title and purpose",
        AppendComment: "Append a comment at the bottom of the page:",
        ReplyTo: "Svara till ",
        ReplyTo_theOrigPost: "första inlägget",
        ReplyTo_post: "replik ",
        AddCommentC: "Skriv en kommentar:",
        PleaseSelectPosts: "Please select one or more posts to reply to.",
        Save: "Spara",
        edits: "ändringar",
        PostReply: "Posta svar",
        Post: "Posta",
        comment: "kommentar",
        question: "fråga",
        PostMessage: "Skicka meddelande",
        SimpleEditor: "Enkel editor",
        Send: "Skicka",
        message: "meddelande",
        Create: "Skapa",
        page: "sida",
        chat: "chatt",
        idea: "idé",
        topic: "ämne",
        Submit: "Posta",
        problem: "problem",
        ViewOldEdits: "Se gamla editeringar",
        UploadBtnTooltip: "Ladda upp bild eller fil",
        BoldBtnTooltip: "Fettext",
        EmBtnTooltip: "Kursivt",
        QuoteBtnTooltip: "Citat",
        PreBtnTooltip: "Monospace",
        HeadingBtnTooltip: "Rubrik",
        TypeHerePlaceholder: "Skriv här. Du kan anända Markdown och HTML, och dra-och-släppa bilder.",
        Maximize: "Maximera",
        ToNormal: "Tillbaks till vanligt",
        TileHorizontally: "Dela vågrätt",
        PreviewC: "Förhandsgranska:",
        TitleExcl: '',
        ShowEditorAgain: "Visa editor istället",
        Minimize: "Minimera",
        IPhoneKbdSpace_1: "(This gray space is reserved",
        IPhoneKbdSpace_2: "for the iPhone keyboard.)",
        PreviewInfo: "Här kan du förhandsgranska din text.",
        CannotType: "Du kan inte skriva här.",
        LoadingDraftDots: "Loading any draft...",
        DraftUnchanged: "Unchanged.",
        CannotSaveDraftC: "Cannot save draft:",
        DraftSavedBrwsr: "Draft saved, in browser.",
        DraftSaved: function (nr) { return "Draft ".concat(nr, " saved."); },
        DraftDeleted: function (nr) { return "Draft ".concat(nr, " deleted."); },
        WillSaveDraft: function (nr) { return "Will save draft ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "Saving draft ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "Deleting draft ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Välj kategori"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Select topic type:",
        DiscussionExpl: "A discussion about something.",
        QuestionExpl: "One answer can be marked as the accepted answer.",
        ProblExpl: "If something is broken or doesn't work. Can be marked as fixed/solved.",
        IdeaExpl: "A suggestion. Can be marked as done/implemented.",
        ChatExpl: "A perhaps never-ending conversation.",
        PrivChatExpl: "Only visible to people that get invited to join the chat.",
        CustomHtml: "Custom HTML page",
        InfoPage: "Info page",
        Code: "Code",
        EmbCmts: "Embedded comments",
        About: "About",
        PrivChat: "Private Chat",
        Form: "Form"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "No more communities to join.",
        SelCmty: "Select community ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Text to search for"
    },
    // No internet
    ni: {
        NoInet: "No internet connection",
        PlzRefr: "Refresh page to see any latest changes. (There was a disconnection)",
        RefrNow: "Refresh now"
    },
    PostDeleted: function (postNr) { return "That post, nr ".concat(postNr, ", has been deleted."); },
    NoSuchPost: function (postNr) { return "There's no post nr ".concat(postNr, " on this page."); },
    NoPageHere: "This page has been deleted, or it never existed, or you may not access it.",
    GoBackToLastPage: "Go back to last page"
};
/// <reference path="../../client/app-slim/translations.d.ts"/>
// Note:
// - If the first char in the field name is Uppercase, then the
//   textual value also starts with an Uppercase letter.
//   E.g. `Close: "Close"`, and `close: "close"`.
// - The text value of a field that ends with ...Q, ends with ?. E.g. `DeleteQ: "Delete?"`.
// - The text value of a field that ends with ...C, ends with :. E.g. `PasswordC: "Password:"`.
// - If the field ends with an N, then it's a noun (not a verb). Example:
//   In English, the word "chat" is both a noun and a verb, but in other languages,
//   two different words might be needed — and then there're two fields for the translators
//   `ChatN: "(noun here)"` and `ChatV: "(verb here)"`.
// - If the field ends with an V, then it's a verb (not a noun)
var t;
var t_uk_UA = t = {
    // A single or a few words, sorted alphabetically, to reuse everywhere.
    Active: "Присутній",
    Activity: "Діяльність",
    Add: "Додати",
    AddingDots: "Додаємо ...",
    AddComment: "Додати коментар",
    Admin: "Адміністратор",
    AdvSearch: "Розширений пошук",
    Away: "Відійшов на хвильку",
    Back: "Знову з вами",
    BlogN: "Блог",
    Bookmarks: "Закладки",
    Cancel: "Скасувати",
    Categories: "Категорії",
    Category: "Категорія",
    ChangeV: "Змінити",
    ClickToShow: "Клацніть, щоб показати",
    ChangeDots: "Змінюємо ...",
    ChatN: "Балачка (чат)",
    Chatting: "У балачці",
    CheckYourEmail: "Перевірте свою електронну пошту",
    Close: "Закрити",
    closed: "закрито",
    comments: "коментарі",
    Continue: "Продовжити",
    Created: "Створено",
    Delete: "Видалити",
    Deleted: "Видалено",
    DirectMessage: "Особисте повідомлення",
    Discussion: "Обговорення",
    discussion: "обговорення",
    done: "зроблено",
    EditV: "Зредагувати",
    Editing: "Зредагування",
    EmailC: "Електронна пошта: ",
    EmailAddress: "Адреса електронної пошти",
    EmailAddresses: "Адреси електронної пошти",
    EmailSentD: "Електронний лист надіслано.",
    Forum: "Форум",
    GetNotifiedAbout: "Отримувати повідомлення про",
    GroupsC: "Групи:",
    Hide: "Сховати",
    Home: "Домівка",
    Idea: "Задум",
    Join: "Приєднатися",
    KbdShrtcsC: "Комбінації клавіш: ",
    Loading: "Завантажуємо ...",
    LoadMore: "Завантажити ще ...",
    LogIn: "Увійти",
    LoggedInAs: "Увійшов як ",
    LogOut: "Вийти",
    Maybe: "Можливо",
    Manage: "Керувати",
    Members: "Учасники",
    MessageN: "Повідомлення",
    MoreDots: "Більше ...",
    Move: "Перемістити",
    Name: "Ім'я",
    NameC: "Ім'я:",
    NewTopic: "Нова тема",
    NoCancel: "Ні, скасувати",
    Notifications: "Сповіщення",
    NotImplemented: "(Не впроваджено)",
    NotYet: "Ще ні",
    NoTitle: "Нема заголовка",
    NoTopics: "Немає тем.",
    Okay: "Добре",
    OkayDots: "Добре ...",
    Online: "Зараз в мережі",
    onePerLine: "по одному на рядок",
    PreviewV: "Попередньо переглянути",
    Problem: "Проблема",
    progressN: "поступ",
    Question: "Питання",
    Recent: "Нещодавні",
    Remove: "Видалити",
    Reopen: "Відкрити знову",
    ReplyV: "Відповісти",
    Replying: "Відповідає",
    Replies: "Відповіді",
    replies: "відповіді",
    Save: "Зберегти",
    SavingDots: "Зберігаємо ...",
    SavedDot: "Збережено.",
    Search: "Пошук",
    SendMsg: "Надіслати повідомлення",
    ShowPreview: "Показати попередній перегляд",
    SignUp: "Приєднатися",
    Solution: "Рішення",
    started: "розпочато",
    Summary: "Підсумок",
    Submit: "Подати на розгляд",
    Tag: "Позначка (тег)",
    Tags: "Позначки (теги)",
    Tools: "Інструменти",
    Topics: "Теми",
    TopicTitle: "Заголовок теми",
    TopicType: "Різновид теми",
    UploadingDots: "Завантажуємо ...",
    Username: "Ім'я користувача",
    Users: "Користувачі",
    Welcome: "Ласкаво просимо",
    Wiki: "Вікі",
    Yes: "Так",
    YesBye: "Так, до побачення",
    YesDoThat: "Так, зробити це",
    You: "Ви",
    you: "ви",
    // Trust levels.
    Guest: "Гість",
    NewMember: "Новий учасник",
    BasicMember: "Основний учасник",
    FullMember: "Повноправний учасник",
    TrustedMember: "Довірений учасник",
    RegularMember: "Довірений завсідник",
    CoreMember: "Ключовий учасник",
    // Periods.
    PastDay: "Минулого дня",
    PastWeek: "Минулого тижня",
    PastMonth: "Минулого місяця",
    PastQuarter: "Минулого кварталу",
    PastYear: "Минулого року",
    AllTime: "За весь час",
    // Time ago letters.
    // English examples: "3d" in forum topic list means 3 days ago. "5h" is 5 hours.
    monthsLtr: "міс",
    daysLtr: "д",
    hoursLtr: "г",
    minsLtr: "м",
    secsLtr: "с",
    // Time ago, long text versions.
    daysAgo: function (numDays) {
        return numDays === 1 ? "1 день тому" : "".concat(numDays, " \u0434\u043D\u0456\u0432 \u0442\u043E\u043C\u0443");
    },
    hoursAgo: function (numHours) {
        return numHours === 1 ? "1 годину тому" : "".concat(numHours, " \u0433\u043E\u0434\u0438\u043D \u0442\u043E\u043C\u0443");
    },
    minutesAgo: function (numMins) {
        return numMins === 1 ? "1 хвилину тому" : "".concat(numMins, " \u0445\u0432\u0438\u043B\u0438\u043D \u0442\u043E\u043C\u0443");
    },
    secondsAgo: function (numSecs) {
        return numSecs === 1 ? "1 секунду тому" : "".concat(numSecs, " \u0441\u0435\u043A\u0443\u043D\u0434 \u0442\u043E\u043C\u0443");
    },
    // Input fields, e.g. email, name etc.
    inp: {
        // Email address input field:
        EmReq: "Потрібна електронна адреса",
        NoSpcs: "Будь ласка, без пробілів",
        InvldAddr: "Недійсна електронна адреса",
        NoBadChrs: "Будь ласка, без дивних символів",
        // Full name input field:
        NotOnlSpcs: "Будь ласка, не лише пробіли",
        NoAt: "Будь ласка, без @",
        // Username input field:
        NoDash: "Будь ласка, без дефіса (-)",
        DontInclAt: "Не встромляйте @",
        StartEndLtrDgt: "Почніть і закінчіть буквою або цифрою",
        OnlLtrNumEtc: "Тільки літери (a-z, A-Z) та цифри, і _ (підкреслення)",
        // This shown just below the username input:
        UnUnqShrt_1: "Ваш ",
        UnUnqShrt_2: "@логін",
        UnUnqShrt_3: ", унікальний і короткий",
        // Generic messages for all input fields:
        TooShort: function (minLength) { return "\u041C\u0430\u0454 \u043C\u0456\u0441\u0442\u0438\u0442\u0438 \u043F\u0440\u0438\u043D\u0430\u0439\u043C\u043D\u0456 ".concat(minLength, " \u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432"); },
        TooLong: function (maxLength) { return "\u0417\u0430\u0434\u043E\u0432\u0433\u0438\u0439. \u041C\u0430\u0454 \u0431\u0443\u0442\u0438 \u043D\u0435 \u0431\u0456\u043B\u044C\u0448\u0435 ".concat(maxLength, " \u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432"); }
    },
    // Notification levels.
    nl: {
        EveryPost: "Кожний допис",
        EveryPostInTopic: "Ви отримуватимете сповіщення про всі нові відповіді у цій темі.",
        EveryPostInCat: "Ви отримуватимете сповіщення про всі нові теми та відповіді в цій категорії.",
        EveryPostInTopicsWithTag: "Ви отримуватимете сповіщення про нові теми з цією позначкою та всі відповіді в цих темах.",
        EveryPostWholeSite: "Ви отримуватимете сповіщення про всі нові теми та відповіді будь-де.",
        // One will be notified about the *first* post in a new topic, only. That is, the Original Post
        // (that's what the first post is called, in a discussion forum topic).
        NewTopics: "Нові теми",
        NewTopicsInCat: "Ви отримуватимете сповіщення про нові теми в цій категорії.",
        NewTopicsWithTag: "Ви отримуватимете сповіщення про нові теми з цією позначкою.",
        NewTopicsWholeSite: "Ви отримуватимете сповіщення про нові теми будь-де.",
        Tracking: "Відстеження",
        Normal: "Звичайне",
        NormalDescr: "Ви отримаєте сповіщення, якщо хтось озветься до вас, навіть опосередковано, наприклад " +
            "відповість на відповідь вам.",
        //NormalTopic_1: "You'll be notified if someone talks to you, or mentions your ",
        //NormalTopic_2: "@name",
        Hushed: "Стишене",
        HushedDescr: "Ви отримаєте сповіщення, лише якщо хтось звернеться безпосередньо до вас.",
        Muted: "Приглушене",
        MutedTopic: "Без сповіщень."
    },
    // Forum intro text
    fi: {
        Edit: "Зредагувати",
        Hide_1: "Сховати",
        Hide_2: ", клацніть ",
        Hide_3: " щоб відкрити знову"
    },
    // Forum categories
    fcs: {
        All: "Усі"
    },
    // Forum buttons
    fb: {
        TopicList: "Перелік тем",
        // Select category dropdown
        from: "з",
        "in": "у",
        AllCats: "Усі категорії",
        // Topic sort order
        Active: "Жваві",
        ActiveDescr: "Показує спочатку нещодавно жваві теми",
        New: "Нові",
        NewDescr: "Показує спочатку найновіші теми",
        Top: "Популярні",
        TopDescr: "Показує нещодавно жваві теми",
        // Topic filter dropdown
        AllTopics: "Усі теми",
        ShowAllTopics: "Показати всі теми",
        ShowAllTopicsDescr: "Але не ті теми, які видалені",
        WaitingTopics: "Очікуючі теми",
        OnlyWaitingDescr_1: "Показує лише ті теми, ",
        OnlyWaitingDescr_2: "що очікують ",
        OnlyWaitingDescr_3: "на впровадження та виконання рішення",
        YourTopics: "Ваші теми",
        AssignedToYou: "Доручені вам",
        DeletedTopics: "Показати видалені",
        ShowDeleted: "Показати видалені",
        ShowDeletedDescr: "Показує всі теми, навіть ті, що видалені",
        // Rightmost buttons
        ViewCategories: "Переглянути категорії",
        EditCat: "Зредагувати категорію",
        CreateCat: "Створити категорію",
        CreateTopic: "Створити тему",
        PostIdea: "Оприлюднити задум",
        AskQuestion: "Поставити питання",
        ReportProblem: "Повідомити про проблему",
        CreateMindMap: "Створити карту розуму",
        CreatePage: "Створити сторінку"
    },
    // Forum topic list
    ft: {
        ExplIcons: "Пояснити піктограми ...",
        IconExplanation: "Пояснення до піктограми:",
        ExplGenDisc: "Загальне обговорення.",
        ExplQuestion: "Питання без прийнятої відповіді.",
        ExplAnswer: "Питання з прийнятою відповіддю.",
        ExplIdea: "Задум / пропозиція.",
        ExplProblem: "Проблема.",
        ExplPlanned: "Те, що ми плануємо здійснити або розв'язати.",
        ExplDone: "Те, що зроблено чи розв'язано.",
        ExplClosed: "Тема закрита.",
        ExplPinned: "Тема, яка завжди перша в переліку (можливо, лише у власній категорії).",
        PopularTopicsComma: "Популярні теми, ",
        TopFirstAllTime: "Показує найпопулярніші теми спочатку, за весь час.",
        TopFirstPastDay: "Показує теми, популярні минулого дня.",
        CatHasBeenDeleted: "Цю категорію видалено",
        TopicsActiveFirst: "Теми, спочатку нещодавно жваві",
        TopicsNewestFirst: "Теми, спочатку нові",
        CreatedOn: "Створено ",
        LastReplyOn: "\nОстання відповідь ",
        EditedOn: "\nВідредаговано ",
        // These are shown as mouse-hover tooltips, or mobile-phone-touch-tips, over the user
        // avatar icons, in the forum topic list.
        createdTheTopic: "створив цю тему",
        frequentPoster: "багаторазовий дописувач",
        mostRecentPoster: "найостанніший дописувач",
        inC: "у: ",
        TitleFixed: "Це розв'язано",
        TitleDone: "Це зроблено",
        TitleStarted: "Ми розпочали це",
        TitleStartedFixing: "Ми почали це розв'язувати",
        TitleUnsolved: "Це невирішене питання",
        TitleIdea: "Це задум",
        TitlePlanningFix: "Ми плануємо це розв'язати",
        TitlePlanningDo: "Ми плануємо це здійснити",
        TitleChat: "Це канал балачки",
        TitlePrivateChat: "Це приватний канал балачки",
        TitlePrivateMessage: "Приватне повідомлення",
        TitleInfoPage: "Це ознайомча сторінка",
        TitleDiscussion: "Обговорення",
        IsPinnedGlobally: "\nЗакріплено, тому перше в переліку.",
        IsPinnedInCat: "\nЗакріплено у своїй категорії, і тому на першому місці у своїй категорії."
    },
    // Forum categories list
    fc: {
        RecentTopicsWaiting: "Останні теми (які очікують)",
        RecentTopicsInclDel: "Останні теми (включаючи видалені)",
        RecentTopics: "Нещодавні теми",
        _replies: " відповідає",
        _deleted: " (видалено)",
        _defCat: " (категорія за замовчуванням)"
    },
    // Topbar
    // Shown at the top of the page. Includes login and signup buttons, or one's username menu.
    tb: {
        // Opens the right hand sidebar and litst the most recent posts in the current topic.
        RecentPosts: "Нещодавні дописи",
        // Open right-hand-sidebar button tooltip, if mouse-hovering online-user-count.
        NumOnlChat: " зараз в мережі у цій балачці",
        NumOnlForum: " зараз в мережі на цьому форумі",
        // Open left-sidebar button title.
        WatchbBtn: "Ваші теми",
        // Tooltip, shown if mouse-hovering the open-left-sidebar button.
        WatchbToolt: "Ваші нещодавні теми, балачки, особисті повідомлення",
        // Title shown on user profile pages.
        AbtUsr: "Про користувача",
        // Shortcuts to leave the user profile page, or staff area, and go back to the discussion topics.
        BackFromUsr: "Повернутися назад із профілю користувача",
        BackFromAdm: "Повернутися назад з області адміністратора",
        // Title shown on full text search page.
        SearchPg: "Сторінка пошуку"
    },
    // Watchbar (the sidebar to the left)
    wb: {
        AddCommunity: "Додати ...",
        RecentlyViewed: "Нещодавно переглянуті теми",
        JoinedChats: "Балачки, у яких брали участь",
        ChatChannels: "Канали балачки",
        CreateChat: "Створити канал балачки",
        DirectMsgs: "Особисті повідомлення",
        NoChats: "Немає",
        NoDirMsgs: "Немає",
        // The click-topic dropdown menu:
        TopicActions: "Дії щодо теми",
        ViewPeopleHere: "Переглянути учасників",
        ViewAddRemoveMembers: "Переглянути / додати / видалити учасників",
        ViewChatMembers: "Переглянути учасників балачки",
        EditChat: "Зредагувати опис балачки",
        //EditChat: "Edit chat title and purpose", // Keep, in case adds back edit-title input
        LeaveThisChat: "Вийти з цієї балачки",
        LeaveThisCommunity: "Вийти з цієї спільноти",
        JoinThisCommunity: "Приєднатися до цієї спільноти"
    },
    // Contextbar (the sidebar to the right)
    cb: {
        RecentComments: "Нещодавні коментарі у цій темі:",
        NoComments: "Немає коментарів.",
        YourBookmarks: "Ваші закладки:",
        UsersOnline: "Користувачі, які зараз у мережі:",
        UsersOnlineForum: "Користувачі, які зараз у мережі на цьому форумі:",
        UsersInThisChat: "Користувачі у цій балачці:",
        UsersInThisTopic: "Користувачі у цій темі:",
        GettingStartedGuide: "Посібник для адміністратора",
        AdminGuide: "Порадник адміністратора",
        Guide: "Посібник",
        // How to hide the sidebar.
        CloseShortcutS: "Закрити (швидка клавіша: S)",
        // ----- Online users list / Users in current topic
        AddPeople: "Додати ще учасників",
        // Shown next to one's own username, in a list of users.
        thatsYou: "це ви",
        // Info about which people are online.
        // Example, in English: "Online users: You, and 5 people who have not logged in"
        OnlyYou: "Здається, тільки ви",
        YouAnd: "Ви та ",
        NumStrangers: function (numStrangers) {
            var people = numStrangers === 1 ? " людина, " : " людей, ";
            var have = numStrangers === 1 ? "яка не увійшла" : "які не увійшли";
            return numStrangers + people + have;
        },
        // ----- Recent comments list
        // This explains how the Recent tab in the sidebar works.
        RepliesToTheLeft: "Відповіді зліва сортуються за принципом ",
        bestFirst: "спочатку найкращі.",
        ButBelow: "Але нижче ",
        insteadBy: " ті ж самі відповіді натомість сортуються за принципом ",
        newestFirst: "спочатку найновіші.",
        SoIfLeave: "Отже, якщо ви підете і повернетесь сюди пізніше, внизу ви знайдете ",
        allNewReplies: "усі нові відповіді.",
        Click: "Клацніть",
        aReplyToReadIt: " відповідь нижче, щоб прочитати її — бо нижче показано лише уривок."
    },
    // Change page dialog
    cpd: {
        ClickToChange: "Клацніть, щоб змінити статус",
        ClickToViewAnswer: "Клацніть, щоб переглянути відповідь",
        ViewAnswer: "Переглянути відповідь",
        ChangeStatusC: "Змінити статус на:",
        ChangeCatC: "Змінити категорію:",
        ChangeTopicTypeC: "Змінити різновид теми:"
    },
    // Page doing status, PageDoingStatus
    pds: {
        aQuestion: "питання",
        hasAccptAns: "має прийняту відповідь",
        aProblem: "проблема",
        planToFix: "план це розв'язати",
        anIdea: "задум",
        planToDo: "план це здійснити"
    },
    // Discussion / non-chat page
    d: {
        // These texts are split into parts 1,2 or 1,2,3 ec, because in between the texts,
        // icons are shown, to help people understand what those icons mean.
        ThisFormClosed_1: "Цю форму було ",
        // A Topic-has-been-Closed icon shown here, between text parts 1 (just above) and 2 (below).
        ThisFormClosed_2: "закрито; ви більше не можете заповнювати її та оприлюднювати її.",
        ThisTopicClosed_1: "Цю тему було ",
        // A Topic-has-been-Closed icon, + the text "closed", shown here.
        ThisTopicClosed_2: ". Ви все ще можете залишати коментарі.",
        ThisPageDeleted: "Цю сторінку було видалено",
        CatDeldPageToo: "Категорія видалена, тому цю сторінку було також видалено",
        ThreadDeld: "Гілку видалено",
        CmntDeld: "Коментар видалено",
        PostDeld: "Допис видалено",
        DiscDeld: "Обговорення видалено",
        PageDeld: "Сторінку видалено",
        PagePendAppr: "Сторінка очікує на схвалення",
        TitlePendAppr: "Заголовок очікує на схвалення",
        TextPendingApproval: "Текст очікує на схвалення",
        TooltipQuestClosedNoAnsw: "Це питання було закрито без жодної прийнятої відповіді.",
        TooltipTopicClosed: "Ця тема закрита.",
        TooltipQuestSolved: "Це вирішене питання",
        TooltipQuestUnsolved: "Це невирішене питання",
        StatusDone: "Здійснено",
        TooltipProblFixed: "Це було розв'язано",
        TooltipDone: "Це було здійснено",
        StatusStarted: "Розпочато",
        TooltipFixing: "Ми почали це розв'язувати",
        TooltipImplementing: "Ми почали це здійснювати",
        StatusPlanned: "Заплановано",
        TooltipProblPlanned: "Ми плануємо це розв'язати",
        TooltipIdeaPlanned: "Ми плануємо це здійснити",
        StatusNew: "Нове",
        StatusNewDtl: "Нова тема, що обговорюється",
        TooltipUnsProbl: "Це нерозв'язана проблема",
        TooltipIdea: "Це задум",
        TooltipPersMsg: "Особисте повідомлення",
        TooltipChat: "# означає канал балачки",
        TooltipPrivChat: "Це приватний канал балачки",
        TooltipPinnedGlob: "\nЗакріплено усюди.",
        TooltipPinnedCat: "\nЗакріплено в цій категорії.",
        SolvedClickView_1: "Вирішено в дописі #",
        SolvedClickView_2: ", click to view",
        PostHiddenClickShow: "Допис приховано; клацніть, щоб показати",
        ClickSeeMoreRepls: "Показати більше відповідей",
        ClickSeeMoreComments: "Показати більше коментарів",
        ClickSeeThisComment: "Клацніть, щоб показати цей коментар",
        clickToShow: "клацніть, щоб показати",
        ManyDisagree: "Багато хто не згоден з цим:",
        SomeDisagree: "Дехто не згоден з цим:",
        PendAppr: "Очікує схвалення",
        CmtPendAppr: "Коментар, що очікував на схвалення, оприлюднено ",
        CmtBelowPendAppr: function (isYour) { return (isYour ? "Ваш" : "Цей") + " коментар нижче очікує на схвалення."; },
        _and: " та",
        repliesTo: "відповідає на",
        InReplyTo: "У відповідь на",
        YourReplyTo: "Ваша відповідь на ",
        YourChatMsg: "Ваше повідомлення в балачці: ",
        YourDraft: "Ваша чернетка",
        YourEdits: "Ваші виправлення: ",
        YourProgrNoteC: "Ваша примітка щодо поступу:",
        aProgrNote: "примітка щодо поступу: ",
        ReplyingToC: "У відповідь на:",
        ScrollToPrevw_1: "Прокрутити до ",
        ScrollToPrevw_2: "попередній перегляд",
        UnfinEdits: "Незакінчені виправлення",
        ResumeEdting: "Продовжити зредагування",
        DelDraft: "Видалити чернетку",
        ClickViewEdits: "Клацніть, щоб переглянути старі виправлення",
        By: "Автор: ",
        // Discussion ...
        aboutThisIdea: "про те, чи потрібно здійснювати цей задум, і як саме",
        aboutThisProbl: "про те, чи потрібно розв'язувати цю проблему, і як саме",
        AddProgrNote: "Додати примітку щодо поступу",
        // Progress ...
        withThisIdea: "у здійсненні цього задуму",
        withThisProbl: "у розв'язанні цієї проблеми",
        withThis: "у здійсненні цього"
    },
    // Metabar
    // Shown between the original post and all replies.
    mb: {
        NotfsAbtThisC: "Сповіщення щодо цієї теми:",
        // If is a direct message topic, members listed below this text.
        Msg: "Повідомлення",
        SmrzRepls: "Підсумувати відповіді",
        // Don't bother about being correct with "1 reply", "2,3,4 replies".
        // Just write "replies" always instead? (also if only one)
        EstTime: function (numReplies, minutes) {
            return "\u0404 ".concat(numReplies, " \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0435\u0439. \u041F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u0438\u0439 \u0447\u0430\u0441 \u0447\u0438\u0442\u0430\u043D\u043D\u044F: ").concat(minutes, " \u0445\u0432\u0438\u043B\u0438\u043D");
        },
        DoneSummarizing: function (numSummarized, numShownBefore) {
            return "\u0417\u0440\u043E\u0431\u043B\u0435\u043D\u043E. \u041F\u0456\u0434\u0441\u0443\u043C\u043E\u0432\u0430\u043D\u043E ".concat(numSummarized, " \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0435\u0439, \u0437 ").concat(numShownBefore, " \u0440\u0430\u043D\u0456\u0448\u0435 \u043F\u043E\u043A\u0430\u0437\u0430\u043D\u0438\u0445 \u0432\u0456\u0434\u043F\u043E\u0432\u0456\u0434\u0435\u0439.");
        }
    },
    // Post actions
    pa: {
        CloseTopic: "Закрити тему",
        CloseOwnQuestionTooltip: "Закрийте це запитання, якщо вам більше не потрібна відповідь.",
        CloseOthersQuestionTooltip: "Закрийте це питання, якщо на нього не потрібна відповідь, наприклад, якщо " +
            "воно не відповідає темі або на нього вже відповіли в іншій темі.",
        CloseToDoTooltip: "Закрийте це завдання, якщо його не потрібно здійснювати або розв'язувати.",
        CloseTopicTooltip: "Закрийте цю тему, якщо вона не потребує подальшого розгляду.",
        AcceptBtnExpl: "Прийміть це як відповідь на питання або проблему",
        SolutionQ: "Це рішення?",
        ClickUnaccept: "Клацніть, щоб скасувати прийняття цієї відповіді",
        PostAccepted: "Цей допис було прийнято як відповідь",
        NumLikes: function (num) { return num === 1 ? "1 Вподобав" : num + " Вподобайок"; },
        NumDisagree: function (num) { return num === 1 ? "1 Не згоден" : num + " Незгоденців"; },
        NumBury: function (num) { return num === 1 ? "1 Поховати" : num + " Поховайок"; },
        NumUnwanted: function (num) { return num === 1 ? "1 Небажане" : num + " Небажанців"; },
        MoreVotes: "Більше голосів ...",
        LikeThis: "Вподобати це",
        LinkToPost: "Посилання на цей допис",
        Report: "Поскаржитись",
        ReportThisPost: "Поскаржитись на цей допис",
        Admin: "Адміністратор",
        DiscIx: "Вказівник обговорень",
        Disagree: "Не згоден",
        DisagreeExpl: "Клацніть тут, щоб не погодитися з цим повідомленням або попередити інших про помилки щодо фактів.",
        Bury: "Поховати",
        BuryExpl: "Клацніть, щоб перемістити цей допис нижче інших дописів. Тільки співробітники форуму зможуть побачити ваш голос.",
        Unwanted: "Небажане",
        UnwantedExpl: "Якщо ви не хочете, щоб цей допис був на цьому вебсайті. Це зменшить мою довіру до " +
            "автора допису. Тільки співробітники форуму зможуть побачити ваш голос.",
        AddTags: "Додати / видалити позначки (теги)",
        UnWikify: "Роз-вікіфікувати",
        Wikify: "Вікіфікувати",
        PinDeleteEtc: "Закріпити / Видалити / Категорія ..."
    },
    // Share dialog
    sd: {
        Copied: "Скопійовано.",
        CtrlCToCopy: "Натисніть CTRL+C, щоб скопіювати.",
        ClickToCopy: "Клацніть, щоб скопіювати посилання."
    },
    // Chat
    c: {
        About_1: "Це ",
        About_2: " канал балачки, створений ",
        ScrollUpViewComments: "Прокрутіть вгору, щоб переглянути попередні коментарі",
        Purpose: "Призначення:",
        edit: "зредагувати",
        'delete': "видалити",
        MessageDeleted: "(Повідомлення видалено)",
        JoinThisChat: "Приєднатися до цієї балачки",
        PostMessage: "Оприлюднити повідомлення",
        AdvancedEditor: "Розширений редактор",
        TypeHere: "Друкуйте тут. Ви можете використовувати Markdown і HTML."
    },
    // My Menu
    mm: {
        NeedsReview: "Потребує розгляду ",
        AdminHelp: "Довідка адміністратора ",
        StaffHelp: "Довідка персоналу ",
        DraftsEtc: "Чернетки, закладки, завдання",
        MoreNotfs: "Переглянути всі сповіщення",
        DismNotfs: "Позначити всі як прочитані",
        ViewProfile: "Переглянути свій профіль",
        ViewGroups: "Переглянути групи",
        LogOut: "Вийти",
        UnhideHelp: "Показати приховані довідкові повідомлення"
    },
    // Scroll buttons
    sb: {
        ScrollToC: "Прокрутити до:",
        Scroll: "Прокрутити",
        // The Back button, and the letter B is a keyboard shortcut.
        // If in your language, "Back" doesn't start with 'B', then instead
        // set Back_1 to '' (empty text), and Back_2 to:  "Back (B)" — and "Back" (but not "B")
        // translated to your language.
        Back_1: "",
        Back_2: "Назад (B)",
        // but not, too much text: "B" "ack, Повернутися назад (Швидка клавіша: B або Backspace)",
        BackExpl: "Прокрутити назад до вашого попереднього місця на цій сторінці",
        // These are useful on mobile — then, no keybard with Home (= scroll to top) and End buttons.
        // And, on a keyboard, once you get used to it, it's quite nice to click 1 to go to the
        // top, and 2 to see the first reply, and B to go back, F forward, so on.
        PgTop: "Вгору сторінки",
        PgTopHelp: "Перейти вгору сторінки. Швидка клавіша: 1",
        Repl: "Відповіді",
        ReplHelp: "Перейти до розділу Відповіді. Швидка клавіша: 2",
        Progr: "Поступ",
        // The Progress section is at the end of the page, and there, things like
        // "Alice changed status to Doing" and "Alise marked this as Done" and "Topic closed by ..."
        // are shown. (And, optionally, comments by staff or the people working with the issue.)
        ProgrHelp: "Перейти до розділу Поступ. Швидка клавіша: 3",
        PgBtm: "Донизу сторінки",
        Btm: "Униз",
        BtmHelp: "Перейти донизу сторінки. Швидка клавіша: 4",
        // "Keyboard shrotcuts: ..., and B to scroll back"
        Kbd_1: ", та ",
        // then the letter 'B' (regardless of language)
        Kbd_2: " щоб прокрутити назад"
    },
    // Select users dialog
    sud: {
        SelectUsers: "Вибрати користувачів",
        AddUsers: "Додати користувачів"
    },
    // About user dialog
    aud: {
        IsMod: "Є модератором.",
        IsAdm: "Є адміністратором.",
        IsDeld: "Знедіяно або видалено.",
        ThisIsGuest: "Це користувач-гість, насправді може бути ким завгодно.",
        ViewInAdm: "Переглянути в області адміністратора",
        ViewProfl: "Переглянути профіль",
        ViewComments: "Переглянути інші коментарі",
        RmFromTpc: "Видалити з теми",
        EmAdrUnkn: "Адреса електронної пошти невідома — цей гість не отримуватиме сповіщень про відповіді."
    },
    // User's profile page
    upp: {
        // ----- Links
        Preferences: "Налаштування",
        Invites: "Запрошення",
        DraftsEtc: "Чернетки, тощо",
        About: "Про нас",
        Privacy: "Конфіденційність",
        Security: "Безпека",
        Account: "Обліковий запис",
        Interface: "Інтерфейс",
        // ----- Overview stats
        JoinedC: "Приєднався: ",
        PostsMadeC: "Оприлюднив дописів: ",
        LastPostC: "Останній допис: ",
        LastSeenC: "Востаннє тут: ",
        TrustLevelC: "Рівень довіри: ",
        // ----- Action buttons
        // ----- Profile pic
        UploadPhoto: "Завантажити світлину",
        ChangePhoto: "Змінити світлину",
        ImgTooSmall: "Зображення замале: має бути принаймні 100 х 100",
        // ----- Activity
        OnlyStaffCanSee: "Це можуть бачити лише співробітники та довірені ключові учасники.",
        OnlyMbrsCanSee: "Це можуть бачити лише люди, які були певний час завсідниками.",
        Nothing: "Нема що показувати",
        Posts: "Дописи",
        NoPosts: "Нема дописів.",
        Topics: "Теми",
        NoTopics: "Нема тем.",
        // ----- User status
        UserBanned: "Цей користувач під забороною",
        UserSuspended: function (dateUtc) { return "\u0426\u044C\u043E\u0433\u043E \u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430 \u0442\u0438\u043C\u0447\u0430\u0441\u043E\u0432\u043E \u0443\u0441\u0443\u043D\u0435\u043D\u043E \u0434\u043E ".concat(dateUtc, " \u0437\u0430 \u0432\u0441\u0435\u0441\u0432\u0456\u0442\u043D\u0456\u043C \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u043E\u0432\u0430\u043D\u0438\u043C \u0447\u0430\u0441\u043E\u043C"); },
        ReasonC: "Причина: ",
        DeactOrDeld: "Знедіяно або видалено.",
        isGroup: " (група)",
        isGuest: " — користувач-гість, може бути будь-хто",
        isMod: " – модератор",
        isAdmin: " – адміністратор",
        you: "(ви)",
        // ----- Notifications page
        NoNotfs: "Немає сповіщень",
        NotfsToYouC: "Сповіщення для вас:",
        NotfsToOtherC: function (name) { return "\u0421\u043F\u043E\u0432\u0456\u0449\u0435\u043D\u043D\u044F \u0434\u043B\u044F ".concat(name, ":"); },
        DefNotfsSiteWide: "Сповіщення самопливом, для всього сайту",
        // The "for" in:  "Default notifications, site wide, for (someone's name)".
        forWho: "для",
        // ----- Drafts Etc page
        NoDrafts: "Немає чернеток",
        YourDraftsC: "Ваші чернетки:",
        DraftsByC: function (name) { return "\u0427\u0435\u0440\u043D\u0435\u0442\u043A\u0438, \u0430\u0432\u0442\u043E\u0440 \u044F\u043A\u0438\u0445 ".concat(name, ":"); },
        // ----- Invites page
        InvitesIntro: "Тут ви можете запросити людей приєднатися до цієї мережевої місцини. ",
        InvitesListedBelow: "Запрошення, які ви вже надіслали, перелічені нижче.",
        NoInvites: "Ви ще нікого не запросили.",
        InvitedEmail: "Запрошена адреса електронної пошти",
        WhoAccepted: "Учасник, який прийняв",
        InvAccepted: "Запрошення прийнято",
        InvSent: "Запрошення відправлено",
        JoinedAlready: "Вже приєднався",
        SendAnInv: "Запросити людей",
        SendInv: "Надіслати запрошення",
        SendInvExpl: // MISSING I18N changed to pluralis
        "Ми надішлемо вашим друзям короткого електронного листа. Вони клацнуть на посилання " +
            "щоб одразу ж приєднатися, їм не потрібно буде входити в систему. " +
            "Вони стануть звичайними учасниками, а не модераторами чи адміністраторами.",
        //EnterEmail: "Enter email(s)",
        InvDone: "Гаразд. Я надішлю їм електронного листа.",
        NoOneToInv: "Нема кого запрошувати.",
        InvNotfLater: "Я сповіщу вас пізніше, коли я їх запрошу.",
        AlreadyInvSendAgainQ: "Їх уже запрошено — можливо, ви бажаєте запросити їх знову?",
        InvErr_1: "Це призвело до ",
        InvErr_2: "помилок",
        InvErr_3: ":",
        TheseJoinedAlrdyC: "Вони вже приєдналися, тому я їх не запрошував:",
        ResendInvsQ: "Повторно надіслати запрошення цим людям? Їх уже запросили.",
        InvAgain: "Запросити знову",
        // ----- Preferences, About
        AboutYou: "Про вас",
        WebLink: "Будь-яка ваша мережева місцина або сторінка.",
        NotShownCannotChange: "Не зображується для всіх. Його неможливо змінити.",
        // The full name or alias:
        NameOpt: "Ім'я (необов’язково)",
        NotShown: "Не зображується для всіх.",
        // The username:
        MayChangeFewTimes: "Ви можете змінити його лише кілька разів.",
        notSpecified: "(не вказано)",
        ChangeUsername_1: "Ви можете змінити своє ім'я користувача лише кілька разів.",
        ChangeUsername_2: "Занадто часта його зміна може заплутати інших — " +
            "вони не знатимуть, як @згадувати вас.",
        NotfAboutAll: "Отримувати сповіщення про кожен новий допис (якщо ви не приглушили якусь тему чи категорію)",
        NotfAboutNewTopics: "Отримувати сповіщення про нові теми (якщо ви не приглушили їх категорію)",
        ActivitySummaryEmails: "Електронні листи з підсумком діяльності",
        EmailSummariesToGroup: "Якщо учасники цієї групи не відвідують її тут, то самопливом надсилати їм " +
            "зведення популярних тем та інші речі.",
        EmailSummariesToMe: "Якщо я не буваю тут, надсилайте мені " +
            "зведення популярних тем та інші речі.",
        AlsoIfTheyVisit: "Надсилайте їм електронні листи, навіть якщо вони регулярно бувають тут.",
        AlsoIfIVisit: "Надсилайте мені електронні листи, навіть якщо я регулярно буваю тут.",
        HowOftenWeSend: "Як часто ми маємо надсилати ці електронні листи?",
        HowOftenYouWant: "Як часто ви бажаєте отримувати ці електронні листи?",
        // ----- Preferences, Privacy
        HideActivityStrangers_1: "Приховувати вашу нещодавню діяльність для незнайомців та нових учасників?",
        HideActivityStrangers_2: "(Але не для тих, хто деякий час був завсідником.)",
        HideActivityAll_1: "Приховувати вашу нещодавню діяльність для всіх?",
        HideActivityAll_2: "(Окрім співробітників та довірених ключових учасників.)",
        // ----- Preferences, Account
        // About email address:
        EmailAddresses: "Адреси електронної пошти",
        PrimaryDot: "Основна. ",
        VerifiedDot: "Перевірена. ",
        NotVerifiedDot: "Не перевірена. ",
        ForLoginWithDot: function (provider) { return "\u0414\u043B\u044F \u0432\u0445\u043E\u0434\u0443 \u0447\u0435\u0440\u0435\u0437 ".concat(provider, ". "); },
        MakePrimary: "Зробити основним",
        AddEmail: "Додати адресу електронної пошти",
        TypeNewEmailC: "Ввести нову адресу електронної пошти:",
        MaxEmailsInfo: function (numMax) { return "(\u041D\u0435 \u043C\u043E\u0436\u043D\u0430 \u0434\u043E\u0434\u0430\u0432\u0430\u0442\u0438 \u0431\u0456\u043B\u044C\u0448\u0435 ".concat(numMax, " \u0430\u0434\u0440\u0435\u0441.)"); },
        EmailAdded_1: "Додано. Ми надіслали вам листа для підтвердження адреси — ",
        EmailAdded_2: "перевірте свою вхідну пошту.",
        SendVerifEmail: "Надіслати листа для підтвердження адреси",
        EmailStatusExpl: "('Основна' означає, що ви можете увійти по цій адресі, і ми надсилатимемо на неї сповіщення. " +
            "'Перевірена' означає, що ви клацнули на посилання в електронному листі для підтвердження адреси.)",
        // Password:
        ChangePwdQ: "Змінити пароль?",
        CreatePwdQ: "Створити пароль?",
        WillGetPwdRstEml: "Ви отримаєте електронного листа, щоб скинути пароль.",
        // This is the "None" in:  "Password: None"
        PwdNone: "Нема",
        // Logins:
        LoginMethods: "Методи входу",
        commaAs: ", як: ",
        // One's data:
        YourContent: "Ваш вміст",
        DownloadPosts: "Завантажити дописи",
        DownloadPostsHelp: "Створює файл JSON з копією тем та коментарів, які ви оприлюднили.",
        DownloadPersData: "Завантажити особисті дані",
        DownloadPersDataHelp: "Створює JSON файл із копією ваших особистих даних, наприклад, вашого імені " +
            "(якщо ви вказали ім'я) та електронної адреси.",
        // Delete account:
        DangerZone: "Небезпечна зона",
        DeleteAccount: "Видалити обліковий запис",
        DeleteYourAccountQ: "Видалити ваш обліковий запис? Ми видалимо ваше ім’я, забудемо вашу адресу електронної пошти, пароль та " +
            "усі мережеві ролі (наприклад, логіни у Фейсбуці та Твіттері).  " +
            "Ви не зможете увійти знову. Це не можна буде скасувати.",
        DeleteUserQ: "Видалити цього користувача? Ми видалимо ім’я, забудемо адресу електронної пошти, пароль та " +
            "мережеві ролі (наприклад, логіни у Фейсбуці та Твіттері) " +
            "Користувач не зможе увійти знову. Це не можна буде скасувати.",
        YesDelete: "Так, видалити"
    },
    // Group profile page
    gpp: {
        GroupMembers: "Учасники групи",
        NoMembers: "Нема учасників.",
        MayNotListMembers: "Немає змоги перелічити учасників.",
        AddMembers: "Додати учасників",
        BuiltInCannotModify: "Це вбудована група; її неможливо змінити.",
        NumMembers: function (num) { return "".concat(num, " \u0443\u0447\u0430\u0441\u043D\u0438\u043A\u0456\u0432"); },
        YouAreMember: "Ви учасник.",
        CustomGroupsC: "Нетипові групи:",
        BuiltInGroupsC: "Вбудовані групи:",
        DeleteGroup: "Видалити цю групу"
    },
    // Create user dialog
    cud: {
        CreateUser: "Створити користувача",
        CreateAccount: "Створити обліковий запис",
        EmailC: "Електронна пошта:",
        keptPriv: "залишиться конфіденційною",
        forNotfsKeptPriv: "для сповіщень про відповіді, залишиться конфіденційною",
        EmailVerifBy_1: "Ваша адреса електронної пошти підтверджена ",
        EmailVerifBy_2: ".",
        UsernameC: "Ім'я користувача:",
        FullNameC: "Повне ім'я:",
        optName: "необов’язково",
        //OrCreateAcct_1: "Або ",
        //OrCreateAcct_2: "створити обліковий запис",
        //OrCreateAcct_3: " з ",
        //OrCreateAcct_4: "@логіном",
        //OrCreateAcct_5: " та паролем",
        DoneLoggedIn: "Обліковий запис створено. Ви ввійшли в систему.",
        AlmostDone: "Майже готово! Вам просто потрібно підтвердити свою електронну адресу. Ми " +
            "надіслали вам електронного листа. Будь ласка, клацніть на посилання в електронному листі, щоб ввести в дію " +
            "свій обліковий запис. Ви можете закрити цю сторінку."
    },
    // Accept terms and privacy policy?
    terms: {
        TermsAndPrivacy: "Умови та конфіденційність",
        Accept_1: "Чи ви приймаєте наші ",
        TermsOfService: "Умови надання послуг",
        TermsOfUse: "Умови використання",
        Accept_2: " та ",
        PrivPol: "Політику конфіденційності",
        Accept_3_User: "?",
        Accept_3_Owner: " для власників сайтів?",
        // About "for site owners?" above:
        // That's if someone creates his/her own community, via this software provided as
        // Software-as-a-Service hosting. Then, there is / will-be a bit different
        // Terms-of-Service to agree with, since being a community maintainer/owner, is different
        // (more responsibility) than just signing up to post comments.
        YesAccept: "Так, я приймаю"
    },
    // Password input
    pwd: {
        PasswordC: "Пароль:",
        StrengthC: "Сила: ",
        FairlyWeak: "Досить слабкий.",
        toShort: "занадто короткий",
        TooShort: function (minLength) { return "\u0417\u0430\u043D\u0430\u0434\u0442\u043E \u043A\u043E\u0440\u043E\u0442\u043A\u0438\u0439. \u041C\u0430\u0454 \u0431\u0443\u0442\u0438 \u043F\u0440\u0438\u043D\u0430\u0439\u043C\u043D\u0456 ".concat(minLength, " \u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432"); },
        PlzInclDigit: "Будь ласка, включіть до пароля цифру або спеціальний символ",
        TooWeak123abc: "Занадто слабкий. Не використовуйте паролі на зразок '12345' чи 'abcde'.",
        AvoidInclC: "Уникайте включення (частини) вашого імені або електронної пошти в паролі:"
    },
    // Login dialog
    ld: {
        NotFoundOrPrivate: "Сторінку не знайдено або доступ заборонено.",
        // This is if you're admin, and click the Impersonate button to become someone else
        // (maybe to troubleshoot problems with his/her account s/he has asked for help about),
        // and then you, being that other user, somehow happen to open a login dialog
        // (maybe because of navigating to a different part of the site that the user being
        // impersonated cannot access) — then, that error message is shown: You're not allowed
        // to login as *someone else* to access that part of the community, until you've first
        // stopped impersonating the first user. (Otherwise, everything gets too complicated.)
        IsImpersonating: "Ви виступаєте в ролі когось, хто може не мати доступу до всіх частин " +
            "цього вебсайту.",
        IfYouThinkExistsThen: "Якщо ви вважаєте, що сторінка існує, увійдіть як хтось, хто може отримати до неї доступ. ",
        LoggedInAlready: "(Ви вже ввійшли в систему, але, можливо, це не той обліковий запис?) ",
        ElseGoToHome_1: "В іншому випадку ви можете ",
        ElseGoToHome_2: "перейти на домашню сторінку.",
        CreateAcconut: "Створити обліковий запис",
        ContinueWithDots: "Продовжити ...",
        SignUp: "Приєднатися",
        LogIn: "Увійти",
        LogInWithPwd: "Увійти за допомогою пароля",
        CreateAdmAcct: "Створити обліковий запис адміністратора:",
        AuthRequired: "Для доступу на цей сайт потрібне підтвердження права на доступ",
        LogInToLike: "Увійдіть, щоб вподобати цей допис",
        LogInToSubmit: "Увійдіть та надішліть",
        LogInToComment: "Увійдіть, щоб написати коментар",
        LogInToCreateTopic: "Увійдіть, щоб створити тему",
        //AlreadyHaveAcctQ: "У вас є обліковий запис? ",
        OrLogIn_1: "",
        OrLogIn_2: "Увійти",
        OrLogIn_3: " замість цього",
        //NewUserQ: "Новий користувач? ",
        SignUpInstead_1: "",
        SignUpInstead_2: "Створити обліковий запис",
        SignUpInstead_3: " замість цього",
        // MAYBE x3:
        OrTypeName_1: ", Або просто ",
        OrTypeName_2: "введіть своє ім'я",
        OrTypeName_3: "",
        OrCreateAcctHere: "Або створіть обліковий запис:",
        OrTypeName: "Або введіть своє ім'я:",
        OrLogIn: "Або увійдіть:",
        YourNameQ: "Ваше ім'я?",
        BadCreds: "Невірне ім'я користувача чи пароль",
        UsernameOrEmailC: "Ім'я користувача чи електронна адреса:",
        PasswordC: "Пароль:",
        ForgotPwd: "Ви забули свій пароль?",
        NoPwd: "Ви ще не вибрали пароль.",
        CreatePwd: "Створити пароль"
    },
    // Flag dialog
    fd: {
        PleaseTellConcerned: "Будь ласка, повідомте нам, що вас турбує.",
        ThanksHaveReported: "Дякую, що повідомили про це. Співробітники форуму розглянуть ваше звернення.",
        ReportComment: "Поскаржитися на коментар",
        // Different reasons one can choose among when reporting a comment:
        OptPersonalData: "Цей допис містить особисті дані, наприклад чиєсь справжнє ім’я.",
        OptOffensive: "Цей допис містить агресивний або образливий вміст.",
        OptSpam: "Цей допис є небажаною рекламою.",
        OptOther: "Сповістіть співробітників про цей допис з якоїсь іншої причини."
    },
    // Help message dialog
    help: {
        YouCanShowAgain_1: "Ви можете подивитися довідкові повідомлення ще раз, якщо ви ввійшли в систему, " +
            "клацнувши своє ім'я, а потім ",
        YouCanShowAgain_2: "Показати приховані довідкові повідомлення"
    },
    // Editor
    e: {
        SimilarTopicsC: "Подібні теми:",
        //WritingSomethingWarning: "You were writing something?",
        UploadMaxOneFile: "Вибачте, але наразі ви можете завантажувати лише один файл за раз",
        PleaseFinishPost: "Будь ласка, спершу закінчіть писати свій допис",
        PleaseFinishChatMsg: "Будь ласка, спершу допишіть своє повідомлення в балачці",
        PleaseFinishMsg: "Будь ласка, спершу допишіть своє повідомлення",
        PleaseSaveEdits: "Будь ласка, спершу збережіть свої поточні виправлення",
        PleaseSaveOrCancel: "Будь ласка, спершу або збережіть, або скасуйте нову тему",
        CanContinueEditing: "Ви можете продовжувати редагувати свій текст, якщо ви знову відкриєте редактор.",
        //"(But the text will currently be lost if you leave this page.)",
        PleaseDontDeleteAll: "Будь ласка, не видаляйте весь текст. Напишіть щось.",
        PleaseWriteSth: "Будь ласка, напишіть щось.",
        PleaseWriteTitle: "Будь ласка, напишіть заголовок теми.",
        PleaseWriteMsgTitle: "Будь ласка, напишіть заголовок повідомлення.",
        PleaseWriteMsg: "Будь ласка, напишіть повідомлення.",
        exBold: "жирний текст",
        exEmph: "підкреслений текст",
        exPre: "попередньо відформатований текст",
        exQuoted: "цитований текст",
        ExHeading: "Заголовок",
        TitlePlaceholder: "Надрукуйте заголовок — про що це, одним коротким реченням?",
        EditPost_1: "Зредагувати ",
        EditPost_2: "допис ",
        TypeChatMsg: "Надрукуйте повідомлення до балачки:",
        YourMsg: "Ваше повідомлення:",
        CreateTopic: "Створити нову тему",
        CreateCustomHtml: "Створіть нетипову HTML-сторінку (додайте свій заголовок <h1>)",
        CreateInfoPage: "Створити ознайомчу сторінку",
        CreateCode: "Створити сторінку вихідного коду",
        AskQuestion: "Поставити питання",
        ReportProblem: "Повідомити про проблему",
        SuggestIdea: "Запропонувати задум",
        NewChat: "Нова назва та мета каналу балачки",
        NewPrivChat: "Нова назва та мета приватної балачки",
        AppendComment: "Додайте коментар внизу сторінки:",
        ReplyTo: "Відповісти ",
        ReplyTo_theOrigPost: "Початкове повідомлення",
        ReplyTo_post: "допис ",
        AddCommentC: "Додати коментар:",
        PleaseSelectPosts: "Будь ласка, оберіть один або кілька дописів, для відповіді на них.",
        Save: "Зберегти",
        edits: "виправлення",
        PostReply: "Оприлюднити відповідь",
        PostComment: "Оприлюднити коментар",
        Post: "Оприлюднити",
        comment: "коментар",
        question: "питання",
        PostMessage: "Оприлюднити повідомлення",
        SimpleEditor: "Простий редактор",
        Send: "Надіслати",
        message: "повідомлення",
        Create: "Створити",
        page: "сторінку",
        chat: "балачку",
        idea: "задум",
        topic: "тему",
        Submit: "Подати на розгляд",
        problem: "проблему",
        ViewOldEdits: "Переглянути старі виправлення",
        UploadBtnTooltip: "Завантажити файл або зображення",
        BoldBtnTooltip: "Зробити шрифт жирним",
        EmBtnTooltip: "Підкреслити",
        QuoteBtnTooltip: "Цитата",
        PreBtnTooltip: "Попередньо відформатований текст",
        HeadingBtnTooltip: "Заголовок",
        TypeHerePlaceholder: "Друкуйте тут. Ви можете використовувати Markdown та HTML. Перетягніть сюди зображення, щоб вставити його.",
        Maximize: "Розгорнути",
        ToNormal: "Повернутися до звичайного вигляду",
        TileHorizontally: "Розмістити горизонтальною плиткою",
        PreviewC: "Попередній перегляд:",
        TitleExcl: " (заголовок виключено)",
        ShowEditorAgain: "Знову показати редактор",
        Minimize: "Згорнути",
        IPhoneKbdSpace_1: "(Цей сірий простір зарезервовано",
        IPhoneKbdSpace_2: "для клавіатури Айфону.)",
        PreviewInfo: "Тут ви можете переглянути, як буде виглядати ваш допис.",
        CannotType: "Тут не можна друкувати.",
        LoadingDraftDots: "Завантажую хоч якусь чернетку ...",
        DraftUnchanged: "Без змін.",
        CannotSaveDraftC: "Не вдається зберегти чернетку:",
        DraftSavedBrwsr: "Чернетка збережена, в оглядачі.",
        DraftSaved: function (nr) { return "\u0427\u0435\u0440\u043D\u0435\u0442\u043A\u0443 ".concat(nr, " \u0437\u0431\u0435\u0440\u0435\u0436\u0435\u043D\u043E."); },
        DraftDeleted: function (nr) { return "\u0427\u0435\u0440\u043D\u0435\u0442\u043A\u0443 ".concat(nr, " \u0432\u0438\u0434\u0430\u043B\u0435\u043D\u043E."); },
        WillSaveDraft: function (nr) { return "\u0417\u0431\u0435\u0440\u0435\u0436\u0443 \u0447\u0435\u0440\u043D\u0435\u0442\u043A\u0443 ".concat(nr, " ..."); },
        SavingDraft: function (nr) { return "\u0417\u0431\u0435\u0440\u0456\u0433\u0430\u044E \u0447\u0435\u0440\u043D\u0435\u0442\u043A\u0443 ".concat(nr, " ..."); },
        DeletingDraft: function (nr) { return "\u0412\u0438\u0434\u0430\u043B\u044F\u044E \u0447\u0435\u0440\u043D\u0435\u0442\u043A\u0443 ".concat(nr, " ..."); }
    },
    // Select category dropdown
    scd: {
        SelCat: "Оберіть категорію"
    },
    // Page type dropdown
    pt: {
        SelectTypeC: "Оберіть різновид теми:",
        DiscussionExpl: "Дискусія щодо чогось.",
        QuestionExpl: "Одну відповідь можна буде позначити як прийняту відповідь.",
        ProblExpl: "Якщо щось негаразд чи не працює. Можна буде позначити як розв'язану чи виправлену.",
        IdeaExpl: "Пропозиція. Можна буде позначити як здійснений або втілений.",
        ChatExpl: "Можливо, нескінченна розмова.",
        PrivChatExpl: "Видко лише людям, яких запросили приєднатися до балачки.",
        CustomHtml: "Нетипова HTML-сторінка",
        InfoPage: "Ознайомча сторінка",
        Code: "Код",
        EmbCmts: "Вбудовані коментарі",
        About: "Про нас",
        PrivChat: "Приватна балачка",
        Form: "Форма"
    },
    // Join sub community dialog
    jscd: {
        NoMoreToJoin: "Більше нема спільнот, до яких можна приєднатися.",
        SelCmty: "Обрати спільноту ..."
    },
    // Search dialogs and the search page.
    s: {
        TxtToFind: "Текст для пошуку"
    },
    // No internet
    ni: {
        NoInet: "Немає підключення до Інтернету",
        PlzRefr: "Оновіть сторінку, щоб побачити останні зміни. (Сталося роз'єднання)",
        RefrNow: "Оновити зараз"
    },
    PostDeleted: function (postNr) { return "\u0426\u0435\u0439 \u0434\u043E\u043F\u0438\u0441, \u043D\u043E\u043C\u0435\u0440 ".concat(postNr, ", \u0431\u0443\u043B\u043E \u0432\u0438\u0434\u0430\u043B\u0435\u043D\u043E."); },
    NoSuchPost: function (postNr) { return "\u041D\u0430 \u0446\u0456\u0439 \u0441\u0442\u043E\u0440\u0456\u043D\u0446\u0456 \u043D\u0435\u043C\u0430\u0454 \u0434\u043E\u043F\u0438\u0441\u0443 \u0437 \u043D\u043E\u043C\u0435\u0440\u043E\u043C ".concat(postNr, "."); },
    NoPageHere: "Цю сторінку або було видалено, або її ніколи не існувало, або ви не можете отримати до неї доступ.",
    GoBackToLastPage: "Повернутися до останньої відвіданої сторінки"
};
/* Next file: modules/sanitize-html/dist/sanitize-html.min.js  */ (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.sanitizeHtml=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){var htmlparser=require("htmlparser2");var extend=require("xtend");var quoteRegexp=require("regexp-quote");function each(obj,cb){if(obj)Object.keys(obj).forEach(function(key){cb(obj[key],key)})}function has(obj,key){return{}.hasOwnProperty.call(obj,key)}module.exports=sanitizeHtml;function sanitizeHtml(html,options,_recursing){var result="";function Frame(tag,attribs){var that=this;this.tag=tag;this.attribs=attribs||{};this.tagPosition=result.length;this.text="";this.updateParentNodeText=function(){if(stack.length){var parentFrame=stack[stack.length-1];parentFrame.text+=that.text}}}if(!options){options=sanitizeHtml.defaults;options.parser=htmlParserDefaults}else{options=extend(sanitizeHtml.defaults,options);if(options.parser){options.parser=extend(htmlParserDefaults,options.parser)}else{options.parser=htmlParserDefaults}}var nonTextTagsArray=options.nonTextTags||["script","style","textarea"];var allowedAttributesMap;var allowedAttributesGlobMap;if(options.allowedAttributes){allowedAttributesMap={};allowedAttributesGlobMap={};each(options.allowedAttributes,function(attributes,tag){allowedAttributesMap[tag]=[];var globRegex=[];attributes.forEach(function(name){if(name.indexOf("*")>=0){globRegex.push(quoteRegexp(name).replace(/\\\*/g,".*"))}else{allowedAttributesMap[tag].push(name)}});allowedAttributesGlobMap[tag]=new RegExp("^("+globRegex.join("|")+")$")})}var allowedClassesMap={};each(options.allowedClasses,function(classes,tag){if(allowedAttributesMap){if(!has(allowedAttributesMap,tag)){allowedAttributesMap[tag]=[]}allowedAttributesMap[tag].push("class")}allowedClassesMap[tag]=classes});var transformTagsMap={};var transformTagsAll;each(options.transformTags,function(transform,tag){var transFun;if(typeof transform==="function"){transFun=transform}else if(typeof transform==="string"){transFun=sanitizeHtml.simpleTransform(transform)}if(tag==="*"){transformTagsAll=transFun}else{transformTagsMap[tag]=transFun}});var depth=0;var stack=[];var skipMap={};var transformMap={};var skipText=false;var skipTextDepth=0;var parser=new htmlparser.Parser({onopentag:function(name,attribs){if(skipText){skipTextDepth++;return}var frame=new Frame(name,attribs);stack.push(frame);var skip=false;var hasText=frame.text?true:false;var transformedTag;if(has(transformTagsMap,name)){transformedTag=transformTagsMap[name](name,attribs);frame.attribs=attribs=transformedTag.attribs;if(transformedTag.text!==undefined){frame.innerText=transformedTag.text}if(name!==transformedTag.tagName){frame.name=name=transformedTag.tagName;transformMap[depth]=transformedTag.tagName}}if(transformTagsAll){transformedTag=transformTagsAll(name,attribs);frame.attribs=attribs=transformedTag.attribs;if(name!==transformedTag.tagName){frame.name=name=transformedTag.tagName;transformMap[depth]=transformedTag.tagName}}if(options.allowedTags&&options.allowedTags.indexOf(name)===-1){skip=true;if(nonTextTagsArray.indexOf(name)!==-1){skipText=true;skipTextDepth=1}skipMap[depth]=true}depth++;if(skip){return}result+="<"+name;if(!allowedAttributesMap||has(allowedAttributesMap,name)||allowedAttributesMap["*"]){each(attribs,function(value,a){if(!allowedAttributesMap||has(allowedAttributesMap,name)&&allowedAttributesMap[name].indexOf(a)!==-1||allowedAttributesMap["*"]&&allowedAttributesMap["*"].indexOf(a)!==-1||has(allowedAttributesGlobMap,name)&&allowedAttributesGlobMap[name].test(a)||allowedAttributesGlobMap["*"]&&allowedAttributesGlobMap["*"].test(a)){if(a==="href"||a==="src"){if(naughtyHref(name,value)){delete frame.attribs[a];return}}if(a==="class"){value=filterClasses(value,allowedClassesMap[name]);if(!value.length){delete frame.attribs[a];return}}result+=" "+a;if(value.length){result+='="'+escapeHtml(value)+'"'}}else{delete frame.attribs[a]}})}if(options.selfClosing.indexOf(name)!==-1){result+=" />"}else{result+=">";if(frame.innerText&&!hasText&&!options.textFilter){result+=frame.innerText}}},ontext:function(text){if(skipText){return}var lastFrame=stack[stack.length-1];var tag;if(lastFrame){tag=lastFrame.tag;text=lastFrame.innerText!==undefined?lastFrame.innerText:text}if(tag==="script"||tag==="style"){result+=text}else{var escaped=escapeHtml(text);if(options.textFilter){result+=options.textFilter(escaped)}else{result+=escaped}}if(stack.length){var frame=stack[stack.length-1];frame.text+=text}},onclosetag:function(name){if(skipText){skipTextDepth--;if(!skipTextDepth){skipText=false}else{return}}var frame=stack.pop();if(!frame){return}skipText=false;depth--;if(skipMap[depth]){delete skipMap[depth];frame.updateParentNodeText();return}if(transformMap[depth]){name=transformMap[depth];delete transformMap[depth]}if(options.exclusiveFilter&&options.exclusiveFilter(frame)){result=result.substr(0,frame.tagPosition);return}frame.updateParentNodeText();if(options.selfClosing.indexOf(name)!==-1){return}result+="</"+name+">"}},options.parser);parser.write(html);parser.end();return result;function escapeHtml(s){if(typeof s!=="string"){s=s+""}return s.replace(/\&/g,"&amp;").replace(/</g,"&lt;").replace(/\>/g,"&gt;").replace(/\"/g,"&quot;")}function naughtyHref(name,href){href=href.replace(/[\x00-\x20]+/g,"");href=href.replace(/<\!\-\-.*?\-\-\>/g,"");var matches=href.match(/^([a-zA-Z]+)\:/);if(!matches){return false}var scheme=matches[1].toLowerCase();if(has(options.allowedSchemesByTag,name)){return options.allowedSchemesByTag[name].indexOf(scheme)===-1}return!options.allowedSchemes||options.allowedSchemes.indexOf(scheme)===-1}function filterClasses(classes,allowed){if(!allowed){return classes}classes=classes.split(/\s+/);return classes.filter(function(clss){return allowed.indexOf(clss)!==-1}).join(" ")}}var htmlParserDefaults={decodeEntities:true};sanitizeHtml.defaults={allowedTags:["h3","h4","h5","h6","blockquote","p","a","ul","ol","nl","li","b","i","strong","em","strike","code","hr","br","div","table","thead","caption","tbody","tr","th","td","pre"],allowedAttributes:{a:["href","name","target"],img:["src"]},selfClosing:["img","br","hr","area","base","basefont","input","link","meta"],allowedSchemes:["http","https","ftp","mailto"],allowedSchemesByTag:{}};sanitizeHtml.simpleTransform=function(newTagName,newAttribs,merge){merge=merge===undefined?true:merge;newAttribs=newAttribs||{};return function(tagName,attribs){var attrib;if(merge){for(attrib in newAttribs){attribs[attrib]=newAttribs[attrib]}}else{attribs=newAttribs}return{tagName:newTagName,attribs:attribs}}}},{htmlparser2:36,"regexp-quote":54,xtend:58}],2:[function(require,module,exports){;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=="undefined"?Uint8Array:Array;function init(){var code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i}revLookup["-".charCodeAt(0)]=62;revLookup["_".charCodeAt(0)]=63}init();function toByteArray(b64){var i,j,l,tmp,placeHolders,arr;var len=b64.length;if(len%4>0){throw new Error("Invalid string. Length must be a multiple of 4")}placeHolders=b64[len-2]==="="?2:b64[len-1]==="="?1:0;arr=new Arr(len*3/4-placeHolders);l=placeHolders>0?len-4:len;var L=0;for(i=0,j=0;i<l;i+=4,j+=3){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[L++]=tmp>>16&255;arr[L++]=tmp>>8&255;arr[L++]=tmp&255}if(placeHolders===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[L++]=tmp&255}else if(placeHolders===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[L++]=tmp>>8&255;arr[L++]=tmp&255}return arr}function tripletToBase64(num){return lookup[num>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[num&63]}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2];output.push(tripletToBase64(tmp))}return output.join("")}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%3;var output="";var parts=[];var maxChunkLength=16383;for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength))}if(extraBytes===1){tmp=uint8[len-1];output+=lookup[tmp>>2];output+=lookup[tmp<<4&63];output+="=="}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];output+=lookup[tmp>>10];output+=lookup[tmp>>4&63];output+=lookup[tmp<<2&63];output+="="}parts.push(output);return parts.join("")}},{}],3:[function(require,module,exports){},{}],4:[function(require,module,exports){(function(global){;var buffer=require("buffer");var Buffer=buffer.Buffer;var SlowBuffer=buffer.SlowBuffer;var MAX_LEN=buffer.kMaxLength||2147483647;exports.alloc=function alloc(size,fill,encoding){if(typeof Buffer.alloc==="function"){return Buffer.alloc(size,fill,encoding)}if(typeof encoding==="number"){throw new TypeError("encoding must not be number")}if(typeof size!=="number"){throw new TypeError("size must be a number")}if(size>MAX_LEN){throw new RangeError("size is too large")}var enc=encoding;var _fill=fill;if(_fill===undefined){enc=undefined;_fill=0}var buf=new Buffer(size);if(typeof _fill==="string"){var fillBuf=new Buffer(_fill,enc);var flen=fillBuf.length;var i=-1;while(++i<size){buf[i]=fillBuf[i%flen]}}else{buf.fill(_fill)}return buf};exports.allocUnsafe=function allocUnsafe(size){if(typeof Buffer.allocUnsafe==="function"){return Buffer.allocUnsafe(size)}if(typeof size!=="number"){throw new TypeError("size must be a number")}if(size>MAX_LEN){throw new RangeError("size is too large")}return new Buffer(size)};exports.from=function from(value,encodingOrOffset,length){if(typeof Buffer.from==="function"&&(!global.Uint8Array||Uint8Array.from!==Buffer.from)){return Buffer.from(value,encodingOrOffset,length)}if(typeof value==="number"){throw new TypeError('"value" argument must not be a number')}if(typeof value==="string"){return new Buffer(value,encodingOrOffset)}if(typeof ArrayBuffer!=="undefined"&&value instanceof ArrayBuffer){var offset=encodingOrOffset;if(arguments.length===1){return new Buffer(value)}if(typeof offset==="undefined"){offset=0}var len=length;if(typeof len==="undefined"){len=value.byteLength-offset}if(offset>=value.byteLength){throw new RangeError("'offset' is out of bounds")}if(len>value.byteLength-offset){throw new RangeError("'length' is out of bounds")}return new Buffer(value.slice(offset,offset+len))}if(Buffer.isBuffer(value)){var out=new Buffer(value.length);value.copy(out,0,0,value.length);return out}if(value){if(Array.isArray(value)||typeof ArrayBuffer!=="undefined"&&value.buffer instanceof ArrayBuffer||"length"in value){return new Buffer(value)}if(value.type==="Buffer"&&Array.isArray(value.data)){return new Buffer(value.data)}}throw new TypeError("First argument must be a string, Buffer, "+"ArrayBuffer, Array, or array-like object.")};exports.allocUnsafeSlow=function allocUnsafeSlow(size){if(typeof Buffer.allocUnsafeSlow==="function"){return Buffer.allocUnsafeSlow(size)}if(typeof size!=="number"){throw new TypeError("size must be a number")}if(size>=MAX_LEN){throw new RangeError("size is too large")}return new SlowBuffer(size)}}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{buffer:5}],5:[function(require,module,exports){(function(global){;var base64=require("base64-js");var ieee754=require("ieee754");var isArray=require("isarray");exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;Buffer.TYPED_ARRAY_SUPPORT=global.TYPED_ARRAY_SUPPORT!==undefined?global.TYPED_ARRAY_SUPPORT:typedArraySupport();exports.kMaxLength=kMaxLength();function typedArraySupport(){try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}};return arr.foo()===42&&typeof arr.subarray==="function"&&arr.subarray(1,1).byteLength===0}catch(e){return false}}function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(that,length){if(kMaxLength()<length){throw new RangeError("Invalid typed array length")}if(Buffer.TYPED_ARRAY_SUPPORT){that=new Uint8Array(length);that.__proto__=Buffer.prototype}else{if(that===null){that=new Buffer(length)}that.length=length}return that}function Buffer(arg,encodingOrOffset,length){if(!Buffer.TYPED_ARRAY_SUPPORT&&!(this instanceof Buffer)){return new Buffer(arg,encodingOrOffset,length)}if(typeof arg==="number"){if(typeof encodingOrOffset==="string"){throw new Error("If encoding is specified then the first argument must be a string")}return allocUnsafe(this,arg)}return from(this,arg,encodingOrOffset,length)}Buffer.poolSize=8192;Buffer._augment=function(arr){arr.__proto__=Buffer.prototype;return arr};function from(that,value,encodingOrOffset,length){if(typeof value==="number"){throw new TypeError('"value" argument must not be a number')}if(typeof ArrayBuffer!=="undefined"&&value instanceof ArrayBuffer){return fromArrayBuffer(that,value,encodingOrOffset,length)}if(typeof value==="string"){return fromString(that,value,encodingOrOffset)}return fromObject(that,value)}Buffer.from=function(value,encodingOrOffset,length){return from(null,value,encodingOrOffset,length)};if(Buffer.TYPED_ARRAY_SUPPORT){Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;if(typeof Symbol!=="undefined"&&Symbol.species&&Buffer[Symbol.species]===Buffer){Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:true})}}function assertSize(size){if(typeof size!=="number"){throw new TypeError('"size" argument must be a number')}else if(size<0){throw new RangeError('"size" argument must not be negative')}}function alloc(that,size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(that,size)}if(fill!==undefined){return typeof encoding==="string"?createBuffer(that,size).fill(fill,encoding):createBuffer(that,size).fill(fill)}return createBuffer(that,size)}Buffer.alloc=function(size,fill,encoding){return alloc(null,size,fill,encoding)};function allocUnsafe(that,size){assertSize(size);that=createBuffer(that,size<0?0:checked(size)|0);if(!Buffer.TYPED_ARRAY_SUPPORT){for(var i=0;i<size;++i){that[i]=0}}return that}Buffer.allocUnsafe=function(size){return allocUnsafe(null,size)};Buffer.allocUnsafeSlow=function(size){return allocUnsafe(null,size)};function fromString(that,string,encoding){if(typeof encoding!=="string"||encoding===""){encoding="utf8"}if(!Buffer.isEncoding(encoding)){throw new TypeError('"encoding" must be a valid string encoding')}var length=byteLength(string,encoding)|0;that=createBuffer(that,length);var actual=that.write(string,encoding);if(actual!==length){that=that.slice(0,actual)}return that}function fromArrayLike(that,array){var length=array.length<0?0:checked(array.length)|0;that=createBuffer(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255}return that}function fromArrayBuffer(that,array,byteOffset,length){array.byteLength;if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError("'offset' is out of bounds")}if(array.byteLength<byteOffset+(length||0)){throw new RangeError("'length' is out of bounds")}if(byteOffset===undefined&&length===undefined){array=new Uint8Array(array)}else if(length===undefined){array=new Uint8Array(array,byteOffset)}else{array=new Uint8Array(array,byteOffset,length)}if(Buffer.TYPED_ARRAY_SUPPORT){that=array;that.__proto__=Buffer.prototype}else{that=fromArrayLike(that,array)}return that}function fromObject(that,obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|0;that=createBuffer(that,len);if(that.length===0){return that}obj.copy(that,0,0,len);return that}if(obj){if(typeof ArrayBuffer!=="undefined"&&obj.buffer instanceof ArrayBuffer||"length"in obj){if(typeof obj.length!=="number"||isnan(obj.length)){return createBuffer(that,0)}return fromArrayLike(that,obj)}if(obj.type==="Buffer"&&isArray(obj.data)){return fromArrayLike(that,obj.data)}}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(length){if(length>=kMaxLength()){throw new RangeError("Attempt to allocate Buffer larger than maximum "+"size: 0x"+kMaxLength().toString(16)+" bytes")}return length|0}function SlowBuffer(length){if(+length!=length){length=0}return Buffer.alloc(+length)}Buffer.isBuffer=function isBuffer(b){return!!(b!=null&&b._isBuffer)};Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError("Arguments must be Buffers")}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break}}if(x<y)return-1;if(y<x)return 1;return 0};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return true;default:return false}};Buffer.concat=function concat(list,length){if(!isArray(list)){throw new TypeError('"list" argument must be an Array of Buffers')}if(list.length===0){return Buffer.alloc(0)}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length}}var buffer=Buffer.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!Buffer.isBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers')}buf.copy(buffer,pos);pos+=buf.length}return buffer};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length}if(typeof ArrayBuffer!=="undefined"&&typeof ArrayBuffer.isView==="function"&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer)){return string.byteLength}if(typeof string!=="string"){string=""+string}var len=string.length;if(len===0)return 0;var loweredCase=false;for(;;){switch(encoding){case"ascii":case"latin1":case"binary":return len;case"utf8":case"utf-8":case undefined:return utf8ToBytes(string).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return len*2;case"hex":return len>>>1;case"base64":return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;encoding=(""+encoding).toLowerCase();loweredCase=true}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;if(start===undefined||start<0){start=0}if(start>this.length){return""}if(end===undefined||end>this.length){end=this.length}if(end<=0){return""}end>>>=0;start>>>=0;if(end<=start){return""}if(!encoding)encoding="utf8";while(true){switch(encoding){case"hex":return hexSlice(this,start,end);case"utf8":case"utf-8":return utf8Slice(this,start,end);case"ascii":return asciiSlice(this,start,end);case"latin1":case"binary":return latin1Slice(this,start,end);case"base64":return base64Slice(this,start,end);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase();loweredCase=true}}}Buffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError("Buffer size must be a multiple of 16-bits")}for(var i=0;i<len;i+=2){swap(this,i,i+1)}return this};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError("Buffer size must be a multiple of 32-bits")}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2)}return this};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError("Buffer size must be a multiple of 64-bits")}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4)}return this};Buffer.prototype.toString=function toString(){var length=this.length|0;if(length===0)return"";if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments)};Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError("Argument must be a Buffer");if(this===b)return true;return Buffer.compare(this,b)===0};Buffer.prototype.inspect=function inspect(){var str="";var max=exports.INSPECT_MAX_BYTES;if(this.length>0){str=this.toString("hex",0,max).match(/.{2}/g).join(" ");if(this.length>max)str+=" ... "}return"<Buffer "+str+">"};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!Buffer.isBuffer(target)){throw new TypeError("Argument must be a Buffer")}if(start===undefined){start=0}if(end===undefined){end=target?target.length:0}if(thisStart===undefined){thisStart=0}if(thisEnd===undefined){thisEnd=this.length}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError("out of range index")}if(thisStart>=thisEnd&&start>=end){return 0}if(thisStart>=thisEnd){return-1}if(start>=end){return 1}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break}}if(x<y)return-1;if(y<x)return 1;return 0};function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){if(buffer.length===0)return-1;if(typeof byteOffset==="string"){encoding=byteOffset;byteOffset=0}else if(byteOffset>2147483647){byteOffset=2147483647}else if(byteOffset<-2147483648){byteOffset=-2147483648}byteOffset=+byteOffset;if(isNaN(byteOffset)){byteOffset=dir?0:buffer.length-1}if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1}else if(byteOffset<0){if(dir)byteOffset=0;else return-1}if(typeof val==="string"){val=Buffer.from(val,encoding)}if(Buffer.isBuffer(val)){if(val.length===0){return-1}return arrayIndexOf(buffer,val,byteOffset,encoding,dir)}else if(typeof val==="number"){val=val&255;if(Buffer.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf==="function"){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset)}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset)}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir)}throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==="ucs2"||encoding==="ucs-2"||encoding==="utf16le"||encoding==="utf-16le"){if(arr.length<2||val.length<2){return-1}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2}}function read(buf,i){if(indexSize===1){return buf[i]}else{return buf.readUInt16BE(i*indexSize)}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break}}if(found)return i}}return-1}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false)};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining}else{length=Number(length);if(length>remaining){length=remaining}}var strLen=string.length;if(strLen%2!==0)throw new TypeError("Invalid hex string");if(length>strLen/2){length=strLen/2}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed}return i}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length)}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length)}Buffer.prototype.write=function write(string,offset,length,encoding){if(offset===undefined){encoding="utf8";length=this.length;offset=0}else if(length===undefined&&typeof offset==="string"){encoding=offset;length=this.length;offset=0}else if(isFinite(offset)){offset=offset|0;if(isFinite(length)){length=length|0;if(encoding===undefined)encoding="utf8"}else{encoding=length;length=undefined}}else{throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported")}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError("Attempt to write outside buffer bounds")}if(!encoding)encoding="utf8";var loweredCase=false;for(;;){switch(encoding){case"hex":return hexWrite(this,string,offset,length);case"utf8":case"utf-8":return utf8Write(this,string,offset,length);case"ascii":return asciiWrite(this,string,offset,length);case"latin1":case"binary":return latin1Write(this,string,offset,length);case"base64":return base64Write(this,string,offset,length);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase();loweredCase=true}}};Buffer.prototype.toJSON=function toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf)}else{return base64.fromByteArray(buf.slice(start,end))}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<128){codePoint=firstByte}break;case 2:secondByte=buf[i+1];if((secondByte&192)===128){tempCodePoint=(firstByte&31)<<6|secondByte&63;if(tempCodePoint>127){codePoint=tempCodePoint}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&192)===128&&(thirdByte&192)===128){tempCodePoint=(firstByte&15)<<12|(secondByte&63)<<6|thirdByte&63;if(tempCodePoint>2047&&(tempCodePoint<55296||tempCodePoint>57343)){codePoint=tempCodePoint}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&192)===128&&(thirdByte&192)===128&&(fourthByte&192)===128){tempCodePoint=(firstByte&15)<<18|(secondByte&63)<<12|(thirdByte&63)<<6|fourthByte&63;if(tempCodePoint>65535&&tempCodePoint<1114112){codePoint=tempCodePoint}}}}if(codePoint===null){codePoint=65533;bytesPerSequence=1}else if(codePoint>65535){codePoint-=65536;res.push(codePoint>>>10&1023|55296);codePoint=56320|codePoint&1023}res.push(codePoint);i+=bytesPerSequence}return decodeCodePointsArray(res)}var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints)}var res="";var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH))}return res}function asciiSlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&127)}return ret}function latin1Slice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i])}return ret}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out="";for(var i=start;i<end;++i){out+=toHex(buf[i])}return out}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res="";for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256)}return res}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0}else if(start>len){start=len}if(end<0){end+=len;if(end<0)end=0}else if(end>len){end=len}if(end<start)end=start;var newBuf;if(Buffer.TYPED_ARRAY_SUPPORT){newBuf=this.subarray(start,end);newBuf.__proto__=Buffer.prototype}else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,undefined);for(var i=0;i<sliceLen;++i){newBuf[i]=this[i+start]}}return newBuf};function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=256)){val+=this[offset+i]*mul}return val};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert){checkOffset(offset,byteLength,this.length)}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=256)){val+=this[offset+--byteLength]*mul}return val};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);return this[offset]};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*16777216+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=256)){val+=this[offset+i]*mul}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);
var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=256)){val+=this[offset+--i]*mul}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&128))return this[offset];return(255-this[offset]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&32768?val|4294901760:val};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&32768?val|4294901760:val};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8)};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError("Index out of range")}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0)}var mul=1;var i=0;this[offset]=value&255;while(++i<byteLength&&(mul*=256)){this[offset+i]=value/mul&255}return offset+byteLength};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0)}var i=byteLength-1;var mul=1;this[offset+i]=value&255;while(--i>=0&&(mul*=256)){this[offset+i]=value/mul&255}return offset+byteLength};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,255,0);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=value&255;return offset+1};function objectWriteUInt16(buf,value,offset,littleEndian){if(value<0)value=65535+value+1;for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i){buf[offset+i]=(value&255<<8*(littleEndian?i:1-i))>>>(littleEndian?i:1-i)*8}}Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,65535,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&255;this[offset+1]=value>>>8}else{objectWriteUInt16(this,value,offset,true)}return offset+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,65535,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&255}else{objectWriteUInt16(this,value,offset,false)}return offset+2};function objectWriteUInt32(buf,value,offset,littleEndian){if(value<0)value=4294967295+value+1;for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i){buf[offset+i]=value>>>(littleEndian?i:3-i)*8&255}}Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&255}else{objectWriteUInt32(this,value,offset,true)}return offset+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255}else{objectWriteUInt32(this,value,offset,false)}return offset+4};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=0;var mul=1;var sub=0;this[offset]=value&255;while(++i<byteLength&&(mul*=256)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1}this[offset+i]=(value/mul>>0)-sub&255}return offset+byteLength};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&255;while(--i>=0&&(mul*=256)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1}this[offset+i]=(value/mul>>0)-sub&255}return offset+byteLength};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,127,-128);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(value<0)value=255+value+1;this[offset]=value&255;return offset+1};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&255;this[offset+1]=value>>>8}else{objectWriteUInt16(this,value,offset,true)}return offset+2};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&255}else{objectWriteUInt16(this,value,offset,false)}return offset+2};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value&255;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24}else{objectWriteUInt32(this,value,offset,true)}return offset+4};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);if(value<0)value=4294967295+value+1;if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255}else{objectWriteUInt32(this,value,offset,false)}return offset+4};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError("Index out of range");if(offset<0)throw new RangeError("Index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,4,3.4028234663852886e38,-3.4028234663852886e38)}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert)};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert)};function writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,8,1.7976931348623157e308,-1.7976931348623157e308)}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert)};Buffer.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;if(end===start)return 0;if(target.length===0||this.length===0)return 0;if(targetStart<0){throw new RangeError("targetStart out of bounds")}if(start<0||start>=this.length)throw new RangeError("sourceStart out of bounds");if(end<0)throw new RangeError("sourceEnd out of bounds");if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start}var len=end-start;var i;if(this===target&&start<targetStart&&targetStart<end){for(i=len-1;i>=0;--i){target[i+targetStart]=this[i+start]}}else if(len<1e3||!Buffer.TYPED_ARRAY_SUPPORT){for(i=0;i<len;++i){target[i+targetStart]=this[i+start]}}else{Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart)}return len};Buffer.prototype.fill=function fill(val,start,end,encoding){if(typeof val==="string"){if(typeof start==="string"){encoding=start;start=0;end=this.length}else if(typeof end==="string"){encoding=end;end=this.length}if(val.length===1){var code=val.charCodeAt(0);if(code<256){val=code}}if(encoding!==undefined&&typeof encoding!=="string"){throw new TypeError("encoding must be a string")}if(typeof encoding==="string"&&!Buffer.isEncoding(encoding)){throw new TypeError("Unknown encoding: "+encoding)}}else if(typeof val==="number"){val=val&255}if(start<0||this.length<start||this.length<end){throw new RangeError("Out of range index")}if(end<=start){return this}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==="number"){for(i=start;i<end;++i){this[i]=val}}else{var bytes=Buffer.isBuffer(val)?val:utf8ToBytes(new Buffer(val,encoding).toString());var len=bytes.length;for(i=0;i<end-start;++i){this[i+start]=bytes[i%len]}}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(str){str=stringtrim(str).replace(INVALID_BASE64_RE,"");if(str.length<2)return"";while(str.length%4!==0){str=str+"="}return str}function stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\s+|\s+$/g,"")}function toHex(n){if(n<16)return"0"+n.toString(16);return n.toString(16)}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);if(codePoint>55295&&codePoint<57344){if(!leadSurrogate){if(codePoint>56319){if((units-=3)>-1)bytes.push(239,191,189);continue}else if(i+1===length){if((units-=3)>-1)bytes.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(codePoint<56320){if((units-=3)>-1)bytes.push(239,191,189);leadSurrogate=codePoint;continue}codePoint=(leadSurrogate-55296<<10|codePoint-56320)+65536}else if(leadSurrogate){if((units-=3)>-1)bytes.push(239,191,189)}leadSurrogate=null;if(codePoint<128){if((units-=1)<0)break;bytes.push(codePoint)}else if(codePoint<2048){if((units-=2)<0)break;bytes.push(codePoint>>6|192,codePoint&63|128)}else if(codePoint<65536){if((units-=3)<0)break;bytes.push(codePoint>>12|224,codePoint>>6&63|128,codePoint&63|128)}else if(codePoint<1114112){if((units-=4)<0)break;bytes.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,codePoint&63|128)}else{throw new Error("Invalid code point")}}return bytes}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){byteArray.push(str.charCodeAt(i)&255)}return byteArray}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi)}return byteArray}function base64ToBytes(str){return base64.toByteArray(base64clean(str))}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i]}return i}function isnan(val){return val!==val}}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{"base64-js":2,ieee754:37,isarray:40}],6:[function(require,module,exports){(function(Buffer){function isArray(arg){if(Array.isArray){return Array.isArray(arg)}return objectToString(arg)==="[object Array]"}exports.isArray=isArray;function isBoolean(arg){return typeof arg==="boolean"}exports.isBoolean=isBoolean;function isNull(arg){return arg===null}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==="number"}exports.isNumber=isNumber;function isString(arg){return typeof arg==="string"}exports.isString=isString;function isSymbol(arg){return typeof arg==="symbol"}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0}exports.isUndefined=isUndefined;function isRegExp(re){return objectToString(re)==="[object RegExp]"}exports.isRegExp=isRegExp;function isObject(arg){return typeof arg==="object"&&arg!==null}exports.isObject=isObject;function isDate(d){return objectToString(d)==="[object Date]"}exports.isDate=isDate;function isError(e){return objectToString(e)==="[object Error]"||e instanceof Error}exports.isError=isError;function isFunction(arg){return typeof arg==="function"}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==="boolean"||typeof arg==="number"||typeof arg==="string"||typeof arg==="symbol"||typeof arg==="undefined"}exports.isPrimitive=isPrimitive;exports.isBuffer=Buffer.isBuffer;function objectToString(o){return Object.prototype.toString.call(o)}}).call(this,{isBuffer:require("../../is-buffer/index.js")})},{"../../is-buffer/index.js":39}],7:[function(require,module,exports){var ElementType=require("domelementtype");var entities=require("entities");var booleanAttributes={__proto__:null,allowfullscreen:true,async:true,autofocus:true,autoplay:true,checked:true,controls:true,default:true,defer:true,disabled:true,hidden:true,ismap:true,loop:true,multiple:true,muted:true,open:true,readonly:true,required:true,reversed:true,scoped:true,seamless:true,selected:true,typemustmatch:true};var unencodedElements={__proto__:null,style:true,script:true,xmp:true,iframe:true,noembed:true,noframes:true,plaintext:true,noscript:true};function formatAttrs(attributes,opts){if(!attributes)return;var output="",value;for(var key in attributes){value=attributes[key];if(output){output+=" "}if(!value&&booleanAttributes[key]){output+=key}else{output+=key+'="'+(opts.decodeEntities?entities.encodeXML(value):value)+'"'}}return output}var singleTag={__proto__:null,area:true,base:true,basefont:true,br:true,col:true,command:true,embed:true,frame:true,hr:true,img:true,input:true,isindex:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true};var render=module.exports=function(dom,opts){if(!Array.isArray(dom)&&!dom.cheerio)dom=[dom];opts=opts||{};var output="";for(var i=0;i<dom.length;i++){var elem=dom[i];if(elem.type==="root")output+=render(elem.children,opts);else if(ElementType.isTag(elem))output+=renderTag(elem,opts);else if(elem.type===ElementType.Directive)output+=renderDirective(elem);else if(elem.type===ElementType.Comment)output+=renderComment(elem);else if(elem.type===ElementType.CDATA)output+=renderCdata(elem);else output+=renderText(elem,opts)}return output};function renderTag(elem,opts){if(elem.name==="svg")opts={decodeEntities:opts.decodeEntities,xmlMode:true};var tag="<"+elem.name,attribs=formatAttrs(elem.attribs,opts);if(attribs){tag+=" "+attribs}if(opts.xmlMode&&(!elem.children||elem.children.length===0)){tag+="/>"}else{tag+=">";if(elem.children){tag+=render(elem.children,opts)}if(!singleTag[elem.name]||opts.xmlMode){tag+="</"+elem.name+">"}}return tag}function renderDirective(elem){return"<"+elem.data+">"}function renderText(elem,opts){var data=elem.data||"";if(opts.decodeEntities&&!(elem.parent&&elem.parent.name in unencodedElements)){data=entities.encodeXML(data)}return data}function renderCdata(elem){return"<![CDATA["+elem.children[0].data+"]]>"}function renderComment(elem){return"<!--"+elem.data+"-->"}},{domelementtype:8,entities:20}],8:[function(require,module,exports){module.exports={Text:"text",Directive:"directive",Comment:"comment",Script:"script",Style:"style",Tag:"tag",CDATA:"cdata",isTag:function(elem){return elem.type==="tag"||elem.type==="script"||elem.type==="style"}}},{}],9:[function(require,module,exports){module.exports={Text:"text",Directive:"directive",Comment:"comment",Script:"script",Style:"style",Tag:"tag",CDATA:"cdata",Doctype:"doctype",isTag:function(elem){return elem.type==="tag"||elem.type==="script"||elem.type==="style"}}},{}],10:[function(require,module,exports){var ElementType=require("domelementtype");var re_whitespace=/\s+/g;var NodePrototype=require("./lib/node");var ElementPrototype=require("./lib/element");function DomHandler(callback,options,elementCB){if(typeof callback==="object"){elementCB=options;options=callback;callback=null}else if(typeof options==="function"){elementCB=options;options=defaultOpts}this._callback=callback;this._options=options||defaultOpts;this._elementCB=elementCB;this.dom=[];this._done=false;this._tagStack=[];this._parser=this._parser||null}var defaultOpts={normalizeWhitespace:false,withStartIndices:false};DomHandler.prototype.onparserinit=function(parser){this._parser=parser};DomHandler.prototype.onreset=function(){DomHandler.call(this,this._callback,this._options,this._elementCB)};DomHandler.prototype.onend=function(){if(this._done)return;this._done=true;this._parser=null;this._handleCallback(null)};DomHandler.prototype._handleCallback=DomHandler.prototype.onerror=function(error){if(typeof this._callback==="function"){this._callback(error,this.dom)}else{if(error)throw error}};DomHandler.prototype.onclosetag=function(){var elem=this._tagStack.pop();if(this._elementCB)this._elementCB(elem)};DomHandler.prototype._addDomElement=function(element){var parent=this._tagStack[this._tagStack.length-1];var siblings=parent?parent.children:this.dom;var previousSibling=siblings[siblings.length-1];element.next=null;if(this._options.withStartIndices){element.startIndex=this._parser.startIndex}if(this._options.withDomLvl1){element.__proto__=element.type==="tag"?ElementPrototype:NodePrototype}if(previousSibling){element.prev=previousSibling;previousSibling.next=element}else{element.prev=null}siblings.push(element);element.parent=parent||null};DomHandler.prototype.onopentag=function(name,attribs){var element={type:name==="script"?ElementType.Script:name==="style"?ElementType.Style:ElementType.Tag,name:name,attribs:attribs,children:[]};this._addDomElement(element);this._tagStack.push(element)};DomHandler.prototype.ontext=function(data){var normalize=this._options.normalizeWhitespace||this._options.ignoreWhitespace;var lastTag;if(!this._tagStack.length&&this.dom.length&&(lastTag=this.dom[this.dom.length-1]).type===ElementType.Text){if(normalize){lastTag.data=(lastTag.data+data).replace(re_whitespace," ")}else{lastTag.data+=data}}else{if(this._tagStack.length&&(lastTag=this._tagStack[this._tagStack.length-1])&&(lastTag=lastTag.children[lastTag.children.length-1])&&lastTag.type===ElementType.Text){if(normalize){lastTag.data=(lastTag.data+data).replace(re_whitespace," ")}else{lastTag.data+=data}}else{if(normalize){data=data.replace(re_whitespace," ")}this._addDomElement({data:data,type:ElementType.Text})}}};DomHandler.prototype.oncomment=function(data){var lastTag=this._tagStack[this._tagStack.length-1];if(lastTag&&lastTag.type===ElementType.Comment){lastTag.data+=data;return}var element={data:data,type:ElementType.Comment};this._addDomElement(element);this._tagStack.push(element)};DomHandler.prototype.oncdatastart=function(){var element={children:[{data:"",type:ElementType.Text}],type:ElementType.CDATA};this._addDomElement(element);this._tagStack.push(element)};DomHandler.prototype.oncommentend=DomHandler.prototype.oncdataend=function(){this._tagStack.pop()};DomHandler.prototype.onprocessinginstruction=function(name,data){this._addDomElement({name:name,data:data,type:ElementType.Directive})};module.exports=DomHandler},{"./lib/element":11,"./lib/node":12,domelementtype:9}],11:[function(require,module,exports){var NodePrototype=require("./node");var ElementPrototype=module.exports=Object.create(NodePrototype);var domLvl1={tagName:"name"};Object.keys(domLvl1).forEach(function(key){var shorthand=domLvl1[key];Object.defineProperty(ElementPrototype,key,{get:function(){return this[shorthand]||null},set:function(val){this[shorthand]=val;return val}})})},{"./node":12}],12:[function(require,module,exports){var NodePrototype=module.exports={get firstChild(){var children=this.children;return children&&children[0]||null},get lastChild(){var children=this.children;return children&&children[children.length-1]||null},get nodeType(){return nodeTypes[this.type]||nodeTypes.element}};var domLvl1={tagName:"name",childNodes:"children",parentNode:"parent",previousSibling:"prev",nextSibling:"next",nodeValue:"data"};var nodeTypes={element:1,text:3,cdata:4,comment:8};Object.keys(domLvl1).forEach(function(key){var shorthand=domLvl1[key];Object.defineProperty(NodePrototype,key,{get:function(){return this[shorthand]||null},set:function(val){this[shorthand]=val;return val}})})},{}],13:[function(require,module,exports){var DomUtils=module.exports;[require("./lib/stringify"),require("./lib/traversal"),require("./lib/manipulation"),require("./lib/querying"),require("./lib/legacy"),require("./lib/helpers")].forEach(function(ext){Object.keys(ext).forEach(function(key){DomUtils[key]=ext[key].bind(DomUtils)})})},{"./lib/helpers":14,"./lib/legacy":15,"./lib/manipulation":16,"./lib/querying":17,"./lib/stringify":18,"./lib/traversal":19}],14:[function(require,module,exports){exports.removeSubsets=function(nodes){var idx=nodes.length,node,ancestor,replace;while(--idx>-1){node=ancestor=nodes[idx];nodes[idx]=null;replace=true;while(ancestor){if(nodes.indexOf(ancestor)>-1){replace=false;nodes.splice(idx,1);break}ancestor=ancestor.parent}if(replace){nodes[idx]=node}}return nodes};var POSITION={DISCONNECTED:1,PRECEDING:2,FOLLOWING:4,CONTAINS:8,CONTAINED_BY:16};var comparePos=exports.compareDocumentPosition=function(nodeA,nodeB){var aParents=[];var bParents=[];var current,sharedParent,siblings,aSibling,bSibling,idx;if(nodeA===nodeB){return 0}current=nodeA;while(current){aParents.unshift(current);current=current.parent}current=nodeB;while(current){bParents.unshift(current);current=current.parent}idx=0;while(aParents[idx]===bParents[idx]){idx++}if(idx===0){return POSITION.DISCONNECTED}sharedParent=aParents[idx-1];siblings=sharedParent.children;aSibling=aParents[idx];bSibling=bParents[idx];if(siblings.indexOf(aSibling)>siblings.indexOf(bSibling)){if(sharedParent===nodeB){return POSITION.FOLLOWING|POSITION.CONTAINED_BY}return POSITION.FOLLOWING}else{if(sharedParent===nodeA){return POSITION.PRECEDING|POSITION.CONTAINS}return POSITION.PRECEDING}};exports.uniqueSort=function(nodes){var idx=nodes.length,node,position;nodes=nodes.slice();while(--idx>-1){node=nodes[idx];position=nodes.indexOf(node);if(position>-1&&position<idx){nodes.splice(idx,1)}}nodes.sort(function(a,b){var relative=comparePos(a,b);if(relative&POSITION.PRECEDING){return-1}else if(relative&POSITION.FOLLOWING){return 1}return 0});return nodes}},{}],15:[function(require,module,exports){var ElementType=require("domelementtype");var isTag=exports.isTag=ElementType.isTag;exports.testElement=function(options,element){for(var key in options){if(!options.hasOwnProperty(key));else if(key==="tag_name"){if(!isTag(element)||!options.tag_name(element.name)){return false}}else if(key==="tag_type"){if(!options.tag_type(element.type))return false}else if(key==="tag_contains"){if(isTag(element)||!options.tag_contains(element.data)){return false}}else if(!element.attribs||!options[key](element.attribs[key])){return false}}return true};var Checks={tag_name:function(name){if(typeof name==="function"){return function(elem){return isTag(elem)&&name(elem.name)}}else if(name==="*"){return isTag}else{return function(elem){return isTag(elem)&&elem.name===name}}},tag_type:function(type){if(typeof type==="function"){return function(elem){return type(elem.type)}}else{return function(elem){return elem.type===type}}},tag_contains:function(data){if(typeof data==="function"){return function(elem){return!isTag(elem)&&data(elem.data)}}else{return function(elem){return!isTag(elem)&&elem.data===data}}}};function getAttribCheck(attrib,value){if(typeof value==="function"){return function(elem){return elem.attribs&&value(elem.attribs[attrib])}}else{return function(elem){return elem.attribs&&elem.attribs[attrib]===value}}}function combineFuncs(a,b){return function(elem){return a(elem)||b(elem)}}exports.getElements=function(options,element,recurse,limit){var funcs=Object.keys(options).map(function(key){var value=options[key];return key in Checks?Checks[key](value):getAttribCheck(key,value)});return funcs.length===0?[]:this.filter(funcs.reduce(combineFuncs),element,recurse,limit)};exports.getElementById=function(id,element,recurse){if(!Array.isArray(element))element=[element];return this.findOne(getAttribCheck("id",id),element,recurse!==false)};exports.getElementsByTagName=function(name,element,recurse,limit){return this.filter(Checks.tag_name(name),element,recurse,limit)};exports.getElementsByTagType=function(type,element,recurse,limit){return this.filter(Checks.tag_type(type),element,recurse,limit)}},{domelementtype:9}],16:[function(require,module,exports){exports.removeElement=function(elem){if(elem.prev)elem.prev.next=elem.next;if(elem.next)elem.next.prev=elem.prev;if(elem.parent){var childs=elem.parent.children;childs.splice(childs.lastIndexOf(elem),1)}};exports.replaceElement=function(elem,replacement){var prev=replacement.prev=elem.prev;if(prev){prev.next=replacement}var next=replacement.next=elem.next;if(next){next.prev=replacement}var parent=replacement.parent=elem.parent;if(parent){var childs=parent.children;childs[childs.lastIndexOf(elem)]=replacement}};exports.appendChild=function(elem,child){child.parent=elem;if(elem.children.push(child)!==1){var sibling=elem.children[elem.children.length-2];sibling.next=child;child.prev=sibling;child.next=null}};exports.append=function(elem,next){var parent=elem.parent,currNext=elem.next;next.next=currNext;next.prev=elem;elem.next=next;next.parent=parent;if(currNext){currNext.prev=next;if(parent){var childs=parent.children;childs.splice(childs.lastIndexOf(currNext),0,next)}}else if(parent){parent.children.push(next)}};exports.prepend=function(elem,prev){var parent=elem.parent;if(parent){var childs=parent.children;childs.splice(childs.lastIndexOf(elem),0,prev)}if(elem.prev){elem.prev.next=prev}prev.parent=parent;prev.prev=elem.prev;prev.next=elem;elem.prev=prev}},{}],17:[function(require,module,exports){var isTag=require("domelementtype").isTag;module.exports={filter:filter,find:find,findOneChild:findOneChild,findOne:findOne,existsOne:existsOne,findAll:findAll};function filter(test,element,recurse,limit){if(!Array.isArray(element))element=[element];if(typeof limit!=="number"||!isFinite(limit)){limit=Infinity}return find(test,element,recurse!==false,limit)}function find(test,elems,recurse,limit){var result=[],childs;for(var i=0,j=elems.length;i<j;i++){if(test(elems[i])){result.push(elems[i]);if(--limit<=0)break}childs=elems[i].children;if(recurse&&childs&&childs.length>0){childs=find(test,childs,recurse,limit);result=result.concat(childs);limit-=childs.length;if(limit<=0)break}}return result}function findOneChild(test,elems){for(var i=0,l=elems.length;i<l;i++){if(test(elems[i]))return elems[i]}return null}function findOne(test,elems){var elem=null;for(var i=0,l=elems.length;i<l&&!elem;i++){if(!isTag(elems[i])){continue}else if(test(elems[i])){elem=elems[i]}else if(elems[i].children.length>0){elem=findOne(test,elems[i].children)}}return elem}function existsOne(test,elems){for(var i=0,l=elems.length;i<l;i++){if(isTag(elems[i])&&(test(elems[i])||elems[i].children.length>0&&existsOne(test,elems[i].children))){return true}}return false}function findAll(test,elems){var result=[];for(var i=0,j=elems.length;i<j;i++){if(!isTag(elems[i]))continue;if(test(elems[i]))result.push(elems[i]);if(elems[i].children.length>0){result=result.concat(findAll(test,elems[i].children))}}return result}},{domelementtype:9}],18:[function(require,module,exports){var ElementType=require("domelementtype"),getOuterHTML=require("dom-serializer"),isTag=ElementType.isTag;module.exports={getInnerHTML:getInnerHTML,getOuterHTML:getOuterHTML,getText:getText};function getInnerHTML(elem,opts){return elem.children?elem.children.map(function(elem){return getOuterHTML(elem,opts)}).join(""):""}function getText(elem){if(Array.isArray(elem))return elem.map(getText).join("");if(isTag(elem)||elem.type===ElementType.CDATA)return getText(elem.children);if(elem.type===ElementType.Text)return elem.data;return""}},{"dom-serializer":7,domelementtype:9}],19:[function(require,module,exports){var getChildren=exports.getChildren=function(elem){return elem.children};var getParent=exports.getParent=function(elem){return elem.parent};exports.getSiblings=function(elem){var parent=getParent(elem);return parent?getChildren(parent):[elem]};exports.getAttributeValue=function(elem,name){return elem.attribs&&elem.attribs[name]};exports.hasAttrib=function(elem,name){return!!elem.attribs&&hasOwnProperty.call(elem.attribs,name)};exports.getName=function(elem){return elem.name}},{}],20:[function(require,module,exports){var encode=require("./lib/encode.js"),decode=require("./lib/decode.js");exports.decode=function(data,level){return(!level||level<=0?decode.XML:decode.HTML)(data)};exports.decodeStrict=function(data,level){return(!level||level<=0?decode.XML:decode.HTMLStrict)(data)};exports.encode=function(data,level){return(!level||level<=0?encode.XML:encode.HTML)(data)};exports.encodeXML=encode.XML;exports.encodeHTML4=exports.encodeHTML5=exports.encodeHTML=encode.HTML;exports.decodeXML=exports.decodeXMLStrict=decode.XML;exports.decodeHTML4=exports.decodeHTML5=exports.decodeHTML=decode.HTML;exports.decodeHTML4Strict=exports.decodeHTML5Strict=exports.decodeHTMLStrict=decode.HTMLStrict;exports.escape=encode.escape},{"./lib/decode.js":21,"./lib/encode.js":23}],21:[function(require,module,exports){var entityMap=require("../maps/entities.json"),legacyMap=require("../maps/legacy.json"),xmlMap=require("../maps/xml.json"),decodeCodePoint=require("./decode_codepoint.js");var decodeXMLStrict=getStrictDecoder(xmlMap),decodeHTMLStrict=getStrictDecoder(entityMap);function getStrictDecoder(map){var keys=Object.keys(map).join("|"),replace=getReplacer(map);keys+="|#[xX][\\da-fA-F]+|#\\d+";var re=new RegExp("&(?:"+keys+");","g");return function(str){return String(str).replace(re,replace)}}var decodeHTML=function(){var legacy=Object.keys(legacyMap).sort(sorter);var keys=Object.keys(entityMap).sort(sorter);for(var i=0,j=0;i<keys.length;i++){if(legacy[j]===keys[i]){keys[i]+=";?";j++}else{keys[i]+=";"}}var re=new RegExp("&(?:"+keys.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),replace=getReplacer(entityMap);function replacer(str){if(str.substr(-1)!==";")str+=";";return replace(str)}return function(str){return String(str).replace(re,replacer)}}();function sorter(a,b){return a<b?1:-1}function getReplacer(map){return function replace(str){if(str.charAt(1)==="#"){if(str.charAt(2)==="X"||str.charAt(2)==="x"){return decodeCodePoint(parseInt(str.substr(3),16))}return decodeCodePoint(parseInt(str.substr(2),10))}return map[str.slice(1,-1)];
}}module.exports={XML:decodeXMLStrict,HTML:decodeHTML,HTMLStrict:decodeHTMLStrict}},{"../maps/entities.json":25,"../maps/legacy.json":26,"../maps/xml.json":27,"./decode_codepoint.js":22}],22:[function(require,module,exports){var decodeMap=require("../maps/decode.json");module.exports=decodeCodePoint;function decodeCodePoint(codePoint){if(codePoint>=55296&&codePoint<=57343||codePoint>1114111){return"�"}if(codePoint in decodeMap){codePoint=decodeMap[codePoint]}var output="";if(codePoint>65535){codePoint-=65536;output+=String.fromCharCode(codePoint>>>10&1023|55296);codePoint=56320|codePoint&1023}output+=String.fromCharCode(codePoint);return output}},{"../maps/decode.json":24}],23:[function(require,module,exports){var inverseXML=getInverseObj(require("../maps/xml.json")),xmlReplacer=getInverseReplacer(inverseXML);exports.XML=getInverse(inverseXML,xmlReplacer);var inverseHTML=getInverseObj(require("../maps/entities.json")),htmlReplacer=getInverseReplacer(inverseHTML);exports.HTML=getInverse(inverseHTML,htmlReplacer);function getInverseObj(obj){return Object.keys(obj).sort().reduce(function(inverse,name){inverse[obj[name]]="&"+name+";";return inverse},{})}function getInverseReplacer(inverse){var single=[],multiple=[];Object.keys(inverse).forEach(function(k){if(k.length===1){single.push("\\"+k)}else{multiple.push(k)}});multiple.unshift("["+single.join("")+"]");return new RegExp(multiple.join("|"),"g")}var re_nonASCII=/[^\0-\x7F]/g,re_astralSymbols=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function singleCharReplacer(c){return"&#x"+c.charCodeAt(0).toString(16).toUpperCase()+";"}function astralReplacer(c){var high=c.charCodeAt(0);var low=c.charCodeAt(1);var codePoint=(high-55296)*1024+low-56320+65536;return"&#x"+codePoint.toString(16).toUpperCase()+";"}function getInverse(inverse,re){function func(name){return inverse[name]}return function(data){return data.replace(re,func).replace(re_astralSymbols,astralReplacer).replace(re_nonASCII,singleCharReplacer)}}var re_xmlChars=getInverseReplacer(inverseXML);function escapeXML(data){return data.replace(re_xmlChars,singleCharReplacer).replace(re_astralSymbols,astralReplacer).replace(re_nonASCII,singleCharReplacer)}exports.escape=escapeXML},{"../maps/entities.json":25,"../maps/xml.json":27}],24:[function(require,module,exports){module.exports={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},{}],25:[function(require,module,exports){module.exports={Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"}},{}],26:[function(require,module,exports){module.exports={Aacute:"Á",aacute:"á",Acirc:"Â",acirc:"â",acute:"´",AElig:"Æ",aelig:"æ",Agrave:"À",agrave:"à",amp:"&",AMP:"&",Aring:"Å",aring:"å",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",brvbar:"¦",Ccedil:"Ç",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",Eacute:"É",eacute:"é",Ecirc:"Ê",ecirc:"ê",Egrave:"È",egrave:"è",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",Iacute:"Í",iacute:"í",Icirc:"Î",icirc:"î",iexcl:"¡",Igrave:"Ì",igrave:"ì",iquest:"¿",Iuml:"Ï",iuml:"ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",Ntilde:"Ñ",ntilde:"ñ",Oacute:"Ó",oacute:"ó",Ocirc:"Ô",ocirc:"ô",Ograve:"Ò",ograve:"ò",ordf:"ª",ordm:"º",Oslash:"Ø",oslash:"ø",Otilde:"Õ",otilde:"õ",Ouml:"Ö",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",THORN:"Þ",thorn:"þ",times:"×",Uacute:"Ú",uacute:"ú",Ucirc:"Û",ucirc:"û",Ugrave:"Ù",ugrave:"ù",uml:"¨",Uuml:"Ü",uuml:"ü",Yacute:"Ý",yacute:"ý",yen:"¥",yuml:"ÿ"}},{}],27:[function(require,module,exports){module.exports={amp:"&",apos:"'",gt:">",lt:"<",quot:'"'}},{}],28:[function(require,module,exports){function EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined}module.exports=EventEmitter;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;EventEmitter.defaultMaxListeners=10;EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError("n must be a positive number");this._maxListeners=n;return this};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};if(type==="error"){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er}else{var err=new Error('Uncaught, unspecified "error" event. ('+er+")");err.context=er;throw err}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args)}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++)listeners[i].apply(this,args)}return true};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events)this._events={};if(this._events.newListener)this.emit("newListener",type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])this._events[type]=listener;else if(isObject(this._events[type]))this._events[type].push(listener);else this._events[type]=[this._events[type],listener];if(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners}else{m=EventEmitter.defaultMaxListeners}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error("(node) warning: possible EventEmitter memory "+"leak detected. %d listeners added. "+"Use emitter.setMaxListeners() to increase limit.",this._events[type].length);if(typeof console.trace==="function"){console.trace()}}}return this};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError("listener must be a function");var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments)}}g.listener=listener;this.on(type,g);return this};EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit("removeListener",type,listener)}else if(isObject(list)){for(i=length;i-- >0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type]}else{list.splice(position,1);
}if(this._events.removeListener)this.emit("removeListener",type,listener)}return this};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this}if(arguments.length===0){for(key in this._events){if(key==="removeListener")continue;this.removeAllListeners(key)}this.removeAllListeners("removeListener");this._events={};return this}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners)}else if(listeners){while(listeners.length)this.removeListener(type,listeners[listeners.length-1])}delete this._events[type];return this};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;else if(evlistener)return evlistener.length}return 0};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type)};function isFunction(arg){return typeof arg==="function"}function isNumber(arg){return typeof arg==="number"}function isObject(arg){return typeof arg==="object"&&arg!==null}function isUndefined(arg){return arg===void 0}},{}],29:[function(require,module,exports){module.exports=CollectingHandler;function CollectingHandler(cbs){this._cbs=cbs||{};this.events=[]}var EVENTS=require("./").EVENTS;Object.keys(EVENTS).forEach(function(name){if(EVENTS[name]===0){name="on"+name;CollectingHandler.prototype[name]=function(){this.events.push([name]);if(this._cbs[name])this._cbs[name]()}}else if(EVENTS[name]===1){name="on"+name;CollectingHandler.prototype[name]=function(a){this.events.push([name,a]);if(this._cbs[name])this._cbs[name](a)}}else if(EVENTS[name]===2){name="on"+name;CollectingHandler.prototype[name]=function(a,b){this.events.push([name,a,b]);if(this._cbs[name])this._cbs[name](a,b)}}else{throw Error("wrong number of arguments")}});CollectingHandler.prototype.onreset=function(){this.events=[];if(this._cbs.onreset)this._cbs.onreset()};CollectingHandler.prototype.restart=function(){if(this._cbs.onreset)this._cbs.onreset();for(var i=0,len=this.events.length;i<len;i++){if(this._cbs[this.events[i][0]]){var num=this.events[i].length;if(num===1){this._cbs[this.events[i][0]]()}else if(num===2){this._cbs[this.events[i][0]](this.events[i][1])}else{this._cbs[this.events[i][0]](this.events[i][1],this.events[i][2])}}}}},{"./":36}],30:[function(require,module,exports){var index=require("./index.js"),DomHandler=index.DomHandler,DomUtils=index.DomUtils;function FeedHandler(callback,options){this.init(callback,options)}require("inherits")(FeedHandler,DomHandler);FeedHandler.prototype.init=DomHandler;function getElements(what,where){return DomUtils.getElementsByTagName(what,where,true)}function getOneElement(what,where){return DomUtils.getElementsByTagName(what,where,true,1)[0]}function fetch(what,where,recurse){return DomUtils.getText(DomUtils.getElementsByTagName(what,where,recurse,1)).trim()}function addConditionally(obj,prop,what,where,recurse){var tmp=fetch(what,where,recurse);if(tmp)obj[prop]=tmp}var isValidFeed=function(value){return value==="rss"||value==="feed"||value==="rdf:RDF"};FeedHandler.prototype.onend=function(){var feed={},feedRoot=getOneElement(isValidFeed,this.dom),tmp,childs;if(feedRoot){if(feedRoot.name==="feed"){childs=feedRoot.children;feed.type="atom";addConditionally(feed,"id","id",childs);addConditionally(feed,"title","title",childs);if((tmp=getOneElement("link",childs))&&(tmp=tmp.attribs)&&(tmp=tmp.href))feed.link=tmp;addConditionally(feed,"description","subtitle",childs);if(tmp=fetch("updated",childs))feed.updated=new Date(tmp);addConditionally(feed,"author","email",childs,true);feed.items=getElements("entry",childs).map(function(item){var entry={},tmp;item=item.children;addConditionally(entry,"id","id",item);addConditionally(entry,"title","title",item);if((tmp=getOneElement("link",item))&&(tmp=tmp.attribs)&&(tmp=tmp.href))entry.link=tmp;if(tmp=fetch("summary",item)||fetch("content",item))entry.description=tmp;if(tmp=fetch("updated",item))entry.pubDate=new Date(tmp);return entry})}else{childs=getOneElement("channel",feedRoot.children).children;feed.type=feedRoot.name.substr(0,3);feed.id="";addConditionally(feed,"title","title",childs);addConditionally(feed,"link","link",childs);addConditionally(feed,"description","description",childs);if(tmp=fetch("lastBuildDate",childs))feed.updated=new Date(tmp);addConditionally(feed,"author","managingEditor",childs,true);feed.items=getElements("item",feedRoot.children).map(function(item){var entry={},tmp;item=item.children;addConditionally(entry,"id","guid",item);addConditionally(entry,"title","title",item);addConditionally(entry,"link","link",item);addConditionally(entry,"description","description",item);if(tmp=fetch("pubDate",item))entry.pubDate=new Date(tmp);return entry})}}this.dom=feed;DomHandler.prototype._handleCallback.call(this,feedRoot?null:Error("couldn't find root of feed"))};module.exports=FeedHandler},{"./index.js":36,inherits:38}],31:[function(require,module,exports){var Tokenizer=require("./Tokenizer.js");var formTags={input:true,option:true,optgroup:true,select:true,button:true,datalist:true,textarea:true};var openImpliesClose={tr:{tr:true,th:true,td:true},th:{th:true},td:{thead:true,th:true,td:true},body:{head:true,link:true,script:true},li:{li:true},p:{p:true},h1:{p:true},h2:{p:true},h3:{p:true},h4:{p:true},h5:{p:true},h6:{p:true},select:formTags,input:formTags,output:formTags,button:formTags,datalist:formTags,textarea:formTags,option:{option:true},optgroup:{optgroup:true}};var voidElements={__proto__:null,area:true,base:true,basefont:true,br:true,col:true,command:true,embed:true,frame:true,hr:true,img:true,input:true,isindex:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true,path:true,circle:true,ellipse:true,line:true,rect:true,use:true,stop:true,polyline:true,polygon:true};var re_nameEnd=/\s|\//;function Parser(cbs,options){this._options=options||{};this._cbs=cbs||{};this._tagname="";this._attribname="";this._attribvalue="";this._attribs=null;this._stack=[];this.startIndex=0;this.endIndex=null;this._lowerCaseTagNames="lowerCaseTags"in this._options?!!this._options.lowerCaseTags:!this._options.xmlMode;this._lowerCaseAttributeNames="lowerCaseAttributeNames"in this._options?!!this._options.lowerCaseAttributeNames:!this._options.xmlMode;if(this._options.Tokenizer){Tokenizer=this._options.Tokenizer}this._tokenizer=new Tokenizer(this._options,this);if(this._cbs.onparserinit)this._cbs.onparserinit(this)}require("inherits")(Parser,require("events").EventEmitter);Parser.prototype._updatePosition=function(initialOffset){if(this.endIndex===null){if(this._tokenizer._sectionStart<=initialOffset){this.startIndex=0}else{this.startIndex=this._tokenizer._sectionStart-initialOffset}}else this.startIndex=this.endIndex+1;this.endIndex=this._tokenizer.getAbsoluteIndex()};Parser.prototype.ontext=function(data){this._updatePosition(1);this.endIndex--;if(this._cbs.ontext)this._cbs.ontext(data)};Parser.prototype.onopentagname=function(name){if(this._lowerCaseTagNames){name=name.toLowerCase()}this._tagname=name;if(!this._options.xmlMode&&name in openImpliesClose){for(var el;(el=this._stack[this._stack.length-1])in openImpliesClose[name];this.onclosetag(el));}if(this._options.xmlMode||!(name in voidElements)){this._stack.push(name)}if(this._cbs.onopentagname)this._cbs.onopentagname(name);if(this._cbs.onopentag)this._attribs={}};Parser.prototype.onopentagend=function(){this._updatePosition(1);if(this._attribs){if(this._cbs.onopentag)this._cbs.onopentag(this._tagname,this._attribs);this._attribs=null}if(!this._options.xmlMode&&this._cbs.onclosetag&&this._tagname in voidElements){this._cbs.onclosetag(this._tagname)}this._tagname=""};Parser.prototype.onclosetag=function(name){this._updatePosition(1);if(this._lowerCaseTagNames){name=name.toLowerCase()}if(this._stack.length&&(!(name in voidElements)||this._options.xmlMode)){var pos=this._stack.lastIndexOf(name);if(pos!==-1){if(this._cbs.onclosetag){pos=this._stack.length-pos;while(pos--)this._cbs.onclosetag(this._stack.pop())}else this._stack.length=pos}else if(name==="p"&&!this._options.xmlMode){this.onopentagname(name);this._closeCurrentTag()}}else if(!this._options.xmlMode&&(name==="br"||name==="p")){this.onopentagname(name);this._closeCurrentTag()}};Parser.prototype.onselfclosingtag=function(){if(this._options.xmlMode||this._options.recognizeSelfClosing){this._closeCurrentTag()}else{this.onopentagend()}};Parser.prototype._closeCurrentTag=function(){var name=this._tagname;this.onopentagend();if(this._stack[this._stack.length-1]===name){if(this._cbs.onclosetag){this._cbs.onclosetag(name)}this._stack.pop()}};Parser.prototype.onattribname=function(name){if(this._lowerCaseAttributeNames){name=name.toLowerCase()}this._attribname=name};Parser.prototype.onattribdata=function(value){this._attribvalue+=value};Parser.prototype.onattribend=function(){if(this._cbs.onattribute)this._cbs.onattribute(this._attribname,this._attribvalue);if(this._attribs&&!Object.prototype.hasOwnProperty.call(this._attribs,this._attribname)){this._attribs[this._attribname]=this._attribvalue}this._attribname="";this._attribvalue=""};Parser.prototype._getInstructionName=function(value){var idx=value.search(re_nameEnd),name=idx<0?value:value.substr(0,idx);if(this._lowerCaseTagNames){name=name.toLowerCase()}return name};Parser.prototype.ondeclaration=function(value){if(this._cbs.onprocessinginstruction){var name=this._getInstructionName(value);this._cbs.onprocessinginstruction("!"+name,"!"+value)}};Parser.prototype.onprocessinginstruction=function(value){if(this._cbs.onprocessinginstruction){var name=this._getInstructionName(value);this._cbs.onprocessinginstruction("?"+name,"?"+value)}};Parser.prototype.oncomment=function(value){this._updatePosition(4);if(this._cbs.oncomment)this._cbs.oncomment(value);if(this._cbs.oncommentend)this._cbs.oncommentend()};Parser.prototype.oncdata=function(value){this._updatePosition(1);if(this._options.xmlMode||this._options.recognizeCDATA){if(this._cbs.oncdatastart)this._cbs.oncdatastart();if(this._cbs.ontext)this._cbs.ontext(value);if(this._cbs.oncdataend)this._cbs.oncdataend()}else{this.oncomment("[CDATA["+value+"]]")}};Parser.prototype.onerror=function(err){if(this._cbs.onerror)this._cbs.onerror(err)};Parser.prototype.onend=function(){if(this._cbs.onclosetag){for(var i=this._stack.length;i>0;this._cbs.onclosetag(this._stack[--i]));}if(this._cbs.onend)this._cbs.onend()};Parser.prototype.reset=function(){if(this._cbs.onreset)this._cbs.onreset();this._tokenizer.reset();this._tagname="";this._attribname="";this._attribs=null;this._stack=[];if(this._cbs.onparserinit)this._cbs.onparserinit(this)};Parser.prototype.parseComplete=function(data){this.reset();this.end(data)};Parser.prototype.write=function(chunk){this._tokenizer.write(chunk)};Parser.prototype.end=function(chunk){this._tokenizer.end(chunk)};Parser.prototype.pause=function(){this._tokenizer.pause()};Parser.prototype.resume=function(){this._tokenizer.resume()};Parser.prototype.parseChunk=Parser.prototype.write;Parser.prototype.done=Parser.prototype.end;module.exports=Parser},{"./Tokenizer.js":34,events:28,inherits:38}],32:[function(require,module,exports){module.exports=ProxyHandler;function ProxyHandler(cbs){this._cbs=cbs||{}}var EVENTS=require("./").EVENTS;Object.keys(EVENTS).forEach(function(name){if(EVENTS[name]===0){name="on"+name;ProxyHandler.prototype[name]=function(){if(this._cbs[name])this._cbs[name]()}}else if(EVENTS[name]===1){name="on"+name;ProxyHandler.prototype[name]=function(a){if(this._cbs[name])this._cbs[name](a)}}else if(EVENTS[name]===2){name="on"+name;ProxyHandler.prototype[name]=function(a,b){if(this._cbs[name])this._cbs[name](a,b)}}else{throw Error("wrong number of arguments")}})},{"./":36}],33:[function(require,module,exports){module.exports=Stream;var Parser=require("./WritableStream.js");function Stream(options){Parser.call(this,new Cbs(this),options)}require("inherits")(Stream,Parser);Stream.prototype.readable=true;function Cbs(scope){this.scope=scope}var EVENTS=require("../").EVENTS;Object.keys(EVENTS).forEach(function(name){if(EVENTS[name]===0){Cbs.prototype["on"+name]=function(){this.scope.emit(name)}}else if(EVENTS[name]===1){Cbs.prototype["on"+name]=function(a){this.scope.emit(name,a)}}else if(EVENTS[name]===2){Cbs.prototype["on"+name]=function(a,b){this.scope.emit(name,a,b)}}else{throw Error("wrong number of arguments!")}})},{"../":36,"./WritableStream.js":35,inherits:38}],34:[function(require,module,exports){module.exports=Tokenizer;var decodeCodePoint=require("entities/lib/decode_codepoint.js"),entityMap=require("entities/maps/entities.json"),legacyMap=require("entities/maps/legacy.json"),xmlMap=require("entities/maps/xml.json"),i=0,TEXT=i++,BEFORE_TAG_NAME=i++,IN_TAG_NAME=i++,IN_SELF_CLOSING_TAG=i++,BEFORE_CLOSING_TAG_NAME=i++,IN_CLOSING_TAG_NAME=i++,AFTER_CLOSING_TAG_NAME=i++,BEFORE_ATTRIBUTE_NAME=i++,IN_ATTRIBUTE_NAME=i++,AFTER_ATTRIBUTE_NAME=i++,BEFORE_ATTRIBUTE_VALUE=i++,IN_ATTRIBUTE_VALUE_DQ=i++,IN_ATTRIBUTE_VALUE_SQ=i++,IN_ATTRIBUTE_VALUE_NQ=i++,BEFORE_DECLARATION=i++,IN_DECLARATION=i++,IN_PROCESSING_INSTRUCTION=i++,BEFORE_COMMENT=i++,IN_COMMENT=i++,AFTER_COMMENT_1=i++,AFTER_COMMENT_2=i++,BEFORE_CDATA_1=i++,BEFORE_CDATA_2=i++,BEFORE_CDATA_3=i++,BEFORE_CDATA_4=i++,BEFORE_CDATA_5=i++,BEFORE_CDATA_6=i++,IN_CDATA=i++,AFTER_CDATA_1=i++,AFTER_CDATA_2=i++,BEFORE_SPECIAL=i++,BEFORE_SPECIAL_END=i++,BEFORE_SCRIPT_1=i++,BEFORE_SCRIPT_2=i++,BEFORE_SCRIPT_3=i++,BEFORE_SCRIPT_4=i++,BEFORE_SCRIPT_5=i++,AFTER_SCRIPT_1=i++,AFTER_SCRIPT_2=i++,AFTER_SCRIPT_3=i++,AFTER_SCRIPT_4=i++,AFTER_SCRIPT_5=i++,BEFORE_STYLE_1=i++,BEFORE_STYLE_2=i++,BEFORE_STYLE_3=i++,BEFORE_STYLE_4=i++,AFTER_STYLE_1=i++,AFTER_STYLE_2=i++,AFTER_STYLE_3=i++,AFTER_STYLE_4=i++,BEFORE_ENTITY=i++,BEFORE_NUMERIC_ENTITY=i++,IN_NAMED_ENTITY=i++,IN_NUMERIC_ENTITY=i++,IN_HEX_ENTITY=i++,j=0,SPECIAL_NONE=j++,SPECIAL_SCRIPT=j++,SPECIAL_STYLE=j++;function whitespace(c){return c===" "||c==="\n"||c==="\t"||c==="\f"||c==="\r"}function characterState(char,SUCCESS){return function(c){if(c===char)this._state=SUCCESS}}function ifElseState(upper,SUCCESS,FAILURE){var lower=upper.toLowerCase();if(upper===lower){return function(c){if(c===lower){this._state=SUCCESS}else{this._state=FAILURE;this._index--}}}else{return function(c){if(c===lower||c===upper){this._state=SUCCESS}else{this._state=FAILURE;this._index--}}}}function consumeSpecialNameChar(upper,NEXT_STATE){var lower=upper.toLowerCase();return function(c){if(c===lower||c===upper){this._state=NEXT_STATE}else{this._state=IN_TAG_NAME;this._index--}}}function Tokenizer(options,cbs){this._state=TEXT;this._buffer="";this._sectionStart=0;this._index=0;this._bufferOffset=0;this._baseState=TEXT;this._special=SPECIAL_NONE;this._cbs=cbs;this._running=true;this._ended=false;this._xmlMode=!!(options&&options.xmlMode);this._decodeEntities=!!(options&&options.decodeEntities)}Tokenizer.prototype._stateText=function(c){if(c==="<"){if(this._index>this._sectionStart){this._cbs.ontext(this._getSection())}this._state=BEFORE_TAG_NAME;this._sectionStart=this._index}else if(this._decodeEntities&&this._special===SPECIAL_NONE&&c==="&"){if(this._index>this._sectionStart){this._cbs.ontext(this._getSection())}this._baseState=TEXT;this._state=BEFORE_ENTITY;this._sectionStart=this._index}};Tokenizer.prototype._stateBeforeTagName=function(c){if(c==="/"){this._state=BEFORE_CLOSING_TAG_NAME}else if(c==="<"){this._cbs.ontext(this._getSection());this._sectionStart=this._index}else if(c===">"||this._special!==SPECIAL_NONE||whitespace(c)){this._state=TEXT}else if(c==="!"){this._state=BEFORE_DECLARATION;this._sectionStart=this._index+1}else if(c==="?"){this._state=IN_PROCESSING_INSTRUCTION;this._sectionStart=this._index+1}else{this._state=!this._xmlMode&&(c==="s"||c==="S")?BEFORE_SPECIAL:IN_TAG_NAME;this._sectionStart=this._index}};Tokenizer.prototype._stateInTagName=function(c){if(c==="/"||c===">"||whitespace(c)){this._emitToken("onopentagname");this._state=BEFORE_ATTRIBUTE_NAME;this._index--}};Tokenizer.prototype._stateBeforeCloseingTagName=function(c){if(whitespace(c));else if(c===">"){this._state=TEXT}else if(this._special!==SPECIAL_NONE){if(c==="s"||c==="S"){this._state=BEFORE_SPECIAL_END}else{this._state=TEXT;this._index--}}else{this._state=IN_CLOSING_TAG_NAME;this._sectionStart=this._index}};Tokenizer.prototype._stateInCloseingTagName=function(c){if(c===">"||whitespace(c)){this._emitToken("onclosetag");this._state=AFTER_CLOSING_TAG_NAME;this._index--}};Tokenizer.prototype._stateAfterCloseingTagName=function(c){if(c===">"){this._state=TEXT;this._sectionStart=this._index+1}};Tokenizer.prototype._stateBeforeAttributeName=function(c){if(c===">"){this._cbs.onopentagend();this._state=TEXT;this._sectionStart=this._index+1}else if(c==="/"){this._state=IN_SELF_CLOSING_TAG}else if(!whitespace(c)){this._state=IN_ATTRIBUTE_NAME;this._sectionStart=this._index}};Tokenizer.prototype._stateInSelfClosingTag=function(c){if(c===">"){this._cbs.onselfclosingtag();this._state=TEXT;this._sectionStart=this._index+1}else if(!whitespace(c)){this._state=BEFORE_ATTRIBUTE_NAME;this._index--}};Tokenizer.prototype._stateInAttributeName=function(c){if(c==="="||c==="/"||c===">"||whitespace(c)){this._cbs.onattribname(this._getSection());this._sectionStart=-1;this._state=AFTER_ATTRIBUTE_NAME;this._index--}};Tokenizer.prototype._stateAfterAttributeName=function(c){if(c==="="){this._state=BEFORE_ATTRIBUTE_VALUE}else if(c==="/"||c===">"){this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME;this._index--}else if(!whitespace(c)){this._cbs.onattribend();this._state=IN_ATTRIBUTE_NAME;this._sectionStart=this._index}};Tokenizer.prototype._stateBeforeAttributeValue=function(c){if(c==='"'){this._state=IN_ATTRIBUTE_VALUE_DQ;this._sectionStart=this._index+1}else if(c==="'"){this._state=IN_ATTRIBUTE_VALUE_SQ;this._sectionStart=this._index+1}else if(!whitespace(c)){this._state=IN_ATTRIBUTE_VALUE_NQ;this._sectionStart=this._index;this._index--}};Tokenizer.prototype._stateInAttributeValueDoubleQuotes=function(c){if(c==='"'){this._emitToken("onattribdata");this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME}else if(this._decodeEntities&&c==="&"){this._emitToken("onattribdata");this._baseState=this._state;this._state=BEFORE_ENTITY;this._sectionStart=this._index}};Tokenizer.prototype._stateInAttributeValueSingleQuotes=function(c){if(c==="'"){this._emitToken("onattribdata");this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME}else if(this._decodeEntities&&c==="&"){this._emitToken("onattribdata");this._baseState=this._state;this._state=BEFORE_ENTITY;this._sectionStart=this._index}};Tokenizer.prototype._stateInAttributeValueNoQuotes=function(c){if(whitespace(c)||c===">"){this._emitToken("onattribdata");this._cbs.onattribend();this._state=BEFORE_ATTRIBUTE_NAME;this._index--}else if(this._decodeEntities&&c==="&"){this._emitToken("onattribdata");this._baseState=this._state;this._state=BEFORE_ENTITY;this._sectionStart=this._index}};Tokenizer.prototype._stateBeforeDeclaration=function(c){this._state=c==="["?BEFORE_CDATA_1:c==="-"?BEFORE_COMMENT:IN_DECLARATION};Tokenizer.prototype._stateInDeclaration=function(c){if(c===">"){this._cbs.ondeclaration(this._getSection());this._state=TEXT;this._sectionStart=this._index+1}};Tokenizer.prototype._stateInProcessingInstruction=function(c){if(c===">"){this._cbs.onprocessinginstruction(this._getSection());this._state=TEXT;this._sectionStart=this._index+1}};Tokenizer.prototype._stateBeforeComment=function(c){if(c==="-"){this._state=IN_COMMENT;this._sectionStart=this._index+1}else{this._state=IN_DECLARATION}};Tokenizer.prototype._stateInComment=function(c){if(c==="-")this._state=AFTER_COMMENT_1};Tokenizer.prototype._stateAfterComment1=function(c){if(c==="-"){this._state=AFTER_COMMENT_2}else{this._state=IN_COMMENT}};Tokenizer.prototype._stateAfterComment2=function(c){if(c===">"){this._cbs.oncomment(this._buffer.substring(this._sectionStart,this._index-2));this._state=TEXT;this._sectionStart=this._index+1}else if(c!=="-"){this._state=IN_COMMENT}};Tokenizer.prototype._stateBeforeCdata1=ifElseState("C",BEFORE_CDATA_2,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata2=ifElseState("D",BEFORE_CDATA_3,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata3=ifElseState("A",BEFORE_CDATA_4,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata4=ifElseState("T",BEFORE_CDATA_5,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata5=ifElseState("A",BEFORE_CDATA_6,IN_DECLARATION);Tokenizer.prototype._stateBeforeCdata6=function(c){if(c==="["){this._state=IN_CDATA;this._sectionStart=this._index+1}else{this._state=IN_DECLARATION;this._index--}};Tokenizer.prototype._stateInCdata=function(c){if(c==="]")this._state=AFTER_CDATA_1};Tokenizer.prototype._stateAfterCdata1=characterState("]",AFTER_CDATA_2);Tokenizer.prototype._stateAfterCdata2=function(c){if(c===">"){this._cbs.oncdata(this._buffer.substring(this._sectionStart,this._index-2));this._state=TEXT;this._sectionStart=this._index+1}else if(c!=="]"){this._state=IN_CDATA}};Tokenizer.prototype._stateBeforeSpecial=function(c){if(c==="c"||c==="C"){this._state=BEFORE_SCRIPT_1}else if(c==="t"||c==="T"){this._state=BEFORE_STYLE_1}else{this._state=IN_TAG_NAME;this._index--}};Tokenizer.prototype._stateBeforeSpecialEnd=function(c){if(this._special===SPECIAL_SCRIPT&&(c==="c"||c==="C")){this._state=AFTER_SCRIPT_1}else if(this._special===SPECIAL_STYLE&&(c==="t"||c==="T")){this._state=AFTER_STYLE_1}else this._state=TEXT};Tokenizer.prototype._stateBeforeScript1=consumeSpecialNameChar("R",BEFORE_SCRIPT_2);Tokenizer.prototype._stateBeforeScript2=consumeSpecialNameChar("I",BEFORE_SCRIPT_3);Tokenizer.prototype._stateBeforeScript3=consumeSpecialNameChar("P",BEFORE_SCRIPT_4);Tokenizer.prototype._stateBeforeScript4=consumeSpecialNameChar("T",BEFORE_SCRIPT_5);Tokenizer.prototype._stateBeforeScript5=function(c){if(c==="/"||c===">"||whitespace(c)){this._special=SPECIAL_SCRIPT}this._state=IN_TAG_NAME;this._index--};Tokenizer.prototype._stateAfterScript1=ifElseState("R",AFTER_SCRIPT_2,TEXT);Tokenizer.prototype._stateAfterScript2=ifElseState("I",AFTER_SCRIPT_3,TEXT);Tokenizer.prototype._stateAfterScript3=ifElseState("P",AFTER_SCRIPT_4,TEXT);Tokenizer.prototype._stateAfterScript4=ifElseState("T",AFTER_SCRIPT_5,TEXT);Tokenizer.prototype._stateAfterScript5=function(c){if(c===">"||whitespace(c)){this._special=SPECIAL_NONE;this._state=IN_CLOSING_TAG_NAME;this._sectionStart=this._index-6;this._index--}else this._state=TEXT};Tokenizer.prototype._stateBeforeStyle1=consumeSpecialNameChar("Y",BEFORE_STYLE_2);Tokenizer.prototype._stateBeforeStyle2=consumeSpecialNameChar("L",BEFORE_STYLE_3);Tokenizer.prototype._stateBeforeStyle3=consumeSpecialNameChar("E",BEFORE_STYLE_4);Tokenizer.prototype._stateBeforeStyle4=function(c){if(c==="/"||c===">"||whitespace(c)){this._special=SPECIAL_STYLE}this._state=IN_TAG_NAME;this._index--};Tokenizer.prototype._stateAfterStyle1=ifElseState("Y",AFTER_STYLE_2,TEXT);Tokenizer.prototype._stateAfterStyle2=ifElseState("L",AFTER_STYLE_3,TEXT);Tokenizer.prototype._stateAfterStyle3=ifElseState("E",AFTER_STYLE_4,TEXT);Tokenizer.prototype._stateAfterStyle4=function(c){if(c===">"||whitespace(c)){this._special=SPECIAL_NONE;this._state=IN_CLOSING_TAG_NAME;this._sectionStart=this._index-5;this._index--}else this._state=TEXT};Tokenizer.prototype._stateBeforeEntity=ifElseState("#",BEFORE_NUMERIC_ENTITY,IN_NAMED_ENTITY);Tokenizer.prototype._stateBeforeNumericEntity=ifElseState("X",IN_HEX_ENTITY,IN_NUMERIC_ENTITY);Tokenizer.prototype._parseNamedEntityStrict=function(){if(this._sectionStart+1<this._index){var entity=this._buffer.substring(this._sectionStart+1,this._index),map=this._xmlMode?xmlMap:entityMap;if(map.hasOwnProperty(entity)){this._emitPartial(map[entity]);this._sectionStart=this._index+1}}};Tokenizer.prototype._parseLegacyEntity=function(){var start=this._sectionStart+1,limit=this._index-start;if(limit>6)limit=6;while(limit>=2){var entity=this._buffer.substr(start,limit);if(legacyMap.hasOwnProperty(entity)){this._emitPartial(legacyMap[entity]);this._sectionStart+=limit+1;return}else{limit--}}};Tokenizer.prototype._stateInNamedEntity=function(c){if(c===";"){this._parseNamedEntityStrict();if(this._sectionStart+1<this._index&&!this._xmlMode){this._parseLegacyEntity()}this._state=this._baseState}else if((c<"a"||c>"z")&&(c<"A"||c>"Z")&&(c<"0"||c>"9")){if(this._xmlMode);else if(this._sectionStart+1===this._index);else if(this._baseState!==TEXT){if(c!=="="){this._parseNamedEntityStrict()}}else{this._parseLegacyEntity()}this._state=this._baseState;this._index--}};Tokenizer.prototype._decodeNumericEntity=function(offset,base){var sectionStart=this._sectionStart+offset;if(sectionStart!==this._index){var entity=this._buffer.substring(sectionStart,this._index);var parsed=parseInt(entity,base);this._emitPartial(decodeCodePoint(parsed));this._sectionStart=this._index}else{this._sectionStart--}this._state=this._baseState};Tokenizer.prototype._stateInNumericEntity=function(c){if(c===";"){this._decodeNumericEntity(2,10);this._sectionStart++}else if(c<"0"||c>"9"){if(!this._xmlMode){this._decodeNumericEntity(2,10)}else{this._state=this._baseState}this._index--}};Tokenizer.prototype._stateInHexEntity=function(c){if(c===";"){this._decodeNumericEntity(3,16);this._sectionStart++}else if((c<"a"||c>"f")&&(c<"A"||c>"F")&&(c<"0"||c>"9")){if(!this._xmlMode){this._decodeNumericEntity(3,16)}else{this._state=this._baseState}this._index--}};Tokenizer.prototype._cleanup=function(){if(this._sectionStart<0){this._buffer="";this._index=0;this._bufferOffset+=this._index}else if(this._running){if(this._state===TEXT){if(this._sectionStart!==this._index){this._cbs.ontext(this._buffer.substr(this._sectionStart))}this._buffer="";this._bufferOffset+=this._index;this._index=0}else if(this._sectionStart===this._index){this._buffer="";this._bufferOffset+=this._index;this._index=0}else{this._buffer=this._buffer.substr(this._sectionStart);this._index-=this._sectionStart;this._bufferOffset+=this._sectionStart}this._sectionStart=0}};Tokenizer.prototype.write=function(chunk){if(this._ended)this._cbs.onerror(Error(".write() after done!"));this._buffer+=chunk;this._parse()};Tokenizer.prototype._parse=function(){while(this._index<this._buffer.length&&this._running){var c=this._buffer.charAt(this._index);if(this._state===TEXT){this._stateText(c)}else if(this._state===BEFORE_TAG_NAME){this._stateBeforeTagName(c)}else if(this._state===IN_TAG_NAME){this._stateInTagName(c)}else if(this._state===BEFORE_CLOSING_TAG_NAME){this._stateBeforeCloseingTagName(c)}else if(this._state===IN_CLOSING_TAG_NAME){this._stateInCloseingTagName(c)}else if(this._state===AFTER_CLOSING_TAG_NAME){this._stateAfterCloseingTagName(c)}else if(this._state===IN_SELF_CLOSING_TAG){this._stateInSelfClosingTag(c)}else if(this._state===BEFORE_ATTRIBUTE_NAME){this._stateBeforeAttributeName(c)}else if(this._state===IN_ATTRIBUTE_NAME){this._stateInAttributeName(c)}else if(this._state===AFTER_ATTRIBUTE_NAME){this._stateAfterAttributeName(c)}else if(this._state===BEFORE_ATTRIBUTE_VALUE){this._stateBeforeAttributeValue(c)}else if(this._state===IN_ATTRIBUTE_VALUE_DQ){this._stateInAttributeValueDoubleQuotes(c)}else if(this._state===IN_ATTRIBUTE_VALUE_SQ){this._stateInAttributeValueSingleQuotes(c)}else if(this._state===IN_ATTRIBUTE_VALUE_NQ){this._stateInAttributeValueNoQuotes(c)}else if(this._state===BEFORE_DECLARATION){this._stateBeforeDeclaration(c)}else if(this._state===IN_DECLARATION){this._stateInDeclaration(c)}else if(this._state===IN_PROCESSING_INSTRUCTION){this._stateInProcessingInstruction(c)}else if(this._state===BEFORE_COMMENT){this._stateBeforeComment(c)}else if(this._state===IN_COMMENT){this._stateInComment(c)}else if(this._state===AFTER_COMMENT_1){this._stateAfterComment1(c)}else if(this._state===AFTER_COMMENT_2){this._stateAfterComment2(c)}else if(this._state===BEFORE_CDATA_1){this._stateBeforeCdata1(c)}else if(this._state===BEFORE_CDATA_2){this._stateBeforeCdata2(c)}else if(this._state===BEFORE_CDATA_3){this._stateBeforeCdata3(c)}else if(this._state===BEFORE_CDATA_4){this._stateBeforeCdata4(c)}else if(this._state===BEFORE_CDATA_5){this._stateBeforeCdata5(c)}else if(this._state===BEFORE_CDATA_6){this._stateBeforeCdata6(c)}else if(this._state===IN_CDATA){this._stateInCdata(c)}else if(this._state===AFTER_CDATA_1){this._stateAfterCdata1(c)}else if(this._state===AFTER_CDATA_2){this._stateAfterCdata2(c)}else if(this._state===BEFORE_SPECIAL){this._stateBeforeSpecial(c)}else if(this._state===BEFORE_SPECIAL_END){this._stateBeforeSpecialEnd(c)}else if(this._state===BEFORE_SCRIPT_1){this._stateBeforeScript1(c)}else if(this._state===BEFORE_SCRIPT_2){this._stateBeforeScript2(c)}else if(this._state===BEFORE_SCRIPT_3){this._stateBeforeScript3(c)}else if(this._state===BEFORE_SCRIPT_4){this._stateBeforeScript4(c)}else if(this._state===BEFORE_SCRIPT_5){this._stateBeforeScript5(c)}else if(this._state===AFTER_SCRIPT_1){this._stateAfterScript1(c)}else if(this._state===AFTER_SCRIPT_2){this._stateAfterScript2(c)}else if(this._state===AFTER_SCRIPT_3){this._stateAfterScript3(c)}else if(this._state===AFTER_SCRIPT_4){this._stateAfterScript4(c)}else if(this._state===AFTER_SCRIPT_5){this._stateAfterScript5(c)}else if(this._state===BEFORE_STYLE_1){this._stateBeforeStyle1(c)}else if(this._state===BEFORE_STYLE_2){this._stateBeforeStyle2(c)}else if(this._state===BEFORE_STYLE_3){this._stateBeforeStyle3(c)}else if(this._state===BEFORE_STYLE_4){this._stateBeforeStyle4(c)}else if(this._state===AFTER_STYLE_1){this._stateAfterStyle1(c)}else if(this._state===AFTER_STYLE_2){this._stateAfterStyle2(c)}else if(this._state===AFTER_STYLE_3){this._stateAfterStyle3(c)}else if(this._state===AFTER_STYLE_4){this._stateAfterStyle4(c)}else if(this._state===BEFORE_ENTITY){this._stateBeforeEntity(c)}else if(this._state===BEFORE_NUMERIC_ENTITY){this._stateBeforeNumericEntity(c)}else if(this._state===IN_NAMED_ENTITY){this._stateInNamedEntity(c)}else if(this._state===IN_NUMERIC_ENTITY){this._stateInNumericEntity(c)}else if(this._state===IN_HEX_ENTITY){this._stateInHexEntity(c)}else{this._cbs.onerror(Error("unknown _state"),this._state)}this._index++}this._cleanup()};Tokenizer.prototype.pause=function(){this._running=false};Tokenizer.prototype.resume=function(){this._running=true;if(this._index<this._buffer.length){this._parse()}if(this._ended){this._finish()}};Tokenizer.prototype.end=function(chunk){if(this._ended)this._cbs.onerror(Error(".end() after done!"));if(chunk)this.write(chunk);this._ended=true;if(this._running)this._finish()};Tokenizer.prototype._finish=function(){if(this._sectionStart<this._index){this._handleTrailingData()}this._cbs.onend()};Tokenizer.prototype._handleTrailingData=function(){var data=this._buffer.substr(this._sectionStart);if(this._state===IN_CDATA||this._state===AFTER_CDATA_1||this._state===AFTER_CDATA_2){this._cbs.oncdata(data)}else if(this._state===IN_COMMENT||this._state===AFTER_COMMENT_1||this._state===AFTER_COMMENT_2){this._cbs.oncomment(data)}else if(this._state===IN_NAMED_ENTITY&&!this._xmlMode){this._parseLegacyEntity();if(this._sectionStart<this._index){this._state=this._baseState;this._handleTrailingData()}}else if(this._state===IN_NUMERIC_ENTITY&&!this._xmlMode){this._decodeNumericEntity(2,10);if(this._sectionStart<this._index){this._state=this._baseState;this._handleTrailingData()}}else if(this._state===IN_HEX_ENTITY&&!this._xmlMode){this._decodeNumericEntity(3,16);if(this._sectionStart<this._index){this._state=this._baseState;this._handleTrailingData()}}else if(this._state!==IN_TAG_NAME&&this._state!==BEFORE_ATTRIBUTE_NAME&&this._state!==BEFORE_ATTRIBUTE_VALUE&&this._state!==AFTER_ATTRIBUTE_NAME&&this._state!==IN_ATTRIBUTE_NAME&&this._state!==IN_ATTRIBUTE_VALUE_SQ&&this._state!==IN_ATTRIBUTE_VALUE_DQ&&this._state!==IN_ATTRIBUTE_VALUE_NQ&&this._state!==IN_CLOSING_TAG_NAME){
this._cbs.ontext(data)}};Tokenizer.prototype.reset=function(){Tokenizer.call(this,{xmlMode:this._xmlMode,decodeEntities:this._decodeEntities},this._cbs)};Tokenizer.prototype.getAbsoluteIndex=function(){return this._bufferOffset+this._index};Tokenizer.prototype._getSection=function(){return this._buffer.substring(this._sectionStart,this._index)};Tokenizer.prototype._emitToken=function(name){this._cbs[name](this._getSection());this._sectionStart=-1};Tokenizer.prototype._emitPartial=function(value){if(this._baseState!==TEXT){this._cbs.onattribdata(value)}else{this._cbs.ontext(value)}}},{"entities/lib/decode_codepoint.js":22,"entities/maps/entities.json":25,"entities/maps/legacy.json":26,"entities/maps/xml.json":27}],35:[function(require,module,exports){module.exports=Stream;var Parser=require("./Parser.js"),WritableStream=require("stream").Writable||require("readable-stream").Writable,StringDecoder=require("string_decoder").StringDecoder,Buffer=require("buffer").Buffer;function Stream(cbs,options){var parser=this._parser=new Parser(cbs,options);var decoder=this._decoder=new StringDecoder;WritableStream.call(this,{decodeStrings:false});this.once("finish",function(){parser.end(decoder.end())})}require("inherits")(Stream,WritableStream);WritableStream.prototype._write=function(chunk,encoding,cb){if(chunk instanceof Buffer)chunk=this._decoder.write(chunk);this._parser.write(chunk);cb()}},{"./Parser.js":31,buffer:5,inherits:38,"readable-stream":3,stream:55,string_decoder:56}],36:[function(require,module,exports){var Parser=require("./Parser.js"),DomHandler=require("domhandler");function defineProp(name,value){delete module.exports[name];module.exports[name]=value;return value}module.exports={Parser:Parser,Tokenizer:require("./Tokenizer.js"),ElementType:require("domelementtype"),DomHandler:DomHandler,get FeedHandler(){return defineProp("FeedHandler",require("./FeedHandler.js"))},get Stream(){return defineProp("Stream",require("./Stream.js"))},get WritableStream(){return defineProp("WritableStream",require("./WritableStream.js"))},get ProxyHandler(){return defineProp("ProxyHandler",require("./ProxyHandler.js"))},get DomUtils(){return defineProp("DomUtils",require("domutils"))},get CollectingHandler(){return defineProp("CollectingHandler",require("./CollectingHandler.js"))},DefaultHandler:DomHandler,get RssHandler(){return defineProp("RssHandler",this.FeedHandler)},parseDOM:function(data,options){var handler=new DomHandler(options);new Parser(handler,options).end(data);return handler.dom},parseFeed:function(feed,options){var handler=new module.exports.FeedHandler(options);new Parser(handler,options).end(feed);return handler.dom},createDomStream:function(cb,options,elementCb){var handler=new DomHandler(cb,options,elementCb);return new Parser(handler,options)},EVENTS:{attribute:2,cdatastart:0,cdataend:0,text:1,processinginstruction:2,comment:1,commentend:0,closetag:1,opentag:2,opentagname:1,error:1,end:0}}},{"./CollectingHandler.js":29,"./FeedHandler.js":30,"./Parser.js":31,"./ProxyHandler.js":32,"./Stream.js":33,"./Tokenizer.js":34,"./WritableStream.js":35,domelementtype:9,domhandler:10,domutils:13}],37:[function(require,module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity}else{m=m+Math.pow(2,mLen);e=e-eBias}return(s?-1:1)*m*Math.pow(2,e-mLen)};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2}if(e+eBias>=1){value+=rt/c}else{value+=rt*Math.pow(2,1-eBias)}if(value*c>=2){e++;c/=2}if(e+eBias>=eMax){m=0;e=eMax}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0}}for(;mLen>=8;buffer[offset+i]=m&255,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&255,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128}},{}],38:[function(require,module,exports){if(typeof Object.create==="function"){module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}})}}else{module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor;ctor.prototype.constructor=ctor}}},{}],39:[function(require,module,exports){module.exports=function(obj){return obj!=null&&(isBuffer(obj)||isSlowBuffer(obj)||!!obj._isBuffer)};function isBuffer(obj){return!!obj.constructor&&typeof obj.constructor.isBuffer==="function"&&obj.constructor.isBuffer(obj)}function isSlowBuffer(obj){return typeof obj.readFloatLE==="function"&&typeof obj.slice==="function"&&isBuffer(obj.slice(0,0))}},{}],40:[function(require,module,exports){var toString={}.toString;module.exports=Array.isArray||function(arr){return toString.call(arr)=="[object Array]"}},{}],41:[function(require,module,exports){(function(process){;if(!process.version||process.version.indexOf("v0.")===0||process.version.indexOf("v1.")===0&&process.version.indexOf("v1.8.")!==0){module.exports=nextTick}else{module.exports=process.nextTick}function nextTick(fn,arg1,arg2,arg3){if(typeof fn!=="function"){throw new TypeError('"callback" argument must be a function')}var len=arguments.length;var args,i;switch(len){case 0:case 1:return process.nextTick(fn);case 2:return process.nextTick(function afterTickOne(){fn.call(null,arg1)});case 3:return process.nextTick(function afterTickTwo(){fn.call(null,arg1,arg2)});case 4:return process.nextTick(function afterTickThree(){fn.call(null,arg1,arg2,arg3)});default:args=new Array(len-1);i=0;while(i<args.length){args[i++]=arguments[i]}return process.nextTick(function afterTick(){fn.apply(null,args)})}}}).call(this,require("_process"))},{_process:42}],42:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){cachedSetTimeout=setTimeout}else{cachedSetTimeout=defaultSetTimout}}catch(e){cachedSetTimeout=defaultSetTimout}try{if(typeof clearTimeout==="function"){cachedClearTimeout=clearTimeout}else{cachedClearTimeout=defaultClearTimeout}}catch(e){cachedClearTimeout=defaultClearTimeout}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0)}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0)}try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker)}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker)}try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue)}else{queueIndex=-1}if(queue.length){drainQueue()}}function drainQueue(){if(draining){return}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run()}}queueIndex=-1;len=queue.length}currentQueue=null;draining=false;runClearTimeout(timeout)}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i]}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue)}};function Item(fun,array){this.fun=fun;this.array=array}Item.prototype.run=function(){this.fun.apply(null,this.array)};process.title="browser";process.browser=true;process.env={};process.argv=[];process.version="";process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.binding=function(name){throw new Error("process.binding is not supported")};process.cwd=function(){return"/"};process.chdir=function(dir){throw new Error("process.chdir is not supported")};process.umask=function(){return 0}},{}],43:[function(require,module,exports){module.exports=require("./lib/_stream_duplex.js")},{"./lib/_stream_duplex.js":44}],44:[function(require,module,exports){;var objectKeys=Object.keys||function(obj){var keys=[];for(var key in obj){keys.push(key)}return keys};module.exports=Duplex;var processNextTick=require("process-nextick-args");var util=require("core-util-is");util.inherits=require("inherits");var Readable=require("./_stream_readable");var Writable=require("./_stream_writable");util.inherits(Duplex,Readable);var keys=objectKeys(Writable.prototype);for(var v=0;v<keys.length;v++){var method=keys[v];if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method]}function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once("end",onend)}function onend(){if(this.allowHalfOpen||this._writableState.ended)return;processNextTick(onEndNT,this)}function onEndNT(self){self.end()}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i)}}},{"./_stream_readable":46,"./_stream_writable":48,"core-util-is":6,inherits:38,"process-nextick-args":41}],45:[function(require,module,exports){;module.exports=PassThrough;var Transform=require("./_stream_transform");var util=require("core-util-is");util.inherits=require("inherits");util.inherits(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options)}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk)}},{"./_stream_transform":47,"core-util-is":6,inherits:38}],46:[function(require,module,exports){(function(process){;module.exports=Readable;var processNextTick=require("process-nextick-args");var isArray=require("isarray");Readable.ReadableState=ReadableState;var EE=require("events").EventEmitter;var EElistenerCount=function(emitter,type){return emitter.listeners(type).length};var Stream;(function(){try{Stream=require("st"+"ream")}catch(_){}finally{if(!Stream)Stream=require("events").EventEmitter}})();var Buffer=require("buffer").Buffer;var bufferShim=require("buffer-shims");var util=require("core-util-is");util.inherits=require("inherits");var debugUtil=require("util");var debug=void 0;if(debugUtil&&debugUtil.debuglog){debug=debugUtil.debuglog("stream")}else{debug=function(){}}var BufferList=require("./internal/streams/BufferList");var StringDecoder;util.inherits(Readable,Stream);function prependListener(emitter,event,fn){if(typeof emitter.prependListener==="function"){return emitter.prependListener(event,fn)}else{if(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(isArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]]}}var Duplex;function ReadableState(options,stream){Duplex=Duplex||require("./_stream_duplex");options=options||{};this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;this.highWaterMark=~~this.highWaterMark;this.buffer=new BufferList;this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;this.sync=true;this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;this.defaultEncoding=options.defaultEncoding||"utf8";this.ranOut=false;this.awaitDrain=0;this.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!StringDecoder)StringDecoder=require("string_decoder/").StringDecoder;this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding}}var Duplex;function Readable(options){Duplex=Duplex||require("./_stream_duplex");if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);this.readable=true;if(options&&typeof options.read==="function")this._read=options.read;Stream.call(this)}Readable.prototype.push=function(chunk,encoding){var state=this._readableState;if(!state.objectMode&&typeof chunk==="string"){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=bufferShim.from(chunk,encoding);encoding=""}}return readableAddChunk(this,state,chunk,encoding,false)};Readable.prototype.unshift=function(chunk){var state=this._readableState;return readableAddChunk(this,state,chunk,"",true)};Readable.prototype.isPaused=function(){return this._readableState.flowing===false};function readableAddChunk(stream,state,chunk,encoding,addToFront){var er=chunkInvalid(state,chunk);if(er){stream.emit("error",er)}else if(chunk===null){state.reading=false;onEofChunk(stream,state)}else if(state.objectMode||chunk&&chunk.length>0){if(state.ended&&!addToFront){var e=new Error("stream.push() after EOF");stream.emit("error",e)}else if(state.endEmitted&&addToFront){var _e=new Error("stream.unshift() after end event");stream.emit("error",_e)}else{var skipAdd;if(state.decoder&&!addToFront&&!encoding){chunk=state.decoder.write(chunk);skipAdd=!state.objectMode&&chunk.length===0}if(!addToFront)state.reading=false;if(!skipAdd){if(state.flowing&&state.length===0&&!state.sync){stream.emit("data",chunk);stream.read(0)}else{state.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)emitReadable(stream)}}maybeReadMore(stream,state)}}else if(!addToFront){state.reading=false}return needMoreData(state)}function needMoreData(state){return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0)}Readable.prototype.setEncoding=function(enc){if(!StringDecoder)StringDecoder=require("string_decoder/").StringDecoder;this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;return this};var MAX_HWM=8388608;function computeNewHighWaterMark(n){if(n>=MAX_HWM){n=MAX_HWM}else{n--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++}return n}function howMuchToRead(n,state){if(n<=0||state.length===0&&state.ended)return 0;if(state.objectMode)return 1;if(n!==n){if(state.flowing&&state.length)return state.buffer.head.data.length;else return state.length}if(n>state.highWaterMark)state.highWaterMark=computeNewHighWaterMark(n);if(n<=state.length)return n;if(!state.ended){state.needReadable=true;return 0}return state.length}Readable.prototype.read=function(n){debug("read",n);n=parseInt(n,10);var state=this._readableState;var nOrig=n;if(n!==0)state.emittedReadable=false;if(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){debug("read: emitReadable",state.length,state.ended);if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);return null}n=howMuchToRead(n,state);if(n===0&&state.ended){if(state.length===0)endReadable(this);return null}var doRead=state.needReadable;debug("need readable",doRead);if(state.length===0||state.length-n<state.highWaterMark){doRead=true;debug("length less than watermark",doRead)}if(state.ended||state.reading){doRead=false;debug("reading or ended",doRead)}else if(doRead){debug("do read");state.reading=true;state.sync=true;if(state.length===0)state.needReadable=true;this._read(state.highWaterMark);state.sync=false;if(!state.reading)n=howMuchToRead(nOrig,state)}var ret;if(n>0)ret=fromList(n,state);else ret=null;if(ret===null){state.needReadable=true;n=0}else{state.length-=n}if(state.length===0){if(!state.ended)state.needReadable=true;if(nOrig!==n&&state.ended)endReadable(this)}if(ret!==null)this.emit("data",ret);return ret};function chunkInvalid(state,chunk){var er=null;if(!Buffer.isBuffer(chunk)&&typeof chunk!=="string"&&chunk!==null&&chunk!==undefined&&!state.objectMode){er=new TypeError("Invalid non-string/buffer chunk")}return er}function onEofChunk(stream,state){if(state.ended)return;if(state.decoder){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length}}state.ended=true;emitReadable(stream)}function emitReadable(stream){var state=stream._readableState;state.needReadable=false;if(!state.emittedReadable){debug("emitReadable",state.flowing);state.emittedReadable=true;if(state.sync)processNextTick(emitReadable_,stream);else emitReadable_(stream)}}function emitReadable_(stream){debug("emit readable");stream.emit("readable");flow(stream)}function maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;processNextTick(maybeReadMore_,stream,state)}}function maybeReadMore_(stream,state){var len=state.length;while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){debug("maybeReadMore read 0");stream.read(0);if(len===state.length)break;else len=state.length}state.readingMore=false}Readable.prototype._read=function(n){this.emit("error",new Error("not implemented"))};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break}state.pipesCount+=1;debug("pipe count=%d opts=%j",state.pipesCount,pipeOpts);var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process.stdout&&dest!==process.stderr;var endFn=doEnd?onend:cleanup;if(state.endEmitted)processNextTick(endFn);else src.once("end",endFn);dest.on("unpipe",onunpipe);function onunpipe(readable){debug("onunpipe");if(readable===src){cleanup()}}function onend(){debug("onend");dest.end()}var ondrain=pipeOnDrain(src);dest.on("drain",ondrain);var cleanedUp=false;function cleanup(){debug("cleanup");dest.removeListener("close",onclose);dest.removeListener("finish",onfinish);dest.removeListener("drain",ondrain);dest.removeListener("error",onerror);dest.removeListener("unpipe",onunpipe);src.removeListener("end",onend);src.removeListener("end",cleanup);src.removeListener("data",ondata);cleanedUp=true;if(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain()}var increasedAwaitDrain=false;src.on("data",ondata);function ondata(chunk){debug("ondata");increasedAwaitDrain=false;var ret=dest.write(chunk);if(false===ret&&!increasedAwaitDrain){if((state.pipesCount===1&&state.pipes===dest||state.pipesCount>1&&indexOf(state.pipes,dest)!==-1)&&!cleanedUp){debug("false write response, pause",src._readableState.awaitDrain);src._readableState.awaitDrain++;increasedAwaitDrain=true}src.pause()}}function onerror(er){debug("onerror",er);unpipe();dest.removeListener("error",onerror);if(EElistenerCount(dest,"error")===0)dest.emit("error",er)}prependListener(dest,"error",onerror);function onclose(){dest.removeListener("finish",onfinish);unpipe()}dest.once("close",onclose);function onfinish(){debug("onfinish");dest.removeListener("close",onclose);unpipe()}dest.once("finish",onfinish);function unpipe(){debug("unpipe");src.unpipe(dest)}dest.emit("pipe",src);if(!state.flowing){debug("pipe resume");src.resume()}return dest};function pipeOnDrain(src){return function(){var state=src._readableState;debug("pipeOnDrain",state.awaitDrain);if(state.awaitDrain)state.awaitDrain--;if(state.awaitDrain===0&&EElistenerCount(src,"data")){state.flowing=true;flow(src)}}}Readable.prototype.unpipe=function(dest){var state=this._readableState;if(state.pipesCount===0)return this;if(state.pipesCount===1){if(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;state.pipes=null;state.pipesCount=0;state.flowing=false;if(dest)dest.emit("unpipe",this);return this}if(!dest){var dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;state.flowing=false;for(var _i=0;_i<len;_i++){dests[_i].emit("unpipe",this)}return this}var i=indexOf(state.pipes,dest);if(i===-1)return this;state.pipes.splice(i,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit("unpipe",this);return this};Readable.prototype.on=function(ev,fn){var res=Stream.prototype.on.call(this,ev,fn);if(ev==="data"){if(this._readableState.flowing!==false)this.resume()}else if(ev==="readable"){var state=this._readableState;if(!state.endEmitted&&!state.readableListening){state.readableListening=state.needReadable=true;state.emittedReadable=false;if(!state.reading){processNextTick(nReadingNextTick,this)}else if(state.length){emitReadable(this,state)}}}return res};Readable.prototype.addListener=Readable.prototype.on;function nReadingNextTick(self){debug("readable nexttick read 0");self.read(0)}Readable.prototype.resume=function(){var state=this._readableState;if(!state.flowing){debug("resume");state.flowing=true;resume(this,state)}return this};function resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;processNextTick(resume_,stream,state)}}function resume_(stream,state){if(!state.reading){debug("resume read 0");stream.read(0)}state.resumeScheduled=false;state.awaitDrain=0;stream.emit("resume");flow(stream);if(state.flowing&&!state.reading)stream.read(0)}Readable.prototype.pause=function(){debug("call pause flowing=%j",this._readableState.flowing);if(false!==this._readableState.flowing){debug("pause");this._readableState.flowing=false;this.emit("pause")}return this};function flow(stream){var state=stream._readableState;debug("flow",state.flowing);while(state.flowing&&stream.read()!==null){}}Readable.prototype.wrap=function(stream){var state=this._readableState;var paused=false;var self=this;stream.on("end",function(){debug("wrapped end");if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)self.push(chunk)}self.push(null)});stream.on("data",function(chunk){debug("wrapped data");if(state.decoder)chunk=state.decoder.write(chunk);if(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;var ret=self.push(chunk);if(!ret){paused=true;stream.pause()}});for(var i in stream){if(this[i]===undefined&&typeof stream[i]==="function"){this[i]=function(method){return function(){return stream[method].apply(stream,arguments)}}(i)}}var events=["error","close","destroy","pause","resume"];forEach(events,function(ev){stream.on(ev,self.emit.bind(self,ev))});self._read=function(n){debug("wrapped _read",n);if(paused){paused=false;stream.resume()}};return self};Readable._fromList=fromList;function fromList(n,state){if(state.length===0)return null;var ret;if(state.objectMode)ret=state.buffer.shift();else if(!n||n>=state.length){if(state.decoder)ret=state.buffer.join("");else if(state.buffer.length===1)ret=state.buffer.head.data;else ret=state.buffer.concat(state.length);state.buffer.clear()}else{ret=fromListPartial(n,state.buffer,state.decoder)}return ret}function fromListPartial(n,list,hasStrings){var ret;if(n<list.head.data.length){ret=list.head.data.slice(0,n);list.head.data=list.head.data.slice(n)}else if(n===list.head.data.length){ret=list.shift()}else{ret=hasStrings?copyFromBufferString(n,list):copyFromBuffer(n,list)}return ret}function copyFromBufferString(n,list){var p=list.head;var c=1;var ret=p.data;n-=ret.length;while(p=p.next){var str=p.data;var nb=n>str.length?str.length:n;if(nb===str.length)ret+=str;else ret+=str.slice(0,n);n-=nb;if(n===0){if(nb===str.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null}else{list.head=p;p.data=str.slice(nb)}break}++c}list.length-=c;return ret}function copyFromBuffer(n,list){var ret=bufferShim.allocUnsafe(n);var p=list.head;var c=1;p.data.copy(ret);n-=p.data.length;while(p=p.next){var buf=p.data;var nb=n>buf.length?buf.length:n;buf.copy(ret,ret.length-n,0,nb);n-=nb;if(n===0){if(nb===buf.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null}else{list.head=p;p.data=buf.slice(nb)}break}++c}list.length-=c;return ret}function endReadable(stream){var state=stream._readableState;if(state.length>0)throw new Error('"endReadable()" called on non-empty stream');if(!state.endEmitted){state.ended=true;processNextTick(endReadableNT,state,stream)}}function endReadableNT(state,stream){if(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit("end")}}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i)}}function indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i}return-1}}).call(this,require("_process"))},{"./_stream_duplex":44,"./internal/streams/BufferList":49,_process:42,buffer:5,"buffer-shims":4,"core-util-is":6,events:28,inherits:38,isarray:40,"process-nextick-args":41,"string_decoder/":56,util:3}],47:[function(require,module,exports){;module.exports=Transform;var Duplex=require("./_stream_duplex");var util=require("core-util-is");util.inherits=require("inherits");util.inherits(Transform,Duplex);function TransformState(stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data)};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;this.writeencoding=null}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit("error",new Error("no writecb in Transform class"));ts.writechunk=null;ts.writecb=null;if(data!==null&&data!==undefined)stream.push(data);cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark)}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);this._transformState=new TransformState(this);var stream=this;this._readableState.needReadable=true;this._readableState.sync=false;if(options){if(typeof options.transform==="function")this._transform=options.transform;if(typeof options.flush==="function")this._flush=options.flush}this.once("prefinish",function(){if(typeof this._flush==="function")this._flush(function(er){done(stream,er)});else done(stream)})}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding)};Transform.prototype._transform=function(chunk,encoding,cb){throw new Error("Not implemented")};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark)}};Transform.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform)}else{ts.needTransform=true}};function done(stream,er){if(er)return stream.emit("error",er);var ws=stream._writableState;var ts=stream._transformState;if(ws.length)throw new Error("Calling transform done when ws.length != 0");if(ts.transforming)throw new Error("Calling transform done when still transforming");return stream.push(null)}},{"./_stream_duplex":44,"core-util-is":6,inherits:38}],48:[function(require,module,exports){(function(process){;module.exports=Writable;var processNextTick=require("process-nextick-args");var asyncWrite=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick;Writable.WritableState=WritableState;var util=require("core-util-is");util.inherits=require("inherits");var internalUtil={deprecate:require("util-deprecate")};var Stream;(function(){try{Stream=require("st"+"ream")}catch(_){}finally{if(!Stream)Stream=require("events").EventEmitter}})();var Buffer=require("buffer").Buffer;var bufferShim=require("buffer-shims");util.inherits(Writable,Stream);function nop(){}function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;this.next=null}var Duplex;function WritableState(options,stream){Duplex=Duplex||require("./_stream_duplex");options=options||{};this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;this.highWaterMark=~~this.highWaterMark;this.needDrain=false;this.ending=false;this.ended=false;this.finished=false;var noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;this.defaultEncoding=options.defaultEncoding||"utf8";this.length=0;this.writing=false;this.corked=0;this.sync=true;this.bufferProcessing=false;this.onwrite=function(er){onwrite(stream,er)};this.writecb=null;this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;this.pendingcb=0;this.prefinished=false;this.errorEmitted=false;this.bufferedRequestCount=0;this.corkedRequestsFree=new CorkedRequest(this)}WritableState.prototype.getBuffer=function writableStateGetBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next}return out};(function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:internalUtil.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer "+"instead.")})}catch(_){}})();var Duplex;function Writable(options){Duplex=Duplex||require("./_stream_duplex");if(!(this instanceof Writable)&&!(this instanceof Duplex))return new Writable(options);this._writableState=new WritableState(options,this);this.writable=true;if(options){if(typeof options.write==="function")this._write=options.write;if(typeof options.writev==="function")this._writev=options.writev}Stream.call(this)}Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))};function writeAfterEnd(stream,cb){var er=new Error("write after end");stream.emit("error",er);processNextTick(cb,er)}function validChunk(stream,state,chunk,cb){var valid=true;var er=false;if(chunk===null){er=new TypeError("May not write null values to stream")}else if(!Buffer.isBuffer(chunk)&&typeof chunk!=="string"&&chunk!==undefined&&!state.objectMode){er=new TypeError("Invalid non-string/buffer chunk")}if(er){stream.emit("error",er);processNextTick(cb,er);valid=false}return valid}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;if(typeof encoding==="function"){cb=encoding;encoding=null}if(Buffer.isBuffer(chunk))encoding="buffer";else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=="function")cb=nop;if(state.ended)writeAfterEnd(this,cb);else if(validChunk(this,state,chunk,cb)){
state.pendingcb++;ret=writeOrBuffer(this,state,chunk,encoding,cb)}return ret};Writable.prototype.cork=function(){var state=this._writableState;state.corked++};Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.finished&&!state.bufferProcessing&&state.bufferedRequest)clearBuffer(this,state)}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){if(typeof encoding==="string")encoding=encoding.toLowerCase();if(!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((encoding+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+encoding);this._writableState.defaultEncoding=encoding;return this};function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==="string"){chunk=bufferShim.from(chunk,encoding)}return chunk}function writeOrBuffer(stream,state,chunk,encoding,cb){chunk=decodeChunk(state,chunk,encoding);if(Buffer.isBuffer(chunk))encoding="buffer";var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;if(!ret)state.needDrain=true;if(state.writing||state.corked){var last=state.lastBufferedRequest;state.lastBufferedRequest=new WriteReq(chunk,encoding,cb);if(last){last.next=state.lastBufferedRequest}else{state.bufferedRequest=state.lastBufferedRequest}state.bufferedRequestCount+=1}else{doWrite(stream,state,false,len,chunk,encoding,cb)}return ret}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false}function onwriteError(stream,state,sync,er,cb){--state.pendingcb;if(sync)processNextTick(cb,er);else cb(er);stream._writableState.errorEmitted=true;stream.emit("error",er)}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{var finished=needFinish(state);if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){clearBuffer(stream,state)}if(sync){asyncWrite(afterWrite,stream,state,finished,cb)}else{afterWrite(stream,state,finished,cb)}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);state.pendingcb--;cb();finishMaybe(stream,state)}function onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit("drain")}}function clearBuffer(stream,state){state.bufferProcessing=true;var entry=state.bufferedRequest;if(stream._writev&&entry&&entry.next){var l=state.bufferedRequestCount;var buffer=new Array(l);var holder=state.corkedRequestsFree;holder.entry=entry;var count=0;while(entry){buffer[count]=entry;entry=entry.next;count+=1}doWrite(stream,state,true,state.length,buffer,"",holder.finish);state.pendingcb++;state.lastBufferedRequest=null;if(holder.next){state.corkedRequestsFree=holder.next;holder.next=null}else{state.corkedRequestsFree=new CorkedRequest(state)}}else{while(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,cb);entry=entry.next;if(state.writing){break}}if(entry===null)state.lastBufferedRequest=null}state.bufferedRequestCount=0;state.bufferedRequest=entry;state.bufferProcessing=false}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error("not implemented"))};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==="function"){cb=chunk;chunk=null;encoding=null}else if(typeof encoding==="function"){cb=encoding;encoding=null}if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);if(state.corked){state.corked=1;this.uncork()}if(!state.ending&&!state.finished)endWritable(this,state,cb)};function needFinish(state){return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing}function prefinish(stream,state){if(!state.prefinished){state.prefinished=true;stream.emit("prefinish")}}function finishMaybe(stream,state){var need=needFinish(state);if(need){if(state.pendingcb===0){prefinish(stream,state);state.finished=true;stream.emit("finish")}else{prefinish(stream,state)}}return need}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)processNextTick(cb);else stream.once("finish",cb)}state.ended=true;stream.writable=false}function CorkedRequest(state){var _this=this;this.next=null;this.entry=null;this.finish=function(err){var entry=_this.entry;_this.entry=null;while(entry){var cb=entry.callback;state.pendingcb--;cb(err);entry=entry.next}if(state.corkedRequestsFree){state.corkedRequestsFree.next=_this}else{state.corkedRequestsFree=_this}}}}).call(this,require("_process"))},{"./_stream_duplex":44,_process:42,buffer:5,"buffer-shims":4,"core-util-is":6,events:28,inherits:38,"process-nextick-args":41,"util-deprecate":57}],49:[function(require,module,exports){;var Buffer=require("buffer").Buffer;var bufferShim=require("buffer-shims");module.exports=BufferList;function BufferList(){this.head=null;this.tail=null;this.length=0}BufferList.prototype.push=function(v){var entry={data:v,next:null};if(this.length>0)this.tail.next=entry;else this.head=entry;this.tail=entry;++this.length};BufferList.prototype.unshift=function(v){var entry={data:v,next:this.head};if(this.length===0)this.tail=entry;this.head=entry;++this.length};BufferList.prototype.shift=function(){if(this.length===0)return;var ret=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return ret};BufferList.prototype.clear=function(){this.head=this.tail=null;this.length=0};BufferList.prototype.join=function(s){if(this.length===0)return"";var p=this.head;var ret=""+p.data;while(p=p.next){ret+=s+p.data}return ret};BufferList.prototype.concat=function(n){if(this.length===0)return bufferShim.alloc(0);if(this.length===1)return this.head.data;var ret=bufferShim.allocUnsafe(n>>>0);var p=this.head;var i=0;while(p){p.data.copy(ret,i);i+=p.data.length;p=p.next}return ret}},{buffer:5,"buffer-shims":4}],50:[function(require,module,exports){module.exports=require("./lib/_stream_passthrough.js")},{"./lib/_stream_passthrough.js":45}],51:[function(require,module,exports){(function(process){var Stream=function(){try{return require("st"+"ream")}catch(_){}}();exports=module.exports=require("./lib/_stream_readable.js");exports.Stream=Stream||exports;exports.Readable=exports;exports.Writable=require("./lib/_stream_writable.js");exports.Duplex=require("./lib/_stream_duplex.js");exports.Transform=require("./lib/_stream_transform.js");exports.PassThrough=require("./lib/_stream_passthrough.js");if(!process.browser&&process.env.READABLE_STREAM==="disable"&&Stream){module.exports=Stream}}).call(this,require("_process"))},{"./lib/_stream_duplex.js":44,"./lib/_stream_passthrough.js":45,"./lib/_stream_readable.js":46,"./lib/_stream_transform.js":47,"./lib/_stream_writable.js":48,_process:42}],52:[function(require,module,exports){module.exports=require("./lib/_stream_transform.js")},{"./lib/_stream_transform.js":47}],53:[function(require,module,exports){module.exports=require("./lib/_stream_writable.js")},{"./lib/_stream_writable.js":48}],54:[function(require,module,exports){module.exports=function(string){return string.replace(/[-\\^$*+?.()|[\]{}]/g,"\\$&")}},{}],55:[function(require,module,exports){module.exports=Stream;var EE=require("events").EventEmitter;var inherits=require("inherits");inherits(Stream,EE);Stream.Readable=require("readable-stream/readable.js");Stream.Writable=require("readable-stream/writable.js");Stream.Duplex=require("readable-stream/duplex.js");Stream.Transform=require("readable-stream/transform.js");Stream.PassThrough=require("readable-stream/passthrough.js");Stream.Stream=Stream;function Stream(){EE.call(this)}Stream.prototype.pipe=function(dest,options){var source=this;function ondata(chunk){if(dest.writable){if(false===dest.write(chunk)&&source.pause){source.pause()}}}source.on("data",ondata);function ondrain(){if(source.readable&&source.resume){source.resume()}}dest.on("drain",ondrain);if(!dest._isStdio&&(!options||options.end!==false)){source.on("end",onend);source.on("close",onclose)}var didOnEnd=false;function onend(){if(didOnEnd)return;didOnEnd=true;dest.end()}function onclose(){if(didOnEnd)return;didOnEnd=true;if(typeof dest.destroy==="function")dest.destroy()}function onerror(er){cleanup();if(EE.listenerCount(this,"error")===0){throw er}}source.on("error",onerror);dest.on("error",onerror);function cleanup(){source.removeListener("data",ondata);dest.removeListener("drain",ondrain);source.removeListener("end",onend);source.removeListener("close",onclose);source.removeListener("error",onerror);dest.removeListener("error",onerror);source.removeListener("end",cleanup);source.removeListener("close",cleanup);dest.removeListener("close",cleanup)}source.on("end",cleanup);source.on("close",cleanup);dest.on("close",cleanup);dest.emit("pipe",source);return dest}},{events:28,inherits:38,"readable-stream/duplex.js":43,"readable-stream/passthrough.js":50,"readable-stream/readable.js":51,"readable-stream/transform.js":52,"readable-stream/writable.js":53}],56:[function(require,module,exports){var Buffer=require("buffer").Buffer;var isBufferEncoding=Buffer.isEncoding||function(encoding){switch(encoding&&encoding.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return true;default:return false}};function assertEncoding(encoding){if(encoding&&!isBufferEncoding(encoding)){throw new Error("Unknown encoding: "+encoding)}}var StringDecoder=exports.StringDecoder=function(encoding){this.encoding=(encoding||"utf8").toLowerCase().replace(/[-_]/,"");assertEncoding(encoding);switch(this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2;this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3;this.detectIncompleteChar=base64DetectIncompleteChar;break;default:this.write=passThroughWrite;return}this.charBuffer=new Buffer(6);this.charReceived=0;this.charLength=0};StringDecoder.prototype.write=function(buffer){var charStr="";while(this.charLength){var available=buffer.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:buffer.length;buffer.copy(this.charBuffer,this.charReceived,0,available);this.charReceived+=available;if(this.charReceived<this.charLength){return""}buffer=buffer.slice(available,buffer.length);charStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var charCode=charStr.charCodeAt(charStr.length-1);if(charCode>=55296&&charCode<=56319){this.charLength+=this.surrogateSize;charStr="";continue}this.charReceived=this.charLength=0;if(buffer.length===0){return charStr}break}this.detectIncompleteChar(buffer);var end=buffer.length;if(this.charLength){buffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);end-=this.charReceived}charStr+=buffer.toString(this.encoding,0,end);var end=charStr.length-1;var charCode=charStr.charCodeAt(end);if(charCode>=55296&&charCode<=56319){var size=this.surrogateSize;this.charLength+=size;this.charReceived+=size;this.charBuffer.copy(this.charBuffer,size,0,size);buffer.copy(this.charBuffer,0,0,size);return charStr.substring(0,end)}return charStr};StringDecoder.prototype.detectIncompleteChar=function(buffer){var i=buffer.length>=3?3:buffer.length;for(;i>0;i--){var c=buffer[buffer.length-i];if(i==1&&c>>5==6){this.charLength=2;break}if(i<=2&&c>>4==14){this.charLength=3;break}if(i<=3&&c>>3==30){this.charLength=4;break}}this.charReceived=i};StringDecoder.prototype.end=function(buffer){var res="";if(buffer&&buffer.length)res=this.write(buffer);if(this.charReceived){var cr=this.charReceived;var buf=this.charBuffer;var enc=this.encoding;res+=buf.slice(0,cr).toString(enc)}return res};function passThroughWrite(buffer){return buffer.toString(this.encoding)}function utf16DetectIncompleteChar(buffer){this.charReceived=buffer.length%2;this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(buffer){this.charReceived=buffer.length%3;this.charLength=this.charReceived?3:0}},{buffer:5}],57:[function(require,module,exports){(function(global){module.exports=deprecate;function deprecate(fn,msg){if(config("noDeprecation")){return fn}var warned=false;function deprecated(){if(!warned){if(config("throwDeprecation")){throw new Error(msg)}else if(config("traceDeprecation")){console.trace(msg)}else{console.warn(msg)}warned=true}return fn.apply(this,arguments)}return deprecated}function config(name){try{if(!global.localStorage)return false}catch(_){return false}var val=global.localStorage[name];if(null==val)return false;return String(val).toLowerCase()==="true"}}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{}],58:[function(require,module,exports){module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;function extend(){var target={};for(var i=0;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target}},{}]},{},[1])(1)});


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: client/third-party/html-css-sanitizer-bundle.js  */ // From: http://google-caja.googlecode.com/svn/trunk
// Cloned like so: git svn clone -r5700:HEAD http://google-caja.googlecode.com/svn/trunk/
// where HEAD was r5707
// Then, in trunk/, run ant (without any args), and copy the generated file
//   ant-lib/com/google/caja/plugin/html-css-sanitizer-bundle.js

/* Copyright Google Inc.
 * Licensed under the Apache Licence Version 2.0
 * Autogenerated at Wed Dec 31 03:02:35 CET 2014
 * \@overrides window
 * \@provides cssSchema, CSS_PROP_BIT_QUANTITY, CSS_PROP_BIT_HASH_VALUE, CSS_PROP_BIT_NEGATIVE_QUANTITY, CSS_PROP_BIT_QSTRING, CSS_PROP_BIT_URL, CSS_PROP_BIT_UNRESERVED_WORD, CSS_PROP_BIT_UNICODE_RANGE, CSS_PROP_BIT_GLOBAL_NAME, CSS_PROP_BIT_PROPERTY_NAME */
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_QUANTITY = 1;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_HASH_VALUE = 2;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_NEGATIVE_QUANTITY = 4;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_QSTRING = 8;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_URL = 16;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_UNRESERVED_WORD = 64;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_UNICODE_RANGE = 128;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_GLOBAL_NAME = 512;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_PROPERTY_NAME = 1024;
var cssSchema = (function () {
    var L = [ [ 'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure',
        'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet',
        'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral',
        'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue',
        'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkkhaki',
        'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred',
        'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray',
        'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray',
        'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fuchsia',
        'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green',
        'greenyellow', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory',
        'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon',
        'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow',
        'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen',
        'lightskyblue', 'lightslategray', 'lightsteelblue', 'lightyellow',
        'lime', 'limegreen', 'linen', 'magenta', 'maroon', 'mediumaquamarine',
        'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen',
        'mediumslateblue', 'mediumspringgreen', 'mediumturquoise',
        'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose',
        'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive', 'olivedrab',
        'orange', 'orangered', 'orchid', 'palegoldenrod', 'palegreen',
        'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru',
        'pink', 'plum', 'powderblue', 'purple', 'red', 'rosybrown',
        'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen',
        'seashell', 'sienna', 'silver', 'skyblue', 'slateblue', 'slategray',
        'snow', 'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato',
        'transparent', 'turquoise', 'violet', 'wheat', 'white', 'whitesmoke',
        'yellow', 'yellowgreen' ], [ 'all-scroll', 'col-resize', 'crosshair',
        'default', 'e-resize', 'hand', 'help', 'move', 'n-resize', 'ne-resize',
        'no-drop', 'not-allowed', 'nw-resize', 'pointer', 'progress',
        'row-resize', 's-resize', 'se-resize', 'sw-resize', 'text',
        'vertical-text', 'w-resize', 'wait' ], [ 'armenian', 'decimal',
        'decimal-leading-zero', 'disc', 'georgian', 'lower-alpha',
        'lower-greek', 'lower-latin', 'lower-roman', 'square', 'upper-alpha',
        'upper-latin', 'upper-roman' ], [ '100', '200', '300', '400', '500',
        '600', '700', '800', '900', 'bold', 'bolder', 'lighter' ], [
        'block-level', 'inline-level', 'table-caption', 'table-cell',
        'table-column', 'table-column-group', 'table-footer-group',
        'table-header-group', 'table-row', 'table-row-group' ], [ 'condensed',
        'expanded', 'extra-condensed', 'extra-expanded', 'narrower',
        'semi-condensed', 'semi-expanded', 'ultra-condensed', 'ultra-expanded',
        'wider' ], [ 'inherit', 'inline', 'inline-block', 'inline-box',
        'inline-flex', 'inline-grid', 'inline-list-item', 'inline-stack',
        'inline-table', 'run-in' ], [ 'behind', 'center-left', 'center-right',
        'far-left', 'far-right', 'left-side', 'leftwards', 'right-side',
        'rightwards' ], [ 'large', 'larger', 'small', 'smaller', 'x-large',
        'x-small', 'xx-large', 'xx-small' ], [ 'dashed', 'dotted', 'double',
        'groove', 'outset', 'ridge', 'solid' ], [ 'ease', 'ease-in',
        'ease-in-out', 'ease-out', 'linear', 'step-end', 'step-start' ], [
        'at', 'closest-corner', 'closest-side', 'ellipse', 'farthest-corner',
        'farthest-side' ], [ 'baseline', 'middle', 'sub', 'super',
        'text-bottom', 'text-top' ], [ 'caption', 'icon', 'menu',
        'message-box', 'small-caption', 'status-bar' ], [ 'fast', 'faster',
        'slow', 'slower', 'x-fast', 'x-slow' ], [ 'above', 'below', 'higher',
        'level', 'lower' ], [ 'cursive', 'fantasy', 'monospace', 'sans-serif',
        'serif' ], [ 'loud', 'silent', 'soft', 'x-loud', 'x-soft' ], [
        'no-repeat', 'repeat-x', 'repeat-y', 'round', 'space' ], [ 'blink',
        'line-through', 'overline', 'underline' ], [ 'block', 'flex', 'grid',
        'table' ], [ 'high', 'low', 'x-high', 'x-low' ], [ 'nowrap', 'pre',
        'pre-line', 'pre-wrap' ], [ 'absolute', 'relative', 'static' ], [
        'alternate', 'alternate-reverse', 'reverse' ], [ 'border-box',
        'content-box', 'padding-box' ], [ 'capitalize', 'lowercase',
        'uppercase' ], [ 'child', 'female', 'male' ], [ '=', 'opacity' ], [
        'backwards', 'forwards' ], [ 'bidi-override', 'embed' ], [ 'bottom',
        'top' ], [ 'break-all', 'keep-all' ], [ 'clip', 'ellipsis' ], [
        'contain', 'cover' ], [ 'continuous', 'digits' ], [ 'end', 'start' ], [
        'flat', 'preserve-3d' ], [ 'hide', 'show' ], [ 'horizontal', 'vertical'
      ], [ 'inside', 'outside' ], [ 'italic', 'oblique' ], [ 'left', 'right' ],
      [ 'ltr', 'rtl' ], [ 'no-content', 'no-display' ], [ 'paused', 'running' ]
      , [ 'suppress', 'unrestricted' ], [ 'thick', 'thin' ], [ ',' ], [ '/' ],
      [ 'all' ], [ 'always' ], [ 'auto' ], [ 'avoid' ], [ 'both' ], [
        'break-word' ], [ 'center' ], [ 'circle' ], [ 'code' ], [ 'collapse' ],
      [ 'contents' ], [ 'fixed' ], [ 'hidden' ], [ 'infinite' ], [ 'inset' ], [
        'invert' ], [ 'justify' ], [ 'list-item' ], [ 'local' ], [ 'medium' ],
      [ 'mix' ], [ 'none' ], [ 'normal' ], [ 'once' ], [ 'repeat' ], [ 'scroll'
      ], [ 'separate' ], [ 'small-caps' ], [ 'spell-out' ], [ 'to' ], [
        'visible' ] ];
    var schema = {
      'animation': {
        'cssPropBits': 517,
        'cssLitGroup': [ L[ 10 ], L[ 24 ], L[ 29 ], L[ 45 ], L[ 48 ], L[ 54 ],
          L[ 63 ], L[ 71 ], L[ 72 ] ],
        'cssFns': [ 'cubic-bezier()', 'steps()' ]
      },
      'animation-delay': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 48 ] ],
        'cssFns': [ ]
      },
      'animation-direction': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 24 ], L[ 48 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'animation-duration': 'animation-delay',
      'animation-fill-mode': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 29 ], L[ 48 ], L[ 54 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'animation-iteration-count': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 48 ], L[ 63 ] ],
        'cssFns': [ ]
      },
      'animation-name': {
        'cssPropBits': 512,
        'cssLitGroup': [ L[ 48 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'animation-play-state': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 45 ], L[ 48 ] ],
        'cssFns': [ ]
      },
      'animation-timing-function': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 10 ], L[ 48 ] ],
        'cssFns': [ 'cubic-bezier()', 'steps()' ]
      },
      'appearance': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 71 ] ],
        'cssFns': [ ]
      },
      'azimuth': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 7 ], L[ 42 ], L[ 56 ] ],
        'cssFns': [ ]
      },
      'backface-visibility': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 59 ], L[ 62 ], L[ 80 ] ],
        'cssFns': [ ]
      },
      'background': {
        'cssPropBits': 23,
        'cssLitGroup': [ L[ 0 ], L[ 18 ], L[ 25 ], L[ 31 ], L[ 34 ], L[ 42 ],
          L[ 48 ], L[ 49 ], L[ 52 ], L[ 56 ], L[ 61 ], L[ 68 ], L[ 71 ], L[ 74
          ], L[ 75 ] ],
        'cssFns': [ 'image()', 'linear-gradient()', 'radial-gradient()',
          'repeating-linear-gradient()', 'repeating-radial-gradient()',
          'rgb()', 'rgba()' ]
      },
      'background-attachment': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 48 ], L[ 61 ], L[ 68 ], L[ 75 ] ],
        'cssFns': [ ]
      },
      'background-color': {
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'background-image': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 48 ], L[ 71 ] ],
        'cssFns': [ 'image()', 'linear-gradient()', 'radial-gradient()',
          'repeating-linear-gradient()', 'repeating-radial-gradient()' ]
      },
      'background-position': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 31 ], L[ 42 ], L[ 48 ], L[ 56 ] ],
        'cssFns': [ ]
      },
      'background-repeat': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 18 ], L[ 48 ], L[ 74 ] ],
        'cssFns': [ ]
      },
      'background-size': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 48 ], L[ 52 ] ],
        'cssFns': [ ]
      },
      'border': {
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 47 ], L[ 62 ], L[ 64 ], L[ 69 ], L[
            71 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'border-bottom': 'border',
      'border-bottom-color': 'background-color',
      'border-bottom-left-radius': {
        'cssPropBits': 5,
        'cssFns': [ ]
      },
      'border-bottom-right-radius': 'border-bottom-left-radius',
      'border-bottom-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 62 ], L[ 64 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'border-bottom-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ], L[ 69 ] ],
        'cssFns': [ ]
      },
      'border-collapse': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 59 ], L[ 76 ] ],
        'cssFns': [ ]
      },
      'border-color': 'background-color',
      'border-left': 'border',
      'border-left-color': 'background-color',
      'border-left-style': 'border-bottom-style',
      'border-left-width': 'border-bottom-width',
      'border-radius': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 49 ] ],
        'cssFns': [ ]
      },
      'border-right': 'border',
      'border-right-color': 'background-color',
      'border-right-style': 'border-bottom-style',
      'border-right-width': 'border-bottom-width',
      'border-spacing': 'border-bottom-left-radius',
      'border-style': 'border-bottom-style',
      'border-top': 'border',
      'border-top-color': 'background-color',
      'border-top-left-radius': 'border-bottom-left-radius',
      'border-top-right-radius': 'border-bottom-left-radius',
      'border-top-style': 'border-bottom-style',
      'border-top-width': 'border-bottom-width',
      'border-width': 'border-bottom-width',
      'bottom': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 52 ] ],
        'cssFns': [ ]
      },
      'box': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 60 ], L[ 71 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'box-shadow': {
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 48 ], L[ 64 ], L[ 71 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'box-sizing': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 25 ] ],
        'cssFns': [ ]
      },
      'caption-side': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 31 ] ],
        'cssFns': [ ]
      },
      'clear': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 42 ], L[ 54 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'clip': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 52 ] ],
        'cssFns': [ 'rect()' ]
      },
      'color': 'background-color',
      'content': {
        'cssPropBits': 8,
        'cssLitGroup': [ L[ 71 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'cue': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 71 ] ],
        'cssFns': [ ]
      },
      'cue-after': 'cue',
      'cue-before': 'cue',
      'cursor': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 1 ], L[ 48 ], L[ 52 ] ],
        'cssFns': [ ]
      },
      'direction': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 43 ] ],
        'cssFns': [ ]
      },
      'display': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 4 ], L[ 6 ], L[ 20 ], L[ 52 ], L[ 67 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'display-extras': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 67 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'display-inside': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 20 ], L[ 52 ] ],
        'cssFns': [ ]
      },
      'display-outside': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 4 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'elevation': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 15 ] ],
        'cssFns': [ ]
      },
      'empty-cells': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 38 ] ],
        'cssFns': [ ]
      },
      'filter': {
        'cssPropBits': 0,
        'cssFns': [ 'alpha()' ]
      },
      'float': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 42 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'font': {
        'cssPropBits': 73,
        'cssLitGroup': [ L[ 3 ], L[ 8 ], L[ 13 ], L[ 16 ], L[ 41 ], L[ 48 ], L[
            49 ], L[ 69 ], L[ 72 ], L[ 77 ] ],
        'cssFns': [ ]
      },
      'font-family': {
        'cssPropBits': 72,
        'cssLitGroup': [ L[ 16 ], L[ 48 ] ],
        'cssFns': [ ]
      },
      'font-size': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 8 ], L[ 69 ] ],
        'cssFns': [ ]
      },
      'font-stretch': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 5 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'font-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 41 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'font-variant': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 72 ], L[ 77 ] ],
        'cssFns': [ ]
      },
      'font-weight': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 3 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'height': 'bottom',
      'left': 'bottom',
      'letter-spacing': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 72 ] ],
        'cssFns': [ ]
      },
      'line-height': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 72 ] ],
        'cssFns': [ ]
      },
      'list-style': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 2 ], L[ 40 ], L[ 57 ], L[ 71 ] ],
        'cssFns': [ 'image()', 'linear-gradient()', 'radial-gradient()',
          'repeating-linear-gradient()', 'repeating-radial-gradient()' ]
      },
      'list-style-image': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 71 ] ],
        'cssFns': [ 'image()', 'linear-gradient()', 'radial-gradient()',
          'repeating-linear-gradient()', 'repeating-radial-gradient()' ]
      },
      'list-style-position': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 40 ] ],
        'cssFns': [ ]
      },
      'list-style-type': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 2 ], L[ 57 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'margin': 'bottom',
      'margin-bottom': 'bottom',
      'margin-left': 'bottom',
      'margin-right': 'bottom',
      'margin-top': 'bottom',
      'max-height': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 52 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'max-width': 'max-height',
      'min-height': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 52 ] ],
        'cssFns': [ ]
      },
      'min-width': 'min-height',
      'opacity': {
        'cssPropBits': 1,
        'cssFns': [ ]
      },
      'outline': {
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 47 ], L[ 62 ], L[ 64 ], L[ 65 ], L[
            69 ], L[ 71 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'outline-color': {
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 65 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'outline-style': 'border-bottom-style',
      'outline-width': 'border-bottom-width',
      'overflow': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 52 ], L[ 62 ], L[ 75 ], L[ 80 ] ],
        'cssFns': [ ]
      },
      'overflow-wrap': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 55 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'overflow-x': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 44 ], L[ 52 ], L[ 62 ], L[ 75 ], L[ 80 ] ],
        'cssFns': [ ]
      },
      'overflow-y': 'overflow-x',
      'padding': 'opacity',
      'padding-bottom': 'opacity',
      'padding-left': 'opacity',
      'padding-right': 'opacity',
      'padding-top': 'opacity',
      'page-break-after': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 42 ], L[ 51 ], L[ 52 ], L[ 53 ] ],
        'cssFns': [ ]
      },
      'page-break-before': 'page-break-after',
      'page-break-inside': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 52 ], L[ 53 ] ],
        'cssFns': [ ]
      },
      'pause': 'border-bottom-left-radius',
      'pause-after': 'border-bottom-left-radius',
      'pause-before': 'border-bottom-left-radius',
      'perspective': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 71 ] ],
        'cssFns': [ ]
      },
      'perspective-origin': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 31 ], L[ 42 ], L[ 56 ] ],
        'cssFns': [ ]
      },
      'pitch': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 21 ], L[ 69 ] ],
        'cssFns': [ ]
      },
      'pitch-range': 'border-bottom-left-radius',
      'play-during': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 52 ], L[ 70 ], L[ 71 ], L[ 74 ] ],
        'cssFns': [ ]
      },
      'position': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 23 ] ],
        'cssFns': [ ]
      },
      'quotes': {
        'cssPropBits': 8,
        'cssLitGroup': [ L[ 71 ] ],
        'cssFns': [ ]
      },
      'resize': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 39 ], L[ 54 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'richness': 'border-bottom-left-radius',
      'right': 'bottom',
      'speak': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 71 ], L[ 72 ], L[ 78 ] ],
        'cssFns': [ ]
      },
      'speak-header': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 51 ], L[ 73 ] ],
        'cssFns': [ ]
      },
      'speak-numeral': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 35 ] ],
        'cssFns': [ ]
      },
      'speak-punctuation': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 58 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'speech-rate': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 14 ], L[ 69 ] ],
        'cssFns': [ ]
      },
      'stress': 'border-bottom-left-radius',
      'table-layout': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 52 ], L[ 61 ] ],
        'cssFns': [ ]
      },
      'text-align': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 42 ], L[ 56 ], L[ 66 ] ],
        'cssFns': [ ]
      },
      'text-decoration': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 19 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'text-indent': 'border-bottom-left-radius',
      'text-overflow': {
        'cssPropBits': 8,
        'cssLitGroup': [ L[ 33 ] ],
        'cssFns': [ ]
      },
      'text-shadow': 'box-shadow',
      'text-transform': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 26 ], L[ 71 ] ],
        'cssFns': [ ]
      },
      'text-wrap': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 46 ], L[ 71 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'top': 'bottom',
      'transform': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 71 ] ],
        'cssFns': [ 'matrix()', 'perspective()', 'rotate()', 'rotate3d()',
          'rotatex()', 'rotatey()', 'rotatez()', 'scale()', 'scale3d()',
          'scalex()', 'scaley()', 'scalez()', 'skew()', 'skewx()', 'skewy()',
          'translate()', 'translate3d()', 'translatex()', 'translatey()',
          'translatez()' ]
      },
      'transform-origin': 'perspective-origin',
      'transform-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 37 ] ],
        'cssFns': [ ]
      },
      'transition': {
        'cssPropBits': 1029,
        'cssLitGroup': [ L[ 10 ], L[ 48 ], L[ 50 ], L[ 71 ] ],
        'cssFns': [ 'cubic-bezier()', 'steps()' ]
      },
      'transition-delay': 'animation-delay',
      'transition-duration': 'animation-delay',
      'transition-property': {
        'cssPropBits': 1024,
        'cssLitGroup': [ L[ 48 ], L[ 50 ] ],
        'cssFns': [ ]
      },
      'transition-timing-function': 'animation-timing-function',
      'unicode-bidi': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 30 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'vertical-align': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 12 ], L[ 31 ] ],
        'cssFns': [ ]
      },
      'visibility': 'backface-visibility',
      'voice-family': {
        'cssPropBits': 8,
        'cssLitGroup': [ L[ 27 ], L[ 48 ] ],
        'cssFns': [ ]
      },
      'volume': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 17 ], L[ 69 ] ],
        'cssFns': [ ]
      },
      'white-space': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 22 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'width': 'min-height',
      'word-break': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 32 ], L[ 72 ] ],
        'cssFns': [ ]
      },
      'word-spacing': 'letter-spacing',
      'word-wrap': 'overflow-wrap',
      'z-index': 'bottom',
      'zoom': 'line-height',
      'cubic-bezier()': 'animation-delay',
      'steps()': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 36 ], L[ 48 ] ],
        'cssFns': [ ]
      },
      'image()': {
        'cssPropBits': 18,
        'cssLitGroup': [ L[ 0 ], L[ 48 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'linear-gradient()': {
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 31 ], L[ 42 ], L[ 48 ], L[ 79 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'radial-gradient()': {
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 11 ], L[ 31 ], L[ 42 ], L[ 48 ], L[ 56 ],
          L[ 57 ] ],
        'cssFns': [ 'rgb()', 'rgba()' ]
      },
      'repeating-linear-gradient()': 'linear-gradient()',
      'repeating-radial-gradient()': 'radial-gradient()',
      'rgb()': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 48 ] ],
        'cssFns': [ ]
      },
      'rgba()': 'rgb()',
      'rect()': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 48 ], L[ 52 ] ],
        'cssFns': [ ]
      },
      'alpha()': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 28 ] ],
        'cssFns': [ ]
      },
      'matrix()': 'animation-delay',
      'perspective()': 'border-bottom-left-radius',
      'rotate()': 'border-bottom-left-radius',
      'rotate3d()': 'animation-delay',
      'rotatex()': 'border-bottom-left-radius',
      'rotatey()': 'border-bottom-left-radius',
      'rotatez()': 'border-bottom-left-radius',
      'scale()': 'animation-delay',
      'scale3d()': 'animation-delay',
      'scalex()': 'border-bottom-left-radius',
      'scaley()': 'border-bottom-left-radius',
      'scalez()': 'border-bottom-left-radius',
      'skew()': 'animation-delay',
      'skewx()': 'border-bottom-left-radius',
      'skewy()': 'border-bottom-left-radius',
      'translate()': 'animation-delay',
      'translate3d()': 'animation-delay',
      'translatex()': 'border-bottom-left-radius',
      'translatey()': 'border-bottom-left-radius',
      'translatez()': 'border-bottom-left-radius'
    };
    if (true) {
      for (var key in schema) {
        if ('string' === typeof schema[ key ] &&
          Object.hasOwnProperty.call(schema, key)) {
          schema[ key ] = schema[ schema[ key ] ];
        }
      }
    }
    return schema;
  })();
if (typeof window !== 'undefined') {
  window['cssSchema'] = cssSchema;
}
;
// Copyright (C) 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * A lexical scannar for CSS3 as defined at http://www.w3.org/TR/css3-syntax .
 *
 * @author Mike Samuel <mikesamuel@gmail.com>
 * \@provides lexCss, decodeCss
 * \@overrides window
 */

var lexCss;
var decodeCss;

(function () {

  /**
   * Decodes an escape sequence as specified in CSS3 section 4.1.
   * http://www.w3.org/TR/css3-syntax/#characters
   * @private
   */
  function decodeCssEscape(s) {
    var i = parseInt(s.substring(1), 16);
    // If parseInt didn't find a hex diigt, it returns NaN so return the
    // escaped character.
    // Otherwise, parseInt will stop at the first non-hex digit so there's no
    // need to worry about trailing whitespace.
    if (i > 0xffff) {
      // A supplemental codepoint.
      return i -= 0x10000,
        String.fromCharCode(
            0xd800 + (i >> 10),
            0xdc00 + (i & 0x3FF));
    } else if (i == i) {
      return String.fromCharCode(i);
    } else if (s[1] < ' ') {
      // "a backslash followed by a newline is ignored".
      return '';
    } else {
      return s[1];
    }
  }

  /**
   * Returns an equivalent CSS string literal given plain text: foo -> "foo".
   * @private
   */
  function escapeCssString(s, replacer) {
    return '"' + s.replace(/[\u0000-\u001f\\\"<>]/g, replacer) + '"';
  }

  /**
   * Maps chars to CSS escaped equivalents: "\n" -> "\\a ".
   * @private
   */
  function escapeCssStrChar(ch) {
    return cssStrChars[ch]
        || (cssStrChars[ch] = '\\' + ch.charCodeAt(0).toString(16) + ' ');
  }

  /**
   * Maps chars to URI escaped equivalents: "\n" -> "%0a".
   * @private
   */
  function escapeCssUrlChar(ch) {
    return cssUrlChars[ch]
        || (cssUrlChars[ch] = (ch < '\x10' ? '%0' : '%')
            + ch.charCodeAt(0).toString(16));
  }

  /**
   * Mapping of CSS special characters to escaped equivalents.
   * @private
   */
  var cssStrChars = {
    '\\': '\\\\'
  };

  /**
   * Mapping of CSS special characters to URL-escaped equivalents.
   * @private
   */
  var cssUrlChars = {
    '\\': '%5c'
  };

  // The comments below are copied from the CSS3 module syntax at
  // http://www.w3.org/TR/css3-syntax .
  // These string constants minify out when this is run-through closure
  // compiler.
  // Rules that have been adapted have comments prefixed with "Diff:", and
  // where rules have been combined to avoid back-tracking in the regex engine
  // or to work around limitations, there is a comment prefixed with
  // "NewRule:".

  // In the below, we assume CRLF and CR have been normalize to CR.

  // wc  ::=  #x9 | #xA | #xC | #xD | #x20
  var WC = '[\\t\\n\\f ]';
  // w  ::=  wc*
  var W = WC + '*';
  // nl  ::=  #xA | #xD #xA | #xD | #xC
  var NL = '[\\n\\f]';
  // nonascii  ::=  [#x80-#xD7FF#xE000-#xFFFD#x10000-#x10FFFF]
  // NewRule: Supplemental codepoints are represented as surrogate pairs in JS.
  var SURROGATE_PAIR = '[\\ud800-\\udbff][\\udc00-\\udfff]';
  var NONASCII = '[\\u0080-\\ud7ff\\ue000-\\ufffd]|' + SURROGATE_PAIR;
  // unicode  ::=  '\' [0-9a-fA-F]{1,6} wc?
  // NewRule: No point in having ESCAPE do (\\x|\\y)
  var UNICODE_TAIL = '[0-9a-fA-F]{1,6}' + WC + '?';
  var UNICODE = '\\\\' + UNICODE_TAIL;
  // escape  ::=  unicode
  //           | '\' [#x20-#x7E#x80-#xD7FF#xE000-#xFFFD#x10000-#x10FFFF]
  // NewRule: Below we use escape tail to efficiently match an escape or a
  // line continuation so we can decode string content.
  var ESCAPE_TAIL = '(?:' + UNICODE_TAIL
      + '|[\\u0020-\\u007e\\u0080-\\ud7ff\\ue000\\ufffd]|'
      + SURROGATE_PAIR + ')';
  var ESCAPE = '\\\\' + ESCAPE_TAIL;
  // urlchar  ::=  [#x9#x21#x23-#x26#x28-#x7E] | nonascii | escape
  var URLCHAR = '(?:[\\t\\x21\\x23-\\x26\\x28-\\x5b\\x5d-\\x7e]|'
      + NONASCII + '|' + ESCAPE + ')';
  // stringchar  ::= urlchar | #x20 | '\' nl
  // We ignore mismatched surrogate pairs inside strings, so stringchar
  // simplifies to a non-(quote|newline|backslash) or backslash any.
  // Since we normalize CRLF to a single code-unit, there is no special
  // handling needed for '\\' + CRLF.
  var STRINGCHAR = '[^\'"\\n\\f\\\\]|\\\\[\\s\\S]';
  // string  ::=  '"' (stringchar | "'")* '"' | "'" (stringchar | '"')* "'"
  var STRING = '"(?:\'|' + STRINGCHAR + ')*"'
      + '|\'(?:\"|' + STRINGCHAR + ')*\'';
  // num  ::=  [0-9]+ | [0-9]* '.' [0-9]+
  // Diff: We attach signs to num tokens.
  var NUM = '[-+]?(?:[0-9]+(?:[.][0-9]+)?|[.][0-9]+)';
  // nmstart  ::=  [a-zA-Z] | '_' | nonascii | escape
  var NMSTART = '(?:[a-zA-Z_]|' + NONASCII + '|' + ESCAPE + ')';
  // nmchar  ::=  [a-zA-Z0-9] | '-' | '_' | nonascii | escape
  var NMCHAR = '(?:[a-zA-Z0-9_-]|' + NONASCII + '|' + ESCAPE + ')';
  // name  ::=  nmchar+
  var NAME = NMCHAR + '+';
  // ident  ::=  '-'? nmstart nmchar*
  var IDENT = '-?' + NMSTART + NMCHAR + '*';

  // ATKEYWORD  ::=  '@' ident
  var ATKEYWORD = '@' + IDENT;
  // HASH  ::=  '#' name
  var HASH = '#' + NAME;
  // NUMBER  ::=  num
  var NUMBER = NUM;

  // NewRule: union of IDENT, ATKEYWORD, HASH, but excluding #[0-9].
  var WORD_TERM = '(?:@?-?' + NMSTART + '|#)' + NMCHAR + '*';

  // PERCENTAGE  ::=  num '%'
  var PERCENTAGE = NUM + '%';
  // DIMENSION  ::=  num ident
  var DIMENSION = NUM + IDENT;
  var NUMERIC_VALUE = NUM + '(?:%|' + IDENT + ')?';
  // URI  ::=  "url(" w (string | urlchar* ) w ")"
  var URI = 'url[(]' + W + '(?:' + STRING + '|' + URLCHAR + '*)' + W + '[)]';
  // UNICODE-RANGE  ::=  "U+" [0-9A-F?]{1,6} ('-' [0-9A-F]{1,6})?
  var UNICODE_RANGE = 'U[+][0-9A-F?]{1,6}(?:-[0-9A-F]{1,6})?';
  // CDO  ::=  "<\!--"
  var CDO = '<\!--';
  // CDC  ::=  "-->"
  var CDC = '-->';
  // S  ::=  wc+
  var S = WC + '+';
  // COMMENT  ::=  "/*" [^*]* '*'+ ([^/] [^*]* '*'+)* "/"
  // Diff: recognizes // comments.
  var COMMENT = '/(?:[*][^*]*[*]+(?:[^/][^*]*[*]+)*/|/[^\\n\\f]*)';
  // FUNCTION  ::=  ident '('
  // Diff: We exclude url explicitly.
  // TODO: should we be tolerant of "fn ("?
  var FUNCTION = '(?!url[(])' + IDENT + '[(]';
  // INCLUDES  ::=  "~="
  var INCLUDES = '~=';
  // DASHMATCH  ::=  "|="
  var DASHMATCH = '[|]=';
  // PREFIXMATCH  ::=  "^="
  var PREFIXMATCH = '[^]=';
  // SUFFIXMATCH  ::=  "$="
  var SUFFIXMATCH = '[$]=';
  // SUBSTRINGMATCH  ::=  "*="
  var SUBSTRINGMATCH = '[*]=';
  // NewRule: one rule for all the comparison operators.
  var CMP_OPS = '[~|^$*]=';
  // CHAR  ::=  any character not matched by the above rules, except for " or '
  // Diff: We exclude / and \ since they are handled above to prevent
  // /* without a following */ from combining when comments are concatenated.
  var CHAR = '[^"\'\\\\/]|/(?![/*])';
  // BOM  ::=  #xFEFF
  var BOM = '\\uFEFF';

  var CSS_TOKEN = new RegExp([
      BOM, UNICODE_RANGE, URI, FUNCTION, WORD_TERM, STRING, NUMERIC_VALUE,
      CDO, CDC, S, COMMENT, CMP_OPS, CHAR].join("|"), 'gi');

  var CSS_DECODER = new RegExp('\\\\(?:' + ESCAPE_TAIL + '|' + NL + ')', 'g');
  var URL_RE = new RegExp('^url\\(' + W + '["\']?|["\']?' + W + '\\)$', 'gi');
  /**
   * Decodes CSS escape sequences in a CSS string body.
   */
   decodeCss = function (css) {
     return css.replace(CSS_DECODER, decodeCssEscape);
   };

  /**
   * Given CSS Text, returns an array of normalized tokens.
   * @param {string} cssText
   * @return {Array.<string>} tokens where all ignorable token sequences have
   *    been reduced to a single {@code " "} and all strings and
   *    {@code url(...)} tokens have been normalized to use double quotes as
   *    delimiters and to not otherwise contain double quotes.
   */
  lexCss = function (cssText) {
    // Stringify input. Additionally, insert and remove a non-latin1 character
    // to force Firefox 33 to switch to a wide string representation, avoiding
    // a performance bug. This workaround should become unnecessary after
    // Firefox 34. https://bugzilla.mozilla.org/show_bug.cgi?id=1081175
    // https://code.google.com/p/google-caja/issues/detail?id=1941
    cssText = ('\uffff' + cssText).replace(/^\uffff/, '');

    // // Normalize CRLF & CR to LF.
    cssText = cssText.replace(/\r\n?/g, '\n');

    // Tokenize.
    var tokens = cssText.match(CSS_TOKEN) || [];
    var j = 0;
    var last = ' ';
    for (var i = 0, n = tokens.length; i < n; ++i) {
      // Normalize all escape sequences.  We will have to re-escape some
      // codepoints in string and url(...) bodies but we already know the
      // boundaries.
      // We might mistakenly treat a malformed identifier like \22\20\22 as a
      // string, but that will not break any valid stylesheets since we requote
      // and re-escape in string below.
      var tok = decodeCss(tokens[i]);
      var len = tok.length;
      var cc = tok.charCodeAt(0);
      tok =
          // All strings should be double quoted, and the body should never
          // contain a double quote.
          (cc == '"'.charCodeAt(0) || cc == '\''.charCodeAt(0))
          ? escapeCssString(tok.substring(1, len - 1), escapeCssStrChar)
          // A breaking ignorable token should is replaced with a single space.
          : (cc == '/'.charCodeAt(0) && len > 1  // Comment.
             || tok == '\\' || tok == CDC || tok == CDO || tok == '\ufeff'
             // Characters in W.
             || cc <= ' '.charCodeAt(0))
          ? ' '
          // Make sure that all url(...)s are double quoted.
          : /url\(/i.test(tok)
          ? 'url(' + escapeCssString(
            tok.replace(URL_RE, ''),
            escapeCssUrlChar)
            + ')'
          // Escapes in identifier like tokens will have been normalized above.
          : tok;
      // Merge adjacent space tokens.
      if (last != tok || tok != ' ') {
        tokens[j++] = last = tok;
      }
    }
    tokens.length = j;
    return tokens;
  };
})();

// Exports for closure compiler.
if (typeof window !== 'undefined') {
  window['lexCss'] = lexCss;
  window['decodeCss'] = decodeCss;
}
;
// Copyright (C) 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview
 * Implements RFC 3986 for parsing/formatting URIs.
 *
 * @author mikesamuel@gmail.com
 * \@provides URI
 * \@overrides window
 */

var URI = (function () {

/**
 * creates a uri from the string form.  The parser is relaxed, so special
 * characters that aren't escaped but don't cause ambiguities will not cause
 * parse failures.
 *
 * @return {URI|null}
 */
function parse(uriStr) {
  var m = ('' + uriStr).match(URI_RE_);
  if (!m) { return null; }
  return new URI(
      nullIfAbsent(m[1]),
      nullIfAbsent(m[2]),
      nullIfAbsent(m[3]),
      nullIfAbsent(m[4]),
      nullIfAbsent(m[5]),
      nullIfAbsent(m[6]),
      nullIfAbsent(m[7]));
}


/**
 * creates a uri from the given parts.
 *
 * @param scheme {string} an unencoded scheme such as "http" or null
 * @param credentials {string} unencoded user credentials or null
 * @param domain {string} an unencoded domain name or null
 * @param port {number} a port number in [1, 32768].
 *    -1 indicates no port, as does null.
 * @param path {string} an unencoded path
 * @param query {Array.<string>|string|null} a list of unencoded cgi
 *   parameters where even values are keys and odds the corresponding values
 *   or an unencoded query.
 * @param fragment {string} an unencoded fragment without the "#" or null.
 * @return {URI}
 */
function create(scheme, credentials, domain, port, path, query, fragment) {
  var uri = new URI(
      encodeIfExists2(scheme, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_),
      encodeIfExists2(
          credentials, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_),
      encodeIfExists(domain),
      port > 0 ? port.toString() : null,
      encodeIfExists2(path, URI_DISALLOWED_IN_PATH_),
      null,
      encodeIfExists(fragment));
  if (query) {
    if ('string' === typeof query) {
      uri.setRawQuery(query.replace(/[^?&=0-9A-Za-z_\-~.%]/g, encodeOne));
    } else {
      uri.setAllParameters(query);
    }
  }
  return uri;
}
function encodeIfExists(unescapedPart) {
  if ('string' == typeof unescapedPart) {
    return encodeURIComponent(unescapedPart);
  }
  return null;
};
/**
 * if unescapedPart is non null, then escapes any characters in it that aren't
 * valid characters in a url and also escapes any special characters that
 * appear in extra.
 *
 * @param unescapedPart {string}
 * @param extra {RegExp} a character set of characters in [\01-\177].
 * @return {string|null} null iff unescapedPart == null.
 */
function encodeIfExists2(unescapedPart, extra) {
  if ('string' == typeof unescapedPart) {
    return encodeURI(unescapedPart).replace(extra, encodeOne);
  }
  return null;
};
/** converts a character in [\01-\177] to its url encoded equivalent. */
function encodeOne(ch) {
  var n = ch.charCodeAt(0);
  return '%' + '0123456789ABCDEF'.charAt((n >> 4) & 0xf) +
      '0123456789ABCDEF'.charAt(n & 0xf);
}

/**
 * {@updoc
 *  $ normPath('foo/./bar')
 *  # 'foo/bar'
 *  $ normPath('./foo')
 *  # 'foo'
 *  $ normPath('foo/.')
 *  # 'foo'
 *  $ normPath('foo//bar')
 *  # 'foo/bar'
 * }
 */
function normPath(path) {
  return path.replace(/(^|\/)\.(?:\/|$)/g, '$1').replace(/\/{2,}/g, '/');
}

var PARENT_DIRECTORY_HANDLER = new RegExp(
    ''
    // A path break
    + '(/|^)'
    // followed by a non .. path element
    // (cannot be . because normPath is used prior to this RegExp)
    + '(?:[^./][^/]*|\\.{2,}(?:[^./][^/]*)|\\.{3,}[^/]*)'
    // followed by .. followed by a path break.
    + '/\\.\\.(?:/|$)');

var PARENT_DIRECTORY_HANDLER_RE = new RegExp(PARENT_DIRECTORY_HANDLER);

var EXTRA_PARENT_PATHS_RE = /^(?:\.\.\/)*(?:\.\.$)?/;

/**
 * Normalizes its input path and collapses all . and .. sequences except for
 * .. sequences that would take it above the root of the current parent
 * directory.
 * {@updoc
 *  $ collapse_dots('foo/../bar')
 *  # 'bar'
 *  $ collapse_dots('foo/./bar')
 *  # 'foo/bar'
 *  $ collapse_dots('foo/../bar/./../../baz')
 *  # 'baz'
 *  $ collapse_dots('../foo')
 *  # '../foo'
 *  $ collapse_dots('../foo').replace(EXTRA_PARENT_PATHS_RE, '')
 *  # 'foo'
 * }
 */
function collapse_dots(path) {
  if (path === null) { return null; }
  var p = normPath(path);
  // Only /../ left to flatten
  var r = PARENT_DIRECTORY_HANDLER_RE;
  // We replace with $1 which matches a / before the .. because this
  // guarantees that:
  // (1) we have at most 1 / between the adjacent place,
  // (2) always have a slash if there is a preceding path section, and
  // (3) we never turn a relative path into an absolute path.
  for (var q; (q = p.replace(r, '$1')) != p; p = q) {};
  return p;
}

/**
 * resolves a relative url string to a base uri.
 * @return {URI}
 */
function resolve(baseUri, relativeUri) {
  // there are several kinds of relative urls:
  // 1. //foo - replaces everything from the domain on.  foo is a domain name
  // 2. foo - replaces the last part of the path, the whole query and fragment
  // 3. /foo - replaces the the path, the query and fragment
  // 4. ?foo - replace the query and fragment
  // 5. #foo - replace the fragment only

  var absoluteUri = baseUri.clone();
  // we satisfy these conditions by looking for the first part of relativeUri
  // that is not blank and applying defaults to the rest

  var overridden = relativeUri.hasScheme();

  if (overridden) {
    absoluteUri.setRawScheme(relativeUri.getRawScheme());
  } else {
    overridden = relativeUri.hasCredentials();
  }

  if (overridden) {
    absoluteUri.setRawCredentials(relativeUri.getRawCredentials());
  } else {
    overridden = relativeUri.hasDomain();
  }

  if (overridden) {
    absoluteUri.setRawDomain(relativeUri.getRawDomain());
  } else {
    overridden = relativeUri.hasPort();
  }

  var rawPath = relativeUri.getRawPath();
  var simplifiedPath = collapse_dots(rawPath);
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
    simplifiedPath = simplifiedPath
        && simplifiedPath.replace(EXTRA_PARENT_PATHS_RE, '');
  } else {
    overridden = !!rawPath;
    if (overridden) {
      // resolve path properly
      if (simplifiedPath.charCodeAt(0) !== 0x2f /* / */) {  // path is relative
        var absRawPath = collapse_dots(absoluteUri.getRawPath() || '')
            .replace(EXTRA_PARENT_PATHS_RE, '');
        var slash = absRawPath.lastIndexOf('/') + 1;
        simplifiedPath = collapse_dots(
            (slash ? absRawPath.substring(0, slash) : '')
            + collapse_dots(rawPath))
            .replace(EXTRA_PARENT_PATHS_RE, '');
      }
    } else {
      simplifiedPath = simplifiedPath
          && simplifiedPath.replace(EXTRA_PARENT_PATHS_RE, '');
      if (simplifiedPath !== rawPath) {
        absoluteUri.setRawPath(simplifiedPath);
      }
    }
  }

  if (overridden) {
    absoluteUri.setRawPath(simplifiedPath);
  } else {
    overridden = relativeUri.hasQuery();
  }

  if (overridden) {
    absoluteUri.setRawQuery(relativeUri.getRawQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }

  if (overridden) {
    absoluteUri.setRawFragment(relativeUri.getRawFragment());
  }

  return absoluteUri;
}

/**
 * a mutable URI.
 *
 * This class contains setters and getters for the parts of the URI.
 * The <tt>getXYZ</tt>/<tt>setXYZ</tt> methods return the decoded part -- so
 * <code>uri.parse('/foo%20bar').getPath()</code> will return the decoded path,
 * <tt>/foo bar</tt>.
 *
 * <p>The raw versions of fields are available too.
 * <code>uri.parse('/foo%20bar').getRawPath()</code> will return the raw path,
 * <tt>/foo%20bar</tt>.  Use the raw setters with care, since
 * <code>URI::toString</code> is not guaranteed to return a valid url if a
 * raw setter was used.
 *
 * <p>All setters return <tt>this</tt> and so may be chained, a la
 * <code>uri.parse('/foo').setFragment('part').toString()</code>.
 *
 * <p>You should not use this constructor directly -- please prefer the factory
 * functions {@link uri.parse}, {@link uri.create}, {@link uri.resolve}
 * instead.</p>
 *
 * <p>The parameters are all raw (assumed to be properly escaped) parts, and
 * any (but not all) may be null.  Undefined is not allowed.</p>
 *
 * @constructor
 */
function URI(
    rawScheme,
    rawCredentials, rawDomain, port,
    rawPath, rawQuery, rawFragment) {
  this.scheme_ = rawScheme;
  this.credentials_ = rawCredentials;
  this.domain_ = rawDomain;
  this.port_ = port;
  this.path_ = rawPath;
  this.query_ = rawQuery;
  this.fragment_ = rawFragment;
  /**
   * @type {Array|null}
   */
  this.paramCache_ = null;
}

/** returns the string form of the url. */
URI.prototype.toString = function () {
  var out = [];
  if (null !== this.scheme_) { out.push(this.scheme_, ':'); }
  if (null !== this.domain_) {
    out.push('//');
    if (null !== this.credentials_) { out.push(this.credentials_, '@'); }
    out.push(this.domain_);
    if (null !== this.port_) { out.push(':', this.port_.toString()); }
  }
  if (null !== this.path_) { out.push(this.path_); }
  if (null !== this.query_) { out.push('?', this.query_); }
  if (null !== this.fragment_) { out.push('#', this.fragment_); }
  return out.join('');
};

URI.prototype.clone = function () {
  return new URI(this.scheme_, this.credentials_, this.domain_, this.port_,
                 this.path_, this.query_, this.fragment_);
};

URI.prototype.getScheme = function () {
  // HTML5 spec does not require the scheme to be lowercased but
  // all common browsers except Safari lowercase the scheme.
  return this.scheme_ && decodeURIComponent(this.scheme_).toLowerCase();
};
URI.prototype.getRawScheme = function () {
  return this.scheme_;
};
URI.prototype.setScheme = function (newScheme) {
  this.scheme_ = encodeIfExists2(
      newScheme, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_);
  return this;
};
URI.prototype.setRawScheme = function (newScheme) {
  this.scheme_ = newScheme ? newScheme : null;
  return this;
};
URI.prototype.hasScheme = function () {
  return null !== this.scheme_;
};


URI.prototype.getCredentials = function () {
  return this.credentials_ && decodeURIComponent(this.credentials_);
};
URI.prototype.getRawCredentials = function () {
  return this.credentials_;
};
URI.prototype.setCredentials = function (newCredentials) {
  this.credentials_ = encodeIfExists2(
      newCredentials, URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_);

  return this;
};
URI.prototype.setRawCredentials = function (newCredentials) {
  this.credentials_ = newCredentials ? newCredentials : null;
  return this;
};
URI.prototype.hasCredentials = function () {
  return null !== this.credentials_;
};


URI.prototype.getDomain = function () {
  return this.domain_ && decodeURIComponent(this.domain_);
};
URI.prototype.getRawDomain = function () {
  return this.domain_;
};
URI.prototype.setDomain = function (newDomain) {
  return this.setRawDomain(newDomain && encodeURIComponent(newDomain));
};
URI.prototype.setRawDomain = function (newDomain) {
  this.domain_ = newDomain ? newDomain : null;
  // Maintain the invariant that paths must start with a slash when the URI
  // is not path-relative.
  return this.setRawPath(this.path_);
};
URI.prototype.hasDomain = function () {
  return null !== this.domain_;
};


URI.prototype.getPort = function () {
  return this.port_ && decodeURIComponent(this.port_);
};
URI.prototype.setPort = function (newPort) {
  if (newPort) {
    newPort = Number(newPort);
    if (newPort !== (newPort & 0xffff)) {
      throw new Error('Bad port number ' + newPort);
    }
    this.port_ = '' + newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
URI.prototype.hasPort = function () {
  return null !== this.port_;
};


URI.prototype.getPath = function () {
  return this.path_ && decodeURIComponent(this.path_);
};
URI.prototype.getRawPath = function () {
  return this.path_;
};
URI.prototype.setPath = function (newPath) {
  return this.setRawPath(encodeIfExists2(newPath, URI_DISALLOWED_IN_PATH_));
};
URI.prototype.setRawPath = function (newPath) {
  if (newPath) {
    newPath = String(newPath);
    this.path_ = 
      // Paths must start with '/' unless this is a path-relative URL.
      (!this.domain_ || /^\//.test(newPath)) ? newPath : '/' + newPath;
  } else {
    this.path_ = null;
  }
  return this;
};
URI.prototype.hasPath = function () {
  return null !== this.path_;
};


URI.prototype.getQuery = function () {
  // From http://www.w3.org/Addressing/URL/4_URI_Recommentations.html
  // Within the query string, the plus sign is reserved as shorthand notation
  // for a space.
  return this.query_ && decodeURIComponent(this.query_).replace(/\+/g, ' ');
};
URI.prototype.getRawQuery = function () {
  return this.query_;
};
URI.prototype.setQuery = function (newQuery) {
  this.paramCache_ = null;
  this.query_ = encodeIfExists(newQuery);
  return this;
};
URI.prototype.setRawQuery = function (newQuery) {
  this.paramCache_ = null;
  this.query_ = newQuery ? newQuery : null;
  return this;
};
URI.prototype.hasQuery = function () {
  return null !== this.query_;
};

/**
 * sets the query given a list of strings of the form
 * [ key0, value0, key1, value1, ... ].
 *
 * <p><code>uri.setAllParameters(['a', 'b', 'c', 'd']).getQuery()</code>
 * will yield <code>'a=b&c=d'</code>.
 */
URI.prototype.setAllParameters = function (params) {
  if (typeof params === 'object') {
    if (!(params instanceof Array)
        && (params instanceof Object
            || Object.prototype.toString.call(params) !== '[object Array]')) {
      var newParams = [];
      var i = -1;
      for (var k in params) {
        var v = params[k];
        if ('string' === typeof v) {
          newParams[++i] = k;
          newParams[++i] = v;
        }
      }
      params = newParams;
    }
  }
  this.paramCache_ = null;
  var queryBuf = [];
  var separator = '';
  for (var j = 0; j < params.length;) {
    var k = params[j++];
    var v = params[j++];
    queryBuf.push(separator, encodeURIComponent(k.toString()));
    separator = '&';
    if (v) {
      queryBuf.push('=', encodeURIComponent(v.toString()));
    }
  }
  this.query_ = queryBuf.join('');
  return this;
};
URI.prototype.checkParameterCache_ = function () {
  if (!this.paramCache_) {
    var q = this.query_;
    if (!q) {
      this.paramCache_ = [];
    } else {
      var cgiParams = q.split(/[&\?]/);
      var out = [];
      var k = -1;
      for (var i = 0; i < cgiParams.length; ++i) {
        var m = cgiParams[i].match(/^([^=]*)(?:=(.*))?$/);
        // From http://www.w3.org/Addressing/URL/4_URI_Recommentations.html
        // Within the query string, the plus sign is reserved as shorthand
        // notation for a space.
        out[++k] = decodeURIComponent(m[1]).replace(/\+/g, ' ');
        out[++k] = decodeURIComponent(m[2] || '').replace(/\+/g, ' ');
      }
      this.paramCache_ = out;
    }
  }
};
/**
 * sets the values of the named cgi parameters.
 *
 * <p>So, <code>uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])
 * </code> yields <tt>foo?a=b&c=new&e=f</tt>.</p>
 *
 * @param key {string}
 * @param values {Array.<string>} the new values.  If values is a single string
 *   then it will be treated as the sole value.
 */
URI.prototype.setParameterValues = function (key, values) {
  // be nice and avoid subtle bugs where [] operator on string performs charAt
  // on some browsers and crashes on IE
  if (typeof values === 'string') {
    values = [ values ];
  }

  this.checkParameterCache_();
  var newValueIndex = 0;
  var pc = this.paramCache_;
  var params = [];
  for (var i = 0, k = 0; i < pc.length; i += 2) {
    if (key === pc[i]) {
      if (newValueIndex < values.length) {
        params.push(key, values[newValueIndex++]);
      }
    } else {
      params.push(pc[i], pc[i + 1]);
    }
  }
  while (newValueIndex < values.length) {
    params.push(key, values[newValueIndex++]);
  }
  this.setAllParameters(params);
  return this;
};
URI.prototype.removeParameter = function (key) {
  return this.setParameterValues(key, []);
};
/**
 * returns the parameters specified in the query part of the uri as a list of
 * keys and values like [ key0, value0, key1, value1, ... ].
 *
 * @return {Array.<string>}
 */
URI.prototype.getAllParameters = function () {
  this.checkParameterCache_();
  return this.paramCache_.slice(0, this.paramCache_.length);
};
/**
 * returns the value<b>s</b> for a given cgi parameter as a list of decoded
 * query parameter values.
 * @return {Array.<string>}
 */
URI.prototype.getParameterValues = function (paramNameUnescaped) {
  this.checkParameterCache_();
  var values = [];
  for (var i = 0; i < this.paramCache_.length; i += 2) {
    if (paramNameUnescaped === this.paramCache_[i]) {
      values.push(this.paramCache_[i + 1]);
    }
  }
  return values;
};
/**
 * returns a map of cgi parameter names to (non-empty) lists of values.
 * @return {Object.<string,Array.<string>>}
 */
URI.prototype.getParameterMap = function (paramNameUnescaped) {
  this.checkParameterCache_();
  var paramMap = {};
  for (var i = 0; i < this.paramCache_.length; i += 2) {
    var key = this.paramCache_[i++],
      value = this.paramCache_[i++];
    if (!(key in paramMap)) {
      paramMap[key] = [value];
    } else {
      paramMap[key].push(value);
    }
  }
  return paramMap;
};
/**
 * returns the first value for a given cgi parameter or null if the given
 * parameter name does not appear in the query string.
 * If the given parameter name does appear, but has no '<tt>=</tt>' following
 * it, then the empty string will be returned.
 * @return {string|null}
 */
URI.prototype.getParameterValue = function (paramNameUnescaped) {
  this.checkParameterCache_();
  for (var i = 0; i < this.paramCache_.length; i += 2) {
    if (paramNameUnescaped === this.paramCache_[i]) {
      return this.paramCache_[i + 1];
    }
  }
  return null;
};

URI.prototype.getFragment = function () {
  return this.fragment_ && decodeURIComponent(this.fragment_);
};
URI.prototype.getRawFragment = function () {
  return this.fragment_;
};
URI.prototype.setFragment = function (newFragment) {
  this.fragment_ = newFragment ? encodeURIComponent(newFragment) : null;
  return this;
};
URI.prototype.setRawFragment = function (newFragment) {
  this.fragment_ = newFragment ? newFragment : null;
  return this;
};
URI.prototype.hasFragment = function () {
  return null !== this.fragment_;
};

function nullIfAbsent(matchPart) {
  return ('string' == typeof matchPart) && (matchPart.length > 0)
         ? matchPart
         : null;
}




/**
 * a regular expression for breaking a URI into its component parts.
 *
 * <p>http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234 says
 * As the "first-match-wins" algorithm is identical to the "greedy"
 * disambiguation method used by POSIX regular expressions, it is natural and
 * commonplace to use a regular expression for parsing the potential five
 * components of a URI reference.
 *
 * <p>The following line is the regular expression for breaking-down a
 * well-formed URI reference into its components.
 *
 * <pre>
 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
 *  12            3  4          5       6  7        8 9
 * </pre>
 *
 * <p>The numbers in the second line above are only to assist readability; they
 * indicate the reference points for each subexpression (i.e., each paired
 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
 * For example, matching the above expression to
 * <pre>
 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
 * </pre>
 * results in the following subexpression matches:
 * <pre>
 *    $1 = http:
 *    $2 = http
 *    $3 = //www.ics.uci.edu
 *    $4 = www.ics.uci.edu
 *    $5 = /pub/ietf/uri/
 *    $6 = <undefined>
 *    $7 = <undefined>
 *    $8 = #Related
 *    $9 = Related
 * </pre>
 * where <undefined> indicates that the component is not present, as is the
 * case for the query component in the above example. Therefore, we can
 * determine the value of the five components as
 * <pre>
 *    scheme    = $2
 *    authority = $4
 *    path      = $5
 *    query     = $7
 *    fragment  = $9
 * </pre>
 *
 * <p>msamuel: I have modified the regular expression slightly to expose the
 * credentials, domain, and port separately from the authority.
 * The modified version yields
 * <pre>
 *    $1 = http              scheme
 *    $2 = <undefined>       credentials -\
 *    $3 = www.ics.uci.edu   domain       | authority
 *    $4 = <undefined>       port        -/
 *    $5 = /pub/ietf/uri/    path
 *    $6 = <undefined>       query without ?
 *    $7 = Related           fragment without #
 * </pre>
 */
var URI_RE_ = new RegExp(
      "^" +
      "(?:" +
        "([^:/?#]+)" +         // scheme
      ":)?" +
      "(?://" +
        "(?:([^/?#]*)@)?" +    // credentials
        "([^/?#:@]*)" +        // domain
        "(?::([0-9]+))?" +     // port
      ")?" +
      "([^?#]+)?" +            // path
      "(?:\\?([^#]*))?" +      // query
      "(?:#(.*))?" +           // fragment
      "$"
      );

var URI_DISALLOWED_IN_SCHEME_OR_CREDENTIALS_ = /[#\/\?@]/g;
var URI_DISALLOWED_IN_PATH_ = /[\#\?]/g;

URI.parse = parse;
URI.create = create;
URI.resolve = resolve;
URI.collapse_dots = collapse_dots;  // Visible for testing.

// lightweight string-based api for loadModuleMaker
URI.utils = {
  mimeTypeOf: function (uri) {
    var uriObj = parse(uri);
    if (/\.html$/.test(uriObj.getPath())) {
      return 'text/html';
    } else {
      return 'application/javascript';
    }
  },
  resolve: function (base, uri) {
    if (base) {
      return resolve(parse(base), parse(uri)).toString();
    } else {
      return '' + uri;
    }
  }
};


return URI;
})();

// Exports for closure compiler.
if (typeof window !== 'undefined') {
  window['URI'] = URI;
}
;
// Copyright (C) 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview
 * JavaScript support for client-side CSS sanitization.
 * The CSS property schema API is defined in CssPropertyPatterns.java which
 * is used to generate css-defs.js.
 *
 * @author mikesamuel@gmail.com
 * \@requires CSS_PROP_BIT_GLOBAL_NAME
 * \@requires CSS_PROP_BIT_HASH_VALUE
 * \@requires CSS_PROP_BIT_NEGATIVE_QUANTITY
 * \@requires CSS_PROP_BIT_PROPERTY_NAME
 * \@requires CSS_PROP_BIT_QUANTITY
 * \@requires CSS_PROP_BIT_QSTRING
 * \@requires CSS_PROP_BIT_UNRESERVED_WORD
 * \@requires CSS_PROP_BIT_URL
 * \@requires cssSchema
 * \@requires decodeCss
 * \@requires html4
 * \@requires URI
 * \@overrides window
 * \@requires parseCssStylesheet
 * \@provides sanitizeCssProperty
 * \@provides sanitizeCssSelectorList
 * \@provides sanitizeStylesheet
 * \@provides sanitizeStylesheetWithExternals
 * \@provides sanitizeMediaQuery
 */

var sanitizeCssProperty = undefined;
var sanitizeCssSelectorList = undefined;
var sanitizeStylesheet = undefined;
var sanitizeStylesheetWithExternals = undefined;
var sanitizeMediaQuery = undefined;

(function () {
  var NOEFFECT_URL = 'url("about:blank")';
  /**
   * The set of characters that need to be normalized inside url("...").
   * We normalize newlines because they are not allowed inside quoted strings,
   * normalize quote characters, angle-brackets, and asterisks because they
   * could be used to break out of the URL or introduce targets for CSS
   * error recovery.  We normalize parentheses since they delimit unquoted
   * URLs and calls and could be a target for error recovery.
   */
  var NORM_URL_REGEXP = /[\n\f\r\"\'()*<>]/g;
  /** The replacements for NORM_URL_REGEXP. */
  var NORM_URL_REPLACEMENTS = {
    '\n': '%0a',
    '\f': '%0c',
    '\r': '%0d',
    '"':  '%22',
    '\'': '%27',
    '(':  '%28',
    ')':  '%29',
    '*':  '%2a',
    '<':  '%3c',
    '>':  '%3e'
  };

  function normalizeUrl(s) {
    if ('string' === typeof s) {
      return 'url("' + s.replace(NORM_URL_REGEXP, normalizeUrlChar) + '")';
    } else {
      return NOEFFECT_URL;
    }
  }
  function normalizeUrlChar(ch) {
    return NORM_URL_REPLACEMENTS[ch];
  }

  // From RFC3986
  var URI_SCHEME_RE = new RegExp(
      '^' +
      '(?:' +
        '([^:\/?# ]+)' +         // scheme
      ':)?'
  );

  var ALLOWED_URI_SCHEMES = /^(?:https?|mailto)$/i;

  function resolveUri(baseUri, uri) {
    if (baseUri) {
      return URI.utils.resolve(baseUri, uri);
    }
    return uri;
  }

  function safeUri(uri, prop, naiveUriRewriter) {
    if (!naiveUriRewriter) { return null; }
    var parsed = ('' + uri).match(URI_SCHEME_RE);
    if (parsed && (!parsed[1] || ALLOWED_URI_SCHEMES.test(parsed[1]))) {
      return naiveUriRewriter(uri, prop);
    } else {
      return null;
    }
  }

  function withoutVendorPrefix(ident) {
    // http://stackoverflow.com/a/5411098/20394 has a fairly extensive list
    // of vendor prefices.
    // Blink has not declared a vendor prefix distinct from -webkit-
    // and http://css-tricks.com/tldr-on-vendor-prefix-drama/ discusses
    // how Mozilla recognizes some -webkit-
    // http://wiki.csswg.org/spec/vendor-prefixes talks more about
    // cross-implementation, and lists other prefixes.
    // Note: info is duplicated in CssValidator.java
    return ident.replace(
        /^-(?:apple|css|epub|khtml|moz|mso?|o|rim|wap|webkit|xv)-(?=[a-z])/, '');
  }

  /**
   * Given a series of normalized CSS tokens, applies a property schema, as
   * defined in CssPropertyPatterns.java, and sanitizes the tokens in place.
   * @param property a property name.
   * @param tokens as parsed by lexCss.  Modified in place.
   * @param opt_naiveUriRewriter a URI rewriter; an object with a "rewrite"
   *     function that takes a URL and returns a safe URL.
   * @param opt_baseURI a URI against which all relative URLs in tokens will
   *     be resolved.
   * @param opt_idSuffix {string} appended to all IDs to scope them.
   */
  sanitizeCssProperty = (function () {

    function unionArrays(arrs) {
      var map = {};
      for (var i = arrs.length; --i >= 0;) {
        var arr = arrs[i];
        for (var j = arr.length; --j >= 0;) {
          map[arr[j]] = ALLOWED_LITERAL;
        }
      }
      return map;
    }

    // Used as map value to avoid hasOwnProperty checks.
    var ALLOWED_LITERAL = {};

    return function sanitize(
        property, tokens, opt_naiveUriRewriter, opt_baseUri, opt_idSuffix) {

      var propertyKey = withoutVendorPrefix(property);
      var propertySchema = cssSchema[propertyKey];

      // If the property isn't recognized, elide all tokens.
      if (!propertySchema || 'object' !== typeof propertySchema) {
        tokens.length = 0;
        return;
      }

      var propBits = propertySchema['cssPropBits'];

      /**
       * Recurse to apply the appropriate function schema to the function call
       * that starts at {@code tokens[start]}.
       * @param {Array.<string>} tokens an array of CSS token that is modified
       *   in place so that all tokens involved in the function call
       *   (from {@code tokens[start]} to a close parenthesis) are folded to
       *   one token.
       * @param {number} start an index into tokens of a function token like
       *   {@code 'name('}.
       * @return the replacement function or the empty string if the function
       *   call is not both well-formed and allowed.
       */
      function sanitizeFunctionCall(tokens, start) {
        var parenDepth = 1, end = start + 1, n = tokens.length;
        while (end < n && parenDepth) {
          var token = tokens[end++];
          // Decrement if we see a close parenthesis, and increment if we
          // see a function.  Since url(...) are whole tokens, they will not
          // affect the token scanning.
          parenDepth += (token === ')' ? -1 : /^[^"']*\($/.test(token));
        }
        // Allow error-recovery from unclosed functions by ignoring the call and
        // so allowing resumption at the next ';'.
        if (!parenDepth) {
          var fnToken = tokens[start].toLowerCase();
          var bareFnToken = withoutVendorPrefix(fnToken);
          // Cut out the originals, so the caller can step by one token.
          var fnTokens = tokens.splice(start, end - start, '');
          var fns = propertySchema['cssFns'];
          // Look for a function that matches the name.
          for (var i = 0, nFns = fns.length; i < nFns; ++i) {
            if (fns[i].substring(0, bareFnToken.length) == bareFnToken) {
              fnTokens[0] = fnTokens[fnTokens.length - 1] = '';
              // Recurse and sanitize the function parameters.
              sanitize(
                fns[i],
                // The actual parameters to the function.
                fnTokens,
                opt_naiveUriRewriter, opt_baseUri);
              // Reconstitute the function from its parameter tokens.
              return fnToken + fnTokens.join(' ') + ')';
            }
          }
        }
        return '';
      }

      // Used to determine whether to treat quoted strings as URLs or
      // plain text content, and whether unrecognized keywords can be quoted
      // to treat ['Arial', 'Black'] equivalently to ['"Arial Black"'].
      var stringDisposition =
        propBits & (CSS_PROP_BIT_URL | CSS_PROP_BIT_UNRESERVED_WORD);
      // Used to determine what to do with unreserved words.
      var identDisposition =
        propBits & (CSS_PROP_BIT_GLOBAL_NAME | CSS_PROP_BIT_PROPERTY_NAME);

      // Used to join unquoted keywords into a single quoted string.
      var lastQuoted = NaN;
      var i = 0, k = 0;
      for (;i < tokens.length; ++i) {
        // Has the effect of normalizing hex digits, keywords,
        // and function names.
        var token = tokens[i].toLowerCase();
        var cc = token.charCodeAt(0), cc1, cc2, isnum1, isnum2, end;
        var litGroup, litMap;
        token = (

          // Strip out spaces.  Normally cssparser.js dumps these, but we
          // strip them out in case the content doesn't come via cssparser.js.
          (cc === ' '.charCodeAt(0)) ? ''
          : (cc === '"'.charCodeAt(0)) ? (  // Quoted string.
            (stringDisposition === CSS_PROP_BIT_URL)
            ? (opt_naiveUriRewriter
               // Sanitize and convert to url("...") syntax.
               // Treat url content as case-sensitive.
               ? (normalizeUrl(
                   // Rewrite to a safe URI.
                   safeUri(
                     // Convert to absolute URL
                     resolveUri(
                       opt_baseUri,
                       // Strip off quotes
                       decodeCss(tokens[i].substring(1, token.length - 1))),
                     propertyKey,
                     opt_naiveUriRewriter)))
              : '')
            : ((propBits & CSS_PROP_BIT_QSTRING)
               // Ambiguous when more than one bit set in disposition.
               && !(stringDisposition & (stringDisposition - 1)))
            ? token
            // Drop if quoted strings not allowed.
            : ''
          )

          // inherit is always allowed.
          : token === 'inherit'
          ? token

          : (
            litGroup = propertySchema['cssLitGroup'],
            litMap = (litGroup
                      ? (propertySchema['cssLitMap']
                         // Lazily compute the union from litGroup.
                         || (propertySchema['cssLitMap'] =
                             unionArrays(litGroup)))
                      : ALLOWED_LITERAL),  // A convenient empty object.
            (litMap[withoutVendorPrefix(token)] === ALLOWED_LITERAL)
          )
          // Token is in the literal map or matches extra.
          ? token

          // Preserve hash color literals if allowed.
          : (cc === '#'.charCodeAt(0) && /^#(?:[0-9a-f]{3}){1,2}$/.test(token))
          ? (propBits & CSS_PROP_BIT_HASH_VALUE ? token : '')

          : ('0'.charCodeAt(0) <= cc && cc <= '9'.charCodeAt(0))
          // A number starting with a digit.
          ? ((propBits & CSS_PROP_BIT_QUANTITY) ? token : '')

          // Normalize quantities so they don't start with a '.' or '+' sign and
          // make sure they all have an integer component so can't be confused
          // with a dotted identifier.
          // This can't be done in the lexer since ".4" is a valid rule part.
          : (cc1 = token.charCodeAt(1),
             cc2 = token.charCodeAt(2),
             isnum1 = '0'.charCodeAt(0) <= cc1 && cc1 <= '9'.charCodeAt(0),
             isnum2 = '0'.charCodeAt(0) <= cc2 && cc2 <= '9'.charCodeAt(0),
             // +.5 -> 0.5 if allowed.
             (cc === '+'.charCodeAt(0)
              && (isnum1 || (cc1 === '.'.charCodeAt(0) && isnum2))))
          ? ((propBits & CSS_PROP_BIT_QUANTITY)
            ? ((isnum1 ? '' : '0') + token.substring(1))
            : '')

          // -.5 -> -0.5 if allowed otherwise -> 0 if quantities allowed.
          : (cc === '-'.charCodeAt(0)
             && (isnum1 || (cc1 === '.'.charCodeAt(0) && isnum2)))
            ? ((propBits & CSS_PROP_BIT_NEGATIVE_QUANTITY)
               ? ((isnum1 ? '-' : '-0') + token.substring(1))
               : ((propBits & CSS_PROP_BIT_QUANTITY) ? '0' : ''))

          // .5 -> 0.5 if allowed.
          : (cc === '.'.charCodeAt(0) && isnum1)
          ? ((propBits & CSS_PROP_BIT_QUANTITY) ? '0' + token : '')

          // Handle url("...") by rewriting the body.
          : ('url("' === token.substring(0, 5))
          ? ((opt_naiveUriRewriter && (propBits & CSS_PROP_BIT_URL))
             ? normalizeUrl(safeUri(resolveUri(opt_baseUri,
                  tokens[i].substring(5, token.length - 2)),
                  propertyKey,
                  opt_naiveUriRewriter))
             : '')

          // Handle func(...) by recursing.
          // Functions start at a token like "name(" and end with a ")" taking
          // into account nesting.
          : (token.charAt(token.length-1) === '(')
          ? sanitizeFunctionCall(tokens, i)

          : (identDisposition
             && /^-?[a-z_][\w\-]*$/.test(token) && !/__$/.test(token))
          ? (opt_idSuffix && identDisposition === CSS_PROP_BIT_GLOBAL_NAME
             ? tokens[i] + opt_idSuffix  // use original token, not lowercased
             : (identDisposition === CSS_PROP_BIT_PROPERTY_NAME
                && cssSchema[token]
                && 'number' === typeof cssSchema[token].cssPropBits)
             ? token
             : '')

          : (/^\w+$/.test(token)
             && stringDisposition === CSS_PROP_BIT_UNRESERVED_WORD
             && (propBits & CSS_PROP_BIT_QSTRING))
          // Quote unrecognized keywords so font names like
          //    Arial Bold
          // ->
          //    "Arial Bold"
          ? (lastQuoted+1 === k
             // If the last token was also a keyword that was quoted, then
             // combine this token into that.
             ? (tokens[lastQuoted] = (
                  tokens[lastQuoted].substring(0, tokens[lastQuoted].length-1)
                  + ' ' + token + '"'),
                token = '')
             : (lastQuoted = k, '"' + token + '"'))

          // Disallowed.
          : '');
        if (token) {
          tokens[k++] = token;
        }
      }
      // For single URL properties, if the URL failed to pass the sanitizer,
      // then just drop it.
      if (k === 1 && tokens[0] === NOEFFECT_URL) { k = 0; }
      tokens.length = k;
    };
  })();

  // Note, duplicated in CssRewriter.java
  // Constructed from
  //    https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
  //    https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
  //    http://dev.w3.org/csswg/selectors4/
  var PSEUDO_SELECTOR_WHITELIST =
    new RegExp(
        '^(active|after|before|blank|checked|default|disabled'
        + '|drop|empty|enabled|first|first-child|first-letter'
        + '|first-line|first-of-type|fullscreen|focus|hover'
        + '|in-range|indeterminate|invalid|last-child|last-of-type'
        + '|left|link|only-child|only-of-type|optional|out-of-range'
        + '|placeholder-shown|read-only|read-write|required|right'
        + '|root|scope|user-error|valid|visited'
        + ')$');

  // Set of punctuation tokens that are child/sibling selectors.
  var COMBINATOR = {};
  COMBINATOR['>'] = COMBINATOR['+'] = COMBINATOR['~'] = COMBINATOR;

  /**
   * Given a series of tokens, returns a list of sanitized selectors.
   * @param {Array.<string>} selectors In the form produced by csslexer.js.
   * @param {{
   *     containerClass: ?string,
   *     idSuffix: string,
   *     tagPolicy: function(string, Array.<string>): ?Array.<string>,
   *     virtualizeAttrName: ?function(string, string): ?string
   *   }} virtualization An object like <pre<{
   *   containerClass: class name prepended to all selectors to scope them (if
   *       not null)
   *   idSuffix: appended to all IDs to scope them
   *   tagPolicy: As in html-sanitizer, used for rewriting element names.
   *   virtualizeAttrName: Rewrite a single attribute name for attribute
   *       selectors, or return null if not possible. Should be consistent
   *       with tagPolicy if possible.
   * }</pre>
   *    If containerClass is {@code "sfx"} and idSuffix is {@code "-sfx"}, the
   *    selector
   *    {@code ["a", "#foo", " ", "b", ".bar"]} will be namespaced to
   *    {@code [".sfx", " ", "a", "#foo-sfx", " ", "b", ".bar"]}.
   * @param {function(Array.<string>): boolean} opt_onUntranslatableSelector
   *     When a selector cannot be translated, this function is called with the
   *     non-whitespace/comment tokens comprising the selector and returns a
   *     value indicating whether to continue processing the selector list.
   *     If it returns falsey, then processing is aborted and null is returned.
   *     If not present or it returns truthy, then the complex selector is
   *     dropped from the selector list.
   * @return {Array.<string>}? an array of sanitized selectors.
   *    Null when the untraslatable compound selector handler aborts processing.
   */
  sanitizeCssSelectorList = function(
      selectors, virtualization, opt_onUntranslatableSelector) {
    var containerClass = virtualization.containerClass;
    var idSuffix = virtualization.idSuffix;
    var tagPolicy = virtualization.tagPolicy;
    var sanitized = [];

    // Remove any spaces that are not operators.
    var k = 0, i, inBrackets = 0, tok;
    for (i = 0; i < selectors.length; ++i) {
      tok = selectors[i];

      if (
            (tok == '(' || tok == '[') ? (++inBrackets, true)
          : (tok == ')' || tok == ']') ? (inBrackets && --inBrackets, true)
          : !(selectors[i] == ' '
              && (inBrackets || COMBINATOR[selectors[i-1]] === COMBINATOR
                  || COMBINATOR[selectors[i+1]] === COMBINATOR))
        ) {
        selectors[k++] = selectors[i];
      }
    }
    selectors.length = k;

    // Split around commas.  If there is an error in one of the comma separated
    // bits, we throw the whole away, but the failure of one selector does not
    // affect others except that opt_onUntranslatableSelector allows one to
    // treat the entire output as unusable.
    var n = selectors.length, start = 0;
    for (i = 0; i < n; ++i) {
      if (selectors[i] === ',') {  // TODO: ignore ',' inside brackets.
        if (!processComplexSelector(start, i)) { return null; }
        start = i+1;
      }
    }
    if (!processComplexSelector(start, n)) { return null; }


    function processComplexSelector(start, end) {
      // Space around commas is not an operator.
      if (selectors[start] === ' ') { ++start; }
      if (end-1 !== start && selectors[end] === ' ') { --end; }

      // Split the selector into element selectors, content around
      // space (ancestor operator) and '>' (descendant operator).
      var out = [];
      var lastOperator = start;
      var valid = true;  // True iff out contains a valid complex selector.
      for (var i = start; valid && i < end; ++i) {
        var tok = selectors[i];
        if (COMBINATOR[tok] === COMBINATOR || tok === ' ') {
          // We've found the end of a single link in the selector chain.
          if (!processCompoundSelector(lastOperator, i, tok)) {
            valid = false;
          } else {
            lastOperator = i+1;
          }
        }
      }
      if (!processCompoundSelector(lastOperator, end, '')) {
        valid = false;
      }

      function processCompoundSelector(start, end, combinator) {
        // Split the element selector into four parts.
        // DIV.foo#bar[href]:hover
        //    ^       ^     ^
        // el classes attrs pseudo
        var element, classId, attrs, pseudoSelector,
            tok,  // The current token
            // valid implies the parts above comprise a sanitized selector.
            valid = true;
        element = '';
        if (start < end) {
          tok = selectors[start];
          if (tok === '*') {
            ++start;
            element = tok;
          } else if (/^[a-zA-Z]/.test(tok)) {  // is an element selector
            var decision = tagPolicy(tok.toLowerCase(), []);
            if (decision) {
              if ('tagName' in decision) {
                tok = decision['tagName'];
              }
              ++start;
              element = tok;
            }
          }
        }
        classId = '';
        attrs = '';
        pseudoSelector = '';
        for (;valid && start < end; ++start) {
          tok = selectors[start];
          if (tok.charAt(0) === '#') {
            if (/^#_|__$|[^\w#:\-]/.test(tok)) {
              valid = false;
            } else {
              // Rewrite ID elements to include the suffix.
              classId += tok + idSuffix;
            }
          } else if (tok === '.') {
            if (++start < end
                && /^[0-9A-Za-z:_\-]+$/.test(tok = selectors[start])
                && !/^_|__$/.test(tok)) {
              classId += '.' + tok;
            } else {
              valid = false;
            }
          } else if (start + 1 < end && selectors[start] === '[') {
            ++start;
            var vAttr = selectors[start++].toLowerCase();
            // Schema lookup for type information
            var atype = html4.ATTRIBS[element + '::' + vAttr];
            if (atype !== +atype) { atype = html4.ATTRIBS['*::' + vAttr]; }

            var rAttr;
            // Consult policy
            // TODO(kpreid): Making this optional is a kludge to avoid changing
            // the public interface until we have a more well-structured design.
            if (virtualization.virtualizeAttrName) {
              rAttr = virtualization.virtualizeAttrName(element, vAttr);
              if (typeof rAttr !== 'string') {
                // rejected
                valid = false;
                rAttr = vAttr;
              }
              // don't reject even if not in schema
              if (valid && atype !== +atype) {
                atype = html4.atype['NONE'];
              }
            } else {
              rAttr = vAttr;
              if (atype !== +atype) {  // not permitted according to schema
                valid = false;
              }
            }

            var op = '', value = '', ignoreCase = false;
            if (/^[~^$*|]?=$/.test(selectors[start])) {
              op = selectors[start++];
              value = selectors[start++];
              // Quote identifier values.
              if (/^[0-9A-Za-z:_\-]+$/.test(value)) {
                value = '"' + value + '"';
              } else if (value === ']') {
                value = '""';
                --start;
              }
              // Reject unquoted values.
              if (!/^"([^\"\\]|\\.)*"$/.test(value)) {
                valid = false;
              }
              ignoreCase = selectors[start] === "i";
              if (ignoreCase) { ++start; }
            }
            if (selectors[start] !== ']') {
              ++start;
              valid = false;
            }
            // TODO: replace this with a lookup table that also provides a
            // function from operator and value to testable value.
            switch (atype) {
            case html4.atype['CLASSES']:
            case html4.atype['LOCAL_NAME']:
            case html4.atype['NONE']:
              break;
            case html4.atype['GLOBAL_NAME']:
            case html4.atype['ID']:
            case html4.atype['IDREF']:
              if ((op === '=' || op === '~=' || op === '$=')
                  && value != '""' && !ignoreCase) {
                // The suffix is case-sensitive, so we can't translate case
                // ignoring matches.
                value = '"'
                  + value.substring(1, value.length-1) + idSuffix
                  + '"';
              } else if (op === '|=' || op === '') {
                // Ok.  a|=b -> a == b || a.startsWith(b + "-") and since we
                // use "-" to separate the suffix from the identifier, we can
                // allow this through unmodified.
                // Existence checks are also ok.
              } else {
                // Can't correctly handle prefix and substring operators
                // without leaking information about the suffix.
                valid = false;
              }
              break;
            case html4.atype['URI']:
            case html4.atype['URI_FRAGMENT']:
              // URIs are rewritten, so we can't meanginfully translate URI
              // selectors besides the common a[href] one that is used to
              // distinguish links from naming anchors.
              if (op !== '') { valid = false; }
              break;
            // TODO: IDREFS
            default:
              valid = false;
            }
            if (valid) {
              attrs += '[' + rAttr.replace(/[^\w-]/g, '\\$&') + op + value +
                  (ignoreCase ? ' i]' : ']');
            }
          } else if (start < end && selectors[start] === ':') {
            tok = selectors[++start];
            if (PSEUDO_SELECTOR_WHITELIST.test(tok)) {
              pseudoSelector += ':' + tok;
            } else {
              break;
            }
          } else {
            break;  // Unrecognized token.
          }
        }
        if (start !== end) {  // Tokens not consumed.
          valid = false;
        }
        if (valid) {
          // ':' is allowed in identifiers, but is also the
          // pseudo-selector separator, so ':' in preceding parts needs to
          // be escaped.
          var selector = (element + classId).replace(/[^ .*#\w-]/g, '\\$&')
              + attrs + pseudoSelector + combinator;
          if (selector) { out.push(selector); }
        }
        return valid;
      }

      if (valid) {
        if (out.length) {
          var safeSelector = out.join('');

          // Namespace the selector so that it only matches under
          // a node with suffix in its CLASS attribute.
          if (containerClass !== null) {
            safeSelector = '.' + containerClass + ' ' + safeSelector;
          }

          sanitized.push(safeSelector);
        }  // else nothing there.
        return true;
      } else {
        return !opt_onUntranslatableSelector
          || opt_onUntranslatableSelector(selectors.slice(start, end));
      }
    }
    return sanitized;
  };

  (function () {
    var MEDIA_TYPE =
       '(?:'
       + 'all|aural|braille|embossed|handheld|print'
       + '|projection|screen|speech|tty|tv'
       + ')';

    // A white-list of media features extracted from the "Pseudo-BNF" in
    // http://dev.w3.org/csswg/mediaqueries4/#media1 and
    // https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries
    var MEDIA_FEATURE =
       '(?:'
       + '(?:min-|max-)?'
       + '(?:' + (
           '(?:device-)?'
         + '(?:aspect-ratio|height|width)'
         + '|color(?:-index)?'
         + '|monochrome'
         + '|orientation'
         + '|resolution'
       )
       + ')'
       + '|grid'
       + '|hover'
       + '|luminosity'
       + '|pointer'
       + '|scan'
       + '|script'
       + ')';

    var LENGTH_UNIT = '(?:p[cxt]|[cem]m|in|dpi|dppx|dpcm|%)';

    var CSS_VALUE =
       '-?(?:'
       + '[a-z]\\w+(?:-\\w+)*'  // An identifier
       // A length or scalar quantity, or a rational number.
       // dev.w3.org/csswg/mediaqueries4/#values introduces a ratio value-type
       // to allow matching aspect ratios like "4 / 3".
       + '|\\d+(?: / \\d+|(?:\\.\\d+)?' + LENGTH_UNIT + '?)'
       + ')';

    var MEDIA_EXPR =
       '\\( ' + MEDIA_FEATURE + ' (?:' + ': ' + CSS_VALUE + ' )?\\)';

    var MEDIA_QUERY =
       '(?:'
       + '(?:(?:(?:only|not) )?' + MEDIA_TYPE + '|' + MEDIA_EXPR + ')'
       // We use 'and ?' since 'and(' is a single CSS function token while
       // 'and (' parses to two separate tokens -- IDENT "and", DELIM "(".
       + '(?: and ?' + MEDIA_EXPR + ')*'
       + ')';

    var STARTS_WITH_KEYWORD_REGEXP = /^\w/;

    var MEDIA_QUERY_LIST_REGEXP = new RegExp(
      '^' + MEDIA_QUERY + '(?: , ' + MEDIA_QUERY + ')*' + '$',
      'i'
    );

    /**
     * Sanitizes a media query as defined in
     * http://dev.w3.org/csswg/mediaqueries4/#syntax
     * <blockquote>
     * Media Queries allow authors to adapt the style applied to a document
     * based on the environment the document is being rendered in.
     * </blockquote>
     *
     * @param {Array.<string>} cssTokens an array of tokens of the kind produced
     *   by cssLexers.
     * @return {string} a CSS media query.  This may be the empty string, or if
     *   the input is invalid, then a query that is always false.
     */
    sanitizeMediaQuery = function (cssTokens) {
      cssTokens = cssTokens.slice();
      // Strip out space tokens.
      var nTokens = cssTokens.length, k = 0;
      for (var i = 0; i < nTokens; ++i) {
        var tok = cssTokens[i];
        if (tok != ' ') { cssTokens[k++] = tok; }
      }
      cssTokens.length = k;
      var css = cssTokens.join(' ');
      css = (
        !css.length ? ''  // Always true per the spec.
        : !(MEDIA_QUERY_LIST_REGEXP.test(css)) ? 'not all'  // Always false.
        // Emit as-is if it starts with 'only', 'not' or a media type.
        : STARTS_WITH_KEYWORD_REGEXP.test(css) ? css
        : 'not all , ' + css  // Not ambiguous with a URL.
      );
      return css;
    };
  }());

  (function () {

    /**
     * Extracts a url out of an at-import rule of the form:
     *   \@import "mystyle.css";
     *   \@import url("mystyle.css");
     *
     * Returns null if no valid url was found.
     */
    function cssParseUri(candidate) {
      var string1 = /^\s*["]([^"]*)["]\s*$/;
      var string2 = /^\s*[']([^']*)[']\s*$/;
      var url1 = /^\s*url\s*[(]["]([^"]*)["][)]\s*$/;
      var url2 = /^\s*url\s*[(][']([^']*)['][)]\s*$/;
      // Not officially part of the CSS2.1 grammar
      // but supported by Chrome
      var url3 = /^\s*url\s*[(]([^)]*)[)]\s*$/;
      var match;
      if ((match = string1.exec(candidate))) {
        return match[1];
      } else if ((match = string2.exec(candidate))) {
        return match[1];
      } else if ((match = url1.exec(candidate))) {
        return match[1];
      } else if ((match = url2.exec(candidate))) {
        return match[1];
      } else if ((match = url3.exec(candidate))) {
        return match[1];
      }
      return null;
    }

    /**
     * @param {string} baseUri a string against which relative urls are
     *    resolved.
     * @param {string} cssText a string containing a CSS stylesheet.
     * @param {{
     *     containerClass: ?string,
     *     idSuffix: string,
     *     tagPolicy: function(string, Array.<string>): ?Array.<string>,
     *     virtualizeAttrName: ?function(string, string): ?string
     *   }} virtualization An object like <pre<{
     *   containerClass: class name prepended to all selectors to scope them (if
     *       not null)
     *   idSuffix: appended to all IDs to scope them
     *   tagPolicy: As in html-sanitizer, used for rewriting element names.
     *   virtualizeAttrName: Rewrite a single attribute name for attribute
     *       selectors, or return null if not possible. Should be consistent
     *       with tagPolicy if possible. Optional.
     * }</pre>
     *    If containerClass is {@code "sfx"} and idSuffix is {@code "-sfx"}, the
     *    selector
     *    {@code ["a", "#foo", " ", "b", ".bar"]} will be namespaced to
     *    {@code [".sfx", " ", "a", "#foo-sfx", " ", "b", ".bar"]}.
     * @param {function(string, string)} naiveUriRewriter maps URLs of media
     *    (images, sounds) that appear as CSS property values to sanitized
     *    URLs or null if the URL should not be allowed as an external media
     *    file in sanitized CSS.
     * @param {undefined|function({toString: function ():string}, boolean)}
     *     continuation
     *     callback that receives the result of loading imported CSS.
     *     The callback is called with
     *     (cssContent : function ():string, moreToCome : boolean)
     *     where cssContent is the CSS at the imported URL, and moreToCome is
     *     true when the external URL itself loaded other external URLs.
     *     If the output of the original call is stringified when moreToCome is
     *     false, then it will be complete.
     * @param {Array.<number>} opt_importCount the number of imports that need
     *     to be satisfied before there is no more pending content.
     * @return {{result:{toString:function ():string},moreToCome:boolean}}
     *     the CSS text, and a flag that indicates whether there are pending
     *     imports that will be passed to continuation.
     */
    function sanitizeStylesheetInternal(
        baseUri, cssText, virtualization, naiveUriRewriter, naiveUriFetcher,
        continuation, opt_importCount) {
      var safeCss = void 0;
      // Return a result with moreToCome===true when the last import has been
      // sanitized.
      var importCount = opt_importCount || [0];
      // A stack describing the { ... } regions.
      // Null elements indicate blocks that should not be emitted.
      var blockStack = [];
      // True when the content of the current block should be left off safeCss.
      var elide = false;
      parseCssStylesheet(
          cssText,
          {
            'startStylesheet': function () {
              safeCss = [];
            },
            'endStylesheet': function () {
            },
            'startAtrule': function (atIdent, headerArray) {
              if (elide) {
                atIdent = null;
              } else if (atIdent === '@media') {
                safeCss.push('@media', ' ', sanitizeMediaQuery(headerArray));
              } else if (atIdent === '@keyframes'
                         || atIdent === '@-webkit-keyframes') {
                var animationId = headerArray[0];
                if (headerArray.length === 1
                    && !/__$|[^\w\-]/.test(animationId)) {
                  safeCss.push(
                      atIdent, ' ', animationId + virtualization.idSuffix);
                  atIdent = '@keyframes';
                } else {
                  atIdent = null;
                }
              } else {
                if (atIdent === '@import' && headerArray.length > 0) {
                  atIdent = null;
                  if ('function' === typeof continuation) {
                    var mediaQuery = sanitizeMediaQuery(headerArray.slice(1));
                    if (mediaQuery !== 'not all') {
                      ++importCount[0];
                      var placeholder = [];
                      safeCss.push(placeholder);
                      var cssUrl = safeUri(
                          resolveUri(baseUri, cssParseUri(headerArray[0])),
                          function(result) {
                            var sanitized = sanitizeStylesheetInternal(
                                cssUrl, result.html, virtualization,
                                naiveUriRewriter, naiveUriFetcher,
                                continuation, importCount);
                            --importCount[0];
                            var safeImportedCss = mediaQuery
                              ? {
                                toString: function () {
                                  return (
                                    '@media ' + mediaQuery + ' {'
                                    + sanitized.result + '}'
                                  );
                                }
                              }
                              : sanitized.result;
                            placeholder[0] = safeImportedCss;
                            continuation(safeImportedCss, !!importCount[0]);
                          },
                          naiveUriFetcher);
                    }
                  } else {
                    // TODO: Use a logger instead.
                    if (window.console) {
                      window.console.log(
                          '@import ' + headerArray.join(' ') + ' elided');
                    }
                  }
                }
              }
              elide = !atIdent;
              blockStack.push(atIdent);
            },
            'endAtrule': function () {
              blockStack.pop();
              if (!elide) {
                safeCss.push(';');
              }
              checkElide();
            },
            'startBlock': function () {
              // There are no bare blocks in CSS, so we do not change the
              // block stack here, but instead in the events that bracket
              // blocks.
              if (!elide) {
                safeCss.push('{');
              }
            },
            'endBlock': function () {
              if (!elide) {
                safeCss.push('}');
                elide = true;  // skip any semicolon from endAtRule.
              }
            },
            'startRuleset': function (selectorArray) {
              if (!elide) {
                var selector = void 0;
                if (blockStack[blockStack.length - 1] === '@keyframes') {
                  // Allow [from | to | <percentage>]
                  selector = selectorArray.join(' ')
                    .match(/^ *(?:from|to|\d+(?:\.\d+)?%) *(?:, *(?:from|to|\d+(?:\.\d+)?%) *)*$/i);
                  elide = !selector;
                  if (selector) { selector = selector[0].replace(/ +/g, ''); }
                } else {
                  var selectors = sanitizeCssSelectorList(
                      selectorArray, virtualization);
                  if (!selectors || !selectors.length) {
                    elide = true;
                  } else {
                    selector = selectors.join(', ');
                  }
                }
                if (!elide) {
                  safeCss.push(selector, '{');
                }
              }
              blockStack.push(null);
            },
            'endRuleset': function () {
              blockStack.pop();
              if (!elide) {
                safeCss.push('}');
              }
              checkElide();
            },
            'declaration': function (property, valueArray) {
              if (!elide) {
                var isImportant = false;
                var nValues = valueArray.length;
                if (nValues >= 2
                    && valueArray[nValues - 2] === '!'
                    && valueArray[nValues - 1].toLowerCase() === 'important') {
                  isImportant = true;
                  valueArray.length -= 2;
                }
                sanitizeCssProperty(
                    property, valueArray, naiveUriRewriter, baseUri,
                    virtualization.idSuffix);
                if (valueArray.length) {
                  safeCss.push(
                      property, ':', valueArray.join(' '),
                      isImportant ? ' !important;' : ';');
                }
              }
            }
          });
      function checkElide() {
        elide = blockStack.length && blockStack[blockStack.length-1] === null;
      }
      return {
        result : { toString: function () { return safeCss.join(''); } },
        moreToCome : !!importCount[0]
      };
    }

    sanitizeStylesheet = function (
        baseUri, cssText, virtualization, naiveUriRewriter) {
      return sanitizeStylesheetInternal(
          baseUri, cssText, virtualization,
          naiveUriRewriter, undefined, undefined).result.toString();
    };

    sanitizeStylesheetWithExternals = function (
        baseUri, cssText, virtualization, naiveUriRewriter, naiveUriFetcher,
        continuation) {
      return sanitizeStylesheetInternal(
          baseUri, cssText, virtualization,
          naiveUriRewriter, naiveUriFetcher, continuation);
    };
  })();
})();

// Exports for closure compiler.
if (typeof window !== 'undefined') {
  window['sanitizeCssProperty'] = sanitizeCssProperty;
  window['sanitizeCssSelectorList'] = sanitizeCssSelectorList;
  window['sanitizeStylesheet'] = sanitizeStylesheet;
  window['sanitizeMediaQuery'] = sanitizeMediaQuery;
}
;
// Copyright (C) 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview
 * Utilities for dealing with CSS source code.
 *
 * @author mikesamuel@gmail.com
 * \@requires lexCss
 * \@overrides window
 * \@provides parseCssStylesheet, parseCssDeclarations
 */

// The Turkish i seems to be a non-issue, but abort in case it is.
if ('I'.toLowerCase() !== 'i') { throw 'I/i problem'; }

/**
 * parseCssStylesheet takes a chunk of CSS text and a handler object with
 * methods that it calls as below:
 * <pre>
 * // At the beginning of a stylesheet.
 * handler.startStylesheet();
 *
 * // For an @foo rule ended by a semicolon: @import "foo.css";
 * handler.startAtrule('@import', ['"foo.css"']);
 * handler.endAtrule();
 *
 * // For an @foo rule ended with a block. @media print { ... }
 * handler.startAtrule('@media', ['print']);
 * handler.startBlock();
 * // Calls to contents elided.  Probably selectors and declarations as below.
 * handler.endBlock();
 * handler.endAtrule();
 *
 * // For a ruleset: p.clazz q, s { color: blue; }
 * handler.startRuleset(['p', '.', 'clazz', ' ', 'q', ',', ' ', 's']);
 * handler.declaration('color', ['blue']);
 * handler.endRuleset();
 *
 * // At the end of a stylesheet.
 * handler.endStylesheet();
 * </pre>
 * When errors are encountered, the parser drops the useless tokens and
 * attempts to resume parsing.
 *
 * @param {string} cssText CSS3 content to parse as a stylesheet.
 * @param {Object} handler An object like <pre>{
 *   startStylesheet: function () { ... },
 *   endStylesheet: function () { ... },
 *   startAtrule: function (atIdent, headerArray) { ... },
 *   endAtrule: function () { ... },
 *   startBlock: function () { ... },
 *   endBlock: function () { ... },
 *   startRuleset: function (selectorArray) { ... },
 *   endRuleset: function () { ... },
 *   declaration: function (property, valueArray) { ... },
 * }</pre>
 */
var parseCssStylesheet;

/**
 * parseCssDeclarations parses a run of declaration productions as seen in the
 * body of the HTML5 {@code style} attribute.
 *
 * @param {string} cssText CSS3 content to parse as a run of declarations.
 * @param {Object} handler An object like <pre>{
 *   declaration: function (property, valueArray) { ... },
 * }</pre>
 */
var parseCssDeclarations;

(function () {
  // stylesheet  : [ CDO | CDC | S | statement ]*;
  parseCssStylesheet = function(cssText, handler) {
    var toks = lexCss(cssText);
    if (handler['startStylesheet']) { handler['startStylesheet'](); }
    for (var i = 0, n = toks.length; i < n;) {
      // CDO and CDC ("<!--" and "-->") are converted to space by the lexer.
      i = toks[i] === ' ' ? i+1 : statement(toks, i, n, handler);
    }
    if (handler['endStylesheet']) { handler['endStylesheet'](); }
  };

  // statement   : ruleset | at-rule;
  function statement(toks, i, n, handler) {
    if (i < n) {
      var tok = toks[i];
      if (tok.charAt(0) === '@') {
        return atrule(toks, i, n, handler, true);
      } else {
        return ruleset(toks, i, n, handler);
      }
    } else {
      return i;
    }
  }

  // at-rule     : ATKEYWORD S* any* [ block | ';' S* ];
  function atrule(toks, i, n, handler, blockok) {
    var start = i++;
    while (i < n && toks[i] !== '{' && toks[i] !== ';') {
      ++i;
    }
    if (i < n && (blockok || toks[i] === ';')) {
      var s = start+1, e = i;
      if (s < n && toks[s] === ' ') { ++s; }
      if (e > s && toks[e-1] === ' ') { --e; }
      if (handler['startAtrule']) {
        handler['startAtrule'](toks[start].toLowerCase(), toks.slice(s, e));
      }
      i = (toks[i] === '{')
          ? block(toks, i, n, handler)
          : i+1;  // Skip over ';'
      if (handler['endAtrule']) {
        handler['endAtrule']();
      }
    }
    // Else we reached end of input or are missing a semicolon.
    // Drop the rule on the floor.
    return i;
  }

  // block       : '{' S* [ any | block | ATKEYWORD S* | ';' S* ]* '}' S*;
   // Assumes the leading '{' has been verified by callers.
  function block(toks, i, n, handler) {
    ++i; //  skip over '{'
    if (handler['startBlock']) { handler['startBlock'](); }
    while (i < n) {
      var ch = toks[i].charAt(0);
      if (ch == '}') {
        ++i;
        break;
      }
      if (ch === ' ' || ch === ';') {
        i = i+1;
      } else if (ch === '@') {
        i = atrule(toks, i, n, handler, false);
      } else if (ch === '{') {
        i = block(toks, i, n, handler);
      } else {
        // Instead of using (any* block) to subsume ruleset we allow either
        // blocks or rulesets with a non-blank selector.
        // This is more restrictive but does not require atrule specific
        // parse tree fixup to realize that the contents of the block in
        //    @media print { ... }
        // is a ruleset.  We just don't care about any block carrying at-rules
        // whose body content is not ruleset content.
        i = ruleset(toks, i, n, handler);
      }
    }
    if (handler['endBlock']) { handler['endBlock'](); }
    return i;
  }

  // ruleset    : selector? '{' S* declaration? [ ';' S* declaration? ]* '}' S*;
  function ruleset(toks, i, n, handler) {
    // toks[s:e] are the selector tokens including internal whitespace.
    var s = i, e = selector(toks, i, n, true);
    if (e < 0) {
      // Skip malformed content per selector calling convention.
      e = ~e;
      // Make sure we skip at least one token.
      return e === s ? e+1 : e;
    }
    var tok = toks[e];
    if (tok !== '{') {
      // Make sure we skip at least one token.
      return e === s ? e+1 : e;
    }
    i = e+1;  // Skip over '{'
    // Don't include any trailing space in the selector slice.
    if (e > s && toks[e-1] === ' ') { --e; }
    if (handler['startRuleset']) {
      handler['startRuleset'](toks.slice(s, e));
    }
    while (i < n) {
      tok = toks[i];
      if (tok === '}') {
        ++i;
        break;
      }
      if (tok === ' ') {
        i = i+1;
      } else {
        i = declaration(toks, i, n, handler);
      }
    }
    if (handler['endRuleset']) {
      handler['endRuleset']();
    }
    return i;
  }

  // selector    : any+;
  // any         : [ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
  //               | DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
  //               | FUNCTION S* any* ')' | DASHMATCH | '(' S* any* ')'
  //               | '[' S* any* ']' ] S*;
  // A negative return value, rv, indicates the selector was malformed and
  // the index at which we stopped is ~rv.
  function selector(toks, i, n, allowSemi) {
    var s = i;
    // The definition of any above can be summed up as
    //   "any run of token except ('[', ']', '(', ')', ':', ';', '{', '}')
    //    or nested runs of parenthesized tokens or square bracketed tokens".
    // Spaces are significant in the selector.
    // Selector is used as (selector?) so the below looks for (any*) for
    // simplicity.
    var tok;
    // Keeping a stack pointer actually causes this to minify better since
    // ".length" and ".push" are a lo of chars.
    var brackets = [], stackLast = -1;
    for (;i < n; ++i) {
      tok = toks[i].charAt(0);
      if (tok === '[' || tok === '(') {
        brackets[++stackLast] = tok;
      } else if ((tok === ']' && brackets[stackLast] === '[') ||
                 (tok === ')' && brackets[stackLast] === '(')) {
        --stackLast;
      } else if (tok === '{' || tok === '}' || tok === ';' || tok === '@'
                 || (tok === ':' && !allowSemi)) {
        break;
      }
    }
    if (stackLast >= 0) {
      // Returns the bitwise inverse of i+1 to indicate an error in the
      // token stream so that clients can ignore it.
      i = ~(i+1);
    }
    return i;
  }

  var ident = /^-?[a-z]/i;

  function skipDeclaration(toks, i, n) {
    // TODO(felix8a): maybe skip balanced pairs of {}
    while (i < n && toks[i] !== ';' && toks[i] !== '}') { ++i; }
    return i < n && toks[i] === ';' ? i+1 : i;
  }

  // declaration : property ':' S* value;
  // property    : IDENT S*;
  // value       : [ any | block | ATKEYWORD S* ]+;
  function declaration(toks, i, n, handler) {
    var property = toks[i++];
    if (!ident.test(property)) {
      return skipDeclaration(toks, i, n);
    }
    var tok;
    if (i < n && toks[i] === ' ') { ++i; }
    if (i == n || toks[i] !== ':') {
      return skipDeclaration(toks, i, n);
    }
    ++i;
    if (i < n && toks[i] === ' ') { ++i; }

    // None of the rules we care about want atrules or blocks in value, so
    // we look for any+ but that is the same as selector but not zero-length.
    // This gets us the benefit of not emitting any value with mismatched
    // brackets.
    var s = i, e = selector(toks, i, n, false);
    if (e < 0) {
      // Skip malformed content per selector calling convention.
      e = ~e;
    } else {
      var value = [], valuelen = 0;
      for (var j = s; j < e; ++j) {
        tok = toks[j];
        if (tok !== ' ') {
          value[valuelen++] = tok;
        }
      }
      // One of the following is now true:
      // (1) e is flush with the end of the tokens as in <... style="x:y">.
      // (2) tok[e] points to a ';' in which case we need to consume the semi.
      // (3) tok[e] points to a '}' in which case we don't consume it.
      // (4) else there is bogus unparsed value content at toks[e:].
      // Allow declaration flush with end for style attr body.
      if (e < n) {  // 2, 3, or 4
        do {
          tok = toks[e];
          if (tok === ';' || tok === '}') { break; }
          // Don't emit the property if there is questionable trailing content.
          valuelen = 0;
        } while (++e < n);
        if (tok === ';') {
          ++e;
        }
      }
      if (valuelen && handler['declaration']) {
        // TODO: coerce non-keyword ident tokens to quoted strings.
        handler['declaration'](property.toLowerCase(), value);
      }
    }
    return e;
  }

  parseCssDeclarations = function(cssText, handler) {
    var toks = lexCss(cssText);
    for (var i = 0, n = toks.length; i < n;) {
      i = toks[i] !== ' ' ? declaration(toks, i, n, handler) : i+1;
    }
  };
})();

// Exports for closure compiler.
if (typeof window !== 'undefined') {
  window['parseCssStylesheet'] = parseCssStylesheet;
  window['parseCssDeclarations'] = parseCssDeclarations;
}
;
// Copyright Google Inc.
// Licensed under the Apache Licence Version 2.0
// Autogenerated at Wed Dec 31 03:02:35 CET 2014
// @overrides window
// @provides html4
var html4 = {};
html4.atype = {
  'NONE': 0,
  'URI': 1,
  'URI_FRAGMENT': 11,
  'SCRIPT': 2,
  'STYLE': 3,
  'HTML': 12,
  'ID': 4,
  'IDREF': 5,
  'IDREFS': 6,
  'GLOBAL_NAME': 7,
  'LOCAL_NAME': 8,
  'CLASSES': 9,
  'FRAME_TARGET': 10,
  'MEDIA_QUERY': 13
};
html4[ 'atype' ] = html4.atype;
html4.ATTRIBS = {
  '*::class': 9,
  '*::dir': 0,
  '*::draggable': 0,
  '*::hidden': 0,
  '*::id': 4,
  '*::inert': 0,
  '*::itemprop': 0,
  '*::itemref': 6,
  '*::itemscope': 0,
  '*::lang': 0,
  '*::onblur': 2,
  '*::onchange': 2,
  '*::onclick': 2,
  '*::ondblclick': 2,
  '*::onerror': 2,
  '*::onfocus': 2,
  '*::onkeydown': 2,
  '*::onkeypress': 2,
  '*::onkeyup': 2,
  '*::onload': 2,
  '*::onmousedown': 2,
  '*::onmousemove': 2,
  '*::onmouseout': 2,
  '*::onmouseover': 2,
  '*::onmouseup': 2,
  '*::onreset': 2,
  '*::onscroll': 2,
  '*::onselect': 2,
  '*::onsubmit': 2,
  '*::ontouchcancel': 2,
  '*::ontouchend': 2,
  '*::ontouchenter': 2,
  '*::ontouchleave': 2,
  '*::ontouchmove': 2,
  '*::ontouchstart': 2,
  '*::onunload': 2,
  '*::spellcheck': 0,
  '*::style': 3,
  '*::tabindex': 0,
  '*::title': 0,
  '*::translate': 0,
  'a::accesskey': 0,
  'a::coords': 0,
  'a::download': 1,
  'a::href': 1,
  'a::hreflang': 0,
  'a::name': 7,
  'a::onblur': 2,
  'a::onfocus': 2,
  'a::rel': 0,
  'a::shape': 0,
  'a::target': 10,
  'a::type': 0,
  'area::accesskey': 0,
  'area::alt': 0,
  'area::coords': 0,
  'area::href': 1,
  'area::nohref': 0,
  'area::onblur': 2,
  'area::onfocus': 2,
  'area::shape': 0,
  'area::target': 10,
  'audio::controls': 0,
  'audio::loop': 0,
  'audio::mediagroup': 5,
  'audio::muted': 0,
  'audio::preload': 0,
  'audio::src': 1,
  'bdo::dir': 0,
  'blockquote::cite': 1,
  'br::clear': 0,
  'button::accesskey': 0,
  'button::disabled': 0,
  'button::name': 8,
  'button::onblur': 2,
  'button::onfocus': 2,
  'button::type': 0,
  'button::value': 0,
  'canvas::height': 0,
  'canvas::width': 0,
  'caption::align': 0,
  'col::align': 0,
  'col::char': 0,
  'col::charoff': 0,
  'col::span': 0,
  'col::valign': 0,
  'col::width': 0,
  'colgroup::align': 0,
  'colgroup::char': 0,
  'colgroup::charoff': 0,
  'colgroup::span': 0,
  'colgroup::valign': 0,
  'colgroup::width': 0,
  'command::checked': 0,
  'command::command': 5,
  'command::disabled': 0,
  'command::icon': 1,
  'command::label': 0,
  'command::radiogroup': 0,
  'command::type': 0,
  'data::value': 0,
  'del::cite': 1,
  'del::datetime': 0,
  'details::open': 0,
  'dir::compact': 0,
  'div::align': 0,
  'dl::compact': 0,
  'fieldset::disabled': 0,
  'font::color': 0,
  'font::face': 0,
  'font::size': 0,
  'form::accept': 0,
  'form::action': 1,
  'form::autocomplete': 0,
  'form::enctype': 0,
  'form::method': 0,
  'form::name': 7,
  'form::novalidate': 0,
  'form::onreset': 2,
  'form::onsubmit': 2,
  'form::target': 10,
  'h1::align': 0,
  'h2::align': 0,
  'h3::align': 0,
  'h4::align': 0,
  'h5::align': 0,
  'h6::align': 0,
  'hr::align': 0,
  'hr::noshade': 0,
  'hr::size': 0,
  'hr::width': 0,
  'iframe::align': 0,
  'iframe::frameborder': 0,
  'iframe::height': 0,
  'iframe::marginheight': 0,
  'iframe::marginwidth': 0,
  'iframe::width': 0,
  'img::align': 0,
  'img::alt': 0,
  'img::border': 0,
  'img::height': 0,
  'img::hspace': 0,
  'img::ismap': 0,
  'img::name': 7,
  'img::src': 1,
  'img::usemap': 11,
  'img::vspace': 0,
  'img::width': 0,
  'input::accept': 0,
  'input::accesskey': 0,
  'input::align': 0,
  'input::alt': 0,
  'input::autocomplete': 0,
  'input::checked': 0,
  'input::disabled': 0,
  'input::inputmode': 0,
  'input::ismap': 0,
  'input::list': 5,
  'input::max': 0,
  'input::maxlength': 0,
  'input::min': 0,
  'input::multiple': 0,
  'input::name': 8,
  'input::onblur': 2,
  'input::onchange': 2,
  'input::onfocus': 2,
  'input::onselect': 2,
  'input::pattern': 0,
  'input::placeholder': 0,
  'input::readonly': 0,
  'input::required': 0,
  'input::size': 0,
  'input::src': 1,
  'input::step': 0,
  'input::type': 0,
  'input::usemap': 11,
  'input::value': 0,
  'ins::cite': 1,
  'ins::datetime': 0,
  'label::accesskey': 0,
  'label::for': 5,
  'label::onblur': 2,
  'label::onfocus': 2,
  'legend::accesskey': 0,
  'legend::align': 0,
  'li::type': 0,
  'li::value': 0,
  'map::name': 7,
  'menu::compact': 0,
  'menu::label': 0,
  'menu::type': 0,
  'meter::high': 0,
  'meter::low': 0,
  'meter::max': 0,
  'meter::min': 0,
  'meter::value': 0,
  'ol::compact': 0,
  'ol::reversed': 0,
  'ol::start': 0,
  'ol::type': 0,
  'optgroup::disabled': 0,
  'optgroup::label': 0,
  'option::disabled': 0,
  'option::label': 0,
  'option::selected': 0,
  'option::value': 0,
  'output::for': 6,
  'output::name': 8,
  'p::align': 0,
  'pre::width': 0,
  'progress::max': 0,
  'progress::min': 0,
  'progress::value': 0,
  'q::cite': 1,
  'select::autocomplete': 0,
  'select::disabled': 0,
  'select::multiple': 0,
  'select::name': 8,
  'select::onblur': 2,
  'select::onchange': 2,
  'select::onfocus': 2,
  'select::required': 0,
  'select::size': 0,
  'source::type': 0,
  'table::align': 0,
  'table::bgcolor': 0,
  'table::border': 0,
  'table::cellpadding': 0,
  'table::cellspacing': 0,
  'table::frame': 0,
  'table::rules': 0,
  'table::summary': 0,
  'table::width': 0,
  'tbody::align': 0,
  'tbody::char': 0,
  'tbody::charoff': 0,
  'tbody::valign': 0,
  'td::abbr': 0,
  'td::align': 0,
  'td::axis': 0,
  'td::bgcolor': 0,
  'td::char': 0,
  'td::charoff': 0,
  'td::colspan': 0,
  'td::headers': 6,
  'td::height': 0,
  'td::nowrap': 0,
  'td::rowspan': 0,
  'td::scope': 0,
  'td::valign': 0,
  'td::width': 0,
  'textarea::accesskey': 0,
  'textarea::autocomplete': 0,
  'textarea::cols': 0,
  'textarea::disabled': 0,
  'textarea::inputmode': 0,
  'textarea::name': 8,
  'textarea::onblur': 2,
  'textarea::onchange': 2,
  'textarea::onfocus': 2,
  'textarea::onselect': 2,
  'textarea::placeholder': 0,
  'textarea::readonly': 0,
  'textarea::required': 0,
  'textarea::rows': 0,
  'textarea::wrap': 0,
  'tfoot::align': 0,
  'tfoot::char': 0,
  'tfoot::charoff': 0,
  'tfoot::valign': 0,
  'th::abbr': 0,
  'th::align': 0,
  'th::axis': 0,
  'th::bgcolor': 0,
  'th::char': 0,
  'th::charoff': 0,
  'th::colspan': 0,
  'th::headers': 6,
  'th::height': 0,
  'th::nowrap': 0,
  'th::rowspan': 0,
  'th::scope': 0,
  'th::valign': 0,
  'th::width': 0,
  'thead::align': 0,
  'thead::char': 0,
  'thead::charoff': 0,
  'thead::valign': 0,
  'tr::align': 0,
  'tr::bgcolor': 0,
  'tr::char': 0,
  'tr::charoff': 0,
  'tr::valign': 0,
  'track::default': 0,
  'track::kind': 0,
  'track::label': 0,
  'track::srclang': 0,
  'ul::compact': 0,
  'ul::type': 0,
  'video::controls': 0,
  'video::height': 0,
  'video::loop': 0,
  'video::autoplay': 0,   // added by kajmagnus
  'video::mediagroup': 5,
  'video::muted': 0,
  'video::poster': 1,
  'video::preload': 0,
  'video::src': 1,
  'video::width': 0
};
html4[ 'ATTRIBS' ] = html4.ATTRIBS;
html4.eflags = {
  'OPTIONAL_ENDTAG': 1,
  'EMPTY': 2,
  'CDATA': 4,
  'RCDATA': 8,
  'UNSAFE': 16,
  'FOLDABLE': 32,
  'SCRIPT': 64,
  'STYLE': 128,
  'VIRTUALIZED': 256
};
html4[ 'eflags' ] = html4.eflags;
html4.ELEMENTS = {
  'a': 0,
  'abbr': 0,
  'acronym': 0,
  'address': 0,
  'applet': 272,
  'area': 2,
  'article': 0,
  'aside': 0,
  'audio': 0,
  'b': 0,
  'base': 274,
  'basefont': 274,
  'bdi': 0,
  'bdo': 0,
  'big': 0,
  'blockquote': 0,
  'body': 305,
  'br': 2,
  'button': 0,
  'canvas': 0,
  'caption': 0,
  'center': 0,
  'cite': 0,
  'code': 0,
  'col': 2,
  'colgroup': 1,
  'command': 2,
  'data': 0,
  'datalist': 0,
  'dd': 1,
  'del': 0,
  'details': 0,
  'dfn': 0,
  'dialog': 272,
  'dir': 0,
  'div': 0,
  'dl': 0,
  'dt': 1,
  'em': 0,
  'fieldset': 0,
  'figcaption': 0,
  'figure': 0,
  'font': 0,
  'footer': 0,
  'form': 0,
  'frame': 274,
  'frameset': 272,
  'h1': 0,
  'h2': 0,
  'h3': 0,
  'h4': 0,
  'h5': 0,
  'h6': 0,
  'head': 305,
  'header': 0,
  'hgroup': 0,
  'hr': 2,
  'html': 305,
  'i': 0,
  'iframe': 4,
  'img': 2,
  'input': 2,
  'ins': 0,
  'isindex': 274,
  'kbd': 0,
  'keygen': 274,
  'label': 0,
  'legend': 0,
  'li': 1,
  'link': 274,
  'map': 0,
  'mark': 0,
  'menu': 0,
  'meta': 274,
  'meter': 0,
  'nav': 0,
  'nobr': 0,
  'noembed': 276,
  'noframes': 276,
  'noscript': 276,
  'object': 272,
  'ol': 0,
  'optgroup': 0,
  'option': 1,
  'output': 0,
  'p': 1,
  'param': 274,
  'pre': 0,
  'progress': 0,
  'q': 0,
  's': 0,
  'samp': 0,
  'script': 84,
  'section': 0,
  'select': 0,
  'small': 0,
  'source': 2,
  'span': 0,
  'strike': 0,
  'strong': 0,
  'style': 148,
  'sub': 0,
  'summary': 0,
  'sup': 0,
  'table': 0,
  'tbody': 1,
  'td': 1,
  'textarea': 8,
  'tfoot': 1,
  'th': 1,
  'thead': 1,
  'time': 0,
  'title': 280,
  'tr': 1,
  'track': 2,
  'tt': 0,
  'u': 0,
  'ul': 0,
  'var': 0,
  'video': 0,
  'wbr': 2
};
html4[ 'ELEMENTS' ] = html4.ELEMENTS;
html4.ELEMENT_DOM_INTERFACES = {
  'a': 'HTMLAnchorElement',
  'abbr': 'HTMLElement',
  'acronym': 'HTMLElement',
  'address': 'HTMLElement',
  'applet': 'HTMLAppletElement',
  'area': 'HTMLAreaElement',
  'article': 'HTMLElement',
  'aside': 'HTMLElement',
  'audio': 'HTMLAudioElement',
  'b': 'HTMLElement',
  'base': 'HTMLBaseElement',
  'basefont': 'HTMLBaseFontElement',
  'bdi': 'HTMLElement',
  'bdo': 'HTMLElement',
  'big': 'HTMLElement',
  'blockquote': 'HTMLQuoteElement',
  'body': 'HTMLBodyElement',
  'br': 'HTMLBRElement',
  'button': 'HTMLButtonElement',
  'canvas': 'HTMLCanvasElement',
  'caption': 'HTMLTableCaptionElement',
  'center': 'HTMLElement',
  'cite': 'HTMLElement',
  'code': 'HTMLElement',
  'col': 'HTMLTableColElement',
  'colgroup': 'HTMLTableColElement',
  'command': 'HTMLCommandElement',
  'data': 'HTMLElement',
  'datalist': 'HTMLDataListElement',
  'dd': 'HTMLElement',
  'del': 'HTMLModElement',
  'details': 'HTMLDetailsElement',
  'dfn': 'HTMLElement',
  'dialog': 'HTMLDialogElement',
  'dir': 'HTMLDirectoryElement',
  'div': 'HTMLDivElement',
  'dl': 'HTMLDListElement',
  'dt': 'HTMLElement',
  'em': 'HTMLElement',
  'fieldset': 'HTMLFieldSetElement',
  'figcaption': 'HTMLElement',
  'figure': 'HTMLElement',
  'font': 'HTMLFontElement',
  'footer': 'HTMLElement',
  'form': 'HTMLFormElement',
  'frame': 'HTMLFrameElement',
  'frameset': 'HTMLFrameSetElement',
  'h1': 'HTMLHeadingElement',
  'h2': 'HTMLHeadingElement',
  'h3': 'HTMLHeadingElement',
  'h4': 'HTMLHeadingElement',
  'h5': 'HTMLHeadingElement',
  'h6': 'HTMLHeadingElement',
  'head': 'HTMLHeadElement',
  'header': 'HTMLElement',
  'hgroup': 'HTMLElement',
  'hr': 'HTMLHRElement',
  'html': 'HTMLHtmlElement',
  'i': 'HTMLElement',
  'iframe': 'HTMLIFrameElement',
  'img': 'HTMLImageElement',
  'input': 'HTMLInputElement',
  'ins': 'HTMLModElement',
  'isindex': 'HTMLUnknownElement',
  'kbd': 'HTMLElement',
  'keygen': 'HTMLKeygenElement',
  'label': 'HTMLLabelElement',
  'legend': 'HTMLLegendElement',
  'li': 'HTMLLIElement',
  'link': 'HTMLLinkElement',
  'map': 'HTMLMapElement',
  'mark': 'HTMLElement',
  'menu': 'HTMLMenuElement',
  'meta': 'HTMLMetaElement',
  'meter': 'HTMLMeterElement',
  'nav': 'HTMLElement',
  'nobr': 'HTMLElement',
  'noembed': 'HTMLElement',
  'noframes': 'HTMLElement',
  'noscript': 'HTMLElement',
  'object': 'HTMLObjectElement',
  'ol': 'HTMLOListElement',
  'optgroup': 'HTMLOptGroupElement',
  'option': 'HTMLOptionElement',
  'output': 'HTMLOutputElement',
  'p': 'HTMLParagraphElement',
  'param': 'HTMLParamElement',
  'pre': 'HTMLPreElement',
  'progress': 'HTMLProgressElement',
  'q': 'HTMLQuoteElement',
  's': 'HTMLElement',
  'samp': 'HTMLElement',
  'script': 'HTMLScriptElement',
  'section': 'HTMLElement',
  'select': 'HTMLSelectElement',
  'small': 'HTMLElement',
  'source': 'HTMLSourceElement',
  'span': 'HTMLSpanElement',
  'strike': 'HTMLElement',
  'strong': 'HTMLElement',
  'style': 'HTMLStyleElement',
  'sub': 'HTMLElement',
  'summary': 'HTMLElement',
  'sup': 'HTMLElement',
  'table': 'HTMLTableElement',
  'tbody': 'HTMLTableSectionElement',
  'td': 'HTMLTableDataCellElement',
  'textarea': 'HTMLTextAreaElement',
  'tfoot': 'HTMLTableSectionElement',
  'th': 'HTMLTableHeaderCellElement',
  'thead': 'HTMLTableSectionElement',
  'time': 'HTMLTimeElement',
  'title': 'HTMLTitleElement',
  'tr': 'HTMLTableRowElement',
  'track': 'HTMLTrackElement',
  'tt': 'HTMLElement',
  'u': 'HTMLElement',
  'ul': 'HTMLUListElement',
  'var': 'HTMLElement',
  'video': 'HTMLVideoElement',
  'wbr': 'HTMLElement'
};
html4[ 'ELEMENT_DOM_INTERFACES' ] = html4.ELEMENT_DOM_INTERFACES;
html4.ueffects = {
  'NOT_LOADED': 0,
  'SAME_DOCUMENT': 1,
  'NEW_DOCUMENT': 2
};
html4[ 'ueffects' ] = html4.ueffects;
html4.URIEFFECTS = {
  'a::href': 2,
  'area::href': 2,
  'audio::src': 1,
  'blockquote::cite': 0,
  'command::icon': 1,
  'del::cite': 0,
  'form::action': 2,
  'img::src': 1,
  'input::src': 1,
  'ins::cite': 0,
  'q::cite': 0,
  'video::poster': 1,
  'video::src': 1
};
html4[ 'URIEFFECTS' ] = html4.URIEFFECTS;
html4.ltypes = {
  'UNSANDBOXED': 2,
  'SANDBOXED': 1,
  'DATA': 0
};
html4[ 'ltypes' ] = html4.ltypes;
html4.LOADERTYPES = {
  'a::href': 2,
  'area::href': 2,
  'audio::src': 2,
  'blockquote::cite': 2,
  'command::icon': 1,
  'del::cite': 2,
  'form::action': 2,
  'img::src': 1,
  'input::src': 1,
  'ins::cite': 2,
  'q::cite': 2,
  'video::poster': 1,
  'video::src': 2
};
html4[ 'LOADERTYPES' ] = html4.LOADERTYPES;
// export for Closure Compiler
if (typeof window !== 'undefined') {
  window['html4'] = html4;
}
;
// Copyright (C) 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview
 * An HTML sanitizer that can satisfy a variety of security policies.
 *
 * <p>
 * The HTML sanitizer is built around a SAX parser and HTML element and
 * attributes schemas.
 *
 * If the cssparser is loaded, inline styles are sanitized using the
 * css property and value schemas.  Else they are remove during
 * sanitization.
 *
 * If it exists, uses parseCssDeclarations, sanitizeCssProperty,  cssSchema
 *
 * @author mikesamuel@gmail.com
 * @author jasvir@gmail.com
 * \@requires html4, URI
 * \@overrides window
 * \@provides html, html_sanitize
 */

// The Turkish i seems to be a non-issue, but abort in case it is.
if ('I'.toLowerCase() !== 'i') { throw 'I/i problem'; }

/**
 * \@namespace
 */
var html = (function(html4) {

  // For closure compiler
  var parseCssDeclarations, sanitizeCssProperty, cssSchema;
  if ('undefined' !== typeof window) {
    parseCssDeclarations = window['parseCssDeclarations'];
    sanitizeCssProperty = window['sanitizeCssProperty'];
    cssSchema = window['cssSchema'];
  }

  // The keys of this object must be 'quoted' or JSCompiler will mangle them!
  // This is a partial list -- lookupEntity() uses the host browser's parser
  // (when available) to implement full entity lookup.
  // Note that entities are in general case-sensitive; the uppercase ones are
  // explicitly defined by HTML5 (presumably as compatibility).
  var ENTITIES = {
    'lt': '<',
    'LT': '<',
    'gt': '>',
    'GT': '>',
    'amp': '&',
    'AMP': '&',
    'quot': '"',
    'apos': '\'',
    //  'nbsp': '\240'  ??  HMMM
  };

  // Patterns for types of entity/character reference names.
  var decimalEscapeRe = /^#(\d+)$/;
  var hexEscapeRe = /^#x([0-9A-Fa-f]+)$/;
  // contains every entity per http://www.w3.org/TR/2011/WD-html5-20110113/named-character-references.html
  var safeEntityNameRe = /^[A-Za-z][A-za-z0-9]+$/;
  // Used as a hook to invoke the browser's entity parsing. <textarea> is used
  // because its content is parsed for entities but not tags.
  // TODO(kpreid): This retrieval is a kludge and leads to silent loss of
  // functionality if the document isn't available.
  var entityLookupElement =
      ('undefined' !== typeof window && window['document'])
          ? window['document'].createElement('textarea') : null;
  /**
   * Decodes an HTML entity.
   *
   * {\@updoc
   * $ lookupEntity('lt')
   * # '<'
   * $ lookupEntity('GT')
   * # '>'
   * $ lookupEntity('amp')
   * # '&'
   * $ lookupEntity('nbsp')
   * # '\xA0'
   * $ lookupEntity('apos')
   * # "'"
   * $ lookupEntity('quot')
   * # '"'
   * $ lookupEntity('#xa')
   * # '\n'
   * $ lookupEntity('#10')
   * # '\n'
   * $ lookupEntity('#x0a')
   * # '\n'
   * $ lookupEntity('#010')
   * # '\n'
   * $ lookupEntity('#x00A')
   * # '\n'
   * $ lookupEntity('Pi')      // Known failure
   * # '\u03A0'
   * $ lookupEntity('pi')      // Known failure
   * # '\u03C0'
   * }
   *
   * @param {string} name the content between the '&' and the ';'.
   * @return {string} a single unicode code-point as a string.
   */
  function lookupEntity(name) {
    // TODO: entity lookup as specified by HTML5 actually depends on the
    // presence of the ";".
    if (ENTITIES.hasOwnProperty(name)) { return ENTITIES[name]; }
    var m = name.match(decimalEscapeRe);
    if (m) {
      return String.fromCharCode(parseInt(m[1], 10));
    } else if (!!(m = name.match(hexEscapeRe))) {
      return String.fromCharCode(parseInt(m[1], 16));
    } else if (entityLookupElement && safeEntityNameRe.test(name)) {
      entityLookupElement.innerHTML = '&' + name + ';';
      var text = entityLookupElement.textContent;
      ENTITIES[name] = text;
      return text;
    } else {
      return '&' + name + ';';
    }
  }

  function decodeOneEntity(_, name) {
    return lookupEntity(name);
  }

  var nulRe = /\0/g;
  function stripNULs(s) {
    return s.replace(nulRe, '');
  }

  var ENTITY_RE_1 = /&(#[0-9]+|#[xX][0-9A-Fa-f]+|\w+);/g;
  var ENTITY_RE_2 = /^(#[0-9]+|#[xX][0-9A-Fa-f]+|\w+);/;
  /**
   * The plain text of a chunk of HTML CDATA which possibly containing.
   *
   * {\@updoc
   * $ unescapeEntities('')
   * # ''
   * $ unescapeEntities('hello World!')
   * # 'hello World!'
   * $ unescapeEntities('1 &lt; 2 &amp;&AMP; 4 &gt; 3&#10;')
   * # '1 < 2 && 4 > 3\n'
   * $ unescapeEntities('&lt;&lt <- unfinished entity&gt;')
   * # '<&lt <- unfinished entity>'
   * $ unescapeEntities('/foo?bar=baz&copy=true')  // & often unescaped in URLS
   * # '/foo?bar=baz&copy=true'
   * $ unescapeEntities('pi=&pi;&#x3c0;, Pi=&Pi;\u03A0') // FIXME: known failure
   * # 'pi=\u03C0\u03c0, Pi=\u03A0\u03A0'
   * }
   *
   * @param {string} s a chunk of HTML CDATA.  It must not start or end inside
   *     an HTML entity.
   */
  function unescapeEntities(s) {
    return s.replace(ENTITY_RE_1, decodeOneEntity);
  }

  var ampRe = /&/g;
  var looseAmpRe = /&([^a-z#]|#(?:[^0-9x]|x(?:[^0-9a-f]|$)|$)|$)/gi;
  var ltRe = /[<]/g;
  var gtRe = />/g;
  var quotRe = /\"/g;

  /**
   * Escapes HTML special characters in attribute values.
   *
   * {\@updoc
   * $ escapeAttrib('')
   * # ''
   * $ escapeAttrib('"<<&==&>>"')  // Do not just escape the first occurrence.
   * # '&#34;&lt;&lt;&amp;&#61;&#61;&amp;&gt;&gt;&#34;'
   * $ escapeAttrib('Hello <World>!')
   * # 'Hello &lt;World&gt;!'
   * }
   */
  function escapeAttrib(s) {
    return ('' + s).replace(ampRe, '&amp;').replace(ltRe, '&lt;')
        .replace(gtRe, '&gt;').replace(quotRe, '&#34;');
  }

  /**
   * Escape entities in RCDATA that can be escaped without changing the meaning.
   * {\@updoc
   * $ normalizeRCData('1 < 2 &&amp; 3 > 4 &amp;& 5 &lt; 7&8')
   * # '1 &lt; 2 &amp;&amp; 3 &gt; 4 &amp;&amp; 5 &lt; 7&amp;8'
   * }
   */
  function normalizeRCData(rcdata) {
    return rcdata
        .replace(looseAmpRe, '&amp;$1')
        .replace(ltRe, '&lt;')
        .replace(gtRe, '&gt;');
  }

  // TODO(felix8a): validate sanitizer regexs against the HTML5 grammar at
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html

  // We initially split input so that potentially meaningful characters
  // like '<' and '>' are separate tokens, using a fast dumb process that
  // ignores quoting.  Then we walk that token stream, and when we see a
  // '<' that's the start of a tag, we use ATTR_RE to extract tag
  // attributes from the next token.  That token will never have a '>'
  // character.  However, it might have an unbalanced quote character, and
  // when we see that, we combine additional tokens to balance the quote.

  var ATTR_RE = new RegExp(
    '^\\s*' +
    '([-.:\\w]+)' +             // 1 = Attribute name
    '(?:' + (
      '\\s*(=)\\s*' +           // 2 = Is there a value?
      '(' + (                   // 3 = Attribute value
        // TODO(felix8a): maybe use backref to match quotes
        '(\")[^\"]*(\"|$)' +    // 4, 5 = Double-quoted string
        '|' +
        '(\')[^\']*(\'|$)' +    // 6, 7 = Single-quoted string
        '|' +
        // Positive lookahead to prevent interpretation of
        // <foo a= b=c> as <foo a='b=c'>
        // TODO(felix8a): might be able to drop this case
        '(?=[a-z][-\\w]*\\s*=)' +
        '|' +
        // Unquoted value that isn't an attribute name
        // (since we didn't match the positive lookahead above)
        '[^\"\'\\s]*' ) +
      ')' ) +
    ')?',
    'i');

  // false on IE<=8, true on most other browsers
  var splitWillCapture = ('a,b'.split(/(,)/).length === 3);

  // bitmask for tags with special parsing, like <script> and <textarea>
  var EFLAGS_TEXT = html4.eflags['CDATA'] | html4.eflags['RCDATA'];

  /**
   * Given a SAX-like event handler, produce a function that feeds those
   * events and a parameter to the event handler.
   *
   * The event handler has the form:{@code
   * {
   *   // Name is an upper-case HTML tag name.  Attribs is an array of
   *   // alternating upper-case attribute names, and attribute values.  The
   *   // attribs array is reused by the parser.  Param is the value passed to
   *   // the saxParser.
   *   startTag: function (name, attribs, param) { ... },
   *   endTag:   function (name, param) { ... },
   *   pcdata:   function (text, param) { ... },
   *   rcdata:   function (text, param) { ... },
   *   cdata:    function (text, param) { ... },
   *   startDoc: function (param) { ... },
   *   endDoc:   function (param) { ... }
   * }}
   *
   * @param {Object} handler a record containing event handlers.
   * @return {function(string, Object)} A function that takes a chunk of HTML
   *     and a parameter.  The parameter is passed on to the handler methods.
   */
  function makeSaxParser(handler) {
    // Accept quoted or unquoted keys (Closure compat)
    var hcopy = {
      cdata: handler.cdata || handler['cdata'],
      comment: handler.comment || handler['comment'],
      endDoc: handler.endDoc || handler['endDoc'],
      endTag: handler.endTag || handler['endTag'],
      pcdata: handler.pcdata || handler['pcdata'],
      rcdata: handler.rcdata || handler['rcdata'],
      startDoc: handler.startDoc || handler['startDoc'],
      startTag: handler.startTag || handler['startTag']
    };
    return function(htmlText, param) {
      return parse(htmlText, hcopy, param);
    };
  }

  // Parsing strategy is to split input into parts that might be lexically
  // meaningful (every ">" becomes a separate part), and then recombine
  // parts if we discover they're in a different context.

  // TODO(felix8a): Significant performance regressions from -legacy,
  // tested on
  //    Chrome 18.0
  //    Firefox 11.0
  //    IE 6, 7, 8, 9
  //    Opera 11.61
  //    Safari 5.1.3
  // Many of these are unusual patterns that are linearly slower and still
  // pretty fast (eg 1ms to 5ms), so not necessarily worth fixing.

  // TODO(felix8a): "<script> && && && ... <\/script>" is slower on all
  // browsers.  The hotspot is htmlSplit.

  // TODO(felix8a): "<p title='>>>>...'><\/p>" is slower on all browsers.
  // This is partly htmlSplit, but the hotspot is parseTagAndAttrs.

  // TODO(felix8a): "<a><\/a><a><\/a>..." is slower on IE9.
  // "<a>1<\/a><a>1<\/a>..." is faster, "<a><\/a>2<a><\/a>2..." is faster.

  // TODO(felix8a): "<p<p<p..." is slower on IE[6-8]

  var continuationMarker = {};
  function parse(htmlText, handler, param) {
    var m, p, tagName;
    var parts = htmlSplit(htmlText);
    var state = {
      noMoreGT: false,
      noMoreEndComments: false
    };
    parseCPS(handler, parts, 0, state, param);
  }

  function continuationMaker(h, parts, initial, state, param) {
    return function () {
      parseCPS(h, parts, initial, state, param);
    };
  }

  function parseCPS(h, parts, initial, state, param) {
    try {
      if (h.startDoc && initial == 0) { h.startDoc(param); }
      var m, p, tagName;
      for (var pos = initial, end = parts.length; pos < end;) {
        var current = parts[pos++];
        var next = parts[pos];
        switch (current) {
        case '&':
          if (ENTITY_RE_2.test(next)) {
            if (h.pcdata) {
              h.pcdata('&' + next, param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
            pos++;
          } else {
            if (h.pcdata) { h.pcdata("&amp;", param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<\/':
          if ((m = /^([-\w:]+)[^\'\"]*/.exec(next))) {
            if (m[0].length === next.length && parts[pos + 1] === '>') {
              // fast case, no attribute parsing needed
              pos += 2;
              tagName = m[1].toLowerCase();
              if (h.endTag) {
                h.endTag(tagName, param, continuationMarker,
                  continuationMaker(h, parts, pos, state, param));
              }
            } else {
              // slow case, need to parse attributes
              // TODO(felix8a): do we really care about misparsing this?
              pos = parseEndTag(
                parts, pos, h, param, continuationMarker, state);
            }
          } else {
            if (h.pcdata) {
              h.pcdata('&lt;/', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<':
          if (m = /^([-\w:]+)\s*\/?/.exec(next)) {
            if (m[0].length === next.length && parts[pos + 1] === '>') {
              // fast case, no attribute parsing needed
              pos += 2;
              tagName = m[1].toLowerCase();
              if (h.startTag) {
                h.startTag(tagName, [], param, continuationMarker,
                  continuationMaker(h, parts, pos, state, param));
              }
              // tags like <script> and <textarea> have special parsing
              var eflags = html4.ELEMENTS[tagName];
              if (eflags & EFLAGS_TEXT) {
                var tag = { name: tagName, next: pos, eflags: eflags };
                pos = parseText(
                  parts, tag, h, param, continuationMarker, state);
              }
            } else {
              // slow case, need to parse attributes
              pos = parseStartTag(
                parts, pos, h, param, continuationMarker, state);
            }
          } else {
            if (h.pcdata) {
              h.pcdata('&lt;', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<\!--':
          // The pathological case is n copies of '<\!--' without '-->', and
          // repeated failure to find '-->' is quadratic.  We avoid that by
          // remembering when search for '-->' fails.
          if (!state.noMoreEndComments) {
            // A comment <\!--x--> is split into three tokens:
            //   '<\!--', 'x--', '>'
            // We want to find the next '>' token that has a preceding '--'.
            // pos is at the 'x--'.
            for (p = pos + 1; p < end; p++) {
              if (parts[p] === '>' && /--$/.test(parts[p - 1])) { break; }
            }
            if (p < end) {
              if (h.comment) {
                var comment = parts.slice(pos, p).join('');
                h.comment(
                  comment.substr(0, comment.length - 2), param,
                  continuationMarker,
                  continuationMaker(h, parts, p + 1, state, param));
              }
              pos = p + 1;
            } else {
              state.noMoreEndComments = true;
            }
          }
          if (state.noMoreEndComments) {
            if (h.pcdata) {
              h.pcdata('&lt;!--', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<\!':
          if (!/^\w/.test(next)) {
            if (h.pcdata) {
              h.pcdata('&lt;!', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          } else {
            // similar to noMoreEndComment logic
            if (!state.noMoreGT) {
              for (p = pos + 1; p < end; p++) {
                if (parts[p] === '>') { break; }
              }
              if (p < end) {
                pos = p + 1;
              } else {
                state.noMoreGT = true;
              }
            }
            if (state.noMoreGT) {
              if (h.pcdata) {
                h.pcdata('&lt;!', param, continuationMarker,
                  continuationMaker(h, parts, pos, state, param));
              }
            }
          }
          break;
        case '<?':
          // similar to noMoreEndComment logic
          if (!state.noMoreGT) {
            for (p = pos + 1; p < end; p++) {
              if (parts[p] === '>') { break; }
            }
            if (p < end) {
              pos = p + 1;
            } else {
              state.noMoreGT = true;
            }
          }
          if (state.noMoreGT) {
            if (h.pcdata) {
              h.pcdata('&lt;?', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '>':
          if (h.pcdata) {
            h.pcdata("&gt;", param, continuationMarker,
              continuationMaker(h, parts, pos, state, param));
          }
          break;
        case '':
          break;
        default:
          if (h.pcdata) {
            h.pcdata(current, param, continuationMarker,
              continuationMaker(h, parts, pos, state, param));
          }
          break;
        }
      }
      if (h.endDoc) { h.endDoc(param); }
    } catch (e) {
      if (e !== continuationMarker) { throw e; }
    }
  }

  // Split str into parts for the html parser.
  function htmlSplit(str) {
    // can't hoist this out of the function because of the re.exec loop.
    var re = /(<\/|<\!--|<[!?]|[&<>])/g;
    str += '';
    if (splitWillCapture) {
      return str.split(re);
    } else {
      var parts = [];
      var lastPos = 0;
      var m;
      while ((m = re.exec(str)) !== null) {
        parts.push(str.substring(lastPos, m.index));
        parts.push(m[0]);
        lastPos = m.index + m[0].length;
      }
      parts.push(str.substring(lastPos));
      return parts;
    }
  }

  function parseEndTag(parts, pos, h, param, continuationMarker, state) {
    var tag = parseTagAndAttrs(parts, pos);
    // drop unclosed tags
    if (!tag) { return parts.length; }
    if (h.endTag) {
      h.endTag(tag.name, param, continuationMarker,
        continuationMaker(h, parts, pos, state, param));
    }
    return tag.next;
  }

  function parseStartTag(parts, pos, h, param, continuationMarker, state) {
    var tag = parseTagAndAttrs(parts, pos);
    // drop unclosed tags
    if (!tag) { return parts.length; }
    if (h.startTag) {
      h.startTag(tag.name, tag.attrs, param, continuationMarker,
        continuationMaker(h, parts, tag.next, state, param));
    }
    // tags like <script> and <textarea> have special parsing
    if (tag.eflags & EFLAGS_TEXT) {
      return parseText(parts, tag, h, param, continuationMarker, state);
    } else {
      return tag.next;
    }
  }

  var endTagRe = {};

  // Tags like <script> and <textarea> are flagged as CDATA or RCDATA,
  // which means everything is text until we see the correct closing tag.
  function parseText(parts, tag, h, param, continuationMarker, state) {
    var end = parts.length;
    if (!endTagRe.hasOwnProperty(tag.name)) {
      endTagRe[tag.name] = new RegExp('^' + tag.name + '(?:[\\s\\/]|$)', 'i');
    }
    var re = endTagRe[tag.name];
    var first = tag.next;
    var p = tag.next + 1;
    for (; p < end; p++) {
      if (parts[p - 1] === '<\/' && re.test(parts[p])) { break; }
    }
    if (p < end) { p -= 1; }
    var buf = parts.slice(first, p).join('');
    if (tag.eflags & html4.eflags['CDATA']) {
      if (h.cdata) {
        h.cdata(buf, param, continuationMarker,
          continuationMaker(h, parts, p, state, param));
      }
    } else if (tag.eflags & html4.eflags['RCDATA']) {
      if (h.rcdata) {
        h.rcdata(normalizeRCData(buf), param, continuationMarker,
          continuationMaker(h, parts, p, state, param));
      }
    } else {
      throw new Error('bug');
    }
    return p;
  }

  // at this point, parts[pos-1] is either "<" or "<\/".
  function parseTagAndAttrs(parts, pos) {
    var m = /^([-\w:]+)/.exec(parts[pos]);
    var tag = {};
    tag.name = m[1].toLowerCase();
    tag.eflags = html4.ELEMENTS[tag.name];
    var buf = parts[pos].substr(m[0].length);
    // Find the next '>'.  We optimistically assume this '>' is not in a
    // quoted context, and further down we fix things up if it turns out to
    // be quoted.
    var p = pos + 1;
    var end = parts.length;
    for (; p < end; p++) {
      if (parts[p] === '>') { break; }
      buf += parts[p];
    }
    if (end <= p) { return void 0; }
    var attrs = [];
    while (buf !== '') {
      m = ATTR_RE.exec(buf);
      if (!m) {
        // No attribute found: skip garbage
        buf = buf.replace(/^[\s\S][^a-z\s]*/, '');

      } else if ((m[4] && !m[5]) || (m[6] && !m[7])) {
        // Unterminated quote: slurp to the next unquoted '>'
        var quote = m[4] || m[6];
        var sawQuote = false;
        var abuf = [buf, parts[p++]];
        for (; p < end; p++) {
          if (sawQuote) {
            if (parts[p] === '>') { break; }
          } else if (0 <= parts[p].indexOf(quote)) {
            sawQuote = true;
          }
          abuf.push(parts[p]);
        }
        // Slurp failed: lose the garbage
        if (end <= p) { break; }
        // Otherwise retry attribute parsing
        buf = abuf.join('');
        continue;

      } else {
        // We have an attribute
        var aName = m[1].toLowerCase();
        var aValue = m[2] ? decodeValue(m[3]) : '';
        attrs.push(aName, aValue);
        buf = buf.substr(m[0].length);
      }
    }
    tag.attrs = attrs;
    tag.next = p + 1;
    return tag;
  }

  function decodeValue(v) {
    var q = v.charCodeAt(0);
    if (q === 0x22 || q === 0x27) { // " or '
      v = v.substr(1, v.length - 2);
    }
    return unescapeEntities(stripNULs(v));
  }

  /**
   * Returns a function that strips unsafe tags and attributes from html.
   * @param {function(string, Array.<string>): ?Array.<string>} tagPolicy
   *     A function that takes (tagName, attribs[]), where tagName is a key in
   *     html4.ELEMENTS and attribs is an array of alternating attribute names
   *     and values.  It should return a record (as follows), or null to delete
   *     the element.  It's okay for tagPolicy to modify the attribs array,
   *     but the same array is reused, so it should not be held between calls.
   *     Record keys:
   *        attribs: (required) Sanitized attributes array.
   *        tagName: Replacement tag name.
   * @return {function(string, Array)} A function that sanitizes a string of
   *     HTML and appends result strings to the second argument, an array.
   */
  function makeHtmlSanitizer(tagPolicy) {
    var stack;
    var ignoring;
    var emit = function (text, out) {
      if (!ignoring) { out.push(text); }
    };
    return makeSaxParser({
      'startDoc': function(_) {
        stack = [];
        ignoring = false;
      },
      'startTag': function(tagNameOrig, attribs, out) {
        if (ignoring) { return; }
        if (!html4.ELEMENTS.hasOwnProperty(tagNameOrig)) { return; }
        var eflagsOrig = html4.ELEMENTS[tagNameOrig];
        if (eflagsOrig & html4.eflags['FOLDABLE']) {
          return;
        }

        var decision = tagPolicy(tagNameOrig, attribs);
        if (!decision) {
          ignoring = !(eflagsOrig & html4.eflags['EMPTY']);
          return;
        } else if (typeof decision !== 'object') {
          throw new Error('tagPolicy did not return object (old API?)');
        }
        if ('attribs' in decision) {
          attribs = decision['attribs'];
        } else {
          throw new Error('tagPolicy gave no attribs');
        }
        var eflagsRep;
        var tagNameRep;
        if ('tagName' in decision) {
          tagNameRep = decision['tagName'];
          eflagsRep = html4.ELEMENTS[tagNameRep];
        } else {
          tagNameRep = tagNameOrig;
          eflagsRep = eflagsOrig;
        }
        // TODO(mikesamuel): relying on tagPolicy not to insert unsafe
        // attribute names.

        // If this is an optional-end-tag element and either this element or its
        // previous like sibling was rewritten, then insert a close tag to
        // preserve structure.
        if (eflagsOrig & html4.eflags['OPTIONAL_ENDTAG']) {
          var onStack = stack[stack.length - 1];
          if (onStack && onStack.orig === tagNameOrig &&
              (onStack.rep !== tagNameRep || tagNameOrig !== tagNameRep)) {
                out.push('<\/', onStack.rep, '>');
          }
        }

        if (!(eflagsOrig & html4.eflags['EMPTY'])) {
          stack.push({orig: tagNameOrig, rep: tagNameRep});
        }

        out.push('<', tagNameRep);
        for (var i = 0, n = attribs.length; i < n; i += 2) {
          var attribName = attribs[i],
              value = attribs[i + 1];
          if (value !== null && value !== void 0) {
            out.push(' ', attribName, '="', escapeAttrib(value), '"');
          }
        }
        out.push('>');

        if ((eflagsOrig & html4.eflags['EMPTY'])
            && !(eflagsRep & html4.eflags['EMPTY'])) {
          // replacement is non-empty, synthesize end tag
          out.push('<\/', tagNameRep, '>');
        }
      },
      'endTag': function(tagName, out) {
        if (ignoring) {
          ignoring = false;
          return;
        }
        if (!html4.ELEMENTS.hasOwnProperty(tagName)) { return; }
        var eflags = html4.ELEMENTS[tagName];
        if (!(eflags & (html4.eflags['EMPTY'] | html4.eflags['FOLDABLE']))) {
          var index;
          if (eflags & html4.eflags['OPTIONAL_ENDTAG']) {
            for (index = stack.length; --index >= 0;) {
              var stackElOrigTag = stack[index].orig;
              if (stackElOrigTag === tagName) { break; }
              if (!(html4.ELEMENTS[stackElOrigTag] &
                    html4.eflags['OPTIONAL_ENDTAG'])) {
                // Don't pop non optional end tags looking for a match.
                return;
              }
            }
          } else {
            for (index = stack.length; --index >= 0;) {
              if (stack[index].orig === tagName) { break; }
            }
          }
          if (index < 0) { return; }  // Not opened.
          for (var i = stack.length; --i > index;) {
            var stackElRepTag = stack[i].rep;
            if (!(html4.ELEMENTS[stackElRepTag] &
                  html4.eflags['OPTIONAL_ENDTAG'])) {
              out.push('<\/', stackElRepTag, '>');
            }
          }
          if (index < stack.length) {
            tagName = stack[index].rep;
          }
          stack.length = index;
          out.push('<\/', tagName, '>');
        }
      },
      'pcdata': emit,
      'rcdata': emit,
      'cdata': emit,
      'endDoc': function(out) {
        for (; stack.length; stack.length--) {
          out.push('<\/', stack[stack.length - 1].rep, '>');
        }
      }
    });
  }

  var ALLOWED_URI_SCHEMES = /^(?:https?|mailto)$/i;

  function safeUri(uri, effect, ltype, hints, naiveUriRewriter) {
    if (!naiveUriRewriter) { return null; }
    try {
      var parsed = URI.parse('' + uri);
      if (parsed) {
        if (!parsed.hasScheme() ||
            ALLOWED_URI_SCHEMES.test(parsed.getScheme())) {
          var safe = naiveUriRewriter(parsed, effect, ltype, hints);
          return safe ? safe.toString() : null;
        }
      }
    } catch (e) {
      return null;
    }
    return null;
  }

  function log(logger, tagName, attribName, oldValue, newValue) {
    if (!attribName) {
      logger(tagName + " removed", {
        change: "removed",
        tagName: tagName
      });
    }
    if (oldValue !== newValue) {
      var changed = "changed";
      if (oldValue && !newValue) {
        changed = "removed";
      } else if (!oldValue && newValue)  {
        changed = "added";
      }
      logger(tagName + "." + attribName + " " + changed, {
        change: changed,
        tagName: tagName,
        attribName: attribName,
        oldValue: oldValue,
        newValue: newValue
      });
    }
  }

  function lookupAttribute(map, tagName, attribName) {
    var attribKey;
    attribKey = tagName + '::' + attribName;
    if (map.hasOwnProperty(attribKey)) {
      return map[attribKey];
    }
    attribKey = '*::' + attribName;
    if (map.hasOwnProperty(attribKey)) {
      return map[attribKey];
    }
    return void 0;
  }
  function getAttributeType(tagName, attribName) {
    return lookupAttribute(html4.ATTRIBS, tagName, attribName);
  }
  function getLoaderType(tagName, attribName) {
    return lookupAttribute(html4.LOADERTYPES, tagName, attribName);
  }
  function getUriEffect(tagName, attribName) {
    return lookupAttribute(html4.URIEFFECTS, tagName, attribName);
  }

  /**
   * Sanitizes attributes on an HTML tag.
   * @param {string} tagName An HTML tag name in lowercase.
   * @param {Array.<?string>} attribs An array of alternating names and values.
   * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to
   *     apply to URI attributes; it can return a new string value, or null to
   *     delete the attribute.  If unspecified, URI attributes are deleted.
   * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply
   *     to attributes containing HTML names, element IDs, and space-separated
   *     lists of classes; it can return a new string value, or null to delete
   *     the attribute.  If unspecified, these attributes are kept unchanged.
   * @return {Array.<?string>} The sanitized attributes as a list of alternating
   *     names and values, where a null value means to omit the attribute.
   */
  function sanitizeAttribs(tagName, attribs,
    opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {
    // TODO(felix8a): it's obnoxious that domado duplicates much of this
    // TODO(felix8a): maybe consistently enforce constraints like target=
    for (var i = 0; i < attribs.length; i += 2) {
      var attribName = attribs[i];
      var value = attribs[i + 1];
      var oldValue = value;
      var atype = null, attribKey;
      if ((attribKey = tagName + '::' + attribName,
           html4.ATTRIBS.hasOwnProperty(attribKey)) ||
          (attribKey = '*::' + attribName,
           html4.ATTRIBS.hasOwnProperty(attribKey))) {
        atype = html4.ATTRIBS[attribKey];
      }
      if (attribName === 'target' && value === '_blank') { // KajMagnus hack
        // Allow (don't clear value).
        // We've added rel=noopener already: [reverse_tabnabbing].
      }
      else if (attribName.substr(0, 5) === 'data-') { // KajMagnus hack
        // Allow data- attrs (don't clear). SECURITY SHOULD allow for custom html pages only? [5JMUKWA1]
      }
      else if (atype !== null) {
        switch (atype) {
          case html4.atype['NONE']: break;
          case html4.atype['SCRIPT']:
            value = null;
            if (opt_logger) {
              log(opt_logger, tagName, attribName, oldValue, value);
            }
            break;
          case html4.atype['STYLE']:
            if ('undefined' === typeof parseCssDeclarations) {
              value = null;
              if (opt_logger) {
                log(opt_logger, tagName, attribName, oldValue, value);
	      }
              break;
            }
            var sanitizedDeclarations = [];
            parseCssDeclarations(
                value,
                {
                  'declaration': function (property, tokens) {
                    var normProp = property.toLowerCase();
                    sanitizeCssProperty(
                        normProp, tokens,
                        opt_naiveUriRewriter
                        ? function (url) {
                            return safeUri(
                                url, html4.ueffects.SAME_DOCUMENT,
                                html4.ltypes.SANDBOXED,
                                {
                                  "TYPE": "CSS",
                                  "CSS_PROP": normProp
                                }, opt_naiveUriRewriter);
                          }
                        : null);
                    if (tokens.length) {
                      sanitizedDeclarations.push(
                          normProp + ': ' + tokens.join(' '));
                    }
                  }
                });
            value = sanitizedDeclarations.length > 0 ?
              sanitizedDeclarations.join(' ; ') : null;
            if (opt_logger) {
              log(opt_logger, tagName, attribName, oldValue, value);
            }
            break;
          case html4.atype['ID']:
          case html4.atype['IDREF']:
          case html4.atype['IDREFS']:
          case html4.atype['GLOBAL_NAME']:
          case html4.atype['LOCAL_NAME']:
          case html4.atype['CLASSES']:
            value = opt_nmTokenPolicy ? opt_nmTokenPolicy(value) : value;
            if (opt_logger) {
              log(opt_logger, tagName, attribName, oldValue, value);
            }
            break;
          case html4.atype['URI']:
            value = safeUri(value,
              getUriEffect(tagName, attribName),
              getLoaderType(tagName, attribName),
              {
                "TYPE": "MARKUP",
                "XML_ATTR": attribName,
                "XML_TAG": tagName
              }, opt_naiveUriRewriter);
              if (opt_logger) {
              log(opt_logger, tagName, attribName, oldValue, value);
            }
            break;
          case html4.atype['URI_FRAGMENT']:
            if (value && '#' === value.charAt(0)) {
              value = value.substring(1);  // remove the leading '#'
              value = opt_nmTokenPolicy ? opt_nmTokenPolicy(value) : value;
              if (value !== null && value !== void 0) {
                value = '#' + value;  // restore the leading '#'
              }
            } else {
              value = null;
            }
            if (opt_logger) {
              log(opt_logger, tagName, attribName, oldValue, value);
            }
            break;
          default:
            value = null;
            if (opt_logger) {
              log(opt_logger, tagName, attribName, oldValue, value);
            }
            break;
        }
      } else {
        value = null;
        if (opt_logger) {
          log(opt_logger, tagName, attribName, oldValue, value);
        }
      }
      attribs[i + 1] = value;
    }
    return attribs;
  }

  /**
   * Creates a tag policy that omits all tags marked UNSAFE in html4-defs.js
   * and applies the default attribute sanitizer with the supplied policy for
   * URI attributes and NMTOKEN attributes.
   * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to
   *     apply to URI attributes.  If not given, URI attributes are deleted.
   * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply
   *     to attributes containing HTML names, element IDs, and space-separated
   *     lists of classes.  If not given, such attributes are left unchanged.
   * @return {function(string, Array.<?string>)} A tagPolicy suitable for
   *     passing to html.sanitize.
   */
  function makeTagPolicy(
    opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {
    return function(tagName, attribs) {
      if (!(html4.ELEMENTS[tagName] & html4.eflags['UNSAFE'])) {
        return {
          'attribs': sanitizeAttribs(tagName, attribs,
            opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger)
        };
      } else {
        if (opt_logger) {
          log(opt_logger, tagName, undefined, undefined, undefined);
        }
      }
    };
  }

  /**
   * Sanitizes HTML tags and attributes according to a given policy.
   * @param {string} inputHtml The HTML to sanitize.
   * @param {function(string, Array.<?string>)} tagPolicy A function that
   *     decides which tags to accept and sanitizes their attributes (see
   *     makeHtmlSanitizer above for details).
   * @return {string} The sanitized HTML.
   */
  function sanitizeWithPolicy(inputHtml, tagPolicy) {
    var outputArray = [];
    makeHtmlSanitizer(tagPolicy)(inputHtml, outputArray);
    return outputArray.join('');
  }

  /**
   * Strips unsafe tags and attributes from HTML.
   * @param {string} inputHtml The HTML to sanitize.
   * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to
   *     apply to URI attributes.  If not given, URI attributes are deleted.
   * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply
   *     to attributes containing HTML names, element IDs, and space-separated
   *     lists of classes.  If not given, such attributes are left unchanged.
   */
  function sanitize(inputHtml,
    opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger) {
    var tagPolicy = makeTagPolicy(
      opt_naiveUriRewriter, opt_nmTokenPolicy, opt_logger);
    return sanitizeWithPolicy(inputHtml, tagPolicy);
  }

  // Export both quoted and unquoted names for Closure linkage.
  var html = {};
  html.escapeAttrib = html['escapeAttrib'] = escapeAttrib;
  html.makeHtmlSanitizer = html['makeHtmlSanitizer'] = makeHtmlSanitizer;
  html.makeSaxParser = html['makeSaxParser'] = makeSaxParser;
  html.makeTagPolicy = html['makeTagPolicy'] = makeTagPolicy;
  html.normalizeRCData = html['normalizeRCData'] = normalizeRCData;
  html.sanitize = html['sanitize'] = sanitize;
  html.sanitizeAttribs = html['sanitizeAttribs'] = sanitizeAttribs;
  html.sanitizeWithPolicy = html['sanitizeWithPolicy'] = sanitizeWithPolicy;
  html.unescapeEntities = html['unescapeEntities'] = unescapeEntities;
  return html;
})(html4);

var html_sanitize = html['sanitize'];

// Exports for Closure compiler.  Note this file is also cajoled
// for domado and run in an environment without 'window'
if (typeof window !== 'undefined') {
  window['html'] = html;
  window['html_sanitize'] = html_sanitize;
}


/**
 * Placed in this file because it made sense long ago, with Rhino — which is no longer
 * in use though. CLEAN_UP move to some .ts file instead /KajMagnus
 */
function googleCajaSanitizeHtml(htmlTextUnsafe, allowClassAndIdAttr,
    allowDataAttr, followLinks) {

  // Configure the sanitizer.
  // 1. html-sanitizer.js's function sanitizeAttribs by default allows
  // only the http/https/mailto URI schemes, and relative URLs
  // (but not e.g. `javascript:'). This is reasonably safe?
  // SECURITY COULD prevent URLs with any '?' though.
  // SECURITY COULD prevent URLs starting with an IP number? (so cannot
  // connect to local gateway)
  // SECURITY write tests for HTML sanitization, for both article and comments.
  // 2. sanitizeAttribs by default allows all id and class attributes.
  // We don't want anyone to be able to use the .dw-* classes/ids though,
  // so filter them out.

  function uriPolicy(url) {
    return url;
  }

  function classAndIdPolicy(token) {
    // For now, always allow these link preview related classes:
    // A link-preview-loading spinning icon, and link preview placeholders.
    // See: link-previews-markdown-it-plugin.ts  [6Q8KEF2].
    if (token === 'icon icon-loading')
      return token;
    if (/^c_LnPv-[\w-]+$/.test(token))
      return token;
    if (/^c_LnPvNone(-[\w-]+)?$/.test(token))
      return token;

    if (!allowClassAndIdAttr)
      return '';

    // These are for Ty's own classes and ids.
    if (/^dw-/.test(token)) return '';  // old
    if (/^ed-/.test(token)) return '';   // old
    if ('esMention' === token) return token; // mentions = ok
    if (/^es[A-Z]/.test(token)) return '';   // old
    if (/^the[A-Z]/.test(token)) return '';  // old (for ids)
    if (/^[a-z]?-/.test(token)) return '';   // old
    if (/^[a-oq-z]?_/.test(token)) return ''; // current: s_, t_, and e_ are magic prefixes. (2PUKRST0)
                                              // but allow p_, for "Public API".
    return token;
  }

  function dataPolicy(attrName, value) {
    return allowDataAttr ? value : null;
  }

  // Sanitize, using 2 different sanitizers. There might be security bugs in a sanitizer,
  // but it's unlikely that two different sanitizers have the same bug(s). Gulpfile.js [6FKP40].
  //
  // For now, let's call sanitizeHtml (https://github.com/punkave/sanitize-html) from here,
  // although this function is named googleCaja....  CLEAN_UP: create another function that
  // calls first sanitizeHtml, then Caja
  //
  var sanitizeHtmlConfig = {
    allowedTags: [
      // Allowed by default
      'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',
      'nl', 'li', 'b', 'i', 'u', 'strong', 'em', 's', 'strike', 'code', 'hr', 'br', 'div',
      'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre',
      // Why not included by default?
      'span', 'small', 'pre', 'code', 'var', 'samp', 'kbd', 'sup', 'sub',
      // Custom HTML pages
      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
      // HTML5
      // (skip for now: dialog)
      'article', 'aside', 'bdi', 'details', 'figcaption', 'figure',
      'footer', 'header', 'main', 'mark', 'meter', 'nav', 'progress', 'rp',
      'rt', 'ruby', 'section', 'summary', 'time', 'wbr',
      // Media
      'img', 'video', 'source', 'track',  // skip for now though: 'audio'
      // Custom forms
      'form', 'label', 'input', 'textarea', 'button', 'datalist', 'option',
      // Allow <head>, just so that ... (4JDKTF20)
      'head'],

    // doesn't work, not supported by sanitize-html (https://github.com/punkave/sanitize-html/issues/4)
    // Currently (Aug 30 2017) *all* data- attrs here are FB/Twitter/Google Like button stuff.
    allowedAttributes: {
      a: ['href', 'name', 'target', 'rel', 'download'],
      img: ['width', 'height', 'src'],
      video: ['width', 'height', 'src', 'controls', 'autoplay', 'loop', 'muted', 'poster', 'preload'],
      source: ['src', 'type'],
      form: ['novalidate'], // *not* action= or method= though — handled by Javascript instead
      label: ['for'],
      input: ['type', 'name', 'placeholder', 'readonly', 'disabled', 'size', 'maxlength',
        'autocomplete', 'pattern', 'title', 'required', 'step', 'min', 'max', 'multiple', 'list',
        'width', 'height', 'value', 'checked'],
        // skip?: formtarget
      textarea: ['name'],
      button: ['type'],
      th: ['rowspan', 'colspan'],  // what about:  'abbr', 'scope', 'sorted', 'headers',
      td: ['rowspan', 'colspan'],
      // All elems:
      // Don't allow style=.., because of clickjacking. (Caja seems to remove
      // Javascript from inside CSS (e.g. url(javascript:...)) and position:fixed, however
      // Caja allows position:absolute so clickjacking would still be a little bit possbible.)
      // SECURITY SHOULD maybe allow 'class' only on custom html pages, orig post? [5JMUKWA1]
      '*': ['id', 'class', 'data-*']
    },

    // allowedClasses: { elem: [...classes...] }

    // Remove everything in <head>, if present. Otherwise, for: <head><title>Whatever</..></..>,
    // the tags are removed, but "Whatever" is kept.
    exclusiveFilter: function(frame) {
      // ... we can remove it completely here: (4JDKTF20)
      return frame.tag === 'head'
    }
  };

    //var siteId = debiki2.ReactStore.allData().siteId;
    //if (siteId === 98) {  // doesn't work, site id not updated when just rendering markdown.
                            // instead, always rel=follow StackExchange links, for now.
      // This is the insightful.demo.talkyard.io site — so make links to StackExchange rel=follow,
      // as per the cc-by-sa license. This is a hack, but ... no time for the "real" solution
      // right now, which SECURITY would probably be to rel=follow links in posts-upvoted-or-created-
      // -by-trusted-members.
  sanitizeHtmlConfig.transformTags = {
    'a': function(tagName, attribs) {
      var newAttribs = _.clone(attribs) || {};
      if (!followLinks) {
          // SHOULD add a 'rel=follow links to domains: ...' config value instead of this: [relfollow]
          if (/^https:\/\/[^/.#?]+\.stackexchange\.com\/.*/.test(attribs.href) ||
              /^https:\/\/stackoverflow\.com\/.*/.test(attribs.href)) {
            // Allow StackExchange and StackOverflow rel=follow links, fine.
            newAttribs.rel = 'follow';  // [2QWGRC8P]
          }
          else if (attribs.href === '/' || /^\/[^/:][^:]*$/.test(attribs.href)) {
            // Don't add nofollow to site local links, i.e. that don't start with 'http(s)://'
            // and also don't start with '///', but instead starts with '/something'.
          }
          else {
            // rel=nofollow added here: [rel_nofollow] too.
            newAttribs.rel = 'nofollow';  // TyTRELNOFLW01
          }
      }

      // Stop [reverse_tabnabbing],  TyTREVTABNAB01
      // https://owasp.org/www-community/attacks/Reverse_Tabnabbing
      // Could do only if:  newAttribs.target.indexOf('_blank') >= 0
      // but this is simpler:
      if (newAttribs.target) {
        var space = newAttribs.rel ? ' ' : '';
        newAttribs.rel = (newAttribs.rel || '') + space + 'noopener';
      }

      return { tagName: 'a', attribs: newAttribs };
    }
  };

  // UX COULD [disallow_h1_h2], annoying if ppl can insert such large titles
  // in their posts?

  // SECURITY SHOULD remove classes & ids like 's_...' and 't_...' — that's internal stuff, and
  // could be used to make the post look weird. (Fairly harmless though.)
  // What? But I remove that already (2PUKRST0)
  // See: https://github.com/punkave/sanitize-html#transformations

  // Sanitize with https://github.com/punkave/sanitize-html:
  var sanitized = sanitizeHtml(htmlTextUnsafe, sanitizeHtmlConfig);
  // Then with Google Caja:
  var superSanitized = html_sanitize(sanitized, uriPolicy, classAndIdPolicy, dataPolicy);
  return superSanitized;
}


// If this is a browser (but not server side JS), export googleCajaSanitizeHtml.
if (typeof debiki !== 'undefined')
  debiki.internal.googleCajaSanitizeHtml = googleCajaSanitizeHtml;

// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: node_modules/react/umd/react.production.min.js  */ /** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
;(function(d,r){"object"===typeof exports&&"undefined"!==typeof module?r(exports):"function"===typeof define&&define.amd?define(["exports"],r):(d=d||self,r(d.React={}))})(this,function(d){function r(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
function w(a,b,c){this.props=a;this.context=b;this.refs=ba;this.updater=c||ca}function da(){}function L(a,b,c){this.props=a;this.context=b;this.refs=ba;this.updater=c||ca}function ea(a,b,c){var g,e={},fa=null,d=null;if(null!=b)for(g in void 0!==b.ref&&(d=b.ref),void 0!==b.key&&(fa=""+b.key),b)ha.call(b,g)&&!ia.hasOwnProperty(g)&&(e[g]=b[g]);var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){for(var k=Array(h),f=0;f<h;f++)k[f]=arguments[f+2];e.children=k}if(a&&a.defaultProps)for(g in h=a.defaultProps,
h)void 0===e[g]&&(e[g]=h[g]);return{$$typeof:x,type:a,key:fa,ref:d,props:e,_owner:M.current}}function va(a,b){return{$$typeof:x,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return"object"===typeof a&&null!==a&&a.$$typeof===x}function wa(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}function ja(a,b,c,g){if(C.length){var e=C.pop();e.result=a;e.keyPrefix=b;e.func=c;e.context=g;e.count=0;return e}return{result:a,keyPrefix:b,func:c,
context:g,count:0}}function ka(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>C.length&&C.push(a)}function O(a,b,c,g){var e=typeof a;if("undefined"===e||"boolean"===e)a=null;var d=!1;if(null===a)d=!0;else switch(e){case "string":case "number":d=!0;break;case "object":switch(a.$$typeof){case x:case xa:d=!0}}if(d)return c(g,a,""===b?"."+P(a,0):b),1;d=0;b=""===b?".":b+":";if(Array.isArray(a))for(var f=0;f<a.length;f++){e=a[f];var h=b+P(e,f);d+=O(e,h,c,g)}else if(null===a||
"object"!==typeof a?h=null:(h=la&&a[la]||a["@@iterator"],h="function"===typeof h?h:null),"function"===typeof h)for(a=h.call(a),f=0;!(e=a.next()).done;)e=e.value,h=b+P(e,f++),d+=O(e,h,c,g);else if("object"===e)throw c=""+a,Error(r(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return d}function Q(a,b,c){return null==a?0:O(a,"",b,c)}function P(a,b){return"object"===typeof a&&null!==a&&null!=a.key?wa(a.key):b.toString(36)}function ya(a,b,c){a.func.call(a.context,b,
a.count++)}function za(a,b,c){var g=a.result,e=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?R(a,g,c,function(a){return a}):null!=a&&(N(a)&&(a=va(a,e+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(ma,"$&/")+"/")+c)),g.push(a))}function R(a,b,c,g,e){var d="";null!=c&&(d=(""+c).replace(ma,"$&/")+"/");b=ja(b,d,g,e);Q(a,za,b);ka(b)}function t(){var a=na.current;if(null===a)throw Error(r(321));return a}function S(a,b){var c=a.length;a.push(b);a:for(;;){var g=c-1>>>1,e=a[g];if(void 0!==
e&&0<D(e,b))a[g]=b,a[c]=e,c=g;else break a}}function n(a){a=a[0];return void 0===a?null:a}function E(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var g=0,e=a.length;g<e;){var d=2*(g+1)-1,f=a[d],h=d+1,k=a[h];if(void 0!==f&&0>D(f,c))void 0!==k&&0>D(k,f)?(a[g]=k,a[h]=c,g=h):(a[g]=f,a[d]=c,g=d);else if(void 0!==k&&0>D(k,c))a[g]=k,a[h]=c,g=h;else break a}}return b}return null}function D(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}function F(a){for(var b=n(u);null!==
b;){if(null===b.callback)E(u);else if(b.startTime<=a)E(u),b.sortIndex=b.expirationTime,S(p,b);else break;b=n(u)}}function T(a){y=!1;F(a);if(!v)if(null!==n(p))v=!0,z(U);else{var b=n(u);null!==b&&G(T,b.startTime-a)}}function U(a,b){v=!1;y&&(y=!1,V());H=!0;var c=m;try{F(b);for(l=n(p);null!==l&&(!(l.expirationTime>b)||a&&!W());){var g=l.callback;if(null!==g){l.callback=null;m=l.priorityLevel;var e=g(l.expirationTime<=b);b=q();"function"===typeof e?l.callback=e:l===n(p)&&E(p);F(b)}else E(p);l=n(p)}if(null!==
l)var d=!0;else{var f=n(u);null!==f&&G(T,f.startTime-b);d=!1}return d}finally{l=null,m=c,H=!1}}function oa(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var f="function"===typeof Symbol&&Symbol.for,x=f?Symbol.for("react.element"):60103,xa=f?Symbol.for("react.portal"):60106,Aa=f?Symbol.for("react.fragment"):60107,Ba=f?Symbol.for("react.strict_mode"):60108,Ca=f?Symbol.for("react.profiler"):60114,Da=f?Symbol.for("react.provider"):60109,
Ea=f?Symbol.for("react.context"):60110,Fa=f?Symbol.for("react.forward_ref"):60112,Ga=f?Symbol.for("react.suspense"):60113,Ha=f?Symbol.for("react.memo"):60115,Ia=f?Symbol.for("react.lazy"):60116,la="function"===typeof Symbol&&Symbol.iterator,pa=Object.getOwnPropertySymbols,Ja=Object.prototype.hasOwnProperty,Ka=Object.prototype.propertyIsEnumerable,I=function(){try{if(!Object.assign)return!1;var a=new String("abc");a[5]="de";if("5"===Object.getOwnPropertyNames(a)[0])return!1;var b={};for(a=0;10>a;a++)b["_"+
String.fromCharCode(a)]=a;if("0123456789"!==Object.getOwnPropertyNames(b).map(function(a){return b[a]}).join(""))return!1;var c={};"abcdefghijklmnopqrst".split("").forEach(function(a){c[a]=a});return"abcdefghijklmnopqrst"!==Object.keys(Object.assign({},c)).join("")?!1:!0}catch(g){return!1}}()?Object.assign:function(a,b){if(null===a||void 0===a)throw new TypeError("Object.assign cannot be called with null or undefined");var c=Object(a);for(var g,e=1;e<arguments.length;e++){var d=Object(arguments[e]);
for(var f in d)Ja.call(d,f)&&(c[f]=d[f]);if(pa){g=pa(d);for(var h=0;h<g.length;h++)Ka.call(d,g[h])&&(c[g[h]]=d[g[h]])}}return c},ca={isMounted:function(a){return!1},enqueueForceUpdate:function(a,b,c){},enqueueReplaceState:function(a,b,c,d){},enqueueSetState:function(a,b,c,d){}},ba={};w.prototype.isReactComponent={};w.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(r(85));this.updater.enqueueSetState(this,a,b,"setState")};w.prototype.forceUpdate=
function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};da.prototype=w.prototype;f=L.prototype=new da;f.constructor=L;I(f,w.prototype);f.isPureReactComponent=!0;var M={current:null},ha=Object.prototype.hasOwnProperty,ia={key:!0,ref:!0,__self:!0,__source:!0},ma=/\/+/g,C=[],na={current:null},X;if("undefined"===typeof window||"function"!==typeof MessageChannel){var A=null,qa=null,ra=function(){if(null!==A)try{var a=q();A(!0,a);A=null}catch(b){throw setTimeout(ra,0),b;}},La=Date.now();var q=
function(){return Date.now()-La};var z=function(a){null!==A?setTimeout(z,0,a):(A=a,setTimeout(ra,0))};var G=function(a,b){qa=setTimeout(a,b)};var V=function(){clearTimeout(qa)};var W=function(){return!1};f=X=function(){}}else{var Y=window.performance,sa=window.Date,
    Ma=setTimeout, // HMMM
    Na=window.clearTimeout;"undefined"!==typeof console&&(f=window.cancelAnimationFrame,"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),
"function"!==typeof f&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));if("object"===typeof Y&&"function"===typeof Y.now)q=function(){return Y.now()};else{var Oa=sa.now();q=function(){return sa.now()-Oa}}var J=!1,K=null,Z=-1,ta=5,ua=0;W=function(){return q()>=ua};f=function(){};X=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):
ta=0<a?Math.floor(1E3/a):5};var B=new MessageChannel,aa=B.port2;B.port1.onmessage=function(){if(null!==K){var a=q();ua=a+ta;try{K(!0,a)?aa.postMessage(null):(J=!1,K=null)}catch(b){throw aa.postMessage(null),b;}}else J=!1};z=function(a){K=a;J||(J=!0,aa.postMessage(null))};G=function(a,b){Z=Ma(function(){a(q())},b)};V=function(){Na(Z);Z=-1}}var p=[],u=[],Pa=1,l=null,m=3,H=!1,v=!1,y=!1,Qa=0;B={ReactCurrentDispatcher:na,ReactCurrentOwner:M,IsSomeRendererActing:{current:!1},assign:I};I(B,{Scheduler:{__proto__:null,
unstable_ImmediatePriority:1,unstable_UserBlockingPriority:2,unstable_NormalPriority:3,unstable_IdlePriority:5,unstable_LowPriority:4,unstable_runWithPriority:function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=m;m=a;try{return b()}finally{m=c}},unstable_next:function(a){switch(m){case 1:case 2:case 3:var b=3;break;default:b=m}var c=m;m=b;try{return a()}finally{m=c}},unstable_scheduleCallback:function(a,b,c){var d=q();if("object"===typeof c&&null!==c){var e=c.delay;
e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:oa(a)}else c=oa(a),e=d;c=e+c;a={id:Pa++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,S(u,a),null===n(p)&&a===n(u)&&(y?V():y=!0,G(T,e-d))):(a.sortIndex=c,S(p,a),v||H||(v=!0,z(U)));return a},unstable_cancelCallback:function(a){a.callback=null},unstable_wrapCallback:function(a){var b=m;return function(){var c=m;m=b;try{return a.apply(this,arguments)}finally{m=c}}},unstable_getCurrentPriorityLevel:function(){return m},
unstable_shouldYield:function(){var a=q();F(a);var b=n(p);return b!==l&&null!==l&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<l.expirationTime||W()},unstable_requestPaint:f,unstable_continueExecution:function(){v||H||(v=!0,z(U))},unstable_pauseExecution:function(){},unstable_getFirstCallbackNode:function(){return n(p)},get unstable_now(){return q},get unstable_forceFrameRate(){return X},unstable_Profiling:null},SchedulerTracing:{__proto__:null,__interactionsRef:null,__subscriberRef:null,
unstable_clear:function(a){return a()},unstable_getCurrent:function(){return null},unstable_getThreadID:function(){return++Qa},unstable_trace:function(a,b,c){return c()},unstable_wrap:function(a){return a},unstable_subscribe:function(a){},unstable_unsubscribe:function(a){}}});d.Children={map:function(a,b,c){if(null==a)return a;var d=[];R(a,d,null,b,c);return d},forEach:function(a,b,c){if(null==a)return a;b=ja(null,null,b,c);Q(a,ya,b);ka(b)},count:function(a){return Q(a,function(){return null},null)},
toArray:function(a){var b=[];R(a,b,null,function(a){return a});return b},only:function(a){if(!N(a))throw Error(r(143));return a}};d.Component=w;d.Fragment=Aa;d.Profiler=Ca;d.PureComponent=L;d.StrictMode=Ba;d.Suspense=Ga;d.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B;d.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(r(267,a));var d=I({},a.props),e=a.key,f=a.ref,m=a._owner;if(null!=b){void 0!==b.ref&&(f=b.ref,m=M.current);void 0!==b.key&&(e=""+b.key);if(a.type&&a.type.defaultProps)var h=
a.type.defaultProps;for(k in b)ha.call(b,k)&&!ia.hasOwnProperty(k)&&(d[k]=void 0===b[k]&&void 0!==h?h[k]:b[k])}var k=arguments.length-2;if(1===k)d.children=c;else if(1<k){h=Array(k);for(var l=0;l<k;l++)h[l]=arguments[l+2];d.children=h}return{$$typeof:x,type:a.type,key:e,ref:f,props:d,_owner:m}};d.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:Ea,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:Da,_context:a};return a.Consumer=
a};d.createElement=ea;d.createFactory=function(a){var b=ea.bind(null,a);b.type=a;return b};d.createRef=function(){return{current:null}};d.forwardRef=function(a){return{$$typeof:Fa,render:a}};d.isValidElement=N;d.lazy=function(a){return{$$typeof:Ia,_ctor:a,_status:-1,_result:null}};d.memo=function(a,b){return{$$typeof:Ha,type:a,compare:void 0===b?null:b}};d.useCallback=function(a,b){return t().useCallback(a,b)};d.useContext=function(a,b){return t().useContext(a,b)};d.useDebugValue=function(a,b){};
d.useEffect=function(a,b){return t().useEffect(a,b)};d.useImperativeHandle=function(a,b,c){return t().useImperativeHandle(a,b,c)};d.useLayoutEffect=function(a,b){return t().useLayoutEffect(a,b)};d.useMemo=function(a,b){return t().useMemo(a,b)};d.useReducer=function(a,b,c){return t().useReducer(a,b,c)};d.useRef=function(a){return t().useRef(a)};d.useState=function(a){return t().useState(a)};d.version="16.13.1"});


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: node_modules/react-dom/umd/react-dom-server.browser.production.min.js  */ /** @license React v16.13.1
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
;(function(k,p){"object"===typeof exports&&"undefined"!==typeof module?module.exports=p(require("react")):"function"===typeof define&&define.amd?define(["react"],p):(k=k||self,k.ReactDOMServer=p(k.React))})(this,function(k){function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
function ta(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(c){0===a._status&&(c=c.default,a._status=1,a._result=c)},function(c){0===a._status&&(a._status=2,a._result=c)})}}function D(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case L:return"Fragment";case W:return"Portal";case X:return"Profiler";case Y:return"StrictMode";case M:return"Suspense";case Z:return"SuspenseList"}if("object"===
typeof a)switch(a.$$typeof){case aa:return"Context.Consumer";case N:return"Context.Provider";case ba:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case ca:return D(a.type);case ua:return D(a.render);case da:if(a=1===a._status?a._result:null)return D(a)}return null}function E(a,b){for(var c=a._threadCount|0;c<=b;c++)a[c]=a._currentValue2,a._threadCount=c+1}function va(a,b,c,d){if(d&&(d=a.contextType,"object"===typeof d&&null!==d))return E(d,
c),d[c];if(a=a.contextTypes){c={};for(var g in a)c[g]=b[g];b=c}else b=ea;return b}function fa(a){if(ha.call(ia,a))return!0;if(ha.call(ja,a))return!1;if(wa.test(a))return ia[a]=!0;ja[a]=!0;return!1}function xa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}function ya(a,b,c,d){if(null===b||"undefined"===typeof b||
xa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function n(a,b,c,d,g,h){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=g;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=h}function C(a){if("boolean"===typeof a||"number"===typeof a)return""+a;a=""+a;var b=za.exec(a);if(b){var c="",d,g=0;for(d=b.index;d<a.length;d++){switch(a.charCodeAt(d)){case 34:b=
"&quot;";break;case 38:b="&amp;";break;case 39:b="&#x27;";break;case 60:b="&lt;";break;case 62:b="&gt;";break;default:continue}g!==d&&(c+=a.substring(g,d));g=d+1;c+=b}a=g!==d?c+a.substring(g,d):c}return a}function Aa(a,b){var c=m.hasOwnProperty(a)?m[a]:null;var d;if(d="style"!==a)d=null!==c?0===c.type:!(2<a.length)||"o"!==a[0]&&"O"!==a[0]||"n"!==a[1]&&"N"!==a[1]?!1:!0;if(d||ya(a,b,c,!1))return"";if(null!==c){a=c.attributeName;d=c.type;if(3===d||4===d&&!0===b)return a+'=""';c.sanitizeURL&&(b=""+b);
return a+'="'+(C(b)+'"')}return fa(a)?a+'="'+(C(b)+'"'):""}function Ba(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}function A(){if(null===u)throw Error(p(321));return u}function ka(){if(0<I)throw Error(p(312));return{memoizedState:null,queue:null,next:null}}function O(){null===e?null===J?(F=!1,J=e=ka()):(F=!0,e=J):null===e.next?(F=!1,e=e.next=ka()):(F=!0,e=e.next);return e}function la(a,b,c,d){for(;P;)P=!1,I+=1,e=null,c=a(b,d);J=u=null;I=0;e=t=null;return c}function ma(a,b){return"function"===
typeof b?b(a):b}function na(a,b,c){u=A();e=O();if(F){var d=e.queue;b=d.dispatch;if(null!==t&&(c=t.get(d),void 0!==c)){t.delete(d);d=e.memoizedState;do d=a(d,c.action),c=c.next;while(null!==c);e.memoizedState=d;return[d,b]}return[e.memoizedState,b]}a=a===ma?"function"===typeof b?b():b:void 0!==c?c(b):b;e.memoizedState=a;a=e.queue={last:null,dispatch:null};a=a.dispatch=Ca.bind(null,u,a);return[e.memoizedState,a]}function Ca(a,b,c){if(!(25>I))throw Error(p(301));if(a===u)if(P=!0,a={action:c,next:null},
null===t&&(t=new Map),c=t.get(b),void 0===c)t.set(b,a);else{for(b=c;null!==b.next;)b=b.next;b.next=a}}function Q(){}function oa(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Da(a){if(void 0===a||null===a)return a;var b="";k.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function pa(a,b){if(void 0===a)throw Error(p(152,D(b)||"Component"));}function Ea(a,b,c){function d(d,
h){var f=h.prototype&&h.prototype.isReactComponent,g=va(h,b,c,f),v=[],z=!1,e={isMounted:function(a){return!1},enqueueForceUpdate:function(a){if(null===v)return null},enqueueReplaceState:function(a,c){z=!0;v=[c]},enqueueSetState:function(a,c){if(null===v)return null;v.push(c)}};if(f){if(f=new h(d.props,g,e),"function"===typeof h.getDerivedStateFromProps){var l=h.getDerivedStateFromProps.call(null,d.props,f.state);null!=l&&(f.state=x({},f.state,l))}}else if(u={},f=h(d.props,g,e),f=la(h,d.props,f,g),
null==f||null==f.render){a=f;pa(a,h);return}f.props=d.props;f.context=g;f.updater=e;e=f.state;void 0===e&&(f.state=e=null);if("function"===typeof f.UNSAFE_componentWillMount||"function"===typeof f.componentWillMount)if("function"===typeof f.componentWillMount&&"function"!==typeof h.getDerivedStateFromProps&&f.componentWillMount(),"function"===typeof f.UNSAFE_componentWillMount&&"function"!==typeof h.getDerivedStateFromProps&&f.UNSAFE_componentWillMount(),v.length){e=v;var m=z;v=null;z=!1;if(m&&1===
e.length)f.state=e[0];else{l=m?e[0]:f.state;var q=!0;for(m=m?1:0;m<e.length;m++){var r=e[m];r="function"===typeof r?r.call(f,l,d.props,g):r;null!=r&&(q?(q=!1,l=x({},l,r)):x(l,r))}f.state=l}}else v=null;a=f.render();pa(a,h);if("function"===typeof f.getChildContext&&(d=h.childContextTypes,"object"===typeof d)){var k=f.getChildContext();for(var n in k)if(!(n in d))throw Error(p(108,D(h)||"Unknown",n));}k&&(b=x({},b,k))}for(;k.isValidElement(a);){var g=a,h=g.type;if("function"!==typeof h)break;d(g,h)}return{child:a,
context:b}}var x=k.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign,l="function"===typeof Symbol&&Symbol.for,W=l?Symbol.for("react.portal"):60106,L=l?Symbol.for("react.fragment"):60107,Y=l?Symbol.for("react.strict_mode"):60108,X=l?Symbol.for("react.profiler"):60114,N=l?Symbol.for("react.provider"):60109,aa=l?Symbol.for("react.context"):60110,Fa=l?Symbol.for("react.concurrent_mode"):60111,ba=l?Symbol.for("react.forward_ref"):60112,M=l?Symbol.for("react.suspense"):60113,Z=l?Symbol.for("react.suspense_list"):
60120,ca=l?Symbol.for("react.memo"):60115,da=l?Symbol.for("react.lazy"):60116,ua=l?Symbol.for("react.block"):60121,Ga=l?Symbol.for("react.fundamental"):60117,Ha=l?Symbol.for("react.scope"):60119;l=k.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;l.hasOwnProperty("ReactCurrentDispatcher")||(l.ReactCurrentDispatcher={current:null});l.hasOwnProperty("ReactCurrentBatchConfig")||(l.ReactCurrentBatchConfig={suspense:null});for(var ea={},q=new Uint16Array(16),K=0;15>K;K++)q[K]=K+1;q[15]=0;var wa=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
ha=Object.prototype.hasOwnProperty,ja={},ia={},m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){m[a]=new n(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];m[b]=new n(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){m[a]=new n(a,
2,!1,a.toLowerCase(),null,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){m[a]=new n(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){m[a]=new n(a,3,!1,a.toLowerCase(),null,!1)});["checked","multiple","muted","selected"].forEach(function(a){m[a]=
new n(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){m[a]=new n(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){m[a]=new n(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){m[a]=new n(a,5,!1,a.toLowerCase(),null,!1)});var S=/[\-:]([a-z])/g,T=function(a){return a[1].toUpperCase()};"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=
a.replace(S,T);m[b]=new n(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(S,T);m[b]=new n(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(S,T);m[b]=new n(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){m[a]=new n(a,1,!1,a.toLowerCase(),null,!1)});m.xlinkHref=new n("xlinkHref",1,!1,"xlink:href",
"http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){m[a]=new n(a,1,!1,a.toLowerCase(),null,!0)});var za=/["'&<>]/,Ia="function"===typeof Object.is?Object.is:Ba,u=null,J=null,e=null,F=!1,P=!1,t=null,I=0,G=0,Ja={readContext:function(a,b){b=G;E(a,b);return a[b]},useContext:function(a,b){A();b=G;E(a,b);return a[b]},useMemo:function(a,b){u=A();e=O();b=void 0===b?null:b;if(null!==e){var c=e.memoizedState;if(null!==c&&null!==b){a:{var d=c[1];if(null===d)d=!1;else{for(var g=
0;g<d.length&&g<b.length;g++)if(!Ia(b[g],d[g])){d=!1;break a}d=!0}}if(d)return c[0]}}a=a();e.memoizedState=[a,b];return a},useReducer:na,useRef:function(a){u=A();e=O();var b=e.memoizedState;return null===b?(a={current:a},e.memoizedState=a):b},useState:function(a){return na(ma,a)},useLayoutEffect:function(a,b){},useCallback:function(a,b){return a},useImperativeHandle:Q,useEffect:Q,useDebugValue:Q,useResponder:function(a,b){return{props:b,responder:a}},useDeferredValue:function(a,b){A();return a},useTransition:function(a){A();
return[function(a){a()},!1]}},qa={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Ka=x({menuitem:!0},qa),H={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,
gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},La=["Webkit","ms","Moz","O"];Object.keys(H).forEach(function(a){La.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);H[b]=H[a]})});var Ma=/([A-Z])/g,Na=/^ms-/,B=k.Children.toArray,U=l.ReactCurrentDispatcher,
Oa={listing:!0,pre:!0,textarea:!0},Pa=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,ra={},V={},Qa=Object.prototype.hasOwnProperty,Ra={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null,suppressHydrationWarning:null},sa=function(){function a(a,b){k.isValidElement(a)?a.type!==L?a=[a]:(a=a.props.children,a=k.isValidElement(a)?[a]:B(a)):a=B(a);a={type:null,domNamespace:"http://www.w3.org/1999/xhtml",children:a,childIndex:0,context:ea,footer:""};var c=q[0];if(0===c){var h=q;c=h.length;var d=
2*c;if(!(65536>=d))throw Error(p(304));var z=new Uint16Array(d);z.set(h);q=z;q[0]=c+1;for(h=c;h<d-1;h++)q[h]=h+1;q[d-1]=0}else q[0]=q[c];this.threadID=c;this.stack=[a];this.exhausted=!1;this.currentSelectValue=null;this.previousWasTextNode=!1;this.makeStaticMarkup=b;this.suspenseDepth=0;this.contextIndex=-1;this.contextStack=[];this.contextValueStack=[]}var b=a.prototype;b.destroy=function(){if(!this.exhausted){this.exhausted=!0;this.clearProviders();var a=this.threadID;q[a]=q[0];q[0]=a}};b.pushProvider=
function(a){var b=++this.contextIndex,c=a.type._context,h=this.threadID;E(c,h);var v=c[h];this.contextStack[b]=c;this.contextValueStack[b]=v;c[h]=a.props.value};b.popProvider=function(a){a=this.contextIndex;var b=this.contextStack[a],c=this.contextValueStack[a];this.contextStack[a]=null;this.contextValueStack[a]=null;this.contextIndex--;b[this.threadID]=c};b.clearProviders=function(){for(var a=this.contextIndex;0<=a;a--)this.contextStack[a][this.threadID]=this.contextValueStack[a]};b.read=function(a){if(this.exhausted)return null;
var b=G;G=this.threadID;var c=U.current;U.current=Ja;try{for(var h=[""],v=!1;h[0].length<a;){if(0===this.stack.length){this.exhausted=!0;var z=this.threadID;q[z]=q[0];q[0]=z;break}var f=this.stack[this.stack.length-1];if(v||f.childIndex>=f.children.length){var e=f.footer;""!==e&&(this.previousWasTextNode=!1);this.stack.pop();if("select"===f.type)this.currentSelectValue=null;else if(null!=f.type&&null!=f.type.type&&f.type.type.$$typeof===N)this.popProvider(f.type);else if(f.type===M){this.suspenseDepth--;
var l=h.pop();if(v){v=!1;var m=f.fallbackFrame;if(!m)throw Error(p(303));this.stack.push(m);h[this.suspenseDepth]+="\x3c!--$!--\x3e";continue}else h[this.suspenseDepth]+=l}h[this.suspenseDepth]+=e}else{var k=f.children[f.childIndex++],n="";try{n+=this.render(k,f.context,f.domNamespace)}catch(R){if(null!=R&&"function"===typeof R.then)throw Error(p(294));throw R;}finally{}h.length<=this.suspenseDepth&&h.push("");h[this.suspenseDepth]+=n}}return h[0]}finally{U.current=c,G=b}};b.render=function(a,b,g){if("string"===
typeof a||"number"===typeof a){g=""+a;if(""===g)return"";if(this.makeStaticMarkup)return C(g);if(this.previousWasTextNode)return"\x3c!-- --\x3e"+C(g);this.previousWasTextNode=!0;return C(g)}b=Ea(a,b,this.threadID);a=b.child;b=b.context;if(null===a||!1===a)return"";if(!k.isValidElement(a)){if(null!=a&&null!=a.$$typeof){g=a.$$typeof;if(g===W)throw Error(p(257));throw Error(p(258,g.toString()));}a=B(a);this.stack.push({type:null,domNamespace:g,children:a,childIndex:0,context:b,footer:""});return""}var c=
a.type;if("string"===typeof c)return this.renderDOM(a,b,g);switch(c){case Y:case Fa:case X:case Z:case L:return a=B(a.props.children),this.stack.push({type:null,domNamespace:g,children:a,childIndex:0,context:b,footer:""}),"";case M:throw Error(p(294));}if("object"===typeof c&&null!==c)switch(c.$$typeof){case ba:u={};var d=c.render(a.props,a.ref);d=la(c.render,a.props,d,a.ref);d=B(d);this.stack.push({type:null,domNamespace:g,children:d,childIndex:0,context:b,footer:""});return"";case ca:return a=[k.createElement(c.type,
x({ref:a.ref},a.props))],this.stack.push({type:null,domNamespace:g,children:a,childIndex:0,context:b,footer:""}),"";case N:return c=B(a.props.children),g={type:a,domNamespace:g,children:c,childIndex:0,context:b,footer:""},this.pushProvider(a),this.stack.push(g),"";case aa:c=a.type;d=a.props;var e=this.threadID;E(c,e);c=B(d.children(c[e]));this.stack.push({type:a,domNamespace:g,children:c,childIndex:0,context:b,footer:""});return"";case Ga:throw Error(p(338));case da:switch(c=a.type,ta(c),c._status){case 1:return a=
[k.createElement(c._result,x({ref:a.ref},a.props))],this.stack.push({type:null,domNamespace:g,children:a,childIndex:0,context:b,footer:""}),"";case 2:throw c._result;default:throw Error(p(295));}case Ha:throw Error(p(343));}throw Error(p(130,null==c?c:typeof c,""));};b.renderDOM=function(a,b,g){var c=a.type.toLowerCase();"http://www.w3.org/1999/xhtml"===g&&oa(c);if(!ra.hasOwnProperty(c)){if(!Pa.test(c))throw Error(p(65,c));ra[c]=!0}var d=a.props;if("input"===c)d=x({type:void 0},d,{defaultChecked:void 0,
defaultValue:void 0,value:null!=d.value?d.value:d.defaultValue,checked:null!=d.checked?d.checked:d.defaultChecked});else if("textarea"===c){var e=d.value;if(null==e){e=d.defaultValue;var f=d.children;if(null!=f){if(null!=e)throw Error(p(92));if(Array.isArray(f)){if(!(1>=f.length))throw Error(p(93));f=f[0]}e=""+f}null==e&&(e="")}d=x({},d,{value:void 0,children:""+e})}else if("select"===c)this.currentSelectValue=null!=d.value?d.value:d.defaultValue,d=x({},d,{value:void 0});else if("option"===c){f=this.currentSelectValue;
var l=Da(d.children);if(null!=f){var m=null!=d.value?d.value+"":l;e=!1;if(Array.isArray(f))for(var k=0;k<f.length;k++){if(""+f[k]===m){e=!0;break}}else e=""+f===m;d=x({selected:void 0,children:void 0},d,{selected:e,children:l})}}if(e=d){if(Ka[c]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(p(137,c,""));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(p(60));if(!("object"===typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML))throw Error(p(61));
}if(null!=e.style&&"object"!==typeof e.style)throw Error(p(62,""));}e=d;f=this.makeStaticMarkup;l=1===this.stack.length;m="<"+a.type;for(w in e)if(Qa.call(e,w)){var n=e[w];if(null!=n){if("style"===w){k=void 0;var q="",u="";for(k in n)if(n.hasOwnProperty(k)){var y=0===k.indexOf("--"),r=n[k];if(null!=r){if(y)var t=k;else if(t=k,V.hasOwnProperty(t))t=V[t];else{var A=t.replace(Ma,"-$1").toLowerCase().replace(Na,"-ms-");t=V[t]=A}q+=u+t+":";u=k;y=null==r||"boolean"===typeof r||""===r?"":y||"number"!==typeof r||
0===r||H.hasOwnProperty(u)&&H[u]?(""+r).trim():r+"px";q+=y;u=";"}}n=q||null}k=null;b:if(y=c,r=e,-1===y.indexOf("-"))y="string"===typeof r.is;else switch(y){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":y=!1;break b;default:y=!0}y?Ra.hasOwnProperty(w)||(k=w,k=fa(k)&&null!=n?k+'="'+(C(n)+'"'):""):k=Aa(w,n);k&&(m+=" "+k)}}f||l&&(m+=' data-reactroot=""');var w=m;e="";qa.hasOwnProperty(c)?
w+="/>":(w+=">",e="</"+a.type+">");a:{f=d.dangerouslySetInnerHTML;if(null!=f){if(null!=f.__html){f=f.__html;break a}}else if(f=d.children,"string"===typeof f||"number"===typeof f){f=C(f);break a}f=null}null!=f?(d=[],Oa.hasOwnProperty(c)&&"\n"===f.charAt(0)&&(w+="\n"),w+=f):d=B(d.children);a=a.type;g=null==g||"http://www.w3.org/1999/xhtml"===g?oa(a):"http://www.w3.org/2000/svg"===g&&"foreignObject"===a?"http://www.w3.org/1999/xhtml":g;this.stack.push({domNamespace:g,type:c,children:d,childIndex:0,
context:b,footer:e});this.previousWasTextNode=!1;return w};return a}();l={renderToString:function(a){a=new sa(a,!1);try{return a.read(Infinity)}finally{a.destroy()}},renderToStaticMarkup:function(a){a=new sa(a,!0);try{return a.read(Infinity)}finally{a.destroy()}},renderToNodeStream:function(){throw Error(p(207));},renderToStaticNodeStream:function(){throw Error(p(208));},version:"16.13.1"};return l.default||l});


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: node_modules/react-dom-factories/index.js  */ ;

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function(f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f(require('react'));
    /* global define */
  } else if (typeof define === 'function' && define.amd) {
    define(['react'], f);
  } else {
    var g;
    if (typeof window !== 'undefined') {
      g = window;
    } else if (typeof global !== 'undefined') {
      g = global;
    } else if (typeof self !== 'undefined') {
      g = self;
    } else {
      g = this;
    }

    if (typeof g.React === 'undefined') {
      throw Error('React module should be required before ReactDOMFactories');
    }

    g.ReactDOMFactories = f(g.React);
  }
})(function(React) {
  /**
   * Create a factory that creates HTML tag elements.
   */
  function createDOMFactory(type) {
    var factory = React.createElement.bind(null, type);
    // Expose the type on the factory and the prototype so that it can be
    // easily accessed on elements. E.g. `<Foo />.type === Foo`.
    // This should not be named `constructor` since this may not be the function
    // that created the element, and it may not even be a constructor.
    factory.type = type;
    return factory;
  };

  /**
   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
   */
  var ReactDOMFactories = {
    a: createDOMFactory('a'),
    abbr: createDOMFactory('abbr'),
    address: createDOMFactory('address'),
    area: createDOMFactory('area'),
    article: createDOMFactory('article'),
    aside: createDOMFactory('aside'),
    audio: createDOMFactory('audio'),
    b: createDOMFactory('b'),
    base: createDOMFactory('base'),
    bdi: createDOMFactory('bdi'),
    bdo: createDOMFactory('bdo'),
    big: createDOMFactory('big'),
    blockquote: createDOMFactory('blockquote'),
    body: createDOMFactory('body'),
    br: createDOMFactory('br'),
    button: createDOMFactory('button'),
    canvas: createDOMFactory('canvas'),
    caption: createDOMFactory('caption'),
    cite: createDOMFactory('cite'),
    code: createDOMFactory('code'),
    col: createDOMFactory('col'),
    colgroup: createDOMFactory('colgroup'),
    data: createDOMFactory('data'),
    datalist: createDOMFactory('datalist'),
    dd: createDOMFactory('dd'),
    del: createDOMFactory('del'),
    details: createDOMFactory('details'),
    dfn: createDOMFactory('dfn'),
    dialog: createDOMFactory('dialog'),
    div: createDOMFactory('div'),
    dl: createDOMFactory('dl'),
    dt: createDOMFactory('dt'),
    em: createDOMFactory('em'),
    embed: createDOMFactory('embed'),
    fieldset: createDOMFactory('fieldset'),
    figcaption: createDOMFactory('figcaption'),
    figure: createDOMFactory('figure'),
    footer: createDOMFactory('footer'),
    form: createDOMFactory('form'),
    h1: createDOMFactory('h1'),
    h2: createDOMFactory('h2'),
    h3: createDOMFactory('h3'),
    h4: createDOMFactory('h4'),
    h5: createDOMFactory('h5'),
    h6: createDOMFactory('h6'),
    head: createDOMFactory('head'),
    header: createDOMFactory('header'),
    hgroup: createDOMFactory('hgroup'),
    hr: createDOMFactory('hr'),
    html: createDOMFactory('html'),
    i: createDOMFactory('i'),
    iframe: createDOMFactory('iframe'),
    img: createDOMFactory('img'),
    input: createDOMFactory('input'),
    ins: createDOMFactory('ins'),
    kbd: createDOMFactory('kbd'),
    keygen: createDOMFactory('keygen'),
    label: createDOMFactory('label'),
    legend: createDOMFactory('legend'),
    li: createDOMFactory('li'),
    link: createDOMFactory('link'),
    main: createDOMFactory('main'),
    map: createDOMFactory('map'),
    mark: createDOMFactory('mark'),
    menu: createDOMFactory('menu'),
    menuitem: createDOMFactory('menuitem'),
    meta: createDOMFactory('meta'),
    meter: createDOMFactory('meter'),
    nav: createDOMFactory('nav'),
    noscript: createDOMFactory('noscript'),
    object: createDOMFactory('object'),
    ol: createDOMFactory('ol'),
    optgroup: createDOMFactory('optgroup'),
    option: createDOMFactory('option'),
    output: createDOMFactory('output'),
    p: createDOMFactory('p'),
    param: createDOMFactory('param'),
    picture: createDOMFactory('picture'),
    pre: createDOMFactory('pre'),
    progress: createDOMFactory('progress'),
    q: createDOMFactory('q'),
    rp: createDOMFactory('rp'),
    rt: createDOMFactory('rt'),
    ruby: createDOMFactory('ruby'),
    s: createDOMFactory('s'),
    samp: createDOMFactory('samp'),
    script: createDOMFactory('script'),
    section: createDOMFactory('section'),
    select: createDOMFactory('select'),
    small: createDOMFactory('small'),
    source: createDOMFactory('source'),
    span: createDOMFactory('span'),
    strong: createDOMFactory('strong'),
    style: createDOMFactory('style'),
    sub: createDOMFactory('sub'),
    summary: createDOMFactory('summary'),
    sup: createDOMFactory('sup'),
    table: createDOMFactory('table'),
    tbody: createDOMFactory('tbody'),
    td: createDOMFactory('td'),
    textarea: createDOMFactory('textarea'),
    tfoot: createDOMFactory('tfoot'),
    th: createDOMFactory('th'),
    thead: createDOMFactory('thead'),
    time: createDOMFactory('time'),
    title: createDOMFactory('title'),
    tr: createDOMFactory('tr'),
    track: createDOMFactory('track'),
    u: createDOMFactory('u'),
    ul: createDOMFactory('ul'),
    var: createDOMFactory('var'),
    video: createDOMFactory('video'),
    wbr: createDOMFactory('wbr'),

    // SVG
    circle: createDOMFactory('circle'),
    clipPath: createDOMFactory('clipPath'),
    defs: createDOMFactory('defs'),
    ellipse: createDOMFactory('ellipse'),
    g: createDOMFactory('g'),
    image: createDOMFactory('image'),
    line: createDOMFactory('line'),
    linearGradient: createDOMFactory('linearGradient'),
    mask: createDOMFactory('mask'),
    path: createDOMFactory('path'),
    pattern: createDOMFactory('pattern'),
    polygon: createDOMFactory('polygon'),
    polyline: createDOMFactory('polyline'),
    radialGradient: createDOMFactory('radialGradient'),
    rect: createDOMFactory('rect'),
    stop: createDOMFactory('stop'),
    svg: createDOMFactory('svg'),
    text: createDOMFactory('text'),
    tspan: createDOMFactory('tspan'),
  };

  // due to wrapper and conditionals at the top, this will either become
  // `module.exports ReactDOMFactories` if that is available,
  // otherwise it will be defined via `define(['react'], ReactDOMFactories)`
  // if that is available,
  // otherwise it will be defined as global variable.
  return ReactDOMFactories;
});



//=====================================================================================
//=====================================================================================
//=====================================================================================


console.log(`TEEST React: ` + React);   // HMMM
console.log(`typeof this: ` + (typeof this));
console.log(`typeof globalThis: ` + (typeof globalThis));
console.log(`globalThis.React === React?: ` + (globalThis.React === React));
globalThis.React = React;
this.React = React;
console.log(`TEEST this.React: ` + this.React);

/* Next file: node_modules/create-react-class/create-react-class.min.js  */ !function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports.createReactClass=e(require("react")):t.createReactClass=e(t.React)}(this,function(t){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=2)}([function(t,e,n){;function o(t){return t}function r(t,e,n){function r(t,e){var n=N.hasOwnProperty(e)?N[e]:null;b.hasOwnProperty(e)&&s("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",e),t&&s("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",e)}function u(t,n){if(n){s("function"!=typeof n,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),s(!e(n),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var o=t.prototype,i=o.__reactAutoBindPairs;n.hasOwnProperty(c)&&g.mixins(t,n.mixins);for(var a in n)if(n.hasOwnProperty(a)&&a!==c){var u=n[a],p=o.hasOwnProperty(a);if(r(p,a),g.hasOwnProperty(a))g[a](t,u);else{var l=N.hasOwnProperty(a),E="function"==typeof u,m=E&&!l&&!p&&!1!==n.autobind;if(m)i.push(a,u),o[a]=u;else if(p){var h=N[a];s(l&&("DEFINE_MANY_MERGED"===h||"DEFINE_MANY"===h),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",h,a),"DEFINE_MANY_MERGED"===h?o[a]=f(o[a],u):"DEFINE_MANY"===h&&(o[a]=d(o[a],u))}else o[a]=u}}}else;}function p(t,e){if(e)for(var n in e){var o=e[n];if(e.hasOwnProperty(n)){var r=n in g;s(!r,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n);var i=n in t;if(i){var a=_.hasOwnProperty(n)?_[n]:null;return s("DEFINE_MANY_MERGED"===a,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),void(t[n]=f(t[n],o))}t[n]=o}}}function l(t,e){s(t&&e&&"object"==typeof t&&"object"==typeof e,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");for(var n in e)e.hasOwnProperty(n)&&(s(void 0===t[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),t[n]=e[n]);return t}function f(t,e){return function(){var n=t.apply(this,arguments),o=e.apply(this,arguments);if(null==n)return o;if(null==o)return n;var r={};return l(r,n),l(r,o),r}}function d(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}function E(t,e){var n=e.bind(t);return n}function m(t){for(var e=t.__reactAutoBindPairs,n=0;n<e.length;n+=2){var o=e[n],r=e[n+1];t[o]=E(t,r)}}function h(t){var e=o(function(t,o,r){this.__reactAutoBindPairs.length&&m(this),this.props=t,this.context=o,this.refs=a,this.updater=r||n,this.state=null;var i=this.getInitialState?this.getInitialState():null;s("object"==typeof i&&!Array.isArray(i),"%s.getInitialState(): must return an object or null",e.displayName||"ReactCompositeComponent"),this.state=i});e.prototype=new I,e.prototype.constructor=e,e.prototype.__reactAutoBindPairs=[],y.forEach(u.bind(null,e)),u(e,v),u(e,t),u(e,D),e.getDefaultProps&&(e.defaultProps=e.getDefaultProps()),s(e.prototype.render,"createClass(...): Class specification must implement a `render` method.");for(var r in N)e.prototype[r]||(e.prototype[r]=null);return e}var y=[],N={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",UNSAFE_componentWillMount:"DEFINE_MANY",UNSAFE_componentWillReceiveProps:"DEFINE_MANY",UNSAFE_componentWillUpdate:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},_={getDerivedStateFromProps:"DEFINE_MANY_MERGED"},g={displayName:function(t,e){t.displayName=e},mixins:function(t,e){if(e)for(var n=0;n<e.length;n++)u(t,e[n])},childContextTypes:function(t,e){t.childContextTypes=i({},t.childContextTypes,e)},contextTypes:function(t,e){t.contextTypes=i({},t.contextTypes,e)},getDefaultProps:function(t,e){t.getDefaultProps?t.getDefaultProps=f(t.getDefaultProps,e):t.getDefaultProps=e},propTypes:function(t,e){t.propTypes=i({},t.propTypes,e)},statics:function(t,e){p(t,e)},autobind:function(){}},v={componentDidMount:function(){this.__isMounted=!0}},D={componentWillUnmount:function(){this.__isMounted=!1}},b={replaceState:function(t,e){this.updater.enqueueReplaceState(this,t,e)},isMounted:function(){return!!this.__isMounted}},I=function(){};return i(I.prototype,t.prototype,b),h}var i=n(5),a=n(3),s=n(4),c="mixins";t.exports=r},function(e,n){e.exports=t},function(t,e,n){;var o=n(1),r=n(0);if(void 0===o)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var i=(new o.Component).updater;t.exports=r(o.Component,o.isValidElement,i)},function(t,e,n){;var o={};t.exports=o},function(t,e,n){;function o(t,e,n,o,i,a,s,c){if(r(e),!t){var u;if(void 0===e)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[n,o,i,a,s,c],l=0;u=new Error(e.replace(/%s/g,function(){return p[l++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}var r=function(t){};t.exports=o},function(t,e,n){;function o(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(t){o[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,s,c=o(t),u=1;u<arguments.length;u++){n=Object(arguments[u]);for(var p in n)i.call(n,p)&&(c[p]=n[p]);if(r){s=r(n);for(var l=0;l<s.length;l++)a.call(n,s[l])&&(c[s[l]]=n[s[l]])}}return c}}])});

//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: node_modules/react-router-dom/umd/react-router-dom.min.js  */ !function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("react")):"function"==typeof define&&define.amd?define(["exports","react"],e):e((t=t||self).ReactRouterDOM={},t.React)}(this,function(t,c){;var C="default"in c?c.default:c;function r(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}function e(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function n(t,e){return t(e={exports:{}},e.exports),e.exports}var o=n(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,c=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,f=n?Symbol.for("react.async_mode"):60111,l=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,h=n?Symbol.for("react.suspense"):60113,d=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,m=n?Symbol.for("react.fundamental"):60117,g=n?Symbol.for("react.responder"):60118;function w(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case r:switch(t=t.type){case f:case l:case i:case c:case a:case h:return t;default:switch(t=t&&t.$$typeof){case s:case p:case u:return t;default:return e}}case y:case v:case o:return e}}}function b(t){return w(t)===l}e.typeOf=w,e.AsyncMode=f,e.ConcurrentMode=l,e.ContextConsumer=s,e.ContextProvider=u,e.Element=r,e.ForwardRef=p,e.Fragment=i,e.Lazy=y,e.Memo=v,e.Portal=o,e.Profiler=c,e.StrictMode=a,e.Suspense=h,e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===i||t===l||t===c||t===a||t===h||t===d||"object"==typeof t&&null!==t&&(t.$$typeof===y||t.$$typeof===v||t.$$typeof===u||t.$$typeof===s||t.$$typeof===p||t.$$typeof===m||t.$$typeof===g)},e.isAsyncMode=function(t){return b(t)||w(t)===f},e.isConcurrentMode=b,e.isContextConsumer=function(t){return w(t)===s},e.isContextProvider=function(t){return w(t)===u},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===r},e.isForwardRef=function(t){return w(t)===p},e.isFragment=function(t){return w(t)===i},e.isLazy=function(t){return w(t)===y},e.isMemo=function(t){return w(t)===v},e.isPortal=function(t){return w(t)===o},e.isProfiler=function(t){return w(t)===c},e.isStrictMode=function(t){return w(t)===a},e.isSuspense=function(t){return w(t)===h}});e(o);o.typeOf,o.AsyncMode,o.ConcurrentMode,o.ContextConsumer,o.ContextProvider,o.Element,o.ForwardRef,o.Fragment,o.Lazy,o.Memo,o.Portal,o.Profiler,o.StrictMode,o.Suspense,o.isValidElementType,o.isAsyncMode,o.isConcurrentMode,o.isContextConsumer,o.isContextProvider,o.isElement,o.isForwardRef,o.isFragment,o.isLazy,o.isMemo,o.isPortal,o.isProfiler,o.isStrictMode,o.isSuspense;var i=n(function(t,e){});e(i);i.typeOf,i.AsyncMode,i.ConcurrentMode,i.ContextConsumer,i.ContextProvider,i.Element,i.ForwardRef,i.Fragment,i.Lazy,i.Memo,i.Portal,i.Profiler,i.StrictMode,i.Suspense,i.isValidElementType,i.isAsyncMode,i.isConcurrentMode,i.isContextConsumer,i.isContextProvider,i.isElement,i.isForwardRef,i.isFragment,i.isLazy,i.isMemo,i.isPortal,i.isProfiler,i.isStrictMode,i.isSuspense;var a=n(function(t){t.exports=o}),u=(a.isValidElementType,Object.getOwnPropertySymbols),s=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable;!function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()||Object.assign,Function.call.bind(Object.prototype.hasOwnProperty);function l(){}function p(){}p.resetWarningCache=l;var h=n(function(t){t.exports=function(){function t(t,e,n,r,o,i){if("SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"!==i){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}var n={array:t.isRequired=t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:p,resetWarningCache:l};return n.PropTypes=n}()});function T(){return(T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function d(t){return"/"===t.charAt(0)}function v(t,e){for(var n=e,r=n+1,o=t.length;r<o;n+=1,r+=1)t[n]=t[r];t.pop()}var y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var m="Invariant failed";function k(t){if(!t)throw new Error(m)}function A(t){return"/"===t.charAt(0)?t:"/"+t}function g(t){return"/"===t.charAt(0)?t.substr(1):t}function M(t,e){return function(t,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(t)}(t,e)?t.substr(e.length):t}function _(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t}function j(t){var e=t.pathname,n=t.search,r=t.hash,o=e||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function L(t,e,n,r){var o;"string"==typeof t?(o=function(t){var e=t||"/",n="",r="",o=e.indexOf("#");-1!==o&&(r=e.substr(o),e=e.substr(0,o));var i=e.indexOf("?");return-1!==i&&(n=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===n?"":n,hash:"#"===r?"":r}}(t)).state=e:(void 0===(o=T({},t)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==e&&void 0===o.state&&(o.state=e));try{o.pathname=decodeURI(o.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(t,e){var n=1<arguments.length&&void 0!==e?e:"",r=t&&t.split("/")||[],o=n&&n.split("/")||[],i=t&&d(t),a=n&&d(n),c=i||a;if(t&&d(t)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";var u=void 0;if(o.length){var s=o[o.length-1];u="."===s||".."===s||""===s}else u=!1;for(var f=0,l=o.length;0<=l;l--){var p=o[l];"."===p?v(o,l):".."===p?(v(o,l),f++):f&&(v(o,l),f--)}if(!c)for(;f--;)o.unshift("..");!c||""===o[0]||o[0]&&d(o[0])||o.unshift("");var h=o.join("/");return u&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function S(t,e){return t.pathname===e.pathname&&t.search===e.search&&t.hash===e.hash&&t.key===e.key&&function n(e,r){if(e===r)return!0;if(null==e||null==r)return!1;if(Array.isArray(e))return Array.isArray(r)&&e.length===r.length&&e.every(function(t,e){return n(t,r[e])});var t=void 0===e?"undefined":y(e);if(t!==(void 0===r?"undefined":y(r)))return!1;if("object"!==t)return!1;var o=e.valueOf(),i=r.valueOf();if(o!==e||i!==r)return n(o,i);var a=Object.keys(e),c=Object.keys(r);return a.length===c.length&&a.every(function(t){return n(e[t],r[t])})}(t.state,e.state)}function $(){var i=null;var r=[];return{setPrompt:function(t){return i=t,function(){i===t&&(i=null)}},confirmTransitionTo:function(t,e,n,r){if(null!=i){var o="function"==typeof i?i(t,e):i;"string"==typeof o?"function"==typeof n?n(o,r):r(!0):r(!1!==o)}else r(!0)},appendListener:function(t){var e=!0;function n(){e&&t.apply(void 0,arguments)}return r.push(n),function(){e=!1,r=r.filter(function(t){return t!==n})}},notifyListeners:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];r.forEach(function(t){return t.apply(void 0,e)})}}}var U=!("undefined"==typeof window||!window.document||!window.document.createElement);function F(t,e){e(window.confirm(t))}var N="popstate",H="hashchange";function I(){try{return window.history.state||{}}catch(t){return{}}}function w(t){void 0===t&&(t={}),U||k(!1);var c=window.history,u=function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}(),e=!(-1===window.navigator.userAgent.indexOf("Trident")),n=t,r=n.forceRefresh,s=void 0!==r&&r,o=n.getUserConfirmation,f=void 0===o?F:o,i=n.keyLength,a=void 0===i?6:i,l=t.basename?_(A(t.basename)):"";function p(t){var e=t||{},n=e.key,r=e.state,o=window.location,i=o.pathname+o.search+o.hash;return l&&(i=M(i,l)),L(i,r,n)}function h(){return Math.random().toString(36).substr(2,a)}var d=$();function v(t){T(R,t),R.length=c.length,d.notifyListeners(R.location,R.action)}function y(t){!function(t){void 0===t.state&&navigator.userAgent.indexOf("CriOS")}(t)&&w(p(t.state))}function m(){w(p(I()))}var g=!1;function w(e){if(g)g=!1,v();else{d.confirmTransitionTo(e,"POP",f,function(t){t?v({action:"POP",location:e}):function(t){var e=R.location,n=x.indexOf(e.key);-1===n&&(n=0);var r=x.indexOf(t.key);-1===r&&(r=0);var o=n-r;o&&(g=!0,O(o))}(e)})}}var b=p(I()),x=[b.key];function P(t){return l+j(t)}function O(t){c.go(t)}var C=0;function E(t){1===(C+=t)&&1===t?(window.addEventListener(N,y),e&&window.addEventListener(H,m)):0===C&&(window.removeEventListener(N,y),e&&window.removeEventListener(H,m))}var S=!1;var R={length:c.length,action:"POP",location:b,createHref:P,push:function(t,e){var a=L(t,e,h(),R.location);d.confirmTransitionTo(a,"PUSH",f,function(t){if(t){var e=P(a),n=a.key,r=a.state;if(u)if(c.pushState({key:n,state:r},null,e),s)window.location.href=e;else{var o=x.indexOf(R.location.key),i=x.slice(0,-1===o?0:o+1);i.push(a.key),x=i,v({action:"PUSH",location:a})}else window.location.href=e}})},replace:function(t,e){var i="REPLACE",a=L(t,e,h(),R.location);d.confirmTransitionTo(a,i,f,function(t){if(t){var e=P(a),n=a.key,r=a.state;if(u)if(c.replaceState({key:n,state:r},null,e),s)window.location.replace(e);else{var o=x.indexOf(R.location.key);-1!==o&&(x[o]=a.key),v({action:i,location:a})}else window.location.replace(e)}})},go:O,goBack:function(){O(-1)},goForward:function(){O(1)},block:function(t){void 0===t&&(t=!1);var e=d.setPrompt(t);return S||(E(1),S=!0),function(){return S&&(S=!1,E(-1)),e()}},listen:function(t){var e=d.appendListener(t);return E(1),function(){E(-1),e()}}};return R}var R="hashchange",B={hashbang:{encodePath:function(t){return"!"===t.charAt(0)?t:"!/"+g(t)},decodePath:function(t){return"!"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:g,decodePath:A},slash:{encodePath:A,decodePath:A}};function D(){var t=window.location.href,e=t.indexOf("#");return-1===e?"":t.substring(e+1)}function W(t){var e=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,0<=e?e:0)+"#"+t)}function b(t){void 0===t&&(t={}),U||k(!1);var e=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),t),r=n.getUserConfirmation,a=void 0===r?F:r,o=n.hashType,i=void 0===o?"slash":o,c=t.basename?_(A(t.basename)):"",u=B[i],s=u.encodePath,f=u.decodePath;function l(){var t=f(D());return c&&(t=M(t,c)),L(t)}var p=$();function h(t){T(E,t),E.length=e.length,p.notifyListeners(E.location,E.action)}var d=!1,v=null;function y(){var t=D(),e=s(t);if(t!==e)W(e);else{var n=l(),r=E.location;if(!d&&S(r,n))return;if(v===j(n))return;v=null,function(e){if(d)d=!1,h();else{p.confirmTransitionTo(e,"POP",a,function(t){t?h({action:"POP",location:e}):function(t){var e=E.location,n=b.lastIndexOf(j(e));-1===n&&(n=0);var r=b.lastIndexOf(j(t));-1===r&&(r=0);var o=n-r;o&&(d=!0,x(o))}(e)})}}(n)}}var m=D(),g=s(m);m!==g&&W(g);var w=l(),b=[j(w)];function x(t){e.go(t)}var P=0;function O(t){1===(P+=t)&&1===t?window.addEventListener(R,y):0===P&&window.removeEventListener(R,y)}var C=!1;var E={length:e.length,action:"POP",location:w,createHref:function(t){return"#"+s(c+j(t))},push:function(t,e){var i=L(t,void 0,void 0,E.location);p.confirmTransitionTo(i,"PUSH",a,function(t){if(t){var e=j(i),n=s(c+e);if(D()!==n){v=e,function(t){window.location.hash=t}(n);var r=b.lastIndexOf(j(E.location)),o=b.slice(0,-1===r?0:r+1);o.push(e),b=o,h({action:"PUSH",location:i})}else h()}})},replace:function(t,e){var o="REPLACE",i=L(t,void 0,void 0,E.location);p.confirmTransitionTo(i,o,a,function(t){if(t){var e=j(i),n=s(c+e);D()!==n&&(v=e,W(n));var r=b.indexOf(j(E.location));-1!==r&&(b[r]=e),h({action:o,location:i})}})},go:x,goBack:function(){x(-1)},goForward:function(){x(1)},block:function(t){void 0===t&&(t=!1);var e=p.setPrompt(t);return C||(O(1),C=!0),function(){return C&&(C=!1,O(-1)),e()}},listen:function(t){var e=p.appendListener(t);return O(1),function(){O(-1),e()}}};return E}function x(t,e,n){return Math.min(Math.max(t,e),n)}function P(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}var O=1073741823,E="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function V(t,e){return tt(X(t,e))}var z=C.createContext||function(r,o){var t,e,i="__create-react-context-"+function(){var t="__global_unique_id__";return E[t]=(E[t]||0)+1}()+"__",n=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=function(n){var r=[];return{on:function(t){r.push(t)},off:function(e){r=r.filter(function(t){return t!==e})},get:function(){return n},set:function(t,e){n=t,r.forEach(function(t){return t(n,e)})}}}(t.props.value),t}P(t,e);var n=t.prototype;return n.getChildContext=function(){var t;return(t={})[i]=this.emitter,t},n.componentWillReceiveProps=function(t){if(this.props.value!==t.value){var e,n=this.props.value,r=t.value;!function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}(n,r)?(e="function"==typeof o?o(n,r):O,0!==(e|=0)&&this.emitter.set(t.value,e)):e=0}},n.render=function(){return this.props.children},t}(c.Component);n.childContextTypes=((t={})[i]=h.object.isRequired,t);var a=function(t){function e(){var n;return(n=t.apply(this,arguments)||this).state={value:n.getValue()},n.onUpdate=function(t,e){0!=((0|n.observedBits)&e)&&n.setState({value:n.getValue()})},n}P(e,t);var n=e.prototype;return n.componentWillReceiveProps=function(t){var e=t.observedBits;this.observedBits=null==e?O:e},n.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var t=this.props.observedBits;this.observedBits=null==t?O:t},n.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},n.getValue=function(){return this.context[i]?this.context[i].get():r},n.render=function(){return function(t){return Array.isArray(t)?t[0]:t}(this.props.children)(this.state.value)},e}(c.Component);return a.contextTypes=((e={})[i]=h.object,e),{Provider:n,Consumer:a}},q=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},K=it,J=X,G=tt,Y=ot,Q=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function X(t,e){for(var n,r,o=[],i=0,a=0,c="",u=e&&e.delimiter||"/";null!=(n=Q.exec(t));){var s=n[0],f=n[1],l=n.index;if(c+=t.slice(a,l),a=l+s.length,f)c+=f[1];else{var p=t[a],h=n[2],d=n[3],v=n[4],y=n[5],m=n[6],g=n[7];c&&(o.push(c),c="");var w=null!=h&&null!=p&&p!==h,b="+"===m||"*"===m,x="?"===m||"*"===m,P=n[2]||u,O=v||y;o.push({name:d||i++,prefix:h||"",delimiter:P,optional:x,repeat:b,partial:w,asterisk:!!g,pattern:O?(r=O,r.replace(/([=!:$\/()])/g,"\\$1")):g?".*":"[^"+et(P)+"]+?"})}}return a<t.length&&(c+=t.substr(a)),c&&o.push(c),o}function Z(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function tt(f){for(var l=new Array(f.length),t=0;t<f.length;t++)"object"==typeof f[t]&&(l[t]=new RegExp("^(?:"+f[t].pattern+")$"));return function(t,e){for(var n="",r=t||{},o=(e||{}).pretty?Z:encodeURIComponent,i=0;i<f.length;i++){var a=f[i];if("string"!=typeof a){var c,u=r[a.name];if(null==u){if(a.optional){a.partial&&(n+=a.prefix);continue}throw new TypeError('Expected "'+a.name+'" to be defined')}if(q(u)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var s=0;s<u.length;s++){if(c=o(u[s]),!l[i].test(c))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received `'+JSON.stringify(c)+"`");n+=(0===s?a.prefix:a.delimiter)+c}}else{if(c=a.asterisk?encodeURI(u).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}):o(u),!l[i].test(c))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+c+'"');n+=a.prefix+c}}else n+=a}return n}}function et(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function nt(t,e){return t.keys=e,t}function rt(t){return t.sensitive?"":"i"}function ot(t,e,n){q(e)||(n=e||n,e=[]);for(var r=(n=n||{}).strict,o=!1!==n.end,i="",a=0;a<t.length;a++){var c=t[a];if("string"==typeof c)i+=et(c);else{var u=et(c.prefix),s="(?:"+c.pattern+")";e.push(c),c.repeat&&(s+="(?:"+u+s+")*"),i+=s=c.optional?c.partial?u+"("+s+")?":"(?:"+u+"("+s+"))?":u+"("+s+")"}}var f=et(n.delimiter||"/"),l=i.slice(-f.length)===f;return r||(i=(l?i.slice(0,-f.length):i)+"(?:"+f+"(?=$))?"),i+=o?"$":r&&l?"":"(?="+f+"|$)",nt(new RegExp("^"+i,rt(n)),e)}function it(t,e,n){return q(e)||(n=e||n,e=[]),n=n||{},t instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return nt(t,e)}(t,e):q(t)?function(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(it(t[o],e,n).source);return nt(new RegExp("(?:"+r.join("|")+")",rt(n)),e)}(t,e,n):function(t,e,n){return ot(X(t,n),e,n)}(t,e,n)}function at(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],0<=e.indexOf(n)||(o[n]=t[n]);return o}K.parse=J,K.compile=V,K.tokensToFunction=G,K.tokensToRegExp=Y;var ct={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},ut={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},st={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},ft={};function lt(t){return a.isMemo(t)?st:ft[t.$$typeof]||ct}ft[a.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var pt=Object.defineProperty,ht=Object.getOwnPropertyNames,dt=Object.getOwnPropertySymbols,vt=Object.getOwnPropertyDescriptor,yt=Object.getPrototypeOf,mt=Object.prototype;var gt=function t(e,n,r){if("string"==typeof n)return e;if(mt){var o=yt(n);o&&o!==mt&&t(e,o,r)}var i=ht(n);dt&&(i=i.concat(dt(n)));for(var a=lt(e),c=lt(n),u=0;u<i.length;++u){var s=i[u];if(!(ut[s]||r&&r[s]||c&&c[s]||a&&a[s])){var f=vt(n,s);try{pt(e,s,f)}catch(t){}}}return e},wt=function(t){var e=z();return e.displayName=t,e}("Router-History"),bt=function(t){var e=z();return e.displayName=t,e}("Router"),xt=function(n){function t(t){var e;return(e=n.call(this,t)||this).state={location:t.history.location},e._isMounted=!1,e._pendingLocation=null,t.staticContext||(e.unlisten=t.history.listen(function(t){e._isMounted?e.setState({location:t}):e._pendingLocation=t})),e}r(t,n),t.computeRootMatch=function(t){return{path:"/",url:"/",params:{},isExact:"/"===t}};var e=t.prototype;return e.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},e.componentWillUnmount=function(){this.unlisten&&this.unlisten()},e.render=function(){return C.createElement(bt.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},C.createElement(wt.Provider,{children:this.props.children||null,value:this.props.history}))},t}(C.Component),Pt=function(o){function t(){for(var t,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return(t=o.call.apply(o,[this].concat(n))||this).history=function(t){void 0===t&&(t={});var e=t,o=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,i=e.initialIndex,a=void 0===i?0:i,c=e.keyLength,u=void 0===c?6:c,s=$();function f(t){T(y,t),y.length=y.entries.length,s.notifyListeners(y.location,y.action)}function l(){return Math.random().toString(36).substr(2,u)}var p=x(a,0,r.length-1),h=r.map(function(t){return L(t,void 0,"string"==typeof t?l():t.key||l())}),d=j;function v(t){var e=x(y.index+t,0,y.entries.length-1),n=y.entries[e];s.confirmTransitionTo(n,"POP",o,function(t){t?f({action:"POP",location:n,index:e}):f()})}var y={length:h.length,action:"POP",location:h[p],index:p,entries:h,createHref:d,push:function(t,e){var r=L(t,e,l(),y.location);s.confirmTransitionTo(r,"PUSH",o,function(t){if(t){var e=y.index+1,n=y.entries.slice(0);n.length>e?n.splice(e,n.length-e,r):n.push(r),f({action:"PUSH",location:r,index:e,entries:n})}})},replace:function(t,e){var n="REPLACE",r=L(t,e,l(),y.location);s.confirmTransitionTo(r,n,o,function(t){t&&(y.entries[y.index]=r,f({action:n,location:r}))})},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(t){var e=y.index+t;return 0<=e&&e<y.entries.length},block:function(t){return void 0===t&&(t=!1),s.setPrompt(t)},listen:function(t){return s.appendListener(t)}};return y}(t.props),t}return r(t,o),t.prototype.render=function(){return C.createElement(xt,{history:this.history,children:this.props.children})},t}(C.Component),Ot=function(t){function e(){return t.apply(this,arguments)||this}r(e,t);var n=e.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(t){this.props.onUpdate&&this.props.onUpdate.call(this,this,t)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},e}(C.Component);var Ct={},Et=1e4,St=0;function Rt(t,e){return void 0===t&&(t="/"),void 0===e&&(e={}),"/"===t?t:function(t){if(Ct[t])return Ct[t];var e=K.compile(t);return St<Et&&(Ct[t]=e,St++),e}(t)(e,{pretty:!0})}var Tt={},kt=1e4,At=0;function Mt(s,t){void 0===t&&(t={}),"string"!=typeof t&&!Array.isArray(t)||(t={path:t});var e=t,n=e.path,r=e.exact,f=void 0!==r&&r,o=e.strict,l=void 0!==o&&o,i=e.sensitive,p=void 0!==i&&i;return[].concat(n).reduce(function(t,e){if(!e&&""!==e)return null;if(t)return t;var n=function(t,e){var n=""+e.end+e.strict+e.sensitive,r=Tt[n]||(Tt[n]={});if(r[t])return r[t];var o=[],i={regexp:K(t,o,e),keys:o};return At<kt&&(r[t]=i,At++),i}(e,{end:f,strict:l,sensitive:p}),r=n.regexp,o=n.keys,i=r.exec(s);if(!i)return null;var a=i[0],c=i.slice(1),u=s===a;return f&&!u?null:{path:e,url:"/"===e&&""===a?"/":a,isExact:u,params:o.reduce(function(t,e,n){return t[e.name]=c[n],t},{})}},null)}var _t=function(t){function e(){return t.apply(this,arguments)||this}return r(e,t),e.prototype.render=function(){var c=this;return C.createElement(bt.Consumer,null,function(t){t||k(!1);var e=c.props.location||t.location,n=T({},t,{location:e,match:c.props.computedMatch?c.props.computedMatch:c.props.path?Mt(e.pathname,c.props):t.match}),r=c.props,o=r.children,i=r.component,a=r.render;return Array.isArray(o)&&0===o.length&&(o=null),C.createElement(bt.Provider,{value:n},n.match?o?"function"==typeof o?o(n):o:i?C.createElement(i,n):a?a(n):null:"function"==typeof o?o(n):null)})},e}(C.Component);function jt(t){return"/"===t.charAt(0)?t:"/"+t}function Lt(t){return"string"==typeof t?t:j(t)}function $t(){return function(){k(!1)}}function Ut(){}var Ft=function(o){function t(){for(var e,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return(e=o.call.apply(o,[this].concat(n))||this).handlePush=function(t){return e.navigateTo(t,"PUSH")},e.handleReplace=function(t){return e.navigateTo(t,"REPLACE")},e.handleListen=function(){return Ut},e.handleBlock=function(){return Ut},e}r(t,o);var e=t.prototype;return e.navigateTo=function(t,e){var n=this.props,r=n.basename,o=void 0===r?"":r,i=n.context,a=void 0===i?{}:i;a.action=e,a.location=function(t,e){return t?T({},e,{pathname:jt(t)+e.pathname}):e}(o,L(t)),a.url=Lt(a.location)},e.render=function(){var t=this.props,e=t.basename,n=void 0===e?"":e,r=t.context,o=void 0===r?{}:r,i=t.location,a=void 0===i?"/":i,c=at(t,["basename","context","location"]),u={createHref:function(t){return jt(n+Lt(t))},action:"POP",location:function(t,e){if(!t)return e;var n=jt(t);return 0!==e.pathname.indexOf(n)?e:T({},e,{pathname:e.pathname.substr(n.length)})}(n,L(a)),push:this.handlePush,replace:this.handleReplace,go:$t(),goBack:$t(),goForward:$t(),listen:this.handleListen,block:this.handleBlock};return C.createElement(xt,T({},c,{history:u,staticContext:o}))},t}(C.Component),Nt=function(t){function e(){return t.apply(this,arguments)||this}return r(e,t),e.prototype.render=function(){var t=this;return C.createElement(bt.Consumer,null,function(n){n||k(!1);var r,o,i=t.props.location||n.location;return C.Children.forEach(t.props.children,function(t){if(null==o&&C.isValidElement(t)){var e=(r=t).props.path||t.props.from;o=e?Mt(i.pathname,T({},t.props,{path:e})):n.match}}),o?C.cloneElement(r,{location:i,computedMatch:o}):null})},e}(C.Component);var Ht=C.useContext;function It(){return Ht(bt).location}function Bt(t,e){return"function"==typeof t?t(e):t}function Dt(t,e){return"string"==typeof t?L(t,null,null,e):t}function Wt(t){return t}var Vt=function(o){function t(){for(var t,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return(t=o.call.apply(o,[this].concat(n))||this).history=w(t.props),t}return r(t,o),t.prototype.render=function(){return C.createElement(xt,{history:this.history,children:this.props.children})},t}(C.Component),zt=function(o){function t(){for(var t,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return(t=o.call.apply(o,[this].concat(n))||this).history=b(t.props),t}return r(t,o),t.prototype.render=function(){return C.createElement(xt,{history:this.history,children:this.props.children})},t}(C.Component),qt=C.forwardRef;void 0===qt&&(qt=Wt);function Kt(t){return t}var Jt=qt(function(t,e){var n=t.innerRef,r=t.navigate,o=t.onClick,i=at(t,["innerRef","navigate","onClick"]),a=i.target,c=T({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||a&&"_self"!==a||function(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=Wt!==qt&&e||n,C.createElement("a",c)}),Gt=qt(function(t,i){var e=t.component,a=void 0===e?Jt:e,c=t.replace,u=t.to,s=t.innerRef,f=at(t,["component","replace","to","innerRef"]);return C.createElement(bt.Consumer,null,function(e){e||k(!1);var n=e.history,t=Dt(Bt(u,e.location),e.location),r=t?n.createHref(t):"",o=T({},f,{href:r,navigate:function(){var t=Bt(u,e.location);(c?n.replace:n.push)(t)}});return Wt!==qt?o.ref=i||s:o.innerRef=s,C.createElement(a,o)})}),Yt=C.forwardRef;void 0===Yt&&(Yt=Kt);var Qt=Yt(function(t,f){var e=t["aria-current"],l=void 0===e?"page":e,n=t.activeClassName,p=void 0===n?"active":n,h=t.activeStyle,d=t.className,v=t.exact,y=t.isActive,m=t.location,g=t.sensitive,w=t.strict,b=t.style,x=t.to,P=t.innerRef,O=at(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return C.createElement(bt.Consumer,null,function(t){t||k(!1);var e=m||t.location,n=Dt(Bt(x,e),e),r=n.pathname,o=r&&r.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),i=o?Mt(e.pathname,{path:o,exact:v,sensitive:g,strict:w}):null,a=!!(y?y(i,e):i),c=a?function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.filter(function(t){return t}).join(" ")}(d,p):d,u=a?T({},b,{},h):b,s=T({"aria-current":a&&l||null,className:c,style:u,to:n},O);return Kt!==Yt?s.ref=f||P:s.innerRef=P,C.createElement(Gt,s)})});t.BrowserRouter=Vt,t.HashRouter=zt,t.Link=Gt,t.MemoryRouter=Pt,t.NavLink=Qt,t.Prompt=function(t){var r=t.message,e=t.when,o=void 0===e||e;return C.createElement(bt.Consumer,null,function(t){if(t||k(!1),!o||t.staticContext)return null;var n=t.history.block;return C.createElement(Ot,{onMount:function(t){t.release=n(r)},onUpdate:function(t,e){e.message!==r&&(t.release(),t.release=n(r))},onUnmount:function(t){t.release()},message:r})})},t.Redirect=function(t){var i=t.computedMatch,a=t.to,e=t.push,c=void 0!==e&&e;return C.createElement(bt.Consumer,null,function(t){t||k(!1);var e=t.history,n=t.staticContext,r=c?e.push:e.replace,o=L(i?"string"==typeof a?Rt(a,i.params):T({},a,{pathname:Rt(a.pathname,i.params)}):a);return n?(r(o),null):C.createElement(Ot,{onMount:function(){r(o)},onUpdate:function(t,e){var n=L(e.to);S(n,T({},o,{key:n.key}))||r(o)},to:a})})},t.Route=_t,t.Router=xt,t.StaticRouter=Ft,t.Switch=Nt,t.generatePath=Rt,t.matchPath=Mt,t.useHistory=function(){return Ht(wt)},t.useLocation=It,t.useParams=function(){var t=Ht(bt).match;return t?t.params:{}},t.useRouteMatch=function(t){var e=It(),n=Ht(bt).match;return t?Mt(e.pathname,t):n},t.withRouter=function(r){function t(t){var e=t.wrappedComponentRef,n=at(t,["wrappedComponentRef"]);return C.createElement(bt.Consumer,null,function(t){return t||k(!1),C.createElement(r,T({},n,t,{ref:e}))})}var e="withRouter("+(r.displayName||r.name)+")";return t.displayName=e,t.WrappedComponent=r,gt(t,r)},Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=react-router-dom.min.js.map


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: client/third-party/tiny-querystring.umd.js  */ // From: https://github.com/Cap32/tiny-querystring
// Downloaded on 2017-11-21 like so:  wget https://unpkg.com/tiny-querystring/dist/tiny-querystring.umd.js
// Copyright: Christopher Peng, https://github.com/Cap32
// License: MIT
// I (KajMagnus) made some changes, also MIT licensed, see "[KajMagnus]".
// SMALLER_BUNDLE Later: Start using URLSearchParams instead, when supported by all browsers.

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports);
		// [KajMagnus]
		// No:
		// global.tinyQuerystring = mod.exports;
		// Instead:
		global.parseQueryString = mod.exports.parse;
		global.stringifyQueryString = mod.exports.stringify;
	}
})(this, function (exports) {
	;

	exports.__esModule = true;
	exports.parse = parse;
	exports.stringify = stringify;
	function parse(str) {
		return (str + '').replace(/\+/g, ' ').split('&').filter(function (item) {
			return !/^\s*$/.test(item);
		}).reduce(function (obj, item, index) {
			var ref = item.split('=');
			var key = ref[0] || '';
			// [KajMagnus] Drop any '?' in case it's part of the query string.
			if (key[0] === '?') key = key.substr(1);
			var val = decodeURIComponent(ref[1] || '');
			var prev = obj[key];
			obj[key] = prev === undefined ? val : [].concat(prev, val);
			return obj;
		}, {});
	};

	function stringify(obj) {
		return Object.keys(obj || {}).reduce(function (arr, key) {
			var val = obj[key];
			if (val instanceof Array) {
				val = val.join('&' + key + '=');
			}
			arr.push(key + '=' + val);
			return arr;
		}, []).join('&').replace(/\s/g, '+');
	};
});


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: node_modules/markdown-it/dist/markdown-it.min.js  */ /*! markdown-it 13.0.1 https://github.com/markdown-it/markdown-it @license MIT */
!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e="undefined"!=typeof globalThis?globalThis:e||self).markdownit=r()}(this,(function(){;function e(e){if(e.__esModule)return e;var r=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(e).forEach((function(t){var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,n.get?n:{enumerable:!0,get:function(){return e[t]}})})),r}var r={Aacute:"\xc1",aacute:"\xe1",Abreve:"\u0102",abreve:"\u0103",ac:"\u223e",acd:"\u223f",acE:"\u223e\u0333",Acirc:"\xc2",acirc:"\xe2",acute:"\xb4",Acy:"\u0410",acy:"\u0430",AElig:"\xc6",aelig:"\xe6",af:"\u2061",Afr:"\ud835\udd04",afr:"\ud835\udd1e",Agrave:"\xc0",agrave:"\xe0",alefsym:"\u2135",aleph:"\u2135",Alpha:"\u0391",alpha:"\u03b1",Amacr:"\u0100",amacr:"\u0101",amalg:"\u2a3f",amp:"&",AMP:"&",andand:"\u2a55",And:"\u2a53",and:"\u2227",andd:"\u2a5c",andslope:"\u2a58",andv:"\u2a5a",ang:"\u2220",ange:"\u29a4",angle:"\u2220",angmsdaa:"\u29a8",angmsdab:"\u29a9",angmsdac:"\u29aa",angmsdad:"\u29ab",angmsdae:"\u29ac",angmsdaf:"\u29ad",angmsdag:"\u29ae",angmsdah:"\u29af",angmsd:"\u2221",angrt:"\u221f",angrtvb:"\u22be",angrtvbd:"\u299d",angsph:"\u2222",angst:"\xc5",angzarr:"\u237c",Aogon:"\u0104",aogon:"\u0105",Aopf:"\ud835\udd38",aopf:"\ud835\udd52",apacir:"\u2a6f",ap:"\u2248",apE:"\u2a70",ape:"\u224a",apid:"\u224b",apos:"'",ApplyFunction:"\u2061",approx:"\u2248",approxeq:"\u224a",Aring:"\xc5",aring:"\xe5",Ascr:"\ud835\udc9c",ascr:"\ud835\udcb6",Assign:"\u2254",ast:"*",asymp:"\u2248",asympeq:"\u224d",Atilde:"\xc3",atilde:"\xe3",Auml:"\xc4",auml:"\xe4",awconint:"\u2233",awint:"\u2a11",backcong:"\u224c",backepsilon:"\u03f6",backprime:"\u2035",backsim:"\u223d",backsimeq:"\u22cd",Backslash:"\u2216",Barv:"\u2ae7",barvee:"\u22bd",barwed:"\u2305",Barwed:"\u2306",barwedge:"\u2305",bbrk:"\u23b5",bbrktbrk:"\u23b6",bcong:"\u224c",Bcy:"\u0411",bcy:"\u0431",bdquo:"\u201e",becaus:"\u2235",because:"\u2235",Because:"\u2235",bemptyv:"\u29b0",bepsi:"\u03f6",bernou:"\u212c",Bernoullis:"\u212c",Beta:"\u0392",beta:"\u03b2",beth:"\u2136",between:"\u226c",Bfr:"\ud835\udd05",bfr:"\ud835\udd1f",bigcap:"\u22c2",bigcirc:"\u25ef",bigcup:"\u22c3",bigodot:"\u2a00",bigoplus:"\u2a01",bigotimes:"\u2a02",bigsqcup:"\u2a06",bigstar:"\u2605",bigtriangledown:"\u25bd",bigtriangleup:"\u25b3",biguplus:"\u2a04",bigvee:"\u22c1",bigwedge:"\u22c0",bkarow:"\u290d",blacklozenge:"\u29eb",blacksquare:"\u25aa",blacktriangle:"\u25b4",blacktriangledown:"\u25be",blacktriangleleft:"\u25c2",blacktriangleright:"\u25b8",blank:"\u2423",blk12:"\u2592",blk14:"\u2591",blk34:"\u2593",block:"\u2588",bne:"=\u20e5",bnequiv:"\u2261\u20e5",bNot:"\u2aed",bnot:"\u2310",Bopf:"\ud835\udd39",bopf:"\ud835\udd53",bot:"\u22a5",bottom:"\u22a5",bowtie:"\u22c8",boxbox:"\u29c9",boxdl:"\u2510",boxdL:"\u2555",boxDl:"\u2556",boxDL:"\u2557",boxdr:"\u250c",boxdR:"\u2552",boxDr:"\u2553",boxDR:"\u2554",boxh:"\u2500",boxH:"\u2550",boxhd:"\u252c",boxHd:"\u2564",boxhD:"\u2565",boxHD:"\u2566",boxhu:"\u2534",boxHu:"\u2567",boxhU:"\u2568",boxHU:"\u2569",boxminus:"\u229f",boxplus:"\u229e",boxtimes:"\u22a0",boxul:"\u2518",boxuL:"\u255b",boxUl:"\u255c",boxUL:"\u255d",boxur:"\u2514",boxuR:"\u2558",boxUr:"\u2559",boxUR:"\u255a",boxv:"\u2502",boxV:"\u2551",boxvh:"\u253c",boxvH:"\u256a",boxVh:"\u256b",boxVH:"\u256c",boxvl:"\u2524",boxvL:"\u2561",boxVl:"\u2562",boxVL:"\u2563",boxvr:"\u251c",boxvR:"\u255e",boxVr:"\u255f",boxVR:"\u2560",bprime:"\u2035",breve:"\u02d8",Breve:"\u02d8",brvbar:"\xa6",bscr:"\ud835\udcb7",Bscr:"\u212c",bsemi:"\u204f",bsim:"\u223d",bsime:"\u22cd",bsolb:"\u29c5",bsol:"\\",bsolhsub:"\u27c8",bull:"\u2022",bullet:"\u2022",bump:"\u224e",bumpE:"\u2aae",bumpe:"\u224f",Bumpeq:"\u224e",bumpeq:"\u224f",Cacute:"\u0106",cacute:"\u0107",capand:"\u2a44",capbrcup:"\u2a49",capcap:"\u2a4b",cap:"\u2229",Cap:"\u22d2",capcup:"\u2a47",capdot:"\u2a40",CapitalDifferentialD:"\u2145",caps:"\u2229\ufe00",caret:"\u2041",caron:"\u02c7",Cayleys:"\u212d",ccaps:"\u2a4d",Ccaron:"\u010c",ccaron:"\u010d",Ccedil:"\xc7",ccedil:"\xe7",Ccirc:"\u0108",ccirc:"\u0109",Cconint:"\u2230",ccups:"\u2a4c",ccupssm:"\u2a50",Cdot:"\u010a",cdot:"\u010b",cedil:"\xb8",Cedilla:"\xb8",cemptyv:"\u29b2",cent:"\xa2",centerdot:"\xb7",CenterDot:"\xb7",cfr:"\ud835\udd20",Cfr:"\u212d",CHcy:"\u0427",chcy:"\u0447",check:"\u2713",checkmark:"\u2713",Chi:"\u03a7",chi:"\u03c7",circ:"\u02c6",circeq:"\u2257",circlearrowleft:"\u21ba",circlearrowright:"\u21bb",circledast:"\u229b",circledcirc:"\u229a",circleddash:"\u229d",CircleDot:"\u2299",circledR:"\xae",circledS:"\u24c8",CircleMinus:"\u2296",CirclePlus:"\u2295",CircleTimes:"\u2297",cir:"\u25cb",cirE:"\u29c3",cire:"\u2257",cirfnint:"\u2a10",cirmid:"\u2aef",cirscir:"\u29c2",ClockwiseContourIntegral:"\u2232",CloseCurlyDoubleQuote:"\u201d",CloseCurlyQuote:"\u2019",clubs:"\u2663",clubsuit:"\u2663",colon:":",Colon:"\u2237",Colone:"\u2a74",colone:"\u2254",coloneq:"\u2254",comma:",",commat:"@",comp:"\u2201",compfn:"\u2218",complement:"\u2201",complexes:"\u2102",cong:"\u2245",congdot:"\u2a6d",Congruent:"\u2261",conint:"\u222e",Conint:"\u222f",ContourIntegral:"\u222e",copf:"\ud835\udd54",Copf:"\u2102",coprod:"\u2210",Coproduct:"\u2210",copy:"\xa9",COPY:"\xa9",copysr:"\u2117",CounterClockwiseContourIntegral:"\u2233",crarr:"\u21b5",cross:"\u2717",Cross:"\u2a2f",Cscr:"\ud835\udc9e",cscr:"\ud835\udcb8",csub:"\u2acf",csube:"\u2ad1",csup:"\u2ad0",csupe:"\u2ad2",ctdot:"\u22ef",cudarrl:"\u2938",cudarrr:"\u2935",cuepr:"\u22de",cuesc:"\u22df",cularr:"\u21b6",cularrp:"\u293d",cupbrcap:"\u2a48",cupcap:"\u2a46",CupCap:"\u224d",cup:"\u222a",Cup:"\u22d3",cupcup:"\u2a4a",cupdot:"\u228d",cupor:"\u2a45",cups:"\u222a\ufe00",curarr:"\u21b7",curarrm:"\u293c",curlyeqprec:"\u22de",curlyeqsucc:"\u22df",curlyvee:"\u22ce",curlywedge:"\u22cf",curren:"\xa4",curvearrowleft:"\u21b6",curvearrowright:"\u21b7",cuvee:"\u22ce",cuwed:"\u22cf",cwconint:"\u2232",cwint:"\u2231",cylcty:"\u232d",dagger:"\u2020",Dagger:"\u2021",daleth:"\u2138",darr:"\u2193",Darr:"\u21a1",dArr:"\u21d3",dash:"\u2010",Dashv:"\u2ae4",dashv:"\u22a3",dbkarow:"\u290f",dblac:"\u02dd",Dcaron:"\u010e",dcaron:"\u010f",Dcy:"\u0414",dcy:"\u0434",ddagger:"\u2021",ddarr:"\u21ca",DD:"\u2145",dd:"\u2146",DDotrahd:"\u2911",ddotseq:"\u2a77",deg:"\xb0",Del:"\u2207",Delta:"\u0394",delta:"\u03b4",demptyv:"\u29b1",dfisht:"\u297f",Dfr:"\ud835\udd07",dfr:"\ud835\udd21",dHar:"\u2965",dharl:"\u21c3",dharr:"\u21c2",DiacriticalAcute:"\xb4",DiacriticalDot:"\u02d9",DiacriticalDoubleAcute:"\u02dd",DiacriticalGrave:"`",DiacriticalTilde:"\u02dc",diam:"\u22c4",diamond:"\u22c4",Diamond:"\u22c4",diamondsuit:"\u2666",diams:"\u2666",die:"\xa8",DifferentialD:"\u2146",digamma:"\u03dd",disin:"\u22f2",div:"\xf7",divide:"\xf7",divideontimes:"\u22c7",divonx:"\u22c7",DJcy:"\u0402",djcy:"\u0452",dlcorn:"\u231e",dlcrop:"\u230d",dollar:"$",Dopf:"\ud835\udd3b",dopf:"\ud835\udd55",Dot:"\xa8",dot:"\u02d9",DotDot:"\u20dc",doteq:"\u2250",doteqdot:"\u2251",DotEqual:"\u2250",dotminus:"\u2238",dotplus:"\u2214",dotsquare:"\u22a1",doublebarwedge:"\u2306",DoubleContourIntegral:"\u222f",DoubleDot:"\xa8",DoubleDownArrow:"\u21d3",DoubleLeftArrow:"\u21d0",DoubleLeftRightArrow:"\u21d4",DoubleLeftTee:"\u2ae4",DoubleLongLeftArrow:"\u27f8",DoubleLongLeftRightArrow:"\u27fa",DoubleLongRightArrow:"\u27f9",DoubleRightArrow:"\u21d2",DoubleRightTee:"\u22a8",DoubleUpArrow:"\u21d1",DoubleUpDownArrow:"\u21d5",DoubleVerticalBar:"\u2225",DownArrowBar:"\u2913",downarrow:"\u2193",DownArrow:"\u2193",Downarrow:"\u21d3",DownArrowUpArrow:"\u21f5",DownBreve:"\u0311",downdownarrows:"\u21ca",downharpoonleft:"\u21c3",downharpoonright:"\u21c2",DownLeftRightVector:"\u2950",DownLeftTeeVector:"\u295e",DownLeftVectorBar:"\u2956",DownLeftVector:"\u21bd",DownRightTeeVector:"\u295f",DownRightVectorBar:"\u2957",DownRightVector:"\u21c1",DownTeeArrow:"\u21a7",DownTee:"\u22a4",drbkarow:"\u2910",drcorn:"\u231f",drcrop:"\u230c",Dscr:"\ud835\udc9f",dscr:"\ud835\udcb9",DScy:"\u0405",dscy:"\u0455",dsol:"\u29f6",Dstrok:"\u0110",dstrok:"\u0111",dtdot:"\u22f1",dtri:"\u25bf",dtrif:"\u25be",duarr:"\u21f5",duhar:"\u296f",dwangle:"\u29a6",DZcy:"\u040f",dzcy:"\u045f",dzigrarr:"\u27ff",Eacute:"\xc9",eacute:"\xe9",easter:"\u2a6e",Ecaron:"\u011a",ecaron:"\u011b",Ecirc:"\xca",ecirc:"\xea",ecir:"\u2256",ecolon:"\u2255",Ecy:"\u042d",ecy:"\u044d",eDDot:"\u2a77",Edot:"\u0116",edot:"\u0117",eDot:"\u2251",ee:"\u2147",efDot:"\u2252",Efr:"\ud835\udd08",efr:"\ud835\udd22",eg:"\u2a9a",Egrave:"\xc8",egrave:"\xe8",egs:"\u2a96",egsdot:"\u2a98",el:"\u2a99",Element:"\u2208",elinters:"\u23e7",ell:"\u2113",els:"\u2a95",elsdot:"\u2a97",Emacr:"\u0112",emacr:"\u0113",empty:"\u2205",emptyset:"\u2205",EmptySmallSquare:"\u25fb",emptyv:"\u2205",EmptyVerySmallSquare:"\u25ab",emsp13:"\u2004",emsp14:"\u2005",emsp:"\u2003",ENG:"\u014a",eng:"\u014b",ensp:"\u2002",Eogon:"\u0118",eogon:"\u0119",Eopf:"\ud835\udd3c",eopf:"\ud835\udd56",epar:"\u22d5",eparsl:"\u29e3",eplus:"\u2a71",epsi:"\u03b5",Epsilon:"\u0395",epsilon:"\u03b5",epsiv:"\u03f5",eqcirc:"\u2256",eqcolon:"\u2255",eqsim:"\u2242",eqslantgtr:"\u2a96",eqslantless:"\u2a95",Equal:"\u2a75",equals:"=",EqualTilde:"\u2242",equest:"\u225f",Equilibrium:"\u21cc",equiv:"\u2261",equivDD:"\u2a78",eqvparsl:"\u29e5",erarr:"\u2971",erDot:"\u2253",escr:"\u212f",Escr:"\u2130",esdot:"\u2250",Esim:"\u2a73",esim:"\u2242",Eta:"\u0397",eta:"\u03b7",ETH:"\xd0",eth:"\xf0",Euml:"\xcb",euml:"\xeb",euro:"\u20ac",excl:"!",exist:"\u2203",Exists:"\u2203",expectation:"\u2130",exponentiale:"\u2147",ExponentialE:"\u2147",fallingdotseq:"\u2252",Fcy:"\u0424",fcy:"\u0444",female:"\u2640",ffilig:"\ufb03",fflig:"\ufb00",ffllig:"\ufb04",Ffr:"\ud835\udd09",ffr:"\ud835\udd23",filig:"\ufb01",FilledSmallSquare:"\u25fc",FilledVerySmallSquare:"\u25aa",fjlig:"fj",flat:"\u266d",fllig:"\ufb02",fltns:"\u25b1",fnof:"\u0192",Fopf:"\ud835\udd3d",fopf:"\ud835\udd57",forall:"\u2200",ForAll:"\u2200",fork:"\u22d4",forkv:"\u2ad9",Fouriertrf:"\u2131",fpartint:"\u2a0d",frac12:"\xbd",frac13:"\u2153",frac14:"\xbc",frac15:"\u2155",frac16:"\u2159",frac18:"\u215b",frac23:"\u2154",frac25:"\u2156",frac34:"\xbe",frac35:"\u2157",frac38:"\u215c",frac45:"\u2158",frac56:"\u215a",frac58:"\u215d",frac78:"\u215e",frasl:"\u2044",frown:"\u2322",fscr:"\ud835\udcbb",Fscr:"\u2131",gacute:"\u01f5",Gamma:"\u0393",gamma:"\u03b3",Gammad:"\u03dc",gammad:"\u03dd",gap:"\u2a86",Gbreve:"\u011e",gbreve:"\u011f",Gcedil:"\u0122",Gcirc:"\u011c",gcirc:"\u011d",Gcy:"\u0413",gcy:"\u0433",Gdot:"\u0120",gdot:"\u0121",ge:"\u2265",gE:"\u2267",gEl:"\u2a8c",gel:"\u22db",geq:"\u2265",geqq:"\u2267",geqslant:"\u2a7e",gescc:"\u2aa9",ges:"\u2a7e",gesdot:"\u2a80",gesdoto:"\u2a82",gesdotol:"\u2a84",gesl:"\u22db\ufe00",gesles:"\u2a94",Gfr:"\ud835\udd0a",gfr:"\ud835\udd24",gg:"\u226b",Gg:"\u22d9",ggg:"\u22d9",gimel:"\u2137",GJcy:"\u0403",gjcy:"\u0453",gla:"\u2aa5",gl:"\u2277",glE:"\u2a92",glj:"\u2aa4",gnap:"\u2a8a",gnapprox:"\u2a8a",gne:"\u2a88",gnE:"\u2269",gneq:"\u2a88",gneqq:"\u2269",gnsim:"\u22e7",Gopf:"\ud835\udd3e",gopf:"\ud835\udd58",grave:"`",GreaterEqual:"\u2265",GreaterEqualLess:"\u22db",GreaterFullEqual:"\u2267",GreaterGreater:"\u2aa2",GreaterLess:"\u2277",GreaterSlantEqual:"\u2a7e",GreaterTilde:"\u2273",Gscr:"\ud835\udca2",gscr:"\u210a",gsim:"\u2273",gsime:"\u2a8e",gsiml:"\u2a90",gtcc:"\u2aa7",gtcir:"\u2a7a",gt:">",GT:">",Gt:"\u226b",gtdot:"\u22d7",gtlPar:"\u2995",gtquest:"\u2a7c",gtrapprox:"\u2a86",gtrarr:"\u2978",gtrdot:"\u22d7",gtreqless:"\u22db",gtreqqless:"\u2a8c",gtrless:"\u2277",gtrsim:"\u2273",gvertneqq:"\u2269\ufe00",gvnE:"\u2269\ufe00",Hacek:"\u02c7",hairsp:"\u200a",half:"\xbd",hamilt:"\u210b",HARDcy:"\u042a",hardcy:"\u044a",harrcir:"\u2948",harr:"\u2194",hArr:"\u21d4",harrw:"\u21ad",Hat:"^",hbar:"\u210f",Hcirc:"\u0124",hcirc:"\u0125",hearts:"\u2665",heartsuit:"\u2665",hellip:"\u2026",hercon:"\u22b9",hfr:"\ud835\udd25",Hfr:"\u210c",HilbertSpace:"\u210b",hksearow:"\u2925",hkswarow:"\u2926",hoarr:"\u21ff",homtht:"\u223b",hookleftarrow:"\u21a9",hookrightarrow:"\u21aa",hopf:"\ud835\udd59",Hopf:"\u210d",horbar:"\u2015",HorizontalLine:"\u2500",hscr:"\ud835\udcbd",Hscr:"\u210b",hslash:"\u210f",Hstrok:"\u0126",hstrok:"\u0127",HumpDownHump:"\u224e",HumpEqual:"\u224f",hybull:"\u2043",hyphen:"\u2010",Iacute:"\xcd",iacute:"\xed",ic:"\u2063",Icirc:"\xce",icirc:"\xee",Icy:"\u0418",icy:"\u0438",Idot:"\u0130",IEcy:"\u0415",iecy:"\u0435",iexcl:"\xa1",iff:"\u21d4",ifr:"\ud835\udd26",Ifr:"\u2111",Igrave:"\xcc",igrave:"\xec",ii:"\u2148",iiiint:"\u2a0c",iiint:"\u222d",iinfin:"\u29dc",iiota:"\u2129",IJlig:"\u0132",ijlig:"\u0133",Imacr:"\u012a",imacr:"\u012b",image:"\u2111",ImaginaryI:"\u2148",imagline:"\u2110",imagpart:"\u2111",imath:"\u0131",Im:"\u2111",imof:"\u22b7",imped:"\u01b5",Implies:"\u21d2",incare:"\u2105",in:"\u2208",infin:"\u221e",infintie:"\u29dd",inodot:"\u0131",intcal:"\u22ba",int:"\u222b",Int:"\u222c",integers:"\u2124",Integral:"\u222b",intercal:"\u22ba",Intersection:"\u22c2",intlarhk:"\u2a17",intprod:"\u2a3c",InvisibleComma:"\u2063",InvisibleTimes:"\u2062",IOcy:"\u0401",iocy:"\u0451",Iogon:"\u012e",iogon:"\u012f",Iopf:"\ud835\udd40",iopf:"\ud835\udd5a",Iota:"\u0399",iota:"\u03b9",iprod:"\u2a3c",iquest:"\xbf",iscr:"\ud835\udcbe",Iscr:"\u2110",isin:"\u2208",isindot:"\u22f5",isinE:"\u22f9",isins:"\u22f4",isinsv:"\u22f3",isinv:"\u2208",it:"\u2062",Itilde:"\u0128",itilde:"\u0129",Iukcy:"\u0406",iukcy:"\u0456",Iuml:"\xcf",iuml:"\xef",Jcirc:"\u0134",jcirc:"\u0135",Jcy:"\u0419",jcy:"\u0439",Jfr:"\ud835\udd0d",jfr:"\ud835\udd27",jmath:"\u0237",Jopf:"\ud835\udd41",jopf:"\ud835\udd5b",Jscr:"\ud835\udca5",jscr:"\ud835\udcbf",Jsercy:"\u0408",jsercy:"\u0458",Jukcy:"\u0404",jukcy:"\u0454",Kappa:"\u039a",kappa:"\u03ba",kappav:"\u03f0",Kcedil:"\u0136",kcedil:"\u0137",Kcy:"\u041a",kcy:"\u043a",Kfr:"\ud835\udd0e",kfr:"\ud835\udd28",kgreen:"\u0138",KHcy:"\u0425",khcy:"\u0445",KJcy:"\u040c",kjcy:"\u045c",Kopf:"\ud835\udd42",kopf:"\ud835\udd5c",Kscr:"\ud835\udca6",kscr:"\ud835\udcc0",lAarr:"\u21da",Lacute:"\u0139",lacute:"\u013a",laemptyv:"\u29b4",lagran:"\u2112",Lambda:"\u039b",lambda:"\u03bb",lang:"\u27e8",Lang:"\u27ea",langd:"\u2991",langle:"\u27e8",lap:"\u2a85",Laplacetrf:"\u2112",laquo:"\xab",larrb:"\u21e4",larrbfs:"\u291f",larr:"\u2190",Larr:"\u219e",lArr:"\u21d0",larrfs:"\u291d",larrhk:"\u21a9",larrlp:"\u21ab",larrpl:"\u2939",larrsim:"\u2973",larrtl:"\u21a2",latail:"\u2919",lAtail:"\u291b",lat:"\u2aab",late:"\u2aad",lates:"\u2aad\ufe00",lbarr:"\u290c",lBarr:"\u290e",lbbrk:"\u2772",lbrace:"{",lbrack:"[",lbrke:"\u298b",lbrksld:"\u298f",lbrkslu:"\u298d",Lcaron:"\u013d",lcaron:"\u013e",Lcedil:"\u013b",lcedil:"\u013c",lceil:"\u2308",lcub:"{",Lcy:"\u041b",lcy:"\u043b",ldca:"\u2936",ldquo:"\u201c",ldquor:"\u201e",ldrdhar:"\u2967",ldrushar:"\u294b",ldsh:"\u21b2",le:"\u2264",lE:"\u2266",LeftAngleBracket:"\u27e8",LeftArrowBar:"\u21e4",leftarrow:"\u2190",LeftArrow:"\u2190",Leftarrow:"\u21d0",LeftArrowRightArrow:"\u21c6",leftarrowtail:"\u21a2",LeftCeiling:"\u2308",LeftDoubleBracket:"\u27e6",LeftDownTeeVector:"\u2961",LeftDownVectorBar:"\u2959",LeftDownVector:"\u21c3",LeftFloor:"\u230a",leftharpoondown:"\u21bd",leftharpoonup:"\u21bc",leftleftarrows:"\u21c7",leftrightarrow:"\u2194",LeftRightArrow:"\u2194",Leftrightarrow:"\u21d4",leftrightarrows:"\u21c6",leftrightharpoons:"\u21cb",leftrightsquigarrow:"\u21ad",LeftRightVector:"\u294e",LeftTeeArrow:"\u21a4",LeftTee:"\u22a3",LeftTeeVector:"\u295a",leftthreetimes:"\u22cb",LeftTriangleBar:"\u29cf",LeftTriangle:"\u22b2",LeftTriangleEqual:"\u22b4",LeftUpDownVector:"\u2951",LeftUpTeeVector:"\u2960",LeftUpVectorBar:"\u2958",LeftUpVector:"\u21bf",LeftVectorBar:"\u2952",LeftVector:"\u21bc",lEg:"\u2a8b",leg:"\u22da",leq:"\u2264",leqq:"\u2266",leqslant:"\u2a7d",lescc:"\u2aa8",les:"\u2a7d",lesdot:"\u2a7f",lesdoto:"\u2a81",lesdotor:"\u2a83",lesg:"\u22da\ufe00",lesges:"\u2a93",lessapprox:"\u2a85",lessdot:"\u22d6",lesseqgtr:"\u22da",lesseqqgtr:"\u2a8b",LessEqualGreater:"\u22da",LessFullEqual:"\u2266",LessGreater:"\u2276",lessgtr:"\u2276",LessLess:"\u2aa1",lesssim:"\u2272",LessSlantEqual:"\u2a7d",LessTilde:"\u2272",lfisht:"\u297c",lfloor:"\u230a",Lfr:"\ud835\udd0f",lfr:"\ud835\udd29",lg:"\u2276",lgE:"\u2a91",lHar:"\u2962",lhard:"\u21bd",lharu:"\u21bc",lharul:"\u296a",lhblk:"\u2584",LJcy:"\u0409",ljcy:"\u0459",llarr:"\u21c7",ll:"\u226a",Ll:"\u22d8",llcorner:"\u231e",Lleftarrow:"\u21da",llhard:"\u296b",lltri:"\u25fa",Lmidot:"\u013f",lmidot:"\u0140",lmoustache:"\u23b0",lmoust:"\u23b0",lnap:"\u2a89",lnapprox:"\u2a89",lne:"\u2a87",lnE:"\u2268",lneq:"\u2a87",lneqq:"\u2268",lnsim:"\u22e6",loang:"\u27ec",loarr:"\u21fd",lobrk:"\u27e6",longleftarrow:"\u27f5",LongLeftArrow:"\u27f5",Longleftarrow:"\u27f8",longleftrightarrow:"\u27f7",LongLeftRightArrow:"\u27f7",Longleftrightarrow:"\u27fa",longmapsto:"\u27fc",longrightarrow:"\u27f6",LongRightArrow:"\u27f6",Longrightarrow:"\u27f9",looparrowleft:"\u21ab",looparrowright:"\u21ac",lopar:"\u2985",Lopf:"\ud835\udd43",lopf:"\ud835\udd5d",loplus:"\u2a2d",lotimes:"\u2a34",lowast:"\u2217",lowbar:"_",LowerLeftArrow:"\u2199",LowerRightArrow:"\u2198",loz:"\u25ca",lozenge:"\u25ca",lozf:"\u29eb",lpar:"(",lparlt:"\u2993",lrarr:"\u21c6",lrcorner:"\u231f",lrhar:"\u21cb",lrhard:"\u296d",lrm:"\u200e",lrtri:"\u22bf",lsaquo:"\u2039",lscr:"\ud835\udcc1",Lscr:"\u2112",lsh:"\u21b0",Lsh:"\u21b0",lsim:"\u2272",lsime:"\u2a8d",lsimg:"\u2a8f",lsqb:"[",lsquo:"\u2018",lsquor:"\u201a",Lstrok:"\u0141",lstrok:"\u0142",ltcc:"\u2aa6",ltcir:"\u2a79",lt:"<",LT:"<",Lt:"\u226a",ltdot:"\u22d6",lthree:"\u22cb",ltimes:"\u22c9",ltlarr:"\u2976",ltquest:"\u2a7b",ltri:"\u25c3",ltrie:"\u22b4",ltrif:"\u25c2",ltrPar:"\u2996",lurdshar:"\u294a",luruhar:"\u2966",lvertneqq:"\u2268\ufe00",lvnE:"\u2268\ufe00",macr:"\xaf",male:"\u2642",malt:"\u2720",maltese:"\u2720",Map:"\u2905",map:"\u21a6",mapsto:"\u21a6",mapstodown:"\u21a7",mapstoleft:"\u21a4",mapstoup:"\u21a5",marker:"\u25ae",mcomma:"\u2a29",Mcy:"\u041c",mcy:"\u043c",mdash:"\u2014",mDDot:"\u223a",measuredangle:"\u2221",MediumSpace:"\u205f",Mellintrf:"\u2133",Mfr:"\ud835\udd10",mfr:"\ud835\udd2a",mho:"\u2127",micro:"\xb5",midast:"*",midcir:"\u2af0",mid:"\u2223",middot:"\xb7",minusb:"\u229f",minus:"\u2212",minusd:"\u2238",minusdu:"\u2a2a",MinusPlus:"\u2213",mlcp:"\u2adb",mldr:"\u2026",mnplus:"\u2213",models:"\u22a7",Mopf:"\ud835\udd44",mopf:"\ud835\udd5e",mp:"\u2213",mscr:"\ud835\udcc2",Mscr:"\u2133",mstpos:"\u223e",Mu:"\u039c",mu:"\u03bc",multimap:"\u22b8",mumap:"\u22b8",nabla:"\u2207",Nacute:"\u0143",nacute:"\u0144",nang:"\u2220\u20d2",nap:"\u2249",napE:"\u2a70\u0338",napid:"\u224b\u0338",napos:"\u0149",napprox:"\u2249",natural:"\u266e",naturals:"\u2115",natur:"\u266e",nbsp:"\xa0",nbump:"\u224e\u0338",nbumpe:"\u224f\u0338",ncap:"\u2a43",Ncaron:"\u0147",ncaron:"\u0148",Ncedil:"\u0145",ncedil:"\u0146",ncong:"\u2247",ncongdot:"\u2a6d\u0338",ncup:"\u2a42",Ncy:"\u041d",ncy:"\u043d",ndash:"\u2013",nearhk:"\u2924",nearr:"\u2197",neArr:"\u21d7",nearrow:"\u2197",ne:"\u2260",nedot:"\u2250\u0338",NegativeMediumSpace:"\u200b",NegativeThickSpace:"\u200b",NegativeThinSpace:"\u200b",NegativeVeryThinSpace:"\u200b",nequiv:"\u2262",nesear:"\u2928",nesim:"\u2242\u0338",NestedGreaterGreater:"\u226b",NestedLessLess:"\u226a",NewLine:"\n",nexist:"\u2204",nexists:"\u2204",Nfr:"\ud835\udd11",nfr:"\ud835\udd2b",ngE:"\u2267\u0338",nge:"\u2271",ngeq:"\u2271",ngeqq:"\u2267\u0338",ngeqslant:"\u2a7e\u0338",nges:"\u2a7e\u0338",nGg:"\u22d9\u0338",ngsim:"\u2275",nGt:"\u226b\u20d2",ngt:"\u226f",ngtr:"\u226f",nGtv:"\u226b\u0338",nharr:"\u21ae",nhArr:"\u21ce",nhpar:"\u2af2",ni:"\u220b",nis:"\u22fc",nisd:"\u22fa",niv:"\u220b",NJcy:"\u040a",njcy:"\u045a",nlarr:"\u219a",nlArr:"\u21cd",nldr:"\u2025",nlE:"\u2266\u0338",nle:"\u2270",nleftarrow:"\u219a",nLeftarrow:"\u21cd",nleftrightarrow:"\u21ae",nLeftrightarrow:"\u21ce",nleq:"\u2270",nleqq:"\u2266\u0338",nleqslant:"\u2a7d\u0338",nles:"\u2a7d\u0338",nless:"\u226e",nLl:"\u22d8\u0338",nlsim:"\u2274",nLt:"\u226a\u20d2",nlt:"\u226e",nltri:"\u22ea",nltrie:"\u22ec",nLtv:"\u226a\u0338",nmid:"\u2224",NoBreak:"\u2060",NonBreakingSpace:"\xa0",nopf:"\ud835\udd5f",Nopf:"\u2115",Not:"\u2aec",not:"\xac",NotCongruent:"\u2262",NotCupCap:"\u226d",NotDoubleVerticalBar:"\u2226",NotElement:"\u2209",NotEqual:"\u2260",NotEqualTilde:"\u2242\u0338",NotExists:"\u2204",NotGreater:"\u226f",NotGreaterEqual:"\u2271",NotGreaterFullEqual:"\u2267\u0338",NotGreaterGreater:"\u226b\u0338",NotGreaterLess:"\u2279",NotGreaterSlantEqual:"\u2a7e\u0338",NotGreaterTilde:"\u2275",NotHumpDownHump:"\u224e\u0338",NotHumpEqual:"\u224f\u0338",notin:"\u2209",notindot:"\u22f5\u0338",notinE:"\u22f9\u0338",notinva:"\u2209",notinvb:"\u22f7",notinvc:"\u22f6",NotLeftTriangleBar:"\u29cf\u0338",NotLeftTriangle:"\u22ea",NotLeftTriangleEqual:"\u22ec",NotLess:"\u226e",NotLessEqual:"\u2270",NotLessGreater:"\u2278",NotLessLess:"\u226a\u0338",NotLessSlantEqual:"\u2a7d\u0338",NotLessTilde:"\u2274",NotNestedGreaterGreater:"\u2aa2\u0338",NotNestedLessLess:"\u2aa1\u0338",notni:"\u220c",notniva:"\u220c",notnivb:"\u22fe",notnivc:"\u22fd",NotPrecedes:"\u2280",NotPrecedesEqual:"\u2aaf\u0338",NotPrecedesSlantEqual:"\u22e0",NotReverseElement:"\u220c",NotRightTriangleBar:"\u29d0\u0338",NotRightTriangle:"\u22eb",NotRightTriangleEqual:"\u22ed",NotSquareSubset:"\u228f\u0338",NotSquareSubsetEqual:"\u22e2",NotSquareSuperset:"\u2290\u0338",NotSquareSupersetEqual:"\u22e3",NotSubset:"\u2282\u20d2",NotSubsetEqual:"\u2288",NotSucceeds:"\u2281",NotSucceedsEqual:"\u2ab0\u0338",NotSucceedsSlantEqual:"\u22e1",NotSucceedsTilde:"\u227f\u0338",NotSuperset:"\u2283\u20d2",NotSupersetEqual:"\u2289",NotTilde:"\u2241",NotTildeEqual:"\u2244",NotTildeFullEqual:"\u2247",NotTildeTilde:"\u2249",NotVerticalBar:"\u2224",nparallel:"\u2226",npar:"\u2226",nparsl:"\u2afd\u20e5",npart:"\u2202\u0338",npolint:"\u2a14",npr:"\u2280",nprcue:"\u22e0",nprec:"\u2280",npreceq:"\u2aaf\u0338",npre:"\u2aaf\u0338",nrarrc:"\u2933\u0338",nrarr:"\u219b",nrArr:"\u21cf",nrarrw:"\u219d\u0338",nrightarrow:"\u219b",nRightarrow:"\u21cf",nrtri:"\u22eb",nrtrie:"\u22ed",nsc:"\u2281",nsccue:"\u22e1",nsce:"\u2ab0\u0338",Nscr:"\ud835\udca9",nscr:"\ud835\udcc3",nshortmid:"\u2224",nshortparallel:"\u2226",nsim:"\u2241",nsime:"\u2244",nsimeq:"\u2244",nsmid:"\u2224",nspar:"\u2226",nsqsube:"\u22e2",nsqsupe:"\u22e3",nsub:"\u2284",nsubE:"\u2ac5\u0338",nsube:"\u2288",nsubset:"\u2282\u20d2",nsubseteq:"\u2288",nsubseteqq:"\u2ac5\u0338",nsucc:"\u2281",nsucceq:"\u2ab0\u0338",nsup:"\u2285",nsupE:"\u2ac6\u0338",nsupe:"\u2289",nsupset:"\u2283\u20d2",nsupseteq:"\u2289",nsupseteqq:"\u2ac6\u0338",ntgl:"\u2279",Ntilde:"\xd1",ntilde:"\xf1",ntlg:"\u2278",ntriangleleft:"\u22ea",ntrianglelefteq:"\u22ec",ntriangleright:"\u22eb",ntrianglerighteq:"\u22ed",Nu:"\u039d",nu:"\u03bd",num:"#",numero:"\u2116",numsp:"\u2007",nvap:"\u224d\u20d2",nvdash:"\u22ac",nvDash:"\u22ad",nVdash:"\u22ae",nVDash:"\u22af",nvge:"\u2265\u20d2",nvgt:">\u20d2",nvHarr:"\u2904",nvinfin:"\u29de",nvlArr:"\u2902",nvle:"\u2264\u20d2",nvlt:"<\u20d2",nvltrie:"\u22b4\u20d2",nvrArr:"\u2903",nvrtrie:"\u22b5\u20d2",nvsim:"\u223c\u20d2",nwarhk:"\u2923",nwarr:"\u2196",nwArr:"\u21d6",nwarrow:"\u2196",nwnear:"\u2927",Oacute:"\xd3",oacute:"\xf3",oast:"\u229b",Ocirc:"\xd4",ocirc:"\xf4",ocir:"\u229a",Ocy:"\u041e",ocy:"\u043e",odash:"\u229d",Odblac:"\u0150",odblac:"\u0151",odiv:"\u2a38",odot:"\u2299",odsold:"\u29bc",OElig:"\u0152",oelig:"\u0153",ofcir:"\u29bf",Ofr:"\ud835\udd12",ofr:"\ud835\udd2c",ogon:"\u02db",Ograve:"\xd2",ograve:"\xf2",ogt:"\u29c1",ohbar:"\u29b5",ohm:"\u03a9",oint:"\u222e",olarr:"\u21ba",olcir:"\u29be",olcross:"\u29bb",oline:"\u203e",olt:"\u29c0",Omacr:"\u014c",omacr:"\u014d",Omega:"\u03a9",omega:"\u03c9",Omicron:"\u039f",omicron:"\u03bf",omid:"\u29b6",ominus:"\u2296",Oopf:"\ud835\udd46",oopf:"\ud835\udd60",opar:"\u29b7",OpenCurlyDoubleQuote:"\u201c",OpenCurlyQuote:"\u2018",operp:"\u29b9",oplus:"\u2295",orarr:"\u21bb",Or:"\u2a54",or:"\u2228",ord:"\u2a5d",order:"\u2134",orderof:"\u2134",ordf:"\xaa",ordm:"\xba",origof:"\u22b6",oror:"\u2a56",orslope:"\u2a57",orv:"\u2a5b",oS:"\u24c8",Oscr:"\ud835\udcaa",oscr:"\u2134",Oslash:"\xd8",oslash:"\xf8",osol:"\u2298",Otilde:"\xd5",otilde:"\xf5",otimesas:"\u2a36",Otimes:"\u2a37",otimes:"\u2297",Ouml:"\xd6",ouml:"\xf6",ovbar:"\u233d",OverBar:"\u203e",OverBrace:"\u23de",OverBracket:"\u23b4",OverParenthesis:"\u23dc",para:"\xb6",parallel:"\u2225",par:"\u2225",parsim:"\u2af3",parsl:"\u2afd",part:"\u2202",PartialD:"\u2202",Pcy:"\u041f",pcy:"\u043f",percnt:"%",period:".",permil:"\u2030",perp:"\u22a5",pertenk:"\u2031",Pfr:"\ud835\udd13",pfr:"\ud835\udd2d",Phi:"\u03a6",phi:"\u03c6",phiv:"\u03d5",phmmat:"\u2133",phone:"\u260e",Pi:"\u03a0",pi:"\u03c0",pitchfork:"\u22d4",piv:"\u03d6",planck:"\u210f",planckh:"\u210e",plankv:"\u210f",plusacir:"\u2a23",plusb:"\u229e",pluscir:"\u2a22",plus:"+",plusdo:"\u2214",plusdu:"\u2a25",pluse:"\u2a72",PlusMinus:"\xb1",plusmn:"\xb1",plussim:"\u2a26",plustwo:"\u2a27",pm:"\xb1",Poincareplane:"\u210c",pointint:"\u2a15",popf:"\ud835\udd61",Popf:"\u2119",pound:"\xa3",prap:"\u2ab7",Pr:"\u2abb",pr:"\u227a",prcue:"\u227c",precapprox:"\u2ab7",prec:"\u227a",preccurlyeq:"\u227c",Precedes:"\u227a",PrecedesEqual:"\u2aaf",PrecedesSlantEqual:"\u227c",PrecedesTilde:"\u227e",preceq:"\u2aaf",precnapprox:"\u2ab9",precneqq:"\u2ab5",precnsim:"\u22e8",pre:"\u2aaf",prE:"\u2ab3",precsim:"\u227e",prime:"\u2032",Prime:"\u2033",primes:"\u2119",prnap:"\u2ab9",prnE:"\u2ab5",prnsim:"\u22e8",prod:"\u220f",Product:"\u220f",profalar:"\u232e",profline:"\u2312",profsurf:"\u2313",prop:"\u221d",Proportional:"\u221d",Proportion:"\u2237",propto:"\u221d",prsim:"\u227e",prurel:"\u22b0",Pscr:"\ud835\udcab",pscr:"\ud835\udcc5",Psi:"\u03a8",psi:"\u03c8",puncsp:"\u2008",Qfr:"\ud835\udd14",qfr:"\ud835\udd2e",qint:"\u2a0c",qopf:"\ud835\udd62",Qopf:"\u211a",qprime:"\u2057",Qscr:"\ud835\udcac",qscr:"\ud835\udcc6",quaternions:"\u210d",quatint:"\u2a16",quest:"?",questeq:"\u225f",quot:'"',QUOT:'"',rAarr:"\u21db",race:"\u223d\u0331",Racute:"\u0154",racute:"\u0155",radic:"\u221a",raemptyv:"\u29b3",rang:"\u27e9",Rang:"\u27eb",rangd:"\u2992",range:"\u29a5",rangle:"\u27e9",raquo:"\xbb",rarrap:"\u2975",rarrb:"\u21e5",rarrbfs:"\u2920",rarrc:"\u2933",rarr:"\u2192",Rarr:"\u21a0",rArr:"\u21d2",rarrfs:"\u291e",rarrhk:"\u21aa",rarrlp:"\u21ac",rarrpl:"\u2945",rarrsim:"\u2974",Rarrtl:"\u2916",rarrtl:"\u21a3",rarrw:"\u219d",ratail:"\u291a",rAtail:"\u291c",ratio:"\u2236",rationals:"\u211a",rbarr:"\u290d",rBarr:"\u290f",RBarr:"\u2910",rbbrk:"\u2773",rbrace:"}",rbrack:"]",rbrke:"\u298c",rbrksld:"\u298e",rbrkslu:"\u2990",Rcaron:"\u0158",rcaron:"\u0159",Rcedil:"\u0156",rcedil:"\u0157",rceil:"\u2309",rcub:"}",Rcy:"\u0420",rcy:"\u0440",rdca:"\u2937",rdldhar:"\u2969",rdquo:"\u201d",rdquor:"\u201d",rdsh:"\u21b3",real:"\u211c",realine:"\u211b",realpart:"\u211c",reals:"\u211d",Re:"\u211c",rect:"\u25ad",reg:"\xae",REG:"\xae",ReverseElement:"\u220b",ReverseEquilibrium:"\u21cb",ReverseUpEquilibrium:"\u296f",rfisht:"\u297d",rfloor:"\u230b",rfr:"\ud835\udd2f",Rfr:"\u211c",rHar:"\u2964",rhard:"\u21c1",rharu:"\u21c0",rharul:"\u296c",Rho:"\u03a1",rho:"\u03c1",rhov:"\u03f1",RightAngleBracket:"\u27e9",RightArrowBar:"\u21e5",rightarrow:"\u2192",RightArrow:"\u2192",Rightarrow:"\u21d2",RightArrowLeftArrow:"\u21c4",rightarrowtail:"\u21a3",RightCeiling:"\u2309",RightDoubleBracket:"\u27e7",RightDownTeeVector:"\u295d",RightDownVectorBar:"\u2955",RightDownVector:"\u21c2",RightFloor:"\u230b",rightharpoondown:"\u21c1",rightharpoonup:"\u21c0",rightleftarrows:"\u21c4",rightleftharpoons:"\u21cc",rightrightarrows:"\u21c9",rightsquigarrow:"\u219d",RightTeeArrow:"\u21a6",RightTee:"\u22a2",RightTeeVector:"\u295b",rightthreetimes:"\u22cc",RightTriangleBar:"\u29d0",RightTriangle:"\u22b3",RightTriangleEqual:"\u22b5",RightUpDownVector:"\u294f",RightUpTeeVector:"\u295c",RightUpVectorBar:"\u2954",RightUpVector:"\u21be",RightVectorBar:"\u2953",RightVector:"\u21c0",ring:"\u02da",risingdotseq:"\u2253",rlarr:"\u21c4",rlhar:"\u21cc",rlm:"\u200f",rmoustache:"\u23b1",rmoust:"\u23b1",rnmid:"\u2aee",roang:"\u27ed",roarr:"\u21fe",robrk:"\u27e7",ropar:"\u2986",ropf:"\ud835\udd63",Ropf:"\u211d",roplus:"\u2a2e",rotimes:"\u2a35",RoundImplies:"\u2970",rpar:")",rpargt:"\u2994",rppolint:"\u2a12",rrarr:"\u21c9",Rrightarrow:"\u21db",rsaquo:"\u203a",rscr:"\ud835\udcc7",Rscr:"\u211b",rsh:"\u21b1",Rsh:"\u21b1",rsqb:"]",rsquo:"\u2019",rsquor:"\u2019",rthree:"\u22cc",rtimes:"\u22ca",rtri:"\u25b9",rtrie:"\u22b5",rtrif:"\u25b8",rtriltri:"\u29ce",RuleDelayed:"\u29f4",ruluhar:"\u2968",rx:"\u211e",Sacute:"\u015a",sacute:"\u015b",sbquo:"\u201a",scap:"\u2ab8",Scaron:"\u0160",scaron:"\u0161",Sc:"\u2abc",sc:"\u227b",sccue:"\u227d",sce:"\u2ab0",scE:"\u2ab4",Scedil:"\u015e",scedil:"\u015f",Scirc:"\u015c",scirc:"\u015d",scnap:"\u2aba",scnE:"\u2ab6",scnsim:"\u22e9",scpolint:"\u2a13",scsim:"\u227f",Scy:"\u0421",scy:"\u0441",sdotb:"\u22a1",sdot:"\u22c5",sdote:"\u2a66",searhk:"\u2925",searr:"\u2198",seArr:"\u21d8",searrow:"\u2198",sect:"\xa7",semi:";",seswar:"\u2929",setminus:"\u2216",setmn:"\u2216",sext:"\u2736",Sfr:"\ud835\udd16",sfr:"\ud835\udd30",sfrown:"\u2322",sharp:"\u266f",SHCHcy:"\u0429",shchcy:"\u0449",SHcy:"\u0428",shcy:"\u0448",ShortDownArrow:"\u2193",ShortLeftArrow:"\u2190",shortmid:"\u2223",shortparallel:"\u2225",ShortRightArrow:"\u2192",ShortUpArrow:"\u2191",shy:"\xad",Sigma:"\u03a3",sigma:"\u03c3",sigmaf:"\u03c2",sigmav:"\u03c2",sim:"\u223c",simdot:"\u2a6a",sime:"\u2243",simeq:"\u2243",simg:"\u2a9e",simgE:"\u2aa0",siml:"\u2a9d",simlE:"\u2a9f",simne:"\u2246",simplus:"\u2a24",simrarr:"\u2972",slarr:"\u2190",SmallCircle:"\u2218",smallsetminus:"\u2216",smashp:"\u2a33",smeparsl:"\u29e4",smid:"\u2223",smile:"\u2323",smt:"\u2aaa",smte:"\u2aac",smtes:"\u2aac\ufe00",SOFTcy:"\u042c",softcy:"\u044c",solbar:"\u233f",solb:"\u29c4",sol:"/",Sopf:"\ud835\udd4a",sopf:"\ud835\udd64",spades:"\u2660",spadesuit:"\u2660",spar:"\u2225",sqcap:"\u2293",sqcaps:"\u2293\ufe00",sqcup:"\u2294",sqcups:"\u2294\ufe00",Sqrt:"\u221a",sqsub:"\u228f",sqsube:"\u2291",sqsubset:"\u228f",sqsubseteq:"\u2291",sqsup:"\u2290",sqsupe:"\u2292",sqsupset:"\u2290",sqsupseteq:"\u2292",square:"\u25a1",Square:"\u25a1",SquareIntersection:"\u2293",SquareSubset:"\u228f",SquareSubsetEqual:"\u2291",SquareSuperset:"\u2290",SquareSupersetEqual:"\u2292",SquareUnion:"\u2294",squarf:"\u25aa",squ:"\u25a1",squf:"\u25aa",srarr:"\u2192",Sscr:"\ud835\udcae",sscr:"\ud835\udcc8",ssetmn:"\u2216",ssmile:"\u2323",sstarf:"\u22c6",Star:"\u22c6",star:"\u2606",starf:"\u2605",straightepsilon:"\u03f5",straightphi:"\u03d5",strns:"\xaf",sub:"\u2282",Sub:"\u22d0",subdot:"\u2abd",subE:"\u2ac5",sube:"\u2286",subedot:"\u2ac3",submult:"\u2ac1",subnE:"\u2acb",subne:"\u228a",subplus:"\u2abf",subrarr:"\u2979",subset:"\u2282",Subset:"\u22d0",subseteq:"\u2286",subseteqq:"\u2ac5",SubsetEqual:"\u2286",subsetneq:"\u228a",subsetneqq:"\u2acb",subsim:"\u2ac7",subsub:"\u2ad5",subsup:"\u2ad3",succapprox:"\u2ab8",succ:"\u227b",succcurlyeq:"\u227d",Succeeds:"\u227b",SucceedsEqual:"\u2ab0",SucceedsSlantEqual:"\u227d",SucceedsTilde:"\u227f",succeq:"\u2ab0",succnapprox:"\u2aba",succneqq:"\u2ab6",succnsim:"\u22e9",succsim:"\u227f",SuchThat:"\u220b",sum:"\u2211",Sum:"\u2211",sung:"\u266a",sup1:"\xb9",sup2:"\xb2",sup3:"\xb3",sup:"\u2283",Sup:"\u22d1",supdot:"\u2abe",supdsub:"\u2ad8",supE:"\u2ac6",supe:"\u2287",supedot:"\u2ac4",Superset:"\u2283",SupersetEqual:"\u2287",suphsol:"\u27c9",suphsub:"\u2ad7",suplarr:"\u297b",supmult:"\u2ac2",supnE:"\u2acc",supne:"\u228b",supplus:"\u2ac0",supset:"\u2283",Supset:"\u22d1",supseteq:"\u2287",supseteqq:"\u2ac6",supsetneq:"\u228b",supsetneqq:"\u2acc",supsim:"\u2ac8",supsub:"\u2ad4",supsup:"\u2ad6",swarhk:"\u2926",swarr:"\u2199",swArr:"\u21d9",swarrow:"\u2199",swnwar:"\u292a",szlig:"\xdf",Tab:"\t",target:"\u2316",Tau:"\u03a4",tau:"\u03c4",tbrk:"\u23b4",Tcaron:"\u0164",tcaron:"\u0165",Tcedil:"\u0162",tcedil:"\u0163",Tcy:"\u0422",tcy:"\u0442",tdot:"\u20db",telrec:"\u2315",Tfr:"\ud835\udd17",tfr:"\ud835\udd31",there4:"\u2234",therefore:"\u2234",Therefore:"\u2234",Theta:"\u0398",theta:"\u03b8",thetasym:"\u03d1",thetav:"\u03d1",thickapprox:"\u2248",thicksim:"\u223c",ThickSpace:"\u205f\u200a",ThinSpace:"\u2009",thinsp:"\u2009",thkap:"\u2248",thksim:"\u223c",THORN:"\xde",thorn:"\xfe",tilde:"\u02dc",Tilde:"\u223c",TildeEqual:"\u2243",TildeFullEqual:"\u2245",TildeTilde:"\u2248",timesbar:"\u2a31",timesb:"\u22a0",times:"\xd7",timesd:"\u2a30",tint:"\u222d",toea:"\u2928",topbot:"\u2336",topcir:"\u2af1",top:"\u22a4",Topf:"\ud835\udd4b",topf:"\ud835\udd65",topfork:"\u2ada",tosa:"\u2929",tprime:"\u2034",trade:"\u2122",TRADE:"\u2122",triangle:"\u25b5",triangledown:"\u25bf",triangleleft:"\u25c3",trianglelefteq:"\u22b4",triangleq:"\u225c",triangleright:"\u25b9",trianglerighteq:"\u22b5",tridot:"\u25ec",trie:"\u225c",triminus:"\u2a3a",TripleDot:"\u20db",triplus:"\u2a39",trisb:"\u29cd",tritime:"\u2a3b",trpezium:"\u23e2",Tscr:"\ud835\udcaf",tscr:"\ud835\udcc9",TScy:"\u0426",tscy:"\u0446",TSHcy:"\u040b",tshcy:"\u045b",Tstrok:"\u0166",tstrok:"\u0167",twixt:"\u226c",twoheadleftarrow:"\u219e",twoheadrightarrow:"\u21a0",Uacute:"\xda",uacute:"\xfa",uarr:"\u2191",Uarr:"\u219f",uArr:"\u21d1",Uarrocir:"\u2949",Ubrcy:"\u040e",ubrcy:"\u045e",Ubreve:"\u016c",ubreve:"\u016d",Ucirc:"\xdb",ucirc:"\xfb",Ucy:"\u0423",ucy:"\u0443",udarr:"\u21c5",Udblac:"\u0170",udblac:"\u0171",udhar:"\u296e",ufisht:"\u297e",Ufr:"\ud835\udd18",ufr:"\ud835\udd32",Ugrave:"\xd9",ugrave:"\xf9",uHar:"\u2963",uharl:"\u21bf",uharr:"\u21be",uhblk:"\u2580",ulcorn:"\u231c",ulcorner:"\u231c",ulcrop:"\u230f",ultri:"\u25f8",Umacr:"\u016a",umacr:"\u016b",uml:"\xa8",UnderBar:"_",UnderBrace:"\u23df",UnderBracket:"\u23b5",UnderParenthesis:"\u23dd",Union:"\u22c3",UnionPlus:"\u228e",Uogon:"\u0172",uogon:"\u0173",Uopf:"\ud835\udd4c",uopf:"\ud835\udd66",UpArrowBar:"\u2912",uparrow:"\u2191",UpArrow:"\u2191",Uparrow:"\u21d1",UpArrowDownArrow:"\u21c5",updownarrow:"\u2195",UpDownArrow:"\u2195",Updownarrow:"\u21d5",UpEquilibrium:"\u296e",upharpoonleft:"\u21bf",upharpoonright:"\u21be",uplus:"\u228e",UpperLeftArrow:"\u2196",UpperRightArrow:"\u2197",upsi:"\u03c5",Upsi:"\u03d2",upsih:"\u03d2",Upsilon:"\u03a5",upsilon:"\u03c5",UpTeeArrow:"\u21a5",UpTee:"\u22a5",upuparrows:"\u21c8",urcorn:"\u231d",urcorner:"\u231d",urcrop:"\u230e",Uring:"\u016e",uring:"\u016f",urtri:"\u25f9",Uscr:"\ud835\udcb0",uscr:"\ud835\udcca",utdot:"\u22f0",Utilde:"\u0168",utilde:"\u0169",utri:"\u25b5",utrif:"\u25b4",uuarr:"\u21c8",Uuml:"\xdc",uuml:"\xfc",uwangle:"\u29a7",vangrt:"\u299c",varepsilon:"\u03f5",varkappa:"\u03f0",varnothing:"\u2205",varphi:"\u03d5",varpi:"\u03d6",varpropto:"\u221d",varr:"\u2195",vArr:"\u21d5",varrho:"\u03f1",varsigma:"\u03c2",varsubsetneq:"\u228a\ufe00",varsubsetneqq:"\u2acb\ufe00",varsupsetneq:"\u228b\ufe00",varsupsetneqq:"\u2acc\ufe00",vartheta:"\u03d1",vartriangleleft:"\u22b2",vartriangleright:"\u22b3",vBar:"\u2ae8",Vbar:"\u2aeb",vBarv:"\u2ae9",Vcy:"\u0412",vcy:"\u0432",vdash:"\u22a2",vDash:"\u22a8",Vdash:"\u22a9",VDash:"\u22ab",Vdashl:"\u2ae6",veebar:"\u22bb",vee:"\u2228",Vee:"\u22c1",veeeq:"\u225a",vellip:"\u22ee",verbar:"|",Verbar:"\u2016",vert:"|",Vert:"\u2016",VerticalBar:"\u2223",VerticalLine:"|",VerticalSeparator:"\u2758",VerticalTilde:"\u2240",VeryThinSpace:"\u200a",Vfr:"\ud835\udd19",vfr:"\ud835\udd33",vltri:"\u22b2",vnsub:"\u2282\u20d2",vnsup:"\u2283\u20d2",Vopf:"\ud835\udd4d",vopf:"\ud835\udd67",vprop:"\u221d",vrtri:"\u22b3",Vscr:"\ud835\udcb1",vscr:"\ud835\udccb",vsubnE:"\u2acb\ufe00",vsubne:"\u228a\ufe00",vsupnE:"\u2acc\ufe00",vsupne:"\u228b\ufe00",Vvdash:"\u22aa",vzigzag:"\u299a",Wcirc:"\u0174",wcirc:"\u0175",wedbar:"\u2a5f",wedge:"\u2227",Wedge:"\u22c0",wedgeq:"\u2259",weierp:"\u2118",Wfr:"\ud835\udd1a",wfr:"\ud835\udd34",Wopf:"\ud835\udd4e",wopf:"\ud835\udd68",wp:"\u2118",wr:"\u2240",wreath:"\u2240",Wscr:"\ud835\udcb2",wscr:"\ud835\udccc",xcap:"\u22c2",xcirc:"\u25ef",xcup:"\u22c3",xdtri:"\u25bd",Xfr:"\ud835\udd1b",xfr:"\ud835\udd35",xharr:"\u27f7",xhArr:"\u27fa",Xi:"\u039e",xi:"\u03be",xlarr:"\u27f5",xlArr:"\u27f8",xmap:"\u27fc",xnis:"\u22fb",xodot:"\u2a00",Xopf:"\ud835\udd4f",xopf:"\ud835\udd69",xoplus:"\u2a01",xotime:"\u2a02",xrarr:"\u27f6",xrArr:"\u27f9",Xscr:"\ud835\udcb3",xscr:"\ud835\udccd",xsqcup:"\u2a06",xuplus:"\u2a04",xutri:"\u25b3",xvee:"\u22c1",xwedge:"\u22c0",Yacute:"\xdd",yacute:"\xfd",YAcy:"\u042f",yacy:"\u044f",Ycirc:"\u0176",ycirc:"\u0177",Ycy:"\u042b",ycy:"\u044b",yen:"\xa5",Yfr:"\ud835\udd1c",yfr:"\ud835\udd36",YIcy:"\u0407",yicy:"\u0457",Yopf:"\ud835\udd50",yopf:"\ud835\udd6a",Yscr:"\ud835\udcb4",yscr:"\ud835\udcce",YUcy:"\u042e",yucy:"\u044e",yuml:"\xff",Yuml:"\u0178",Zacute:"\u0179",zacute:"\u017a",Zcaron:"\u017d",zcaron:"\u017e",Zcy:"\u0417",zcy:"\u0437",Zdot:"\u017b",zdot:"\u017c",zeetrf:"\u2128",ZeroWidthSpace:"\u200b",Zeta:"\u0396",zeta:"\u03b6",zfr:"\ud835\udd37",Zfr:"\u2128",ZHcy:"\u0416",zhcy:"\u0436",zigrarr:"\u21dd",zopf:"\ud835\udd6b",Zopf:"\u2124",Zscr:"\ud835\udcb5",zscr:"\ud835\udccf",zwj:"\u200d",zwnj:"\u200c"},t=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/,n={};function s(e,r,t){var o,i,a,c,l,u="";for("string"!=typeof r&&(t=r,r=s.defaultChars),void 0===t&&(t=!0),l=function(e){var r,t,s=n[e];if(s)return s;for(s=n[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),/^[0-9a-z]$/i.test(t)?s.push(t):s.push("%"+("0"+r.toString(16).toUpperCase()).slice(-2));for(r=0;r<e.length;r++)s[e.charCodeAt(r)]=e[r];return s}(r),o=0,i=e.length;o<i;o++)if(a=e.charCodeAt(o),t&&37===a&&o+2<i&&/^[0-9a-f]{2}$/i.test(e.slice(o+1,o+3)))u+=e.slice(o,o+3),o+=2;else if(a<128)u+=l[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&o+1<i&&(c=e.charCodeAt(o+1))>=56320&&c<=57343){u+=encodeURIComponent(e[o]+e[o+1]),o++;continue}u+="%EF%BF%BD"}else u+=encodeURIComponent(e[o]);return u}s.defaultChars=";/?:@&=+$,-_.!~*'()#",s.componentChars="-_.!~*'()";var o=s,i={};function a(e,r){var t;return"string"!=typeof r&&(r=a.defaultChars),t=function(e){var r,t,n=i[e];if(n)return n;for(n=i[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),n.push(t);for(r=0;r<e.length;r++)n[t=e.charCodeAt(r)]="%"+("0"+t.toString(16).toUpperCase()).slice(-2);return n}(r),e.replace(/(%[a-f0-9]{2})+/gi,(function(e){var r,n,s,o,i,a,c,l="";for(r=0,n=e.length;r<n;r+=3)(s=parseInt(e.slice(r+1,r+3),16))<128?l+=t[s]:192==(224&s)&&r+3<n&&128==(192&(o=parseInt(e.slice(r+4,r+6),16)))?(l+=(c=s<<6&1984|63&o)<128?"\ufffd\ufffd":String.fromCharCode(c),r+=3):224==(240&s)&&r+6<n&&(o=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),128==(192&o)&&128==(192&i))?(l+=(c=s<<12&61440|o<<6&4032|63&i)<2048||c>=55296&&c<=57343?"\ufffd\ufffd\ufffd":String.fromCharCode(c),r+=6):240==(248&s)&&r+9<n&&(o=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),a=parseInt(e.slice(r+10,r+12),16),128==(192&o)&&128==(192&i)&&128==(192&a))?((c=s<<18&1835008|o<<12&258048|i<<6&4032|63&a)<65536||c>1114111?l+="\ufffd\ufffd\ufffd\ufffd":(c-=65536,l+=String.fromCharCode(55296+(c>>10),56320+(1023&c))),r+=9):l+="\ufffd";return l}))}a.defaultChars=";/?:@&=+$,#",a.componentChars="";var c=a;function l(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null}var u=/^([a-z0-9.+-]+:)/i,p=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,f=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),d=["'"].concat(f),m=["%","/","?",";","#"].concat(d),g=["/","?","#"],_=/^[+a-z0-9A-Z_-]{0,63}$/,k=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,b={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};l.prototype.parse=function(e,r){var t,n,s,o,i,a=e;if(a=a.trim(),!r&&1===e.split("#").length){var c=h.exec(a);if(c)return this.pathname=c[1],c[2]&&(this.search=c[2]),this}var l=u.exec(a);if(l&&(s=(l=l[0]).toLowerCase(),this.protocol=l,a=a.substr(l.length)),(r||l||a.match(/^\/\/[^@\/]+@[^@\/]+/))&&(!(i="//"===a.substr(0,2))||l&&b[l]||(a=a.substr(2),this.slashes=!0)),!b[l]&&(i||l&&!v[l])){var p,f,d=-1;for(t=0;t<g.length;t++)-1!==(o=a.indexOf(g[t]))&&(-1===d||o<d)&&(d=o);for(-1!==(f=-1===d?a.lastIndexOf("@"):a.lastIndexOf("@",d))&&(p=a.slice(0,f),a=a.slice(f+1),this.auth=p),d=-1,t=0;t<m.length;t++)-1!==(o=a.indexOf(m[t]))&&(-1===d||o<d)&&(d=o);-1===d&&(d=a.length),":"===a[d-1]&&d--;var C=a.slice(0,d);a=a.slice(d),this.parseHost(C),this.hostname=this.hostname||"";var y="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!y){var A=this.hostname.split(/\./);for(t=0,n=A.length;t<n;t++){var x=A[t];if(x&&!x.match(_)){for(var D="",w=0,E=x.length;w<E;w++)x.charCodeAt(w)>127?D+="x":D+=x[w];if(!D.match(_)){var q=A.slice(0,t),S=A.slice(t+1),F=x.match(k);F&&(q.push(F[1]),S.unshift(F[2])),S.length&&(a=S.join(".")+a),this.hostname=q.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),y&&(this.hostname=this.hostname.substr(1,this.hostname.length-2))}var L=a.indexOf("#");-1!==L&&(this.hash=a.substr(L),a=a.slice(0,L));var z=a.indexOf("?");return-1!==z&&(this.search=a.substr(z),a=a.slice(0,z)),a&&(this.pathname=a),v[s]&&this.hostname&&!this.pathname&&(this.pathname=""),this},l.prototype.parseHost=function(e){var r=p.exec(e);r&&(":"!==(r=r[0])&&(this.port=r.substr(1)),e=e.substr(0,e.length-r.length)),e&&(this.hostname=e)};var C={encode:o,decode:c,format:function(e){var r="";return r+=e.protocol||"",r+=e.slashes?"//":"",r+=e.auth?e.auth+"@":"",e.hostname&&-1!==e.hostname.indexOf(":")?r+="["+e.hostname+"]":r+=e.hostname||"",r+=e.port?":"+e.port:"",r+=e.pathname||"",r+=e.search||"",r+=e.hash||""},parse:function(e,r){if(e&&e instanceof l)return e;var t=new l;return t.parse(e,r),t}},y=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,A=/[\0-\x1F\x7F-\x9F]/,x=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/,D={Any:y,Cc:A,Cf:/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/,P:t,Z:x},w=function(e,r,t){return t={path:r,exports:{},require:function(e,r){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==r&&t.path)}},e(t,t.exports),t.exports}((function(e,n){var s=Object.prototype.hasOwnProperty;function o(e,r){return s.call(e,r)}function i(e){return!(e>=55296&&e<=57343)&&(!(e>=64976&&e<=65007)&&(65535!=(65535&e)&&65534!=(65535&e)&&(!(e>=0&&e<=8)&&(11!==e&&(!(e>=14&&e<=31)&&(!(e>=127&&e<=159)&&!(e>1114111)))))))}function a(e){if(e>65535){var r=55296+((e-=65536)>>10),t=56320+(1023&e);return String.fromCharCode(r,t)}return String.fromCharCode(e)}var c=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,l=new RegExp(c.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),u=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;var p=/[&<>"]/,h=/[&<>"]/g,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function d(e){return f[e]}var m=/[.?*+^$[\]\\(){}|-]/g;n.lib={},n.lib.mdurl=C,n.lib.ucmicro=D,n.assign=function(e){var r=Array.prototype.slice.call(arguments,1);return r.forEach((function(r){if(r){if("object"!=typeof r)throw new TypeError(r+"must be object");Object.keys(r).forEach((function(t){e[t]=r[t]}))}})),e},n.isString=function(e){return"[object String]"===function(e){return Object.prototype.toString.call(e)}(e)},n.has=o,n.unescapeMd=function(e){return e.indexOf("\\")<0?e:e.replace(c,"$1")},n.unescapeAll=function(e){return e.indexOf("\\")<0&&e.indexOf("&")<0?e:e.replace(l,(function(e,t,n){return t||function(e,t){var n=0;return o(r,t)?r[t]:35===t.charCodeAt(0)&&u.test(t)&&i(n="x"===t[1].toLowerCase()?parseInt(t.slice(2),16):parseInt(t.slice(1),10))?a(n):e}(e,n)}))},n.isValidEntityCode=i,n.fromCodePoint=a,n.escapeHtml=function(e){return p.test(e)?e.replace(h,d):e},n.arrayReplaceAt=function(e,r,t){return[].concat(e.slice(0,r),t,e.slice(r+1))},n.isSpace=function(e){switch(e){case 9:case 32:return!0}return!1},n.isWhiteSpace=function(e){if(e>=8192&&e<=8202)return!0;switch(e){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return!0}return!1},n.isMdAsciiPunct=function(e){switch(e){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return!0;default:return!1}},n.isPunctChar=function(e){return t.test(e)},n.escapeRE=function(e){return e.replace(m,"\\$&")},n.normalizeReference=function(e){return e=e.trim().replace(/\s+/g," "),"\u1e7e"==="\u1e9e".toLowerCase()&&(e=e.replace(/\u1e9e/g,"\xdf")),e.toLowerCase().toUpperCase()}})),E=w.unescapeAll,q=w.unescapeAll,S=function(e,r,t){var n,s,o=r,i={ok:!1,pos:0,lines:0,str:""};if(60===e.charCodeAt(r)){for(r++;r<t;){if(10===(n=e.charCodeAt(r)))return i;if(60===n)return i;if(62===n)return i.pos=r+1,i.str=E(e.slice(o+1,r)),i.ok=!0,i;92===n&&r+1<t?r+=2:r++}return i}for(s=0;r<t&&32!==(n=e.charCodeAt(r))&&!(n<32||127===n);)if(92===n&&r+1<t){if(32===e.charCodeAt(r+1))break;r+=2}else{if(40===n&&++s>32)return i;if(41===n){if(0===s)break;s--}r++}return o===r||0!==s||(i.str=E(e.slice(o,r)),i.lines=0,i.pos=r,i.ok=!0),i},F=function(e,r,t){var n,s,o=0,i=r,a={ok:!1,pos:0,lines:0,str:""};if(r>=t)return a;if(34!==(s=e.charCodeAt(r))&&39!==s&&40!==s)return a;for(r++,40===s&&(s=41);r<t;){if((n=e.charCodeAt(r))===s)return a.pos=r+1,a.lines=o,a.str=q(e.slice(i+1,r)),a.ok=!0,a;if(40===n&&41===s)return a;10===n?o++:92===n&&r+1<t&&(r++,10===e.charCodeAt(r)&&o++),r++}return a},L={parseLinkLabel:function(e,r,t){var n,s,o,i,a=-1,c=e.posMax,l=e.pos;for(e.pos=r+1,n=1;e.pos<c;){if(93===(o=e.src.charCodeAt(e.pos))&&0===--n){s=!0;break}if(i=e.pos,e.md.inline.skipToken(e),91===o)if(i===e.pos-1)n++;else if(t)return e.pos=l,-1}return s&&(a=e.pos),e.pos=l,a},parseLinkDestination:S,parseLinkTitle:F},z=w.assign,T=w.unescapeAll,I=w.escapeHtml,M={};function R(){this.rules=z({},M)}M.code_inline=function(e,r,t,n,s){var o=e[r];return"<code"+s.renderAttrs(o)+">"+I(e[r].content)+"</code>"},M.code_block=function(e,r,t,n,s){var o=e[r];return"<pre"+s.renderAttrs(o)+"><code>"+I(e[r].content)+"</code></pre>\n"},M.fence=function(e,r,t,n,s){var o,i,a,c,l,u=e[r],p=u.info?T(u.info).trim():"",h="",f="";return p&&(h=(a=p.split(/(\s+)/g))[0],f=a.slice(2).join("")),0===(o=t.highlight&&t.highlight(u.content,h,f)||I(u.content)).indexOf("<pre")?o+"\n":p?(i=u.attrIndex("class"),c=u.attrs?u.attrs.slice():[],i<0?c.push(["class",t.langPrefix+h]):(c[i]=c[i].slice(),c[i][1]+=" "+t.langPrefix+h),l={attrs:c},"<pre><code"+s.renderAttrs(l)+">"+o+"</code></pre>\n"):"<pre><code"+s.renderAttrs(u)+">"+o+"</code></pre>\n"},M.image=function(e,r,t,n,s){var o=e[r];return o.attrs[o.attrIndex("alt")][1]=s.renderInlineAsText(o.children,t,n),s.renderToken(e,r,t)},M.hardbreak=function(e,r,t){return t.xhtmlOut?"<br />\n":"<br>\n"},M.softbreak=function(e,r,t){return t.breaks?t.xhtmlOut?"<br />\n":"<br>\n":"\n"},M.text=function(e,r){return I(e[r].content)},M.html_block=function(e,r){return e[r].content},M.html_inline=function(e,r){return e[r].content},R.prototype.renderAttrs=function(e){var r,t,n;if(!e.attrs)return"";for(n="",r=0,t=e.attrs.length;r<t;r++)n+=" "+I(e.attrs[r][0])+'="'+I(e.attrs[r][1])+'"';return n},R.prototype.renderToken=function(e,r,t){var n,s="",o=!1,i=e[r];return i.hidden?"":(i.block&&-1!==i.nesting&&r&&e[r-1].hidden&&(s+="\n"),s+=(-1===i.nesting?"</":"<")+i.tag,s+=this.renderAttrs(i),0===i.nesting&&t.xhtmlOut&&(s+=" /"),i.block&&(o=!0,1===i.nesting&&r+1<e.length&&("inline"===(n=e[r+1]).type||n.hidden||-1===n.nesting&&n.tag===i.tag)&&(o=!1)),s+=o?">\n":">")},R.prototype.renderInline=function(e,r,t){for(var n,s="",o=this.rules,i=0,a=e.length;i<a;i++)void 0!==o[n=e[i].type]?s+=o[n](e,i,r,t,this):s+=this.renderToken(e,i,r);return s},R.prototype.renderInlineAsText=function(e,r,t){for(var n="",s=0,o=e.length;s<o;s++)"text"===e[s].type?n+=e[s].content:"image"===e[s].type?n+=this.renderInlineAsText(e[s].children,r,t):"softbreak"===e[s].type&&(n+="\n");return n},R.prototype.render=function(e,r,t){var n,s,o,i="",a=this.rules;for(n=0,s=e.length;n<s;n++)"inline"===(o=e[n].type)?i+=this.renderInline(e[n].children,r,t):void 0!==a[o]?i+=a[e[n].type](e,n,r,t,this):i+=this.renderToken(e,n,r,t);return i};var B=R;function N(){this.__rules__=[],this.__cache__=null}N.prototype.__find__=function(e){for(var r=0;r<this.__rules__.length;r++)if(this.__rules__[r].name===e)return r;return-1},N.prototype.__compile__=function(){var e=this,r=[""];e.__rules__.forEach((function(e){e.enabled&&e.alt.forEach((function(e){r.indexOf(e)<0&&r.push(e)}))})),e.__cache__={},r.forEach((function(r){e.__cache__[r]=[],e.__rules__.forEach((function(t){t.enabled&&(r&&t.alt.indexOf(r)<0||e.__cache__[r].push(t.fn))}))}))},N.prototype.at=function(e,r,t){var n=this.__find__(e),s=t||{};if(-1===n)throw new Error("Parser rule not found: "+e);this.__rules__[n].fn=r,this.__rules__[n].alt=s.alt||[],this.__cache__=null},N.prototype.before=function(e,r,t,n){var s=this.__find__(e),o=n||{};if(-1===s)throw new Error("Parser rule not found: "+e);this.__rules__.splice(s,0,{name:r,enabled:!0,fn:t,alt:o.alt||[]}),this.__cache__=null},N.prototype.after=function(e,r,t,n){var s=this.__find__(e),o=n||{};if(-1===s)throw new Error("Parser rule not found: "+e);this.__rules__.splice(s+1,0,{name:r,enabled:!0,fn:t,alt:o.alt||[]}),this.__cache__=null},N.prototype.push=function(e,r,t){var n=t||{};this.__rules__.push({name:e,enabled:!0,fn:r,alt:n.alt||[]}),this.__cache__=null},N.prototype.enable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach((function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!0,t.push(e)}),this),this.__cache__=null,t},N.prototype.enableOnly=function(e,r){Array.isArray(e)||(e=[e]),this.__rules__.forEach((function(e){e.enabled=!1})),this.enable(e,r)},N.prototype.disable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach((function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!1,t.push(e)}),this),this.__cache__=null,t},N.prototype.getRules=function(e){return null===this.__cache__&&this.__compile__(),this.__cache__[e]||[]};var O=N,P=/\r\n?|\n/g,j=/\0/g,U=w.arrayReplaceAt;function V(e){return/^<\/a\s*>/i.test(e)}var Z=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,$=/\((c|tm|r)\)/i,G=/\((c|tm|r)\)/gi,H={c:"\xa9",r:"\xae",tm:"\u2122"};function J(e,r){return H[r.toLowerCase()]}function W(e){var r,t,n=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||n||(t.content=t.content.replace(G,J)),"link_open"===t.type&&"auto"===t.info&&n--,"link_close"===t.type&&"auto"===t.info&&n++}function Y(e){var r,t,n=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||n||Z.test(t.content)&&(t.content=t.content.replace(/\+-/g,"\xb1").replace(/\.{2,}/g,"\u2026").replace(/([?!])\u2026/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---(?=[^-]|$)/gm,"$1\u2014").replace(/(^|\s)--(?=\s|$)/gm,"$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/gm,"$1\u2013")),"link_open"===t.type&&"auto"===t.info&&n--,"link_close"===t.type&&"auto"===t.info&&n++}var K=w.isWhiteSpace,Q=w.isPunctChar,X=w.isMdAsciiPunct,ee=/['"]/,re=/['"]/g;function te(e,r,t){return e.slice(0,r)+t+e.slice(r+1)}function ne(e,r){var t,n,s,o,i,a,c,l,u,p,h,f,d,m,g,_,k,b,v,C,y;for(v=[],t=0;t<e.length;t++){for(n=e[t],c=e[t].level,k=v.length-1;k>=0&&!(v[k].level<=c);k--);if(v.length=k+1,"text"===n.type){i=0,a=(s=n.content).length;e:for(;i<a&&(re.lastIndex=i,o=re.exec(s));){if(g=_=!0,i=o.index+1,b="'"===o[0],u=32,o.index-1>=0)u=s.charCodeAt(o.index-1);else for(k=t-1;k>=0&&("softbreak"!==e[k].type&&"hardbreak"!==e[k].type);k--)if(e[k].content){u=e[k].content.charCodeAt(e[k].content.length-1);break}if(p=32,i<a)p=s.charCodeAt(i);else for(k=t+1;k<e.length&&("softbreak"!==e[k].type&&"hardbreak"!==e[k].type);k++)if(e[k].content){p=e[k].content.charCodeAt(0);break}if(h=X(u)||Q(String.fromCharCode(u)),f=X(p)||Q(String.fromCharCode(p)),d=K(u),(m=K(p))?g=!1:f&&(d||h||(g=!1)),d?_=!1:h&&(m||f||(_=!1)),34===p&&'"'===o[0]&&u>=48&&u<=57&&(_=g=!1),g&&_&&(g=h,_=f),g||_){if(_)for(k=v.length-1;k>=0&&(l=v[k],!(v[k].level<c));k--)if(l.single===b&&v[k].level===c){l=v[k],b?(C=r.md.options.quotes[2],y=r.md.options.quotes[3]):(C=r.md.options.quotes[0],y=r.md.options.quotes[1]),n.content=te(n.content,o.index,y),e[l.token].content=te(e[l.token].content,l.pos,C),i+=y.length-1,l.token===t&&(i+=C.length-1),a=(s=n.content).length,v.length=k;continue e}g?v.push({token:t,pos:o.index,single:b,level:c}):_&&b&&(n.content=te(n.content,o.index,"\u2019"))}else b&&(n.content=te(n.content,o.index,"\u2019"))}}}}function se(e,r,t){this.type=e,this.tag=r,this.attrs=null,this.map=null,this.nesting=t,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1}se.prototype.attrIndex=function(e){var r,t,n;if(!this.attrs)return-1;for(t=0,n=(r=this.attrs).length;t<n;t++)if(r[t][0]===e)return t;return-1},se.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e]},se.prototype.attrSet=function(e,r){var t=this.attrIndex(e),n=[e,r];t<0?this.attrPush(n):this.attrs[t]=n},se.prototype.attrGet=function(e){var r=this.attrIndex(e),t=null;return r>=0&&(t=this.attrs[r][1]),t},se.prototype.attrJoin=function(e,r){var t=this.attrIndex(e);t<0?this.attrPush([e,r]):this.attrs[t][1]=this.attrs[t][1]+" "+r};var oe=se;function ie(e,r,t){this.src=e,this.env=t,this.tokens=[],this.inlineMode=!1,this.md=r}ie.prototype.Token=oe;var ae=ie,ce=[["normalize",function(e){var r;r=(r=e.src.replace(P,"\n")).replace(j,"\ufffd"),e.src=r}],["block",function(e){var r;e.inlineMode?((r=new e.Token("inline","",0)).content=e.src,r.map=[0,1],r.children=[],e.tokens.push(r)):e.md.block.parse(e.src,e.md,e.env,e.tokens)}],["inline",function(e){var r,t,n,s=e.tokens;for(t=0,n=s.length;t<n;t++)"inline"===(r=s[t]).type&&e.md.inline.parse(r.content,e.md,e.env,r.children)}],["linkify",function(e){var r,t,n,s,o,i,a,c,l,u,p,h,f,d,m,g,_,k,b=e.tokens;if(e.md.options.linkify)for(t=0,n=b.length;t<n;t++)if("inline"===b[t].type&&e.md.linkify.pretest(b[t].content))for(f=0,r=(s=b[t].children).length-1;r>=0;r--)if("link_close"!==(i=s[r]).type){if("html_inline"===i.type&&(k=i.content,/^<a[>\s]/i.test(k)&&f>0&&f--,V(i.content)&&f++),!(f>0)&&"text"===i.type&&e.md.linkify.test(i.content)){for(l=i.content,_=e.md.linkify.match(l),a=[],h=i.level,p=0,_.length>0&&0===_[0].index&&r>0&&"text_special"===s[r-1].type&&(_=_.slice(1)),c=0;c<_.length;c++)d=_[c].url,m=e.md.normalizeLink(d),e.md.validateLink(m)&&(g=_[c].text,g=_[c].schema?"mailto:"!==_[c].schema||/^mailto:/i.test(g)?e.md.normalizeLinkText(g):e.md.normalizeLinkText("mailto:"+g).replace(/^mailto:/,""):e.md.normalizeLinkText("http://"+g).replace(/^http:\/\//,""),(u=_[c].index)>p&&((o=new e.Token("text","",0)).content=l.slice(p,u),o.level=h,a.push(o)),(o=new e.Token("link_open","a",1)).attrs=[["href",m]],o.level=h++,o.markup="linkify",o.info="auto",a.push(o),(o=new e.Token("text","",0)).content=g,o.level=h,a.push(o),(o=new e.Token("link_close","a",-1)).level=--h,o.markup="linkify",o.info="auto",a.push(o),p=_[c].lastIndex);p<l.length&&((o=new e.Token("text","",0)).content=l.slice(p),o.level=h,a.push(o)),b[t].children=s=U(s,r,a)}}else for(r--;s[r].level!==i.level&&"link_open"!==s[r].type;)r--}],["replacements",function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&($.test(e.tokens[r].content)&&W(e.tokens[r].children),Z.test(e.tokens[r].content)&&Y(e.tokens[r].children))}],["smartquotes",function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&ee.test(e.tokens[r].content)&&ne(e.tokens[r].children,e)}],["text_join",function(e){var r,t,n,s,o,i,a=e.tokens;for(r=0,t=a.length;r<t;r++)if("inline"===a[r].type){for(o=(n=a[r].children).length,s=0;s<o;s++)"text_special"===n[s].type&&(n[s].type="text");for(s=i=0;s<o;s++)"text"===n[s].type&&s+1<o&&"text"===n[s+1].type?n[s+1].content=n[s].content+n[s+1].content:(s!==i&&(n[i]=n[s]),i++);s!==i&&(n.length=i)}}]];function le(){this.ruler=new O;for(var e=0;e<ce.length;e++)this.ruler.push(ce[e][0],ce[e][1])}le.prototype.process=function(e){var r,t,n;for(r=0,t=(n=this.ruler.getRules("")).length;r<t;r++)n[r](e)},le.prototype.State=ae;var ue=le,pe=w.isSpace;function he(e,r){var t=e.bMarks[r]+e.tShift[r],n=e.eMarks[r];return e.src.slice(t,n)}function fe(e){var r,t=[],n=0,s=e.length,o=!1,i=0,a="";for(r=e.charCodeAt(n);n<s;)124===r&&(o?(a+=e.substring(i,n-1),i=n):(t.push(a+e.substring(i,n)),a="",i=n+1)),o=92===r,n++,r=e.charCodeAt(n);return t.push(a+e.substring(i)),t}var de=w.isSpace,me=w.isSpace,ge=w.isSpace;function _e(e,r){var t,n,s,o;return n=e.bMarks[r]+e.tShift[r],s=e.eMarks[r],42!==(t=e.src.charCodeAt(n++))&&45!==t&&43!==t||n<s&&(o=e.src.charCodeAt(n),!ge(o))?-1:n}function ke(e,r){var t,n=e.bMarks[r]+e.tShift[r],s=n,o=e.eMarks[r];if(s+1>=o)return-1;if((t=e.src.charCodeAt(s++))<48||t>57)return-1;for(;;){if(s>=o)return-1;if(!((t=e.src.charCodeAt(s++))>=48&&t<=57)){if(41===t||46===t)break;return-1}if(s-n>=10)return-1}return s<o&&(t=e.src.charCodeAt(s),!ge(t))?-1:s}var be=w.normalizeReference,ve=w.isSpace,Ce="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",ye="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",Ae={HTML_TAG_RE:new RegExp("^(?:"+Ce+"|"+ye+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?][\\s\\S]*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),HTML_OPEN_CLOSE_TAG_RE:new RegExp("^(?:"+Ce+"|"+ye+")")},xe=Ae.HTML_OPEN_CLOSE_TAG_RE,De=[[/^<(script|pre|style|textarea)(?=(\s|>|$))/i,/<\/(script|pre|style|textarea)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"].join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(xe.source+"\\s*$"),/^$/,!1]],we=w.isSpace,Ee=w.isSpace;function qe(e,r,t,n){var s,o,i,a,c,l,u,p;for(this.src=e,this.md=r,this.env=t,this.tokens=n,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",p=!1,i=a=l=u=0,c=(o=this.src).length;a<c;a++){if(s=o.charCodeAt(a),!p){if(Ee(s)){l++,9===s?u+=4-u%4:u++;continue}p=!0}10!==s&&a!==c-1||(10!==s&&a++,this.bMarks.push(i),this.eMarks.push(a),this.tShift.push(l),this.sCount.push(u),this.bsCount.push(0),p=!1,l=0,u=0,i=a+1)}this.bMarks.push(o.length),this.eMarks.push(o.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1}qe.prototype.push=function(e,r,t){var n=new oe(e,r,t);return n.block=!0,t<0&&this.level--,n.level=this.level,t>0&&this.level++,this.tokens.push(n),n},qe.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},qe.prototype.skipEmptyLines=function(e){for(var r=this.lineMax;e<r&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},qe.prototype.skipSpaces=function(e){for(var r,t=this.src.length;e<t&&(r=this.src.charCodeAt(e),Ee(r));e++);return e},qe.prototype.skipSpacesBack=function(e,r){if(e<=r)return e;for(;e>r;)if(!Ee(this.src.charCodeAt(--e)))return e+1;return e},qe.prototype.skipChars=function(e,r){for(var t=this.src.length;e<t&&this.src.charCodeAt(e)===r;e++);return e},qe.prototype.skipCharsBack=function(e,r,t){if(e<=t)return e;for(;e>t;)if(r!==this.src.charCodeAt(--e))return e+1;return e},qe.prototype.getLines=function(e,r,t,n){var s,o,i,a,c,l,u,p=e;if(e>=r)return"";for(l=new Array(r-e),s=0;p<r;p++,s++){for(o=0,u=a=this.bMarks[p],c=p+1<r||n?this.eMarks[p]+1:this.eMarks[p];a<c&&o<t;){if(i=this.src.charCodeAt(a),Ee(i))9===i?o+=4-(o+this.bsCount[p])%4:o++;else{if(!(a-u<this.tShift[p]))break;o++}a++}l[s]=o>t?new Array(o-t+1).join(" ")+this.src.slice(a,c):this.src.slice(a,c)}return l.join("")},qe.prototype.Token=oe;var Se=qe,Fe=[["table",function(e,r,t,n){var s,o,i,a,c,l,u,p,h,f,d,m,g,_,k,b,v,C;if(r+2>t)return!1;if(l=r+1,e.sCount[l]<e.blkIndent)return!1;if(e.sCount[l]-e.blkIndent>=4)return!1;if((i=e.bMarks[l]+e.tShift[l])>=e.eMarks[l])return!1;if(124!==(v=e.src.charCodeAt(i++))&&45!==v&&58!==v)return!1;if(i>=e.eMarks[l])return!1;if(124!==(C=e.src.charCodeAt(i++))&&45!==C&&58!==C&&!pe(C))return!1;if(45===v&&pe(C))return!1;for(;i<e.eMarks[l];){if(124!==(s=e.src.charCodeAt(i))&&45!==s&&58!==s&&!pe(s))return!1;i++}for(u=(o=he(e,r+1)).split("|"),f=[],a=0;a<u.length;a++){if(!(d=u[a].trim())){if(0===a||a===u.length-1)continue;return!1}if(!/^:?-+:?$/.test(d))return!1;58===d.charCodeAt(d.length-1)?f.push(58===d.charCodeAt(0)?"center":"right"):58===d.charCodeAt(0)?f.push("left"):f.push("")}if(-1===(o=he(e,r).trim()).indexOf("|"))return!1;if(e.sCount[r]-e.blkIndent>=4)return!1;if((u=fe(o)).length&&""===u[0]&&u.shift(),u.length&&""===u[u.length-1]&&u.pop(),0===(p=u.length)||p!==f.length)return!1;if(n)return!0;for(_=e.parentType,e.parentType="table",b=e.md.block.ruler.getRules("blockquote"),(h=e.push("table_open","table",1)).map=m=[r,0],(h=e.push("thead_open","thead",1)).map=[r,r+1],(h=e.push("tr_open","tr",1)).map=[r,r+1],a=0;a<u.length;a++)h=e.push("th_open","th",1),f[a]&&(h.attrs=[["style","text-align:"+f[a]]]),(h=e.push("inline","",0)).content=u[a].trim(),h.children=[],h=e.push("th_close","th",-1);for(h=e.push("tr_close","tr",-1),h=e.push("thead_close","thead",-1),l=r+2;l<t&&!(e.sCount[l]<e.blkIndent);l++){for(k=!1,a=0,c=b.length;a<c;a++)if(b[a](e,l,t,!0)){k=!0;break}if(k)break;if(!(o=he(e,l).trim()))break;if(e.sCount[l]-e.blkIndent>=4)break;for((u=fe(o)).length&&""===u[0]&&u.shift(),u.length&&""===u[u.length-1]&&u.pop(),l===r+2&&((h=e.push("tbody_open","tbody",1)).map=g=[r+2,0]),(h=e.push("tr_open","tr",1)).map=[l,l+1],a=0;a<p;a++)h=e.push("td_open","td",1),f[a]&&(h.attrs=[["style","text-align:"+f[a]]]),(h=e.push("inline","",0)).content=u[a]?u[a].trim():"",h.children=[],h=e.push("td_close","td",-1);h=e.push("tr_close","tr",-1)}return g&&(h=e.push("tbody_close","tbody",-1),g[1]=l),h=e.push("table_close","table",-1),m[1]=l,e.parentType=_,e.line=l,!0},["paragraph","reference"]],["code",function(e,r,t){var n,s,o;if(e.sCount[r]-e.blkIndent<4)return!1;for(s=n=r+1;n<t;)if(e.isEmpty(n))n++;else{if(!(e.sCount[n]-e.blkIndent>=4))break;s=++n}return e.line=s,(o=e.push("code_block","code",0)).content=e.getLines(r,s,4+e.blkIndent,!1)+"\n",o.map=[r,e.line],!0}],["fence",function(e,r,t,n){var s,o,i,a,c,l,u,p=!1,h=e.bMarks[r]+e.tShift[r],f=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return!1;if(h+3>f)return!1;if(126!==(s=e.src.charCodeAt(h))&&96!==s)return!1;if(c=h,(o=(h=e.skipChars(h,s))-c)<3)return!1;if(u=e.src.slice(c,h),i=e.src.slice(h,f),96===s&&i.indexOf(String.fromCharCode(s))>=0)return!1;if(n)return!0;for(a=r;!(++a>=t)&&!((h=c=e.bMarks[a]+e.tShift[a])<(f=e.eMarks[a])&&e.sCount[a]<e.blkIndent);)if(e.src.charCodeAt(h)===s&&!(e.sCount[a]-e.blkIndent>=4||(h=e.skipChars(h,s))-c<o||(h=e.skipSpaces(h))<f)){p=!0;break}return o=e.sCount[r],e.line=a+(p?1:0),(l=e.push("fence","code",0)).info=i,l.content=e.getLines(r+1,a,o,!0),l.markup=u,l.map=[r,e.line],!0},["paragraph","reference","blockquote","list"]],["blockquote",function(e,r,t,n){var s,o,i,a,c,l,u,p,h,f,d,m,g,_,k,b,v,C,y,A,x=e.lineMax,D=e.bMarks[r]+e.tShift[r],w=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return!1;if(62!==e.src.charCodeAt(D++))return!1;if(n)return!0;for(a=h=e.sCount[r]+1,32===e.src.charCodeAt(D)?(D++,a++,h++,s=!1,b=!0):9===e.src.charCodeAt(D)?(b=!0,(e.bsCount[r]+h)%4==3?(D++,a++,h++,s=!1):s=!0):b=!1,f=[e.bMarks[r]],e.bMarks[r]=D;D<w&&(o=e.src.charCodeAt(D),de(o));)9===o?h+=4-(h+e.bsCount[r]+(s?1:0))%4:h++,D++;for(d=[e.bsCount[r]],e.bsCount[r]=e.sCount[r]+1+(b?1:0),l=D>=w,_=[e.sCount[r]],e.sCount[r]=h-a,k=[e.tShift[r]],e.tShift[r]=D-e.bMarks[r],C=e.md.block.ruler.getRules("blockquote"),g=e.parentType,e.parentType="blockquote",p=r+1;p<t&&(A=e.sCount[p]<e.blkIndent,!((D=e.bMarks[p]+e.tShift[p])>=(w=e.eMarks[p])));p++)if(62!==e.src.charCodeAt(D++)||A){if(l)break;for(v=!1,i=0,c=C.length;i<c;i++)if(C[i](e,p,t,!0)){v=!0;break}if(v){e.lineMax=p,0!==e.blkIndent&&(f.push(e.bMarks[p]),d.push(e.bsCount[p]),k.push(e.tShift[p]),_.push(e.sCount[p]),e.sCount[p]-=e.blkIndent);break}f.push(e.bMarks[p]),d.push(e.bsCount[p]),k.push(e.tShift[p]),_.push(e.sCount[p]),e.sCount[p]=-1}else{for(a=h=e.sCount[p]+1,32===e.src.charCodeAt(D)?(D++,a++,h++,s=!1,b=!0):9===e.src.charCodeAt(D)?(b=!0,(e.bsCount[p]+h)%4==3?(D++,a++,h++,s=!1):s=!0):b=!1,f.push(e.bMarks[p]),e.bMarks[p]=D;D<w&&(o=e.src.charCodeAt(D),de(o));)9===o?h+=4-(h+e.bsCount[p]+(s?1:0))%4:h++,D++;l=D>=w,d.push(e.bsCount[p]),e.bsCount[p]=e.sCount[p]+1+(b?1:0),_.push(e.sCount[p]),e.sCount[p]=h-a,k.push(e.tShift[p]),e.tShift[p]=D-e.bMarks[p]}for(m=e.blkIndent,e.blkIndent=0,(y=e.push("blockquote_open","blockquote",1)).markup=">",y.map=u=[r,0],e.md.block.tokenize(e,r,p),(y=e.push("blockquote_close","blockquote",-1)).markup=">",e.lineMax=x,e.parentType=g,u[1]=e.line,i=0;i<k.length;i++)e.bMarks[i+r]=f[i],e.tShift[i+r]=k[i],e.sCount[i+r]=_[i],e.bsCount[i+r]=d[i];return e.blkIndent=m,!0},["paragraph","reference","blockquote","list"]],["hr",function(e,r,t,n){var s,o,i,a,c=e.bMarks[r]+e.tShift[r],l=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return!1;if(42!==(s=e.src.charCodeAt(c++))&&45!==s&&95!==s)return!1;for(o=1;c<l;){if((i=e.src.charCodeAt(c++))!==s&&!me(i))return!1;i===s&&o++}return!(o<3)&&(n||(e.line=r+1,(a=e.push("hr","hr",0)).map=[r,e.line],a.markup=Array(o+1).join(String.fromCharCode(s))),!0)},["paragraph","reference","blockquote","list"]],["list",function(e,r,t,n){var s,o,i,a,c,l,u,p,h,f,d,m,g,_,k,b,v,C,y,A,x,D,w,E,q,S,F,L,z=!1,T=!0;if(e.sCount[r]-e.blkIndent>=4)return!1;if(e.listIndent>=0&&e.sCount[r]-e.listIndent>=4&&e.sCount[r]<e.blkIndent)return!1;if(n&&"paragraph"===e.parentType&&e.sCount[r]>=e.blkIndent&&(z=!0),(w=ke(e,r))>=0){if(u=!0,q=e.bMarks[r]+e.tShift[r],g=Number(e.src.slice(q,w-1)),z&&1!==g)return!1}else{if(!((w=_e(e,r))>=0))return!1;u=!1}if(z&&e.skipSpaces(w)>=e.eMarks[r])return!1;if(m=e.src.charCodeAt(w-1),n)return!0;for(d=e.tokens.length,u?(L=e.push("ordered_list_open","ol",1),1!==g&&(L.attrs=[["start",g]])):L=e.push("bullet_list_open","ul",1),L.map=f=[r,0],L.markup=String.fromCharCode(m),k=r,E=!1,F=e.md.block.ruler.getRules("list"),C=e.parentType,e.parentType="list";k<t;){for(D=w,_=e.eMarks[k],l=b=e.sCount[k]+w-(e.bMarks[r]+e.tShift[r]);D<_;){if(9===(s=e.src.charCodeAt(D)))b+=4-(b+e.bsCount[k])%4;else{if(32!==s)break;b++}D++}if((c=(o=D)>=_?1:b-l)>4&&(c=1),a=l+c,(L=e.push("list_item_open","li",1)).markup=String.fromCharCode(m),L.map=p=[r,0],u&&(L.info=e.src.slice(q,w-1)),x=e.tight,A=e.tShift[r],y=e.sCount[r],v=e.listIndent,e.listIndent=e.blkIndent,e.blkIndent=a,e.tight=!0,e.tShift[r]=o-e.bMarks[r],e.sCount[r]=b,o>=_&&e.isEmpty(r+1)?e.line=Math.min(e.line+2,t):e.md.block.tokenize(e,r,t,!0),e.tight&&!E||(T=!1),E=e.line-r>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=v,e.tShift[r]=A,e.sCount[r]=y,e.tight=x,(L=e.push("list_item_close","li",-1)).markup=String.fromCharCode(m),k=r=e.line,p[1]=k,o=e.bMarks[r],k>=t)break;if(e.sCount[k]<e.blkIndent)break;if(e.sCount[r]-e.blkIndent>=4)break;for(S=!1,i=0,h=F.length;i<h;i++)if(F[i](e,k,t,!0)){S=!0;break}if(S)break;if(u){if((w=ke(e,k))<0)break;q=e.bMarks[k]+e.tShift[k]}else if((w=_e(e,k))<0)break;if(m!==e.src.charCodeAt(w-1))break}return(L=u?e.push("ordered_list_close","ol",-1):e.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(m),f[1]=k,e.line=k,e.parentType=C,T&&function(e,r){var t,n,s=e.level+2;for(t=r+2,n=e.tokens.length-2;t<n;t++)e.tokens[t].level===s&&"paragraph_open"===e.tokens[t].type&&(e.tokens[t+2].hidden=!0,e.tokens[t].hidden=!0,t+=2)}(e,d),!0},["paragraph","reference","blockquote"]],["reference",function(e,r,t,n){var s,o,i,a,c,l,u,p,h,f,d,m,g,_,k,b,v=0,C=e.bMarks[r]+e.tShift[r],y=e.eMarks[r],A=r+1;if(e.sCount[r]-e.blkIndent>=4)return!1;if(91!==e.src.charCodeAt(C))return!1;for(;++C<y;)if(93===e.src.charCodeAt(C)&&92!==e.src.charCodeAt(C-1)){if(C+1===y)return!1;if(58!==e.src.charCodeAt(C+1))return!1;break}for(a=e.lineMax,k=e.md.block.ruler.getRules("reference"),f=e.parentType,e.parentType="reference";A<a&&!e.isEmpty(A);A++)if(!(e.sCount[A]-e.blkIndent>3||e.sCount[A]<0)){for(_=!1,l=0,u=k.length;l<u;l++)if(k[l](e,A,a,!0)){_=!0;break}if(_)break}for(y=(g=e.getLines(r,A,e.blkIndent,!1).trim()).length,C=1;C<y;C++){if(91===(s=g.charCodeAt(C)))return!1;if(93===s){h=C;break}(10===s||92===s&&++C<y&&10===g.charCodeAt(C))&&v++}if(h<0||58!==g.charCodeAt(h+1))return!1;for(C=h+2;C<y;C++)if(10===(s=g.charCodeAt(C)))v++;else if(!ve(s))break;if(!(d=e.md.helpers.parseLinkDestination(g,C,y)).ok)return!1;if(c=e.md.normalizeLink(d.str),!e.md.validateLink(c))return!1;for(o=C=d.pos,i=v+=d.lines,m=C;C<y;C++)if(10===(s=g.charCodeAt(C)))v++;else if(!ve(s))break;for(d=e.md.helpers.parseLinkTitle(g,C,y),C<y&&m!==C&&d.ok?(b=d.str,C=d.pos,v+=d.lines):(b="",C=o,v=i);C<y&&(s=g.charCodeAt(C),ve(s));)C++;if(C<y&&10!==g.charCodeAt(C)&&b)for(b="",C=o,v=i;C<y&&(s=g.charCodeAt(C),ve(s));)C++;return!(C<y&&10!==g.charCodeAt(C))&&(!!(p=be(g.slice(1,h)))&&(n||(void 0===e.env.references&&(e.env.references={}),void 0===e.env.references[p]&&(e.env.references[p]={title:b,href:c}),e.parentType=f,e.line=r+v+1),!0))}],["html_block",function(e,r,t,n){var s,o,i,a,c=e.bMarks[r]+e.tShift[r],l=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return!1;if(!e.md.options.html)return!1;if(60!==e.src.charCodeAt(c))return!1;for(a=e.src.slice(c,l),s=0;s<De.length&&!De[s][0].test(a);s++);if(s===De.length)return!1;if(n)return De[s][2];if(o=r+1,!De[s][1].test(a))for(;o<t&&!(e.sCount[o]<e.blkIndent);o++)if(c=e.bMarks[o]+e.tShift[o],l=e.eMarks[o],a=e.src.slice(c,l),De[s][1].test(a)){0!==a.length&&o++;break}return e.line=o,(i=e.push("html_block","",0)).map=[r,o],i.content=e.getLines(r,o,e.blkIndent,!0),!0},["paragraph","reference","blockquote"]],["heading",function(e,r,t,n){var s,o,i,a,c=e.bMarks[r]+e.tShift[r],l=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return!1;if(35!==(s=e.src.charCodeAt(c))||c>=l)return!1;for(o=1,s=e.src.charCodeAt(++c);35===s&&c<l&&o<=6;)o++,s=e.src.charCodeAt(++c);return!(o>6||c<l&&!we(s))&&(n||(l=e.skipSpacesBack(l,c),(i=e.skipCharsBack(l,35,c))>c&&we(e.src.charCodeAt(i-1))&&(l=i),e.line=r+1,(a=e.push("heading_open","h"+String(o),1)).markup="########".slice(0,o),a.map=[r,e.line],(a=e.push("inline","",0)).content=e.src.slice(c,l).trim(),a.map=[r,e.line],a.children=[],(a=e.push("heading_close","h"+String(o),-1)).markup="########".slice(0,o)),!0)},["paragraph","reference","blockquote"]],["lheading",function(e,r,t){var n,s,o,i,a,c,l,u,p,h,f=r+1,d=e.md.block.ruler.getRules("paragraph");if(e.sCount[r]-e.blkIndent>=4)return!1;for(h=e.parentType,e.parentType="paragraph";f<t&&!e.isEmpty(f);f++)if(!(e.sCount[f]-e.blkIndent>3)){if(e.sCount[f]>=e.blkIndent&&(c=e.bMarks[f]+e.tShift[f])<(l=e.eMarks[f])&&(45===(p=e.src.charCodeAt(c))||61===p)&&(c=e.skipChars(c,p),(c=e.skipSpaces(c))>=l)){u=61===p?1:2;break}if(!(e.sCount[f]<0)){for(s=!1,o=0,i=d.length;o<i;o++)if(d[o](e,f,t,!0)){s=!0;break}if(s)break}}return!!u&&(n=e.getLines(r,f,e.blkIndent,!1).trim(),e.line=f+1,(a=e.push("heading_open","h"+String(u),1)).markup=String.fromCharCode(p),a.map=[r,e.line],(a=e.push("inline","",0)).content=n,a.map=[r,e.line-1],a.children=[],(a=e.push("heading_close","h"+String(u),-1)).markup=String.fromCharCode(p),e.parentType=h,!0)}],["paragraph",function(e,r){var t,n,s,o,i,a,c=r+1,l=e.md.block.ruler.getRules("paragraph"),u=e.lineMax;for(a=e.parentType,e.parentType="paragraph";c<u&&!e.isEmpty(c);c++)if(!(e.sCount[c]-e.blkIndent>3||e.sCount[c]<0)){for(n=!1,s=0,o=l.length;s<o;s++)if(l[s](e,c,u,!0)){n=!0;break}if(n)break}return t=e.getLines(r,c,e.blkIndent,!1).trim(),e.line=c,(i=e.push("paragraph_open","p",1)).map=[r,e.line],(i=e.push("inline","",0)).content=t,i.map=[r,e.line],i.children=[],i=e.push("paragraph_close","p",-1),e.parentType=a,!0}]];function Le(){this.ruler=new O;for(var e=0;e<Fe.length;e++)this.ruler.push(Fe[e][0],Fe[e][1],{alt:(Fe[e][2]||[]).slice()})}Le.prototype.tokenize=function(e,r,t){for(var n,s=this.ruler.getRules(""),o=s.length,i=r,a=!1,c=e.md.options.maxNesting;i<t&&(e.line=i=e.skipEmptyLines(i),!(i>=t))&&!(e.sCount[i]<e.blkIndent);){if(e.level>=c){e.line=t;break}for(n=0;n<o&&!s[n](e,i,t,!1);n++);e.tight=!a,e.isEmpty(e.line-1)&&(a=!0),(i=e.line)<t&&e.isEmpty(i)&&(a=!0,i++,e.line=i)}},Le.prototype.parse=function(e,r,t,n){var s;e&&(s=new this.State(e,r,t,n),this.tokenize(s,s.line,s.lineMax))},Le.prototype.State=Se;var ze=Le;function Te(e){switch(e){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return!0;default:return!1}}for(var Ie=/(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i,Me=w.isSpace,Re=w.isSpace,Be=[],Ne=0;Ne<256;Ne++)Be.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach((function(e){Be[e.charCodeAt(0)]=1}));function Oe(e,r){var t,n,s,o,i,a=[],c=r.length;for(t=0;t<c;t++)126===(s=r[t]).marker&&-1!==s.end&&(o=r[s.end],(i=e.tokens[s.token]).type="s_open",i.tag="s",i.nesting=1,i.markup="~~",i.content="",(i=e.tokens[o.token]).type="s_close",i.tag="s",i.nesting=-1,i.markup="~~",i.content="","text"===e.tokens[o.token-1].type&&"~"===e.tokens[o.token-1].content&&a.push(o.token-1));for(;a.length;){for(n=(t=a.pop())+1;n<e.tokens.length&&"s_close"===e.tokens[n].type;)n++;t!==--n&&(i=e.tokens[n],e.tokens[n]=e.tokens[t],e.tokens[t]=i)}}var Pe={tokenize:function(e,r){var t,n,s,o,i=e.pos,a=e.src.charCodeAt(i);if(r)return!1;if(126!==a)return!1;if(s=(n=e.scanDelims(e.pos,!0)).length,o=String.fromCharCode(a),s<2)return!1;for(s%2&&(e.push("text","",0).content=o,s--),t=0;t<s;t+=2)e.push("text","",0).content=o+o,e.delimiters.push({marker:a,length:0,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},postProcess:function(e){var r,t=e.tokens_meta,n=e.tokens_meta.length;for(Oe(e,e.delimiters),r=0;r<n;r++)t[r]&&t[r].delimiters&&Oe(e,t[r].delimiters)}};function je(e,r){var t,n,s,o,i,a;for(t=r.length-1;t>=0;t--)95!==(n=r[t]).marker&&42!==n.marker||-1!==n.end&&(s=r[n.end],a=t>0&&r[t-1].end===n.end+1&&r[t-1].marker===n.marker&&r[t-1].token===n.token-1&&r[n.end+1].token===s.token+1,i=String.fromCharCode(n.marker),(o=e.tokens[n.token]).type=a?"strong_open":"em_open",o.tag=a?"strong":"em",o.nesting=1,o.markup=a?i+i:i,o.content="",(o=e.tokens[s.token]).type=a?"strong_close":"em_close",o.tag=a?"strong":"em",o.nesting=-1,o.markup=a?i+i:i,o.content="",a&&(e.tokens[r[t-1].token].content="",e.tokens[r[n.end+1].token].content="",t--))}var Ue={tokenize:function(e,r){var t,n,s=e.pos,o=e.src.charCodeAt(s);if(r)return!1;if(95!==o&&42!==o)return!1;for(n=e.scanDelims(e.pos,42===o),t=0;t<n.length;t++)e.push("text","",0).content=String.fromCharCode(o),e.delimiters.push({marker:o,length:n.length,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},postProcess:function(e){var r,t=e.tokens_meta,n=e.tokens_meta.length;for(je(e,e.delimiters),r=0;r<n;r++)t[r]&&t[r].delimiters&&je(e,t[r].delimiters)}},Ve=w.normalizeReference,Ze=w.isSpace,$e=w.normalizeReference,Ge=w.isSpace,He=/^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/,Je=/^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/,We=Ae.HTML_TAG_RE;var Ye=w.has,Ke=w.isValidEntityCode,Qe=w.fromCodePoint,Xe=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,er=/^&([a-z][a-z0-9]{1,31});/i;function rr(e,r){var t,n,s,o,i,a,c,l,u={},p=r.length;if(p){var h=0,f=-2,d=[];for(t=0;t<p;t++)if(s=r[t],d.push(0),r[h].marker===s.marker&&f===s.token-1||(h=t),f=s.token,s.length=s.length||0,s.close){for(u.hasOwnProperty(s.marker)||(u[s.marker]=[-1,-1,-1,-1,-1,-1]),i=u[s.marker][(s.open?3:0)+s.length%3],a=n=h-d[h]-1;n>i;n-=d[n]+1)if((o=r[n]).marker===s.marker&&o.open&&o.end<0&&(c=!1,(o.close||s.open)&&(o.length+s.length)%3==0&&(o.length%3==0&&s.length%3==0||(c=!0)),!c)){l=n>0&&!r[n-1].open?d[n-1]+1:0,d[t]=t-n+l,d[n]=l,s.open=!1,o.end=t,o.close=!1,a=-1,f=-2;break}-1!==a&&(u[s.marker][(s.open?3:0)+(s.length||0)%3]=a)}}}var tr=w.isWhiteSpace,nr=w.isPunctChar,sr=w.isMdAsciiPunct;function or(e,r,t,n){this.src=e,this.env=t,this.md=r,this.tokens=n,this.tokens_meta=Array(n.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[],this.backticks={},this.backticksScanned=!1,this.linkLevel=0}or.prototype.pushPending=function(){var e=new oe("text","",0);return e.content=this.pending,e.level=this.pendingLevel,this.tokens.push(e),this.pending="",e},or.prototype.push=function(e,r,t){this.pending&&this.pushPending();var n=new oe(e,r,t),s=null;return t<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),n.level=this.level,t>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],s={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(n),this.tokens_meta.push(s),n},or.prototype.scanDelims=function(e,r){var t,n,s,o,i,a,c,l,u,p=e,h=!0,f=!0,d=this.posMax,m=this.src.charCodeAt(e);for(t=e>0?this.src.charCodeAt(e-1):32;p<d&&this.src.charCodeAt(p)===m;)p++;return s=p-e,n=p<d?this.src.charCodeAt(p):32,c=sr(t)||nr(String.fromCharCode(t)),u=sr(n)||nr(String.fromCharCode(n)),a=tr(t),(l=tr(n))?h=!1:u&&(a||c||(h=!1)),a?f=!1:c&&(l||u||(f=!1)),r?(o=h,i=f):(o=h&&(!f||c),i=f&&(!h||u)),{can_open:o,can_close:i,length:s}},or.prototype.Token=oe;var ir=or,ar=[["text",function(e,r){for(var t=e.pos;t<e.posMax&&!Te(e.src.charCodeAt(t));)t++;return t!==e.pos&&(r||(e.pending+=e.src.slice(e.pos,t)),e.pos=t,!0)}],["linkify",function(e,r){var t,n,s,o,i,a,c;return!!e.md.options.linkify&&(!(e.linkLevel>0)&&(!((t=e.pos)+3>e.posMax)&&(58===e.src.charCodeAt(t)&&(47===e.src.charCodeAt(t+1)&&(47===e.src.charCodeAt(t+2)&&(!!(n=e.pending.match(Ie))&&(s=n[1],!!(o=e.md.linkify.matchAtStart(e.src.slice(t-s.length)))&&(i=(i=o.url).replace(/\*+$/,""),a=e.md.normalizeLink(i),!!e.md.validateLink(a)&&(r||(e.pending=e.pending.slice(0,-s.length),(c=e.push("link_open","a",1)).attrs=[["href",a]],c.markup="linkify",c.info="auto",(c=e.push("text","",0)).content=e.md.normalizeLinkText(i),(c=e.push("link_close","a",-1)).markup="linkify",c.info="auto"),e.pos+=i.length-s.length,!0)))))))))}],["newline",function(e,r){var t,n,s,o=e.pos;if(10!==e.src.charCodeAt(o))return!1;if(t=e.pending.length-1,n=e.posMax,!r)if(t>=0&&32===e.pending.charCodeAt(t))if(t>=1&&32===e.pending.charCodeAt(t-1)){for(s=t-1;s>=1&&32===e.pending.charCodeAt(s-1);)s--;e.pending=e.pending.slice(0,s),e.push("hardbreak","br",0)}else e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0);else e.push("softbreak","br",0);for(o++;o<n&&Me(e.src.charCodeAt(o));)o++;return e.pos=o,!0}],["escape",function(e,r){var t,n,s,o,i,a=e.pos,c=e.posMax;if(92!==e.src.charCodeAt(a))return!1;if(++a>=c)return!1;if(10===(t=e.src.charCodeAt(a))){for(r||e.push("hardbreak","br",0),a++;a<c&&(t=e.src.charCodeAt(a),Re(t));)a++;return e.pos=a,!0}return o=e.src[a],t>=55296&&t<=56319&&a+1<c&&(n=e.src.charCodeAt(a+1))>=56320&&n<=57343&&(o+=e.src[a+1],a++),s="\\"+o,r||(i=e.push("text_special","",0),t<256&&0!==Be[t]?i.content=o:i.content=s,i.markup=s,i.info="escape"),e.pos=a+1,!0}],["backticks",function(e,r){var t,n,s,o,i,a,c,l,u=e.pos;if(96!==e.src.charCodeAt(u))return!1;for(t=u,u++,n=e.posMax;u<n&&96===e.src.charCodeAt(u);)u++;if(c=(s=e.src.slice(t,u)).length,e.backticksScanned&&(e.backticks[c]||0)<=t)return r||(e.pending+=s),e.pos+=c,!0;for(i=a=u;-1!==(i=e.src.indexOf("`",a));){for(a=i+1;a<n&&96===e.src.charCodeAt(a);)a++;if((l=a-i)===c)return r||((o=e.push("code_inline","code",0)).markup=s,o.content=e.src.slice(u,i).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),e.pos=a,!0;e.backticks[l]=i}return e.backticksScanned=!0,r||(e.pending+=s),e.pos+=c,!0}],["strikethrough",Pe.tokenize],["emphasis",Ue.tokenize],["link",function(e,r){var t,n,s,o,i,a,c,l,u="",p="",h=e.pos,f=e.posMax,d=e.pos,m=!0;if(91!==e.src.charCodeAt(e.pos))return!1;if(i=e.pos+1,(o=e.md.helpers.parseLinkLabel(e,e.pos,!0))<0)return!1;if((a=o+1)<f&&40===e.src.charCodeAt(a)){for(m=!1,a++;a<f&&(n=e.src.charCodeAt(a),Ze(n)||10===n);a++);if(a>=f)return!1;if(d=a,(c=e.md.helpers.parseLinkDestination(e.src,a,e.posMax)).ok){for(u=e.md.normalizeLink(c.str),e.md.validateLink(u)?a=c.pos:u="",d=a;a<f&&(n=e.src.charCodeAt(a),Ze(n)||10===n);a++);if(c=e.md.helpers.parseLinkTitle(e.src,a,e.posMax),a<f&&d!==a&&c.ok)for(p=c.str,a=c.pos;a<f&&(n=e.src.charCodeAt(a),Ze(n)||10===n);a++);}(a>=f||41!==e.src.charCodeAt(a))&&(m=!0),a++}if(m){if(void 0===e.env.references)return!1;if(a<f&&91===e.src.charCodeAt(a)?(d=a+1,(a=e.md.helpers.parseLinkLabel(e,a))>=0?s=e.src.slice(d,a++):a=o+1):a=o+1,s||(s=e.src.slice(i,o)),!(l=e.env.references[Ve(s)]))return e.pos=h,!1;u=l.href,p=l.title}return r||(e.pos=i,e.posMax=o,e.push("link_open","a",1).attrs=t=[["href",u]],p&&t.push(["title",p]),e.linkLevel++,e.md.inline.tokenize(e),e.linkLevel--,e.push("link_close","a",-1)),e.pos=a,e.posMax=f,!0}],["image",function(e,r){var t,n,s,o,i,a,c,l,u,p,h,f,d,m="",g=e.pos,_=e.posMax;if(33!==e.src.charCodeAt(e.pos))return!1;if(91!==e.src.charCodeAt(e.pos+1))return!1;if(a=e.pos+2,(i=e.md.helpers.parseLinkLabel(e,e.pos+1,!1))<0)return!1;if((c=i+1)<_&&40===e.src.charCodeAt(c)){for(c++;c<_&&(n=e.src.charCodeAt(c),Ge(n)||10===n);c++);if(c>=_)return!1;for(d=c,(u=e.md.helpers.parseLinkDestination(e.src,c,e.posMax)).ok&&(m=e.md.normalizeLink(u.str),e.md.validateLink(m)?c=u.pos:m=""),d=c;c<_&&(n=e.src.charCodeAt(c),Ge(n)||10===n);c++);if(u=e.md.helpers.parseLinkTitle(e.src,c,e.posMax),c<_&&d!==c&&u.ok)for(p=u.str,c=u.pos;c<_&&(n=e.src.charCodeAt(c),Ge(n)||10===n);c++);else p="";if(c>=_||41!==e.src.charCodeAt(c))return e.pos=g,!1;c++}else{if(void 0===e.env.references)return!1;if(c<_&&91===e.src.charCodeAt(c)?(d=c+1,(c=e.md.helpers.parseLinkLabel(e,c))>=0?o=e.src.slice(d,c++):c=i+1):c=i+1,o||(o=e.src.slice(a,i)),!(l=e.env.references[$e(o)]))return e.pos=g,!1;m=l.href,p=l.title}return r||(s=e.src.slice(a,i),e.md.inline.parse(s,e.md,e.env,f=[]),(h=e.push("image","img",0)).attrs=t=[["src",m],["alt",""]],h.children=f,h.content=s,p&&t.push(["title",p])),e.pos=c,e.posMax=_,!0}],["autolink",function(e,r){var t,n,s,o,i,a,c=e.pos;if(60!==e.src.charCodeAt(c))return!1;for(i=e.pos,a=e.posMax;;){if(++c>=a)return!1;if(60===(o=e.src.charCodeAt(c)))return!1;if(62===o)break}return t=e.src.slice(i+1,c),Je.test(t)?(n=e.md.normalizeLink(t),!!e.md.validateLink(n)&&(r||((s=e.push("link_open","a",1)).attrs=[["href",n]],s.markup="autolink",s.info="auto",(s=e.push("text","",0)).content=e.md.normalizeLinkText(t),(s=e.push("link_close","a",-1)).markup="autolink",s.info="auto"),e.pos+=t.length+2,!0)):!!He.test(t)&&(n=e.md.normalizeLink("mailto:"+t),!!e.md.validateLink(n)&&(r||((s=e.push("link_open","a",1)).attrs=[["href",n]],s.markup="autolink",s.info="auto",(s=e.push("text","",0)).content=e.md.normalizeLinkText(t),(s=e.push("link_close","a",-1)).markup="autolink",s.info="auto"),e.pos+=t.length+2,!0))}],["html_inline",function(e,r){var t,n,s,o,i,a=e.pos;return!!e.md.options.html&&(s=e.posMax,!(60!==e.src.charCodeAt(a)||a+2>=s)&&(!(33!==(t=e.src.charCodeAt(a+1))&&63!==t&&47!==t&&!function(e){var r=32|e;return r>=97&&r<=122}(t))&&(!!(n=e.src.slice(a).match(We))&&(r||((o=e.push("html_inline","",0)).content=e.src.slice(a,a+n[0].length),i=o.content,/^<a[>\s]/i.test(i)&&e.linkLevel++,function(e){return/^<\/a\s*>/i.test(e)}(o.content)&&e.linkLevel--),e.pos+=n[0].length,!0))))}],["entity",function(e,t){var n,s,o,i=e.pos,a=e.posMax;if(38!==e.src.charCodeAt(i))return!1;if(i+1>=a)return!1;if(35===e.src.charCodeAt(i+1)){if(s=e.src.slice(i).match(Xe))return t||(n="x"===s[1][0].toLowerCase()?parseInt(s[1].slice(1),16):parseInt(s[1],10),(o=e.push("text_special","",0)).content=Ke(n)?Qe(n):Qe(65533),o.markup=s[0],o.info="entity"),e.pos+=s[0].length,!0}else if((s=e.src.slice(i).match(er))&&Ye(r,s[1]))return t||((o=e.push("text_special","",0)).content=r[s[1]],o.markup=s[0],o.info="entity"),e.pos+=s[0].length,!0;return!1}]],cr=[["balance_pairs",function(e){var r,t=e.tokens_meta,n=e.tokens_meta.length;for(rr(0,e.delimiters),r=0;r<n;r++)t[r]&&t[r].delimiters&&rr(0,t[r].delimiters)}],["strikethrough",Pe.postProcess],["emphasis",Ue.postProcess],["fragments_join",function(e){var r,t,n=0,s=e.tokens,o=e.tokens.length;for(r=t=0;r<o;r++)s[r].nesting<0&&n--,s[r].level=n,s[r].nesting>0&&n++,"text"===s[r].type&&r+1<o&&"text"===s[r+1].type?s[r+1].content=s[r].content+s[r+1].content:(r!==t&&(s[t]=s[r]),t++);r!==t&&(s.length=t)}]];function lr(){var e;for(this.ruler=new O,e=0;e<ar.length;e++)this.ruler.push(ar[e][0],ar[e][1]);for(this.ruler2=new O,e=0;e<cr.length;e++)this.ruler2.push(cr[e][0],cr[e][1])}lr.prototype.skipToken=function(e){var r,t,n=e.pos,s=this.ruler.getRules(""),o=s.length,i=e.md.options.maxNesting,a=e.cache;if(void 0===a[n]){if(e.level<i)for(t=0;t<o&&(e.level++,r=s[t](e,!0),e.level--,!r);t++);else e.pos=e.posMax;r||e.pos++,a[n]=e.pos}else e.pos=a[n]},lr.prototype.tokenize=function(e){for(var r,t,n=this.ruler.getRules(""),s=n.length,o=e.posMax,i=e.md.options.maxNesting;e.pos<o;){if(e.level<i)for(t=0;t<s&&!(r=n[t](e,!1));t++);if(r){if(e.pos>=o)break}else e.pending+=e.src[e.pos++]}e.pending&&e.pushPending()},lr.prototype.parse=function(e,r,t,n){var s,o,i,a=new this.State(e,r,t,n);for(this.tokenize(a),i=(o=this.ruler2.getRules("")).length,s=0;s<i;s++)o[s](a)},lr.prototype.State=ir;var ur=lr;function pr(e){var r=Array.prototype.slice.call(arguments,1);return r.forEach((function(r){r&&Object.keys(r).forEach((function(t){e[t]=r[t]}))})),e}function hr(e){return Object.prototype.toString.call(e)}function fr(e){return"[object Function]"===hr(e)}function dr(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var mr={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1};var gr={"http:":{validate:function(e,r,t){var n=e.slice(r);return t.re.http||(t.re.http=new RegExp("^\\/\\/"+t.re.src_auth+t.re.src_host_port_strict+t.re.src_path,"i")),t.re.http.test(n)?n.match(t.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(e,r,t){var n=e.slice(r);return t.re.no_http||(t.re.no_http=new RegExp("^"+t.re.src_auth+"(?:localhost|(?:(?:"+t.re.src_domain+")\\.)+"+t.re.src_domain_root+")"+t.re.src_port+t.re.src_host_terminator+t.re.src_path,"i")),t.re.no_http.test(n)?r>=3&&":"===e[r-3]||r>=3&&"/"===e[r-3]?0:n.match(t.re.no_http)[0].length:0}},"mailto:":{validate:function(e,r,t){var n=e.slice(r);return t.re.mailto||(t.re.mailto=new RegExp("^"+t.re.src_email_name+"@"+t.re.src_host_strict,"i")),t.re.mailto.test(n)?n.match(t.re.mailto)[0].length:0}}},_r="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");function kr(e){var r=e.re=function(e){var r={};return e=e||{},r.src_Any=y.source,r.src_Cc=A.source,r.src_Z=x.source,r.src_P=t.source,r.src_ZPCc=[r.src_Z,r.src_P,r.src_Cc].join("|"),r.src_ZCc=[r.src_Z,r.src_Cc].join("|"),r.src_pseudo_letter="(?:(?![><\uff5c]|"+r.src_ZPCc+")"+r.src_Any+")",r.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",r.src_auth="(?:(?:(?!"+r.src_ZCc+"|[@/\\[\\]()]).)+@)?",r.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",r.src_host_terminator="(?=$|[><\uff5c]|"+r.src_ZPCc+")(?!"+(e["---"]?"-(?!--)|":"-|")+"_|:\\d|\\.-|\\.(?!$|"+r.src_ZPCc+"))",r.src_path="(?:[/?#](?:(?!"+r.src_ZCc+"|[><\uff5c]|[()[\\]{}.,\"'?!\\-;]).|\\[(?:(?!"+r.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+r.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+r.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+r.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+r.src_ZCc+"|[']).)+\\'|\\'(?="+r.src_pseudo_letter+"|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!"+r.src_ZCc+"|[.]|$)|"+(e["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+",(?!"+r.src_ZCc+"|$)|;(?!"+r.src_ZCc+"|$)|\\!+(?!"+r.src_ZCc+"|[!]|$)|\\?(?!"+r.src_ZCc+"|[?]|$))+|\\/)?",r.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',r.src_xn="xn--[a-z0-9\\-]{1,59}",r.src_domain_root="(?:"+r.src_xn+"|"+r.src_pseudo_letter+"{1,63})",r.src_domain="(?:"+r.src_xn+"|(?:"+r.src_pseudo_letter+")|(?:"+r.src_pseudo_letter+"(?:-|"+r.src_pseudo_letter+"){0,61}"+r.src_pseudo_letter+"))",r.src_host="(?:(?:(?:(?:"+r.src_domain+")\\.)*"+r.src_domain+"))",r.tpl_host_fuzzy="(?:"+r.src_ip4+"|(?:(?:(?:"+r.src_domain+")\\.)+(?:%TLDS%)))",r.tpl_host_no_ip_fuzzy="(?:(?:(?:"+r.src_domain+")\\.)+(?:%TLDS%))",r.src_host_strict=r.src_host+r.src_host_terminator,r.tpl_host_fuzzy_strict=r.tpl_host_fuzzy+r.src_host_terminator,r.src_host_port_strict=r.src_host+r.src_port+r.src_host_terminator,r.tpl_host_port_fuzzy_strict=r.tpl_host_fuzzy+r.src_port+r.src_host_terminator,r.tpl_host_port_no_ip_fuzzy_strict=r.tpl_host_no_ip_fuzzy+r.src_port+r.src_host_terminator,r.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+r.src_ZPCc+"|>|$))",r.tpl_email_fuzzy='(^|[><\uff5c]|"|\\(|'+r.src_ZCc+")("+r.src_email_name+"@"+r.tpl_host_fuzzy_strict+")",r.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|"+r.src_ZPCc+"))((?![$+<=>^`|\uff5c])"+r.tpl_host_port_fuzzy_strict+r.src_path+")",r.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|"+r.src_ZPCc+"))((?![$+<=>^`|\uff5c])"+r.tpl_host_port_no_ip_fuzzy_strict+r.src_path+")",r}(e.__opts__),n=e.__tlds__.slice();function s(e){return e.replace("%TLDS%",r.src_tlds)}e.onCompile(),e.__tlds_replaced__||n.push("a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]"),n.push(r.src_xn),r.src_tlds=n.join("|"),r.email_fuzzy=RegExp(s(r.tpl_email_fuzzy),"i"),r.link_fuzzy=RegExp(s(r.tpl_link_fuzzy),"i"),r.link_no_ip_fuzzy=RegExp(s(r.tpl_link_no_ip_fuzzy),"i"),r.host_fuzzy_test=RegExp(s(r.tpl_host_fuzzy_test),"i");var o=[];function i(e,r){throw new Error('(LinkifyIt) Invalid schema "'+e+'": '+r)}e.__compiled__={},Object.keys(e.__schemas__).forEach((function(r){var t=e.__schemas__[r];if(null!==t){var n={validate:null,link:null};if(e.__compiled__[r]=n,"[object Object]"===hr(t))return!function(e){return"[object RegExp]"===hr(e)}(t.validate)?fr(t.validate)?n.validate=t.validate:i(r,t):n.validate=function(e){return function(r,t){var n=r.slice(t);return e.test(n)?n.match(e)[0].length:0}}(t.validate),void(fr(t.normalize)?n.normalize=t.normalize:t.normalize?i(r,t):n.normalize=function(e,r){r.normalize(e)});!function(e){return"[object String]"===hr(e)}(t)?i(r,t):o.push(r)}})),o.forEach((function(r){e.__compiled__[e.__schemas__[r]]&&(e.__compiled__[r].validate=e.__compiled__[e.__schemas__[r]].validate,e.__compiled__[r].normalize=e.__compiled__[e.__schemas__[r]].normalize)})),e.__compiled__[""]={validate:null,normalize:function(e,r){r.normalize(e)}};var a=Object.keys(e.__compiled__).filter((function(r){return r.length>0&&e.__compiled__[r]})).map(dr).join("|");e.re.schema_test=RegExp("(^|(?!_)(?:[><\uff5c]|"+r.src_ZPCc+"))("+a+")","i"),e.re.schema_search=RegExp("(^|(?!_)(?:[><\uff5c]|"+r.src_ZPCc+"))("+a+")","ig"),e.re.schema_at_start=RegExp("^"+e.re.schema_search.source,"i"),e.re.pretest=RegExp("("+e.re.schema_test.source+")|("+e.re.host_fuzzy_test.source+")|@","i"),function(e){e.__index__=-1,e.__text_cache__=""}(e)}function br(e,r){var t=e.__index__,n=e.__last_index__,s=e.__text_cache__.slice(t,n);this.schema=e.__schema__.toLowerCase(),this.index=t+r,this.lastIndex=n+r,this.raw=s,this.text=s,this.url=s}function vr(e,r){var t=new br(e,r);return e.__compiled__[t.schema].normalize(t,e),t}function Cr(e,r){if(!(this instanceof Cr))return new Cr(e,r);var t;r||(t=e,Object.keys(t||{}).reduce((function(e,r){return e||mr.hasOwnProperty(r)}),!1)&&(r=e,e={})),this.__opts__=pr({},mr,r),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=pr({},gr,e),this.__compiled__={},this.__tlds__=_r,this.__tlds_replaced__=!1,this.re={},kr(this)}Cr.prototype.add=function(e,r){return this.__schemas__[e]=r,kr(this),this},Cr.prototype.set=function(e){return this.__opts__=pr(this.__opts__,e),this},Cr.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return!1;var r,t,n,s,o,i,a,c;if(this.re.schema_test.test(e))for((a=this.re.schema_search).lastIndex=0;null!==(r=a.exec(e));)if(s=this.testSchemaAt(e,r[2],a.lastIndex)){this.__schema__=r[2],this.__index__=r.index+r[1].length,this.__last_index__=r.index+r[0].length+s;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(c=e.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||c<this.__index__)&&null!==(t=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(o=t.index+t[1].length,(this.__index__<0||o<this.__index__)&&(this.__schema__="",this.__index__=o,this.__last_index__=t.index+t[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&e.indexOf("@")>=0&&null!==(n=e.match(this.re.email_fuzzy))&&(o=n.index+n[1].length,i=n.index+n[0].length,(this.__index__<0||o<this.__index__||o===this.__index__&&i>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=o,this.__last_index__=i)),this.__index__>=0},Cr.prototype.pretest=function(e){return this.re.pretest.test(e)},Cr.prototype.testSchemaAt=function(e,r,t){return this.__compiled__[r.toLowerCase()]?this.__compiled__[r.toLowerCase()].validate(e,t,this):0},Cr.prototype.match=function(e){var r=0,t=[];this.__index__>=0&&this.__text_cache__===e&&(t.push(vr(this,r)),r=this.__last_index__);for(var n=r?e.slice(r):e;this.test(n);)t.push(vr(this,r)),n=n.slice(this.__last_index__),r+=this.__last_index__;return t.length?t:null},Cr.prototype.matchAtStart=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return null;var r=this.re.schema_at_start.exec(e);if(!r)return null;var t=this.testSchemaAt(e,r[2],r[0].length);return t?(this.__schema__=r[2],this.__index__=r.index+r[1].length,this.__last_index__=r.index+r[0].length+t,vr(this,0)):null},Cr.prototype.tlds=function(e,r){return e=Array.isArray(e)?e:[e],r?(this.__tlds__=this.__tlds__.concat(e).sort().filter((function(e,r,t){return e!==t[r-1]})).reverse(),kr(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,kr(this),this)},Cr.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),"mailto:"!==e.schema||/^mailto:/i.test(e.url)||(e.url="mailto:"+e.url)},Cr.prototype.onCompile=function(){};var yr=Cr,Ar=2147483647,xr=36,Dr=/^xn--/,wr=/[^\x20-\x7E]/,Er=/[\x2E\u3002\uFF0E\uFF61]/g,qr={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},Sr=Math.floor,Fr=String.fromCharCode;
/*! https://mths.be/punycode v1.4.1 by @mathias */function Lr(e){throw new RangeError(qr[e])}function zr(e,r){for(var t=e.length,n=[];t--;)n[t]=r(e[t]);return n}function Tr(e,r){var t=e.split("@"),n="";return t.length>1&&(n=t[0]+"@",e=t[1]),n+zr((e=e.replace(Er,".")).split("."),r).join(".")}function Ir(e){for(var r,t,n=[],s=0,o=e.length;s<o;)(r=e.charCodeAt(s++))>=55296&&r<=56319&&s<o?56320==(64512&(t=e.charCodeAt(s++)))?n.push(((1023&r)<<10)+(1023&t)+65536):(n.push(r),s--):n.push(r);return n}function Mr(e){return zr(e,(function(e){var r="";return e>65535&&(r+=Fr((e-=65536)>>>10&1023|55296),e=56320|1023&e),r+=Fr(e)})).join("")}function Rr(e,r){return e+22+75*(e<26)-((0!=r)<<5)}function Br(e,r,t){var n=0;for(e=t?Sr(e/700):e>>1,e+=Sr(e/r);e>455;n+=xr)e=Sr(e/35);return Sr(n+36*e/(e+38))}function Nr(e){var r,t,n,s,o,i,a,c,l,u,p,h=[],f=e.length,d=0,m=128,g=72;for((t=e.lastIndexOf("-"))<0&&(t=0),n=0;n<t;++n)e.charCodeAt(n)>=128&&Lr("not-basic"),h.push(e.charCodeAt(n));for(s=t>0?t+1:0;s<f;){for(o=d,i=1,a=xr;s>=f&&Lr("invalid-input"),((c=(p=e.charCodeAt(s++))-48<10?p-22:p-65<26?p-65:p-97<26?p-97:xr)>=xr||c>Sr((Ar-d)/i))&&Lr("overflow"),d+=c*i,!(c<(l=a<=g?1:a>=g+26?26:a-g));a+=xr)i>Sr(Ar/(u=xr-l))&&Lr("overflow"),i*=u;g=Br(d-o,r=h.length+1,0==o),Sr(d/r)>Ar-m&&Lr("overflow"),m+=Sr(d/r),d%=r,h.splice(d++,0,m)}return Mr(h)}function Or(e){var r,t,n,s,o,i,a,c,l,u,p,h,f,d,m,g=[];for(h=(e=Ir(e)).length,r=128,t=0,o=72,i=0;i<h;++i)(p=e[i])<128&&g.push(Fr(p));for(n=s=g.length,s&&g.push("-");n<h;){for(a=Ar,i=0;i<h;++i)(p=e[i])>=r&&p<a&&(a=p);for(a-r>Sr((Ar-t)/(f=n+1))&&Lr("overflow"),t+=(a-r)*f,r=a,i=0;i<h;++i)if((p=e[i])<r&&++t>Ar&&Lr("overflow"),p==r){for(c=t,l=xr;!(c<(u=l<=o?1:l>=o+26?26:l-o));l+=xr)m=c-u,d=xr-u,g.push(Fr(Rr(u+m%d,0))),c=Sr(m/d);g.push(Fr(Rr(c,0))),o=Br(t,f,n==s),t=0,++n}++t,++r}return g.join("")}function Pr(e){return Tr(e,(function(e){return Dr.test(e)?Nr(e.slice(4).toLowerCase()):e}))}function jr(e){return Tr(e,(function(e){return wr.test(e)?"xn--"+Or(e):e}))}var Ur="1.4.1",Vr={decode:Ir,encode:Mr},Zr={version:Ur,ucs2:Vr,toASCII:jr,toUnicode:Pr,encode:Or,decode:Nr},$r=e(Object.freeze({__proto__:null,decode:Nr,encode:Or,toUnicode:Pr,toASCII:jr,version:Ur,ucs2:Vr,default:Zr})),Gr={default:{options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"\u201c\u201d\u2018\u2019",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}},zero:{options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"\u201c\u201d\u2018\u2019",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline","text_join"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","fragments_join"]}}},commonmark:{options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"\u201c\u201d\u2018\u2019",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline","text_join"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","fragments_join"]}}}},Hr=/^(vbscript|javascript|file|data):/,Jr=/^data:image\/(gif|png|jpeg|webp);/;function Wr(e){var r=e.trim().toLowerCase();return!Hr.test(r)||!!Jr.test(r)}var Yr=["http:","https:","mailto:"];function Kr(e){var r=C.parse(e,!0);if(r.hostname&&(!r.protocol||Yr.indexOf(r.protocol)>=0))try{r.hostname=$r.toASCII(r.hostname)}catch(e){}return C.encode(C.format(r))}function Qr(e){var r=C.parse(e,!0);if(r.hostname&&(!r.protocol||Yr.indexOf(r.protocol)>=0))try{r.hostname=$r.toUnicode(r.hostname)}catch(e){}return C.decode(C.format(r),C.decode.defaultChars+"%")}function Xr(e,r){if(!(this instanceof Xr))return new Xr(e,r);r||w.isString(e)||(r=e||{},e="default"),this.inline=new ur,this.block=new ze,this.core=new ue,this.renderer=new B,this.linkify=new yr,this.validateLink=Wr,this.normalizeLink=Kr,this.normalizeLinkText=Qr,this.utils=w,this.helpers=w.assign({},L),this.options={},this.configure(e),r&&this.set(r)}return Xr.prototype.set=function(e){return w.assign(this.options,e),this},Xr.prototype.configure=function(e){var r,t=this;if(w.isString(e)&&!(e=Gr[r=e]))throw new Error('Wrong `markdown-it` preset "'+r+'", check name');if(!e)throw new Error("Wrong `markdown-it` preset, can't be empty");return e.options&&t.set(e.options),e.components&&Object.keys(e.components).forEach((function(r){e.components[r].rules&&t[r].ruler.enableOnly(e.components[r].rules),e.components[r].rules2&&t[r].ruler2.enableOnly(e.components[r].rules2)})),this},Xr.prototype.enable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach((function(r){t=t.concat(this[r].ruler.enable(e,!0))}),this),t=t.concat(this.inline.ruler2.enable(e,!0));var n=e.filter((function(e){return t.indexOf(e)<0}));if(n.length&&!r)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+n);return this},Xr.prototype.disable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach((function(r){t=t.concat(this[r].ruler.disable(e,!0))}),this),t=t.concat(this.inline.ruler2.disable(e,!0));var n=e.filter((function(e){return t.indexOf(e)<0}));if(n.length&&!r)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+n);return this},Xr.prototype.use=function(e){var r=[this].concat(Array.prototype.slice.call(arguments,1));return e.apply(e,r),this},Xr.prototype.parse=function(e,r){if("string"!=typeof e)throw new Error("Input data should be a String");var t=new this.core.State(e,this,r);return this.core.process(t),t.tokens},Xr.prototype.render=function(e,r){return r=r||{},this.renderer.render(this.parse(e,r),this.options,r)},Xr.prototype.parseInline=function(e,r){var t=new this.core.State(e,this,r);return t.inlineMode=!0,this.core.process(t),t.tokens},Xr.prototype.renderInline=function(e,r){return r=r||{},this.renderer.render(this.parseInline(e,r),this.options,r)},Xr}));


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: client/third-party/lodash-custom.js  */ /**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash include="assign,assignIn,before,bind,chain,clone,cloneDeep,compact,concat,create,debounce,defaults,defer,delay,each,escape,every,filter,find,findLast,flatten,flattenDeep,forEach,forOwn,groupBy,has,head,includes,identity,indexOf,isArguments,isArray,isBoolean,isDate,isEmpty,isEqual,isFinite,isFunction,isNaN,isNull,isNumber,isObject,isRegExp,isString,isUndefined,iteratee,keys,last,map,mapValues,matches,max,min,mixin,negate,noConflict,noop,once,partition,pick,pickBy,reduce,remove,result,size,slice,some,sortBy,sumBy,take,tap,throttle,thru,toArray,uniq,uniqBy,uniqueId,value,values" --output client/third-party/lodash-custom.js`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.5';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match HTML entities and HTML characters. */
  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsVarRange = '\\ufe0e\\ufe0f';

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /*--------------------------------------------------------------------------*/

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Used to restore the original `_` reference in `_.noConflict`. */
  var oldDash = root._;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined,
      Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
      getPrototype = overArg(Object.getPrototypeOf, Object),
      objectCreate = Object.create,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice,
      spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
      symIterator = Symbol ? Symbol.iterator : undefined,
      symToStringTag = Symbol ? Symbol.toStringTag : undefined;

  var defineProperty = (function() {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols,
      nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
      nativeIsFinite = root.isFinite,
      nativeKeys = overArg(Object.keys, Object),
      nativeMax = Math.max,
      nativeMin = Math.min,
      nativeNow = Date.now,
      nativeReverse = arrayProto.reverse;

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap'),
      nativeCreate = getNative(Object, 'create');

  /** Used to store function metadata. */
  var metaMap = WeakMap && new WeakMap;

  /** Used to lookup unminified function names. */
  var realNames = {};

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /*------------------------------------------------------------------------*/

  /**
   * Creates a `lodash` object which wraps `value` to enable implicit method
   * chain sequences. Methods that operate on and return arrays, collections,
   * and functions can be chained together. Methods that retrieve a single value
   * or may return a primitive value will automatically end the chain sequence
   * and return the unwrapped value. Otherwise, the value must be unwrapped
   * with `_#value`.
   *
   * Explicit chain sequences, which must be unwrapped with `_#value`, may be
   * enabled using `_.chain`.
   *
   * The execution of chained methods is lazy, that is, it's deferred until
   * `_#value` is implicitly or explicitly called.
   *
   * Lazy evaluation allows several methods to support shortcut fusion.
   * Shortcut fusion is an optimization to merge iteratee calls; this avoids
   * the creation of intermediate arrays and can greatly reduce the number of
   * iteratee executions. Sections of a chain sequence qualify for shortcut
   * fusion if the section is applied to an array and iteratees accept only
   * one argument. The heuristic for whether a section qualifies for shortcut
   * fusion is subject to change.
   *
   * Chaining is supported in custom builds as long as the `_#value` method is
   * directly or indirectly included in the build.
   *
   * In addition to lodash methods, wrappers have `Array` and `String` methods.
   *
   * The wrapper `Array` methods are:
   * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
   *
   * The wrapper `String` methods are:
   * `replace` and `split`
   *
   * The wrapper methods that support shortcut fusion are:
   * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
   * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
   * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
   *
   * The chainable wrapper methods are:
   * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
   * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
   * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
   * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
   * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
   * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
   * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
   * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
   * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
   * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
   * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
   * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
   * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
   * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
   * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
   * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
   * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
   * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
   * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
   * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
   * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
   * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
   * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
   * `zipObject`, `zipObjectDeep`, and `zipWith`
   *
   * The wrapper methods that are **not** chainable by default are:
   * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
   * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
   * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
   * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
   * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
   * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
   * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
   * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
   * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
   * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
   * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
   * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
   * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
   * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
   * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
   * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
   * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
   * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
   * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
   * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
   * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
   * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
   * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
   * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
   * `upperFirst`, `value`, and `words`
   *
   * @name _
   * @constructor
   * @category Seq
   * @param {*} value The value to wrap in a `lodash` instance.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var wrapped = _([1, 2, 3]);
   *
   * // Returns an unwrapped value.
   * wrapped.reduce(_.add);
   * // => 6
   *
   * // Returns a wrapped value.
   * var squares = wrapped.map(square);
   *
   * _.isArray(squares);
   * // => false
   *
   * _.isArray(squares.value());
   * // => true
   */
  function lodash(value) {
    if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
      if (value instanceof LodashWrapper) {
        return value;
      }
      if (hasOwnProperty.call(value, '__wrapped__')) {
        return wrapperClone(value);
      }
    }
    return new LodashWrapper(value);
  }

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  /**
   * The function whose prototype chain sequence wrappers inherit from.
   *
   * @private
   */
  function baseLodash() {
    // No operation performed.
  }

  /**
   * The base constructor for creating `lodash` wrapper objects.
   *
   * @private
   * @param {*} value The value to wrap.
   * @param {boolean} [chainAll] Enable explicit method chain sequences.
   */
  function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__chain__ = !!chainAll;
    this.__index__ = 0;
    this.__values__ = undefined;
  }

  // Ensure wrappers are instances of `baseLodash`.
  lodash.prototype = baseLodash.prototype;
  lodash.prototype.constructor = lodash;

  LodashWrapper.prototype = baseCreate(baseLodash.prototype);
  LodashWrapper.prototype.constructor = LodashWrapper;

  /*------------------------------------------------------------------------*/

  /**
   * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
   *
   * @private
   * @constructor
   * @param {*} value The value to wrap.
   */
  function LazyWrapper(value) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__dir__ = 1;
    this.__filtered__ = false;
    this.__iteratees__ = [];
    this.__takeCount__ = MAX_ARRAY_LENGTH;
    this.__views__ = [];
  }

  /**
   * Creates a clone of the lazy wrapper object.
   *
   * @private
   * @name clone
   * @memberOf LazyWrapper
   * @returns {Object} Returns the cloned `LazyWrapper` object.
   */
  function lazyClone() {
    var result = new LazyWrapper(this.__wrapped__);
    result.__actions__ = copyArray(this.__actions__);
    result.__dir__ = this.__dir__;
    result.__filtered__ = this.__filtered__;
    result.__iteratees__ = copyArray(this.__iteratees__);
    result.__takeCount__ = this.__takeCount__;
    result.__views__ = copyArray(this.__views__);
    return result;
  }

  /**
   * Reverses the direction of lazy iteration.
   *
   * @private
   * @name reverse
   * @memberOf LazyWrapper
   * @returns {Object} Returns the new reversed `LazyWrapper` object.
   */
  function lazyReverse() {
    if (this.__filtered__) {
      var result = new LazyWrapper(this);
      result.__dir__ = -1;
      result.__filtered__ = true;
    } else {
      result = this.clone();
      result.__dir__ *= -1;
    }
    return result;
  }

  /**
   * Extracts the unwrapped value from its lazy wrapper.
   *
   * @private
   * @name value
   * @memberOf LazyWrapper
   * @returns {*} Returns the unwrapped value.
   */
  function lazyValue() {
    var array = this.__wrapped__.value(),
        dir = this.__dir__,
        isArr = isArray(array),
        isRight = dir < 0,
        arrLength = isArr ? array.length : 0,
        view = getView(0, arrLength, this.__views__),
        start = view.start,
        end = view.end,
        length = end - start,
        index = isRight ? end : (start - 1),
        iteratees = this.__iteratees__,
        iterLength = iteratees.length,
        resIndex = 0,
        takeCount = nativeMin(length, this.__takeCount__);

    if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
      return baseWrapperValue(array, this.__actions__);
    }
    var result = [];

    outer:
    while (length-- && resIndex < takeCount) {
      index += dir;

      var iterIndex = -1,
          value = array[index];

      while (++iterIndex < iterLength) {
        var data = iteratees[iterIndex],
            iteratee = data.iteratee,
            type = data.type,
            computed = iteratee(value);

        if (type == LAZY_MAP_FLAG) {
          value = computed;
        } else if (!computed) {
          if (type == LAZY_FILTER_FLAG) {
            continue outer;
          } else {
            break outer;
          }
        }
      }
      result[resIndex++] = value;
    }
    return result;
  }

  // Ensure `LazyWrapper` is an instance of `baseLodash`.
  LazyWrapper.prototype = baseCreate(baseLodash.prototype);
  LazyWrapper.prototype.constructor = LazyWrapper;

  /*------------------------------------------------------------------------*/

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
  }

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /*------------------------------------------------------------------------*/

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /*------------------------------------------------------------------------*/

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map || ListCache),
      'string': new Hash
    };
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /*------------------------------------------------------------------------*/

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  /*------------------------------------------------------------------------*/

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /*------------------------------------------------------------------------*/

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /**
   * Aggregates elements of `collection` on `accumulator` with keys transformed
   * by `iteratee` and values set by `setter`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function baseAggregator(collection, setter, iteratee, accumulator) {
    baseEach(collection, function(value, key, collection) {
      setter(accumulator, value, iteratee(value), collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  /**
   * The base implementation of `_.at` without support for individual paths.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {string[]} paths The property paths to pick.
   * @returns {Array} Returns the picked elements.
   */
  function baseAt(object, paths) {
    var index = -1,
        length = paths.length,
        result = Array(length),
        skip = object == null;

    while (++index < length) {
      result[index] = skip ? undefined : get(object, paths[index]);
    }
    return result;
  }

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? copySymbolsIn(value, baseAssignIn(result, value))
            : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });

      return result;
    }

    if (isMap(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });

      return result;
    }

    var keysFunc = isFull
      ? (isFlat ? getAllKeysIn : getAllKeys)
      : (isFlat ? keysIn : keys);

    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  /**
   * The base implementation of `_.delay` and `_.defer` which accepts `args`
   * to provide to `func`.
   *
   * @private
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {Array} args The arguments to provide to `func`.
   * @returns {number|Object} Returns the timer id or timeout object.
   */
  function baseDelay(func, wait, args) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return setTimeout(function() { func.apply(undefined, args); }, wait);
  }

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  /**
   * The base implementation of `_.every` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`
   */
  function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function(value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? (current === current && !isSymbol(current))
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.filter` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function baseFilter(collection, predicate) {
    var result = [];
    baseEach(collection, function(value, index, collection) {
      if (predicate(value, index, collection)) {
        result.push(value);
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  /**
   * The base implementation of `_.functions` which creates an array of
   * `object` function property names filtered from `props`.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} props The property names to filter.
   * @returns {Array} Returns the function names.
   */
  function baseFunctions(object, props) {
    return arrayFilter(props, function(key) {
      return isFunction(object[key]);
    });
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * The base implementation of `_.gt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than `other`,
   *  else `false`.
   */
  function baseGt(value, other) {
    return value > other;
  }

  /**
   * The base implementation of `_.has` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHas(object, key) {
    return object != null && hasOwnProperty.call(object, key);
  }

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  /**
   * The base implementation of `_.invoke` without support for individual
   * method arguments.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the method to invoke.
   * @param {Array} args The arguments to invoke the method with.
   * @returns {*} Returns the result of the invoked method.
   */
  function baseInvoke(object, path, args) {
    path = castPath(path, object);
    object = parent(object, path);
    var func = object == null ? object : object[toKey(last(path))];
    return func == null ? undefined : apply(func, object, args);
  }

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  /**
   * The base implementation of `_.isDate` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   */
  function baseIsDate(value) {
    return isObjectLike(value) && baseGetTag(value) == dateTag;
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);

    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;

    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack);
      return (objIsArr || isTypedArray(object))
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
  }

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * The base implementation of `_.isRegExp` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   */
  function baseIsRegExp(value) {
    return isObjectLike(value) && baseGetTag(value) == regexpTag;
  }

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
  }

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == 'object') {
      return isArray(value)
        ? baseMatchesProperty(value[0], value[1])
        : baseMatches(value);
    }
    return property(value);
  }

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.lt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than `other`,
   *  else `false`.
   */
  function baseLt(value, other) {
    return value < other;
  }

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];

    baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn(object, path)
        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  /**
   * The base implementation of `_.orderBy` without param guards.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
   * @param {string[]} orders The sort orders of `iteratees`.
   * @returns {Array} Returns the new sorted array.
   */
  function baseOrderBy(collection, iteratees, orders) {
    var index = -1;
    iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

    var result = baseMap(collection, function(value, key, collection) {
      var criteria = arrayMap(iteratees, function(iteratee) {
        return iteratee(value);
      });
      return { 'criteria': criteria, 'index': ++index, 'value': value };
    });

    return baseSortBy(result, function(object, other) {
      return compareMultiple(object, other, orders);
    });
  }

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, paths) {
    return basePickBy(object, paths, function(value, path) {
      return hasIn(object, path);
    });
  }

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */
  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet(object, path);

      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }
    return result;
  }

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }

  /**
   * The base implementation of `_.pullAt` without support for individual
   * indexes or capturing the removed elements.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {number[]} indexes The indexes of elements to remove.
   * @returns {Array} Returns `array`.
   */
  function basePullAt(array, indexes) {
    var length = array ? indexes.length : 0,
        lastIndex = length - 1;

    while (length--) {
      var index = indexes[length];
      if (length == lastIndex || index !== previous) {
        var previous = index;
        if (isIndex(index)) {
          splice.call(array, index, 1);
        } else {
          baseUnset(array, index);
        }
      }
    }
    return array;
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */
  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }
    path = castPath(path, object);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;
        if (newValue === undefined) {
          newValue = isObject(objValue)
            ? objValue
            : (isIndex(path[index + 1]) ? [] : {});
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }

  /**
   * The base implementation of `setData` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to associate metadata with.
   * @param {*} data The metadata.
   * @returns {Function} Returns `func`.
   */
  var baseSetData = !metaMap ? identity : function(func, data) {
    metaMap.set(func, data);
    return func;
  };

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  /**
   * The base implementation of `_.some` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function baseSome(collection, predicate) {
    var result;

    baseEach(collection, function(value, index, collection) {
      result = predicate(value, index, collection);
      return !result;
    });
    return !!result;
  }

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    }
    else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache;
    }
    else {
      seen = iteratee ? [] : result;
    }
    outer:
    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      value = (comparator || value !== 0) ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      }
      else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  /**
   * The base implementation of `wrapperValue` which returns the result of
   * performing a sequence of actions on the unwrapped `value`, where each
   * successive action is supplied the return value of the previous.
   *
   * @private
   * @param {*} value The unwrapped value.
   * @param {Array} actions Actions to perform to resolve the unwrapped value.
   * @returns {*} Returns the resolved value.
   */
  function baseWrapperValue(value, actions) {
    var result = value;
    if (result instanceof LazyWrapper) {
      result = result.value();
    }
    return arrayReduce(actions, function(result, action) {
      return action.func.apply(action.thisArg, arrayPush([result], action.args));
    }, result);
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsDefined = value !== undefined,
          valIsNull = value === null,
          valIsReflexive = value === value,
          valIsSymbol = isSymbol(value);

      var othIsDefined = other !== undefined,
          othIsNull = other === null,
          othIsReflexive = other === other,
          othIsSymbol = isSymbol(other);

      if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
          (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
          (valIsNull && othIsDefined && othIsReflexive) ||
          (!valIsDefined && othIsReflexive) ||
          !valIsReflexive) {
        return 1;
      }
      if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
          (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
          (othIsNull && valIsDefined && valIsReflexive) ||
          (!othIsDefined && valIsReflexive) ||
          !othIsReflexive) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Creates an array that is the composition of partially applied arguments,
   * placeholders, and provided arguments into a single array of arguments.
   *
   * @private
   * @param {Array} args The provided arguments.
   * @param {Array} partials The arguments to prepend to those provided.
   * @param {Array} holders The `partials` placeholder indexes.
   * @params {boolean} [isCurried] Specify composing for a curried function.
   * @returns {Array} Returns the new array of composed arguments.
   */
  function composeArgs(args, partials, holders, isCurried) {
    var argsIndex = -1,
        argsLength = args.length,
        holdersLength = holders.length,
        leftIndex = -1,
        leftLength = partials.length,
        rangeLength = nativeMax(argsLength - holdersLength, 0),
        result = Array(leftLength + rangeLength),
        isUncurried = !isCurried;

    while (++leftIndex < leftLength) {
      result[leftIndex] = partials[leftIndex];
    }
    while (++argsIndex < holdersLength) {
      if (isUncurried || argsIndex < argsLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
    }
    while (rangeLength--) {
      result[leftIndex++] = args[argsIndex++];
    }
    return result;
  }

  /**
   * This function is like `composeArgs` except that the arguments composition
   * is tailored for `_.partialRight`.
   *
   * @private
   * @param {Array} args The provided arguments.
   * @param {Array} partials The arguments to append to those provided.
   * @param {Array} holders The `partials` placeholder indexes.
   * @params {boolean} [isCurried] Specify composing for a curried function.
   * @returns {Array} Returns the new array of composed arguments.
   */
  function composeArgsRight(args, partials, holders, isCurried) {
    var argsIndex = -1,
        argsLength = args.length,
        holdersIndex = -1,
        holdersLength = holders.length,
        rightIndex = -1,
        rightLength = partials.length,
        rangeLength = nativeMax(argsLength - holdersLength, 0),
        result = Array(rangeLength + rightLength),
        isUncurried = !isCurried;

    while (++argsIndex < rangeLength) {
      result[argsIndex] = args[argsIndex];
    }
    var offset = argsIndex;
    while (++rightIndex < rightLength) {
      result[offset + rightIndex] = partials[rightIndex];
    }
    while (++holdersIndex < holdersLength) {
      if (isUncurried || argsIndex < argsLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
    }
    return result;
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  /**
   * Creates a function like `_.groupBy`.
   *
   * @private
   * @param {Function} setter The function to set accumulator values.
   * @param {Function} [initializer] The accumulator object initializer.
   * @returns {Function} Returns the new aggregator function.
   */
  function createAggregator(setter, initializer) {
    return function(collection, iteratee) {
      var func = isArray(collection) ? arrayAggregator : baseAggregator,
          accumulator = initializer ? initializer() : {};

      return func(collection, setter, getIteratee(iteratee, 2), accumulator);
    };
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * Creates a function that wraps `func` to invoke it with the optional `this`
   * binding of `thisArg`.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createBind(func, bitmask, thisArg) {
    var isBind = bitmask & WRAP_BIND_FLAG,
        Ctor = createCtor(func);

    function wrapper() {
      var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
      return fn.apply(isBind ? thisArg : this, arguments);
    }
    return wrapper;
  }

  /**
   * Creates a function that produces an instance of `Ctor` regardless of
   * whether it was invoked as part of a `new` expression or by `call` or `apply`.
   *
   * @private
   * @param {Function} Ctor The constructor to wrap.
   * @returns {Function} Returns the new wrapped function.
   */
  function createCtor(Ctor) {
    return function() {
      // Use a `switch` statement to work with class constructors. See
      // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
      // for more details.
      var args = arguments;
      switch (args.length) {
        case 0: return new Ctor;
        case 1: return new Ctor(args[0]);
        case 2: return new Ctor(args[0], args[1]);
        case 3: return new Ctor(args[0], args[1], args[2]);
        case 4: return new Ctor(args[0], args[1], args[2], args[3]);
        case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
        case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
      }
      var thisBinding = baseCreate(Ctor.prototype),
          result = Ctor.apply(thisBinding, args);

      // Mimic the constructor's `return` behavior.
      // See https://es5.github.io/#x13.2.2 for more details.
      return isObject(result) ? result : thisBinding;
    };
  }

  /**
   * Creates a function that wraps `func` to enable currying.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {number} arity The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createCurry(func, bitmask, arity) {
    var Ctor = createCtor(func);

    function wrapper() {
      var length = arguments.length,
          args = Array(length),
          index = length,
          placeholder = getHolder(wrapper);

      while (index--) {
        args[index] = arguments[index];
      }
      var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
        ? []
        : replaceHolders(args, placeholder);

      length -= holders.length;
      if (length < arity) {
        return createRecurry(
          func, bitmask, createHybrid, wrapper.placeholder, undefined,
          args, holders, undefined, undefined, arity - length);
      }
      var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
      return apply(fn, this, args);
    }
    return wrapper;
  }

  /**
   * Creates a `_.find` or `_.findLast` function.
   *
   * @private
   * @param {Function} findIndexFunc The function to find the collection index.
   * @returns {Function} Returns the new find function.
   */
  function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike(collection)) {
        var iteratee = getIteratee(predicate, 3);
        collection = keys(collection);
        predicate = function(key) { return iteratee(iterable[key], key, iterable); };
      }
      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
  }

  /**
   * Creates a function that wraps `func` to invoke it with optional `this`
   * binding of `thisArg`, partial application, and currying.
   *
   * @private
   * @param {Function|string} func The function or method name to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to prepend to those provided to
   *  the new function.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [partialsRight] The arguments to append to those provided
   *  to the new function.
   * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    var isAry = bitmask & WRAP_ARY_FLAG,
        isBind = bitmask & WRAP_BIND_FLAG,
        isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
        isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
        isFlip = bitmask & WRAP_FLIP_FLAG,
        Ctor = isBindKey ? undefined : createCtor(func);

    function wrapper() {
      var length = arguments.length,
          args = Array(length),
          index = length;

      while (index--) {
        args[index] = arguments[index];
      }
      if (isCurried) {
        var placeholder = getHolder(wrapper),
            holdersCount = countHolders(args, placeholder);
      }
      if (partials) {
        args = composeArgs(args, partials, holders, isCurried);
      }
      if (partialsRight) {
        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
      }
      length -= holdersCount;
      if (isCurried && length < arity) {
        var newHolders = replaceHolders(args, placeholder);
        return createRecurry(
          func, bitmask, createHybrid, wrapper.placeholder, thisArg,
          args, newHolders, argPos, ary, arity - length
        );
      }
      var thisBinding = isBind ? thisArg : this,
          fn = isBindKey ? thisBinding[func] : func;

      length = args.length;
      if (argPos) {
        args = reorder(args, argPos);
      } else if (isFlip && length > 1) {
        args.reverse();
      }
      if (isAry && ary < length) {
        args.length = ary;
      }
      if (this && this !== root && this instanceof wrapper) {
        fn = Ctor || createCtor(fn);
      }
      return fn.apply(thisBinding, args);
    }
    return wrapper;
  }

  /**
   * Creates a function that wraps `func` to invoke it with the `this` binding
   * of `thisArg` and `partials` prepended to the arguments it receives.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} partials The arguments to prepend to those provided to
   *  the new function.
   * @returns {Function} Returns the new wrapped function.
   */
  function createPartial(func, bitmask, thisArg, partials) {
    var isBind = bitmask & WRAP_BIND_FLAG,
        Ctor = createCtor(func);

    function wrapper() {
      var argsIndex = -1,
          argsLength = arguments.length,
          leftIndex = -1,
          leftLength = partials.length,
          args = Array(leftLength + argsLength),
          fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

      while (++leftIndex < leftLength) {
        args[leftIndex] = partials[leftIndex];
      }
      while (argsLength--) {
        args[leftIndex++] = arguments[++argsIndex];
      }
      return apply(fn, isBind ? thisArg : this, args);
    }
    return wrapper;
  }

  /**
   * Creates a function that wraps `func` to continue currying.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {Function} wrapFunc The function to create the `func` wrapper.
   * @param {*} placeholder The placeholder value.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to prepend to those provided to
   *  the new function.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    var isCurry = bitmask & WRAP_CURRY_FLAG,
        newHolders = isCurry ? holders : undefined,
        newHoldersRight = isCurry ? undefined : holders,
        newPartials = isCurry ? partials : undefined,
        newPartialsRight = isCurry ? undefined : partials;

    bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
      bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
    }
    var newData = [
      func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
      newHoldersRight, argPos, ary, arity
    ];

    var result = wrapFunc.apply(undefined, newData);
    if (isLaziable(func)) {
      setData(result, newData);
    }
    result.placeholder = placeholder;
    return setWrapToString(result, func, bitmask);
  }

  /**
   * Creates a set object of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */
  var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
    return new Set(values);
  };

  /**
   * Creates a function that either curries or invokes `func` with optional
   * `this` binding and partially applied arguments.
   *
   * @private
   * @param {Function|string} func The function or method name to wrap.
   * @param {number} bitmask The bitmask flags.
   *    1 - `_.bind`
   *    2 - `_.bindKey`
   *    4 - `_.curry` or `_.curryRight` of a bound function
   *    8 - `_.curry`
   *   16 - `_.curryRight`
   *   32 - `_.partial`
   *   64 - `_.partialRight`
   *  128 - `_.rearg`
   *  256 - `_.ary`
   *  512 - `_.flip`
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {Array} [partials] The arguments to be partially applied.
   * @param {Array} [holders] The `partials` placeholder indexes.
   * @param {Array} [argPos] The argument positions of the new function.
   * @param {number} [ary] The arity cap of `func`.
   * @param {number} [arity] The arity of `func`.
   * @returns {Function} Returns the new wrapped function.
   */
  function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
    if (!isBindKey && typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var length = partials ? partials.length : 0;
    if (!length) {
      bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
      partials = holders = undefined;
    }
    ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
    arity = arity === undefined ? arity : toInteger(arity);
    length -= holders ? holders.length : 0;

    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
      var partialsRight = partials,
          holdersRight = holders;

      partials = holders = undefined;
    }
    var data = isBindKey ? undefined : getData(func);

    var newData = [
      func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
      argPos, ary, arity
    ];

    if (data) {
      mergeData(newData, data);
    }
    func = newData[0];
    bitmask = newData[1];
    thisArg = newData[2];
    partials = newData[3];
    holders = newData[4];
    arity = newData[9] = newData[9] === undefined
      ? (isBindKey ? 0 : func.length)
      : nativeMax(newData[9] - length, 0);

    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
      bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
    }
    if (!bitmask || bitmask == WRAP_BIND_FLAG) {
      var result = createBind(func, bitmask, thisArg);
    } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
      result = createCurry(func, bitmask, arity);
    } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
      result = createPartial(func, bitmask, thisArg, partials);
    } else {
      result = createHybrid.apply(undefined, newData);
    }
    var setter = data ? baseSetData : setData;
    return setWrapToString(setter(result, newData), func, bitmask);
  }

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function(othValue, othIndex) {
              if (!cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  /**
   * Gets metadata for `func`.
   *
   * @private
   * @param {Function} func The function to query.
   * @returns {*} Returns the metadata for `func`.
   */
  var getData = !metaMap ? noop : function(func) {
    return metaMap.get(func);
  };

  /**
   * Gets the name of `func`.
   *
   * @private
   * @param {Function} func The function to query.
   * @returns {string} Returns the function name.
   */
  function getFuncName(func) {
    var result = (func.name + ''),
        array = realNames[result],
        length = hasOwnProperty.call(realNames, result) ? array.length : 0;

    while (length--) {
      var data = array[length],
          otherFunc = data.func;
      if (otherFunc == null || otherFunc == func) {
        return data.name;
      }
    }
    return result;
  }

  /**
   * Gets the argument placeholder value for `func`.
   *
   * @private
   * @param {Function} func The function to inspect.
   * @returns {*} Returns the placeholder value.
   */
  function getHolder(func) {
    var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
    return object.placeholder;
  }

  /**
   * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
   * this function returns the custom method, otherwise it returns `baseIteratee`.
   * If arguments are provided, the chosen function is invoked with them and
   * its result is returned.
   *
   * @private
   * @param {*} [value] The value to convert to an iteratee.
   * @param {number} [arity] The arity of the created iteratee.
   * @returns {Function} Returns the chosen function or its result.
   */
  function getIteratee() {
    var result = lodash.iteratee || iteratee;
    result = result === iteratee ? baseIteratee : result;
    return arguments.length ? result(arguments[0], arguments[1]) : result;
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }
    return result;
  };

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
      (Map && getTag(new Map) != mapTag) ||
      (Promise && getTag(Promise.resolve()) != promiseTag) ||
      (Set && getTag(new Set) != setTag) ||
      (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    getTag = function(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag;
          case mapCtorString: return mapTag;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag;
          case weakMapCtorString: return weakMapTag;
        }
      }
      return result;
    };
  }

  /**
   * Gets the view, applying any `transforms` to the `start` and `end` positions.
   *
   * @private
   * @param {number} start The start of the view.
   * @param {number} end The end of the view.
   * @param {Array} transforms The transformations to apply to the view.
   * @returns {Object} Returns an object containing the `start` and `end`
   *  positions of the view.
   */
  function getView(start, end, transforms) {
    var index = -1,
        length = transforms.length;

    while (++index < length) {
      var data = transforms[index],
          size = data.size;

      switch (data.type) {
        case 'drop':      start += size; break;
        case 'dropRight': end -= size; break;
        case 'take':      end = nativeMin(end, start + size); break;
        case 'takeRight': start = nativeMax(start, end - size); break;
      }
    }
    return { 'start': start, 'end': end };
  }

  /**
   * Extracts wrapper details from the `source` body comment.
   *
   * @private
   * @param {string} source The source to inspect.
   * @returns {Array} Returns the wrapper details.
   */
  function getWrapDetails(source) {
    var match = source.match(reWrapDetails);
    return match ? match[1].split(reSplitDetails) : [];
  }

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) &&
      (isArray(object) || isArguments(object));
  }

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype(object))
      : {};
  }

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag: case float64Tag:
      case int8Tag: case int16Tag: case int32Tag:
      case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return new Ctor;

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return new Ctor;

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  /**
   * Inserts wrapper `details` in a comment at the top of the `source` body.
   *
   * @private
   * @param {string} source The source to modify.
   * @returns {Array} details The details to insert.
   * @returns {string} Returns the modified source.
   */
  function insertWrapDetails(source, details) {
    var length = details.length;
    if (!length) {
      return source;
    }
    var lastIndex = length - 1;
    details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
    details = details.join(length > 2 ? ', ' : ' ');
    return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
  }

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) ||
      !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Checks if `func` has a lazy counterpart.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
   *  else `false`.
   */
  function isLaziable(func) {
    var funcName = getFuncName(func),
        other = lodash[funcName];

    if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
      return false;
    }
    if (func === other) {
      return true;
    }
    var data = getData(other);
    return !!data && func === data[0];
  }

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    return value === proto;
  }

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  /**
   * Merges the function metadata of `source` into `data`.
   *
   * Merging metadata reduces the number of wrappers used to invoke a function.
   * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
   * may be applied regardless of execution order. Methods like `_.ary` and
   * `_.rearg` modify function arguments, making the order in which they are
   * executed important, preventing the merging of metadata. However, we make
   * an exception for a safe combined case where curried functions have `_.ary`
   * and or `_.rearg` applied.
   *
   * @private
   * @param {Array} data The destination metadata.
   * @param {Array} source The source metadata.
   * @returns {Array} Returns `data`.
   */
  function mergeData(data, source) {
    var bitmask = data[1],
        srcBitmask = source[1],
        newBitmask = bitmask | srcBitmask,
        isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

    var isCombo =
      ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
      ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
      ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

    // Exit early if metadata can't be merged.
    if (!(isCommon || isCombo)) {
      return data;
    }
    // Use source `thisArg` if available.
    if (srcBitmask & WRAP_BIND_FLAG) {
      data[2] = source[2];
      // Set when currying a bound function.
      newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
    }
    // Compose partial arguments.
    var value = source[3];
    if (value) {
      var partials = data[3];
      data[3] = partials ? composeArgs(partials, value, source[4]) : value;
      data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    }
    // Compose partial right arguments.
    value = source[5];
    if (value) {
      partials = data[5];
      data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
      data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    }
    // Use source `argPos` if available.
    value = source[7];
    if (value) {
      data[7] = value;
    }
    // Use source `ary` if it's smaller.
    if (srcBitmask & WRAP_ARY_FLAG) {
      data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    }
    // Use source `arity` if one is not provided.
    if (data[9] == null) {
      data[9] = source[9];
    }
    // Use source `func` and merge bitmasks.
    data[0] = source[0];
    data[1] = newBitmask;

    return data;
  }

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  /**
   * Reorder `array` according to the specified indexes where the element at
   * the first index is assigned as the first element, the element at
   * the second index is assigned as the second element, and so on.
   *
   * @private
   * @param {Array} array The array to reorder.
   * @param {Array} indexes The arranged array indexes.
   * @returns {Array} Returns `array`.
   */
  function reorder(array, indexes) {
    var arrLength = array.length,
        length = nativeMin(indexes.length, arrLength),
        oldArray = copyArray(array);

    while (length--) {
      var index = indexes[length];
      array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
    }
    return array;
  }

  /**
   * Sets metadata for `func`.
   *
   * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
   * period of time, it will trip its breaker and transition to an identity
   * function to avoid garbage collection pauses in V8. See
   * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
   * for more details.
   *
   * @private
   * @param {Function} func The function to associate metadata with.
   * @param {*} data The metadata.
   * @returns {Function} Returns `func`.
   */
  var setData = shortOut(baseSetData);

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = shortOut(baseSetToString);

  /**
   * Sets the `toString` method of `wrapper` to mimic the source of `reference`
   * with wrapper details in a comment at the top of the source body.
   *
   * @private
   * @param {Function} wrapper The function to modify.
   * @param {Function} reference The reference function.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @returns {Function} Returns `wrapper`.
   */
  function setWrapToString(wrapper, reference, bitmask) {
    var source = (reference + '');
    return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
  }

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Updates wrapper `details` based on `bitmask` flags.
   *
   * @private
   * @returns {Array} details The details to modify.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @returns {Array} Returns `details`.
   */
  function updateWrapDetails(details, bitmask) {
    arrayEach(wrapFlags, function(pair) {
      var value = '_.' + pair[0];
      if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
        details.push(value);
      }
    });
    return details.sort();
  }

  /**
   * Creates a clone of `wrapper`.
   *
   * @private
   * @param {Object} wrapper The wrapper to clone.
   * @returns {Object} Returns the cloned wrapper.
   */
  function wrapperClone(wrapper) {
    if (wrapper instanceof LazyWrapper) {
      return wrapper.clone();
    }
    var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    result.__actions__ = copyArray(wrapper.__actions__);
    result.__index__  = wrapper.__index__;
    result.__values__ = wrapper.__values__;
    return result;
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * Creates a new array concatenating `array` with any additional arrays
   * and/or values.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to concatenate.
   * @param {...*} [values] The values to concatenate.
   * @returns {Array} Returns the new concatenated array.
   * @example
   *
   * var array = [1];
   * var other = _.concat(array, 2, [3], [[4]]);
   *
   * console.log(other);
   * // => [1, 2, 3, [4]]
   *
   * console.log(array);
   * // => [1]
   */
  function concat() {
    var length = arguments.length;
    if (!length) {
      return [];
    }
    var args = Array(length - 1),
        array = arguments[0],
        index = length;

    while (index--) {
      args[index - 1] = arguments[index];
    }
    return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
  }

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */
  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length + index, 0);
    }
    return baseFindIndex(array, getIteratee(predicate, 3), index);
  }

  /**
   * This method is like `_.findIndex` except that it iterates over elements
   * of `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=array.length-1] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
   * // => 2
   *
   * // The `_.matches` iteratee shorthand.
   * _.findLastIndex(users, { 'user': 'barney', 'active': true });
   * // => 0
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findLastIndex(users, ['active', false]);
   * // => 2
   *
   * // The `_.property` iteratee shorthand.
   * _.findLastIndex(users, 'active');
   * // => 0
   */
  function findLastIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = length - 1;
    if (fromIndex !== undefined) {
      index = toInteger(fromIndex);
      index = fromIndex < 0
        ? nativeMax(length + index, 0)
        : nativeMin(index, length - 1);
    }
    return baseFindIndex(array, getIteratee(predicate, 3), index, true);
  }

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  /**
   * Recursively flattens `array`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flattenDeep([1, [2, [3, [4]], 5]]);
   * // => [1, 2, 3, 4, 5]
   */
  function flattenDeep(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, INFINITY) : [];
  }

  /**
   * Gets the first element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias first
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the first element of `array`.
   * @example
   *
   * _.head([1, 2, 3]);
   * // => 1
   *
   * _.head([]);
   * // => undefined
   */
  function head(array) {
    return (array && array.length) ? array[0] : undefined;
  }

  /**
   * Gets the index at which the first occurrence of `value` is found in `array`
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. If `fromIndex` is negative, it's used as the
   * offset from the end of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.indexOf([1, 2, 1, 2], 2);
   * // => 1
   *
   * // Search from the `fromIndex`.
   * _.indexOf([1, 2, 1, 2], 2, 2);
   * // => 3
   */
  function indexOf(array, value, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length + index, 0);
    }
    return baseIndexOf(array, value, index);
  }

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  /**
   * Removes all elements from `array` that `predicate` returns truthy for
   * and returns an array of the removed elements. The predicate is invoked
   * with three arguments: (value, index, array).
   *
   * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
   * to pull elements from an array by value.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = [1, 2, 3, 4];
   * var evens = _.remove(array, function(n) {
   *   return n % 2 == 0;
   * });
   *
   * console.log(array);
   * // => [1, 3]
   *
   * console.log(evens);
   * // => [2, 4]
   */
  function remove(array, predicate) {
    var result = [];
    if (!(array && array.length)) {
      return result;
    }
    var index = -1,
        indexes = [],
        length = array.length;

    predicate = getIteratee(predicate, 3);
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result.push(value);
        indexes.push(index);
      }
    }
    basePullAt(array, indexes);
    return result;
  }

  /**
   * Reverses `array` so that the first element becomes the last, the second
   * element becomes the second to last, and so on.
   *
   * **Note:** This method mutates `array` and is based on
   * [`Array#reverse`](https://mdn.io/Array/reverse).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to modify.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _.reverse(array);
   * // => [3, 2, 1]
   *
   * console.log(array);
   * // => [3, 2, 1]
   */
  function reverse(array) {
    return array == null ? array : nativeReverse.call(array);
  }

  /**
   * Creates a slice of `array` from `start` up to, but not including, `end`.
   *
   * **Note:** This method is used instead of
   * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
   * returned.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function slice(array, start, end) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return [];
    }
    if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
      start = 0;
      end = length;
    }
    else {
      start = start == null ? 0 : toInteger(start);
      end = end === undefined ? length : toInteger(end);
    }
    return baseSlice(array, start, end);
  }

  /**
   * Creates a slice of `array` with `n` elements taken from the beginning.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to take.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.take([1, 2, 3]);
   * // => [1]
   *
   * _.take([1, 2, 3], 2);
   * // => [1, 2]
   *
   * _.take([1, 2, 3], 5);
   * // => [1, 2, 3]
   *
   * _.take([1, 2, 3], 0);
   * // => []
   */
  function take(array, n, guard) {
    if (!(array && array.length)) {
      return [];
    }
    n = (guard || n === undefined) ? 1 : toInteger(n);
    return baseSlice(array, 0, n < 0 ? 0 : n);
  }

  /**
   * Creates a duplicate-free version of an array, using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons, in which only the first occurrence of each element
   * is kept. The order of result values is determined by the order they occur
   * in the array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniq([2, 1, 2]);
   * // => [2, 1]
   */
  function uniq(array) {
    return (array && array.length) ? baseUniq(array) : [];
  }

  /**
   * This method is like `_.uniq` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the criterion by which
   * uniqueness is computed. The order of result values is determined by the
   * order they occur in the array. The iteratee is invoked with one argument:
   * (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
   * // => [2.1, 1.2]
   *
   * // The `_.property` iteratee shorthand.
   * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  function uniqBy(array, iteratee) {
    return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a `lodash` wrapper instance that wraps `value` with explicit method
   * chain sequences enabled. The result of such sequences must be unwrapped
   * with `_#value`.
   *
   * @static
   * @memberOf _
   * @since 1.3.0
   * @category Seq
   * @param {*} value The value to wrap.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36 },
   *   { 'user': 'fred',    'age': 40 },
   *   { 'user': 'pebbles', 'age': 1 }
   * ];
   *
   * var youngest = _
   *   .chain(users)
   *   .sortBy('age')
   *   .map(function(o) {
   *     return o.user + ' is ' + o.age;
   *   })
   *   .head()
   *   .value();
   * // => 'pebbles is 1'
   */
  function chain(value) {
    var result = lodash(value);
    result.__chain__ = true;
    return result;
  }

  /**
   * This method invokes `interceptor` and returns `value`. The interceptor
   * is invoked with one argument; (value). The purpose of this method is to
   * "tap into" a method chain sequence in order to modify intermediate results.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns `value`.
   * @example
   *
   * _([1, 2, 3])
   *  .tap(function(array) {
   *    // Mutate input array.
   *    array.pop();
   *  })
   *  .reverse()
   *  .value();
   * // => [2, 1]
   */
  function tap(value, interceptor) {
    interceptor(value);
    return value;
  }

  /**
   * This method is like `_.tap` except that it returns the result of `interceptor`.
   * The purpose of this method is to "pass thru" values replacing intermediate
   * results in a method chain sequence.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns the result of `interceptor`.
   * @example
   *
   * _('  abc  ')
   *  .chain()
   *  .trim()
   *  .thru(function(value) {
   *    return [value];
   *  })
   *  .value();
   * // => ['abc']
   */
  function thru(value, interceptor) {
    return interceptor(value);
  }

  /**
   * This method is the wrapper version of `_.at`.
   *
   * @name at
   * @memberOf _
   * @since 1.0.0
   * @category Seq
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
   *
   * _(object).at(['a[0].b.c', 'a[1]']).value();
   * // => [3, 4]
   */
  var wrapperAt = flatRest(function(paths) {
    var length = paths.length,
        start = length ? paths[0] : 0,
        value = this.__wrapped__,
        interceptor = function(object) { return baseAt(object, paths); };

    if (length > 1 || this.__actions__.length ||
        !(value instanceof LazyWrapper) || !isIndex(start)) {
      return this.thru(interceptor);
    }
    value = value.slice(start, +start + (length ? 1 : 0));
    value.__actions__.push({
      'func': thru,
      'args': [interceptor],
      'thisArg': undefined
    });
    return new LodashWrapper(value, this.__chain__).thru(function(array) {
      if (length && !array.length) {
        array.push(undefined);
      }
      return array;
    });
  });

  /**
   * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
   *
   * @name chain
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * // A sequence without explicit chaining.
   * _(users).head();
   * // => { 'user': 'barney', 'age': 36 }
   *
   * // A sequence with explicit chaining.
   * _(users)
   *   .chain()
   *   .head()
   *   .pick('user')
   *   .value();
   * // => { 'user': 'barney' }
   */
  function wrapperChain() {
    return chain(this);
  }

  /**
   * Executes the chain sequence and returns the wrapped result.
   *
   * @name commit
   * @memberOf _
   * @since 3.2.0
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var array = [1, 2];
   * var wrapped = _(array).push(3);
   *
   * console.log(array);
   * // => [1, 2]
   *
   * wrapped = wrapped.commit();
   * console.log(array);
   * // => [1, 2, 3]
   *
   * wrapped.last();
   * // => 3
   *
   * console.log(array);
   * // => [1, 2, 3]
   */
  function wrapperCommit() {
    return new LodashWrapper(this.value(), this.__chain__);
  }

  /**
   * Gets the next value on a wrapped object following the
   * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
   *
   * @name next
   * @memberOf _
   * @since 4.0.0
   * @category Seq
   * @returns {Object} Returns the next iterator value.
   * @example
   *
   * var wrapped = _([1, 2]);
   *
   * wrapped.next();
   * // => { 'done': false, 'value': 1 }
   *
   * wrapped.next();
   * // => { 'done': false, 'value': 2 }
   *
   * wrapped.next();
   * // => { 'done': true, 'value': undefined }
   */
  function wrapperNext() {
    if (this.__values__ === undefined) {
      this.__values__ = toArray(this.value());
    }
    var done = this.__index__ >= this.__values__.length,
        value = done ? undefined : this.__values__[this.__index__++];

    return { 'done': done, 'value': value };
  }

  /**
   * Enables the wrapper to be iterable.
   *
   * @name Symbol.iterator
   * @memberOf _
   * @since 4.0.0
   * @category Seq
   * @returns {Object} Returns the wrapper object.
   * @example
   *
   * var wrapped = _([1, 2]);
   *
   * wrapped[Symbol.iterator]() === wrapped;
   * // => true
   *
   * Array.from(wrapped);
   * // => [1, 2]
   */
  function wrapperToIterator() {
    return this;
  }

  /**
   * Creates a clone of the chain sequence planting `value` as the wrapped value.
   *
   * @name plant
   * @memberOf _
   * @since 3.2.0
   * @category Seq
   * @param {*} value The value to plant.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var wrapped = _([1, 2]).map(square);
   * var other = wrapped.plant([3, 4]);
   *
   * other.value();
   * // => [9, 16]
   *
   * wrapped.value();
   * // => [1, 4]
   */
  function wrapperPlant(value) {
    var result,
        parent = this;

    while (parent instanceof baseLodash) {
      var clone = wrapperClone(parent);
      clone.__index__ = 0;
      clone.__values__ = undefined;
      if (result) {
        previous.__wrapped__ = clone;
      } else {
        result = clone;
      }
      var previous = clone;
      parent = parent.__wrapped__;
    }
    previous.__wrapped__ = value;
    return result;
  }

  /**
   * This method is the wrapper version of `_.reverse`.
   *
   * **Note:** This method mutates the wrapped array.
   *
   * @name reverse
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _(array).reverse().value()
   * // => [3, 2, 1]
   *
   * console.log(array);
   * // => [3, 2, 1]
   */
  function wrapperReverse() {
    var value = this.__wrapped__;
    if (value instanceof LazyWrapper) {
      var wrapped = value;
      if (this.__actions__.length) {
        wrapped = new LazyWrapper(this);
      }
      wrapped = wrapped.reverse();
      wrapped.__actions__.push({
        'func': thru,
        'args': [reverse],
        'thisArg': undefined
      });
      return new LodashWrapper(wrapped, this.__chain__);
    }
    return this.thru(reverse);
  }

  /**
   * Executes the chain sequence to resolve the unwrapped value.
   *
   * @name value
   * @memberOf _
   * @since 0.1.0
   * @alias toJSON, valueOf
   * @category Seq
   * @returns {*} Returns the resolved unwrapped value.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperValue() {
    return baseWrapperValue(this.__wrapped__, this.__actions__);
  }

  /*------------------------------------------------------------------------*/

  /**
   * Checks if `predicate` returns truthy for **all** elements of `collection`.
   * Iteration is stopped once `predicate` returns falsey. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * **Note:** This method returns `true` for
   * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
   * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
   * elements of empty collections.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': false },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.every(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.every(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.every(users, 'active');
   * // => false
   */
  function every(collection, predicate, guard) {
    var func = isArray(collection) ? arrayEvery : baseEvery;
    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = undefined;
    }
    return func(collection, getIteratee(predicate, 3));
  }

  /**
   * Iterates over elements of `collection`, returning an array of all elements
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * **Note:** Unlike `_.remove`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   * @see _.reject
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, function(o) { return !o.active; });
   * // => objects for ['fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, { 'age': 36, 'active': true });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, ['active', false]);
   * // => objects for ['fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.filter(users, 'active');
   * // => objects for ['barney']
   */
  function filter(collection, predicate) {
    var func = isArray(collection) ? arrayFilter : baseFilter;
    return func(collection, getIteratee(predicate, 3));
  }

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.find(users, function(o) { return o.age < 40; });
   * // => object for 'barney'
   *
   * // The `_.matches` iteratee shorthand.
   * _.find(users, { 'age': 1, 'active': true });
   * // => object for 'pebbles'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.find(users, ['active', false]);
   * // => object for 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.find(users, 'active');
   * // => object for 'barney'
   */
  var find = createFind(findIndex);

  /**
   * This method is like `_.find` except that it iterates over elements of
   * `collection` from right to left.
   *
   * @static
   * @memberOf _
   * @since 2.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=collection.length-1] The index to search from.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * _.findLast([1, 2, 3, 4], function(n) {
   *   return n % 2 == 1;
   * });
   * // => 3
   */
  var findLast = createFind(findLastIndex);

  /**
   * Iterates over elements of `collection` and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length"
   * property are iterated like arrays. To avoid this behavior use `_.forIn`
   * or `_.forOwn` for object iteration.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEachRight
   * @example
   *
   * _.forEach([1, 2], function(value) {
   *   console.log(value);
   * });
   * // => Logs `1` then `2`.
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forEach(collection, iteratee) {
    var func = isArray(collection) ? arrayEach : baseEach;
    return func(collection, getIteratee(iteratee, 3));
  }

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` thru `iteratee`. The order of grouped values
   * is determined by the order they occur in `collection`. The corresponding
   * value of each key is an array of elements responsible for generating the
   * key. The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * _.groupBy([6.1, 4.2, 6.3], Math.floor);
   * // => { '4': [4.2], '6': [6.1, 6.3] }
   *
   * // The `_.property` iteratee shorthand.
   * _.groupBy(['one', 'two', 'three'], 'length');
   * // => { '3': ['one', 'two'], '5': ['three'] }
   */
  var groupBy = createAggregator(function(result, value, key) {
    if (hasOwnProperty.call(result, key)) {
      result[key].push(value);
    } else {
      baseAssignValue(result, key, [value]);
    }
  });

  /**
   * Checks if `value` is in `collection`. If `collection` is a string, it's
   * checked for a substring of `value`, otherwise
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * is used for equality comparisons. If `fromIndex` is negative, it's used as
   * the offset from the end of `collection`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object|string} collection The collection to inspect.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
   * @returns {boolean} Returns `true` if `value` is found, else `false`.
   * @example
   *
   * _.includes([1, 2, 3], 1);
   * // => true
   *
   * _.includes([1, 2, 3], 1, 2);
   * // => false
   *
   * _.includes({ 'a': 1, 'b': 2 }, 1);
   * // => true
   *
   * _.includes('abcd', 'bc');
   * // => true
   */
  function includes(collection, value, fromIndex, guard) {
    collection = isArrayLike(collection) ? collection : values(collection);
    fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

    var length = collection.length;
    if (fromIndex < 0) {
      fromIndex = nativeMax(length + fromIndex, 0);
    }
    return isString(collection)
      ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
      : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
  }

  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee) {
    var func = isArray(collection) ? arrayMap : baseMap;
    return func(collection, getIteratee(iteratee, 3));
  }

  /**
   * Creates an array of elements split into two groups, the first of which
   * contains elements `predicate` returns truthy for, the second of which
   * contains elements `predicate` returns falsey for. The predicate is
   * invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the array of grouped elements.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': false },
   *   { 'user': 'fred',    'age': 40, 'active': true },
   *   { 'user': 'pebbles', 'age': 1,  'active': false }
   * ];
   *
   * _.partition(users, function(o) { return o.active; });
   * // => objects for [['fred'], ['barney', 'pebbles']]
   *
   * // The `_.matches` iteratee shorthand.
   * _.partition(users, { 'age': 1, 'active': false });
   * // => objects for [['pebbles'], ['barney', 'fred']]
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.partition(users, ['active', false]);
   * // => objects for [['barney', 'pebbles'], ['fred']]
   *
   * // The `_.property` iteratee shorthand.
   * _.partition(users, 'active');
   * // => objects for [['fred'], ['barney', 'pebbles']]
   */
  var partition = createAggregator(function(result, value, key) {
    result[key ? 0 : 1].push(value);
  }, function() { return [[], []]; });

  /**
   * Reduces `collection` to a value which is the accumulated result of running
   * each element in `collection` thru `iteratee`, where each successive
   * invocation is supplied the return value of the previous. If `accumulator`
   * is not given, the first element of `collection` is used as the initial
   * value. The iteratee is invoked with four arguments:
   * (accumulator, value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.reduce`, `_.reduceRight`, and `_.transform`.
   *
   * The guarded methods are:
   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
   * and `sortBy`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @returns {*} Returns the accumulated value.
   * @see _.reduceRight
   * @example
   *
   * _.reduce([1, 2], function(sum, n) {
   *   return sum + n;
   * }, 0);
   * // => 3
   *
   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
   *   (result[value] || (result[value] = [])).push(key);
   *   return result;
   * }, {});
   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
   */
  function reduce(collection, iteratee, accumulator) {
    var func = isArray(collection) ? arrayReduce : baseReduce,
        initAccum = arguments.length < 3;

    return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
  }

  /**
   * Gets the size of `collection` by returning its length for array-like
   * values or the number of own enumerable string keyed properties for objects.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object|string} collection The collection to inspect.
   * @returns {number} Returns the collection size.
   * @example
   *
   * _.size([1, 2, 3]);
   * // => 3
   *
   * _.size({ 'a': 1, 'b': 2 });
   * // => 2
   *
   * _.size('pebbles');
   * // => 7
   */
  function size(collection) {
    if (collection == null) {
      return 0;
    }
    if (isArrayLike(collection)) {
      return isString(collection) ? stringSize(collection) : collection.length;
    }
    var tag = getTag(collection);
    if (tag == mapTag || tag == setTag) {
      return collection.size;
    }
    return baseKeys(collection).length;
  }

  /**
   * Checks if `predicate` returns truthy for **any** element of `collection`.
   * Iteration is stopped once `predicate` returns truthy. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   * @example
   *
   * _.some([null, 0, 'yes', false], Boolean);
   * // => true
   *
   * var users = [
   *   { 'user': 'barney', 'active': true },
   *   { 'user': 'fred',   'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.some(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.some(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.some(users, 'active');
   * // => true
   */
  function some(collection, predicate, guard) {
    var func = isArray(collection) ? arraySome : baseSome;
    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = undefined;
    }
    return func(collection, getIteratee(predicate, 3));
  }

  /**
   * Creates an array of elements, sorted in ascending order by the results of
   * running each element in a collection thru each iteratee. This method
   * performs a stable sort, that is, it preserves the original sort order of
   * equal elements. The iteratees are invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {...(Function|Function[])} [iteratees=[_.identity]]
   *  The iteratees to sort by.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 },
   *   { 'user': 'barney', 'age': 34 }
   * ];
   *
   * _.sortBy(users, [function(o) { return o.user; }]);
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
   *
   * _.sortBy(users, ['user', 'age']);
   * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
   */
  var sortBy = baseRest(function(collection, iteratees) {
    if (collection == null) {
      return [];
    }
    var length = iteratees.length;
    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
      iteratees = [];
    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
      iteratees = [iteratees[0]];
    }
    return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
  });

  /*------------------------------------------------------------------------*/

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return root.Date.now();
  };

  /*------------------------------------------------------------------------*/

  /**
   * Creates a function that invokes `func`, with the `this` binding and arguments
   * of the created function, while it's called less than `n` times. Subsequent
   * calls to the created function return the result of the last `func` invocation.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {number} n The number of calls at which `func` is no longer invoked.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * jQuery(element).on('click', _.before(5, addContactToList));
   * // => Allows adding up to 4 contacts to the list.
   */
  function before(n, func) {
    var result;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    n = toInteger(n);
    return function() {
      if (--n > 0) {
        result = func.apply(this, arguments);
      }
      if (n <= 1) {
        func = undefined;
      }
      return result;
    };
  }

  /**
   * Creates a function that invokes `func` with the `this` binding of `thisArg`
   * and `partials` prepended to the arguments it receives.
   *
   * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
   * may be used as a placeholder for partially applied arguments.
   *
   * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
   * property of bound functions.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * function greet(greeting, punctuation) {
   *   return greeting + ' ' + this.user + punctuation;
   * }
   *
   * var object = { 'user': 'fred' };
   *
   * var bound = _.bind(greet, object, 'hi');
   * bound('!');
   * // => 'hi fred!'
   *
   * // Bound with placeholders.
   * var bound = _.bind(greet, object, _, '!');
   * bound('hi');
   * // => 'hi fred!'
   */
  var bind = baseRest(function(func, thisArg, partials) {
    var bitmask = WRAP_BIND_FLAG;
    if (partials.length) {
      var holders = replaceHolders(partials, getHolder(bind));
      bitmask |= WRAP_PARTIAL_FLAG;
    }
    return createWrap(func, bitmask, thisArg, partials, holders);
  });

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;

      return maxing
        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
        : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
   * Defers invoking the `func` until the current call stack has cleared. Any
   * additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to defer.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.defer(function(text) {
   *   console.log(text);
   * }, 'deferred');
   * // => Logs 'deferred' after one millisecond.
   */
  var defer = baseRest(function(func, args) {
    return baseDelay(func, 1, args);
  });

  /**
   * Invokes `func` after `wait` milliseconds. Any additional arguments are
   * provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.delay(function(text) {
   *   console.log(text);
   * }, 1000, 'later');
   * // => Logs 'later' after one second.
   */
  var delay = baseRest(function(func, wait, args) {
    return baseDelay(func, toNumber(wait) || 0, args);
  });

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = MapCache;

  /**
   * Creates a function that negates the result of the predicate `func`. The
   * `func` predicate is invoked with the `this` binding and arguments of the
   * created function.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {Function} predicate The predicate to negate.
   * @returns {Function} Returns the new negated function.
   * @example
   *
   * function isEven(n) {
   *   return n % 2 == 0;
   * }
   *
   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
   * // => [1, 3, 5]
   */
  function negate(predicate) {
    if (typeof predicate != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function() {
      var args = arguments;
      switch (args.length) {
        case 0: return !predicate.call(this);
        case 1: return !predicate.call(this, args[0]);
        case 2: return !predicate.call(this, args[0], args[1]);
        case 3: return !predicate.call(this, args[0], args[1], args[2]);
      }
      return !predicate.apply(this, args);
    };
  }

  /**
   * Creates a function that is restricted to invoking `func` once. Repeat calls
   * to the function return the value of the first invocation. The `func` is
   * invoked with the `this` binding and arguments of the created function.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var initialize = _.once(createApplication);
   * initialize();
   * initialize();
   * // => `createApplication` is invoked once
   */
  function once(func) {
    return before(2, func);
  }

  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a shallow clone of `value`.
   *
   * **Note:** This method is loosely based on the
   * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
   * and supports cloning arrays, array buffers, booleans, date objects, maps,
   * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
   * arrays. The own enumerable properties of `arguments` objects are cloned
   * as plain objects. An empty object is returned for uncloneable values such
   * as error objects, functions, DOM nodes, and WeakMaps.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to clone.
   * @returns {*} Returns the cloned value.
   * @see _.cloneDeep
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var shallow = _.clone(objects);
   * console.log(shallow[0] === objects[0]);
   * // => true
   */
  function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG);
  }

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false ||
      (isObjectLike(value) && baseGetTag(value) == boolTag);
  }

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */
  var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) &&
        (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
          isBuffer(value) || isTypedArray(value) || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  /**
   * Checks if `value` is a finite primitive number.
   *
   * **Note:** This method is based on
   * [`Number.isFinite`](https://mdn.io/Number/isFinite).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(3);
   * // => true
   *
   * _.isFinite(Number.MIN_VALUE);
   * // => true
   *
   * _.isFinite(Infinity);
   * // => false
   *
   * _.isFinite('3');
   * // => false
   */
  function isFinite(value) {
    return typeof value == 'number' && nativeIsFinite(value);
  }

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is based on
   * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
   * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
   * `undefined` and other non-number values.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }

  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' ||
      (isObjectLike(value) && baseGetTag(value) == numberTag);
  }

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && baseGetTag(value) == symbolTag);
  }

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * Converts `value` to an array.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Array} Returns the converted array.
   * @example
   *
   * _.toArray({ 'a': 1, 'b': 2 });
   * // => [1, 2]
   *
   * _.toArray('abc');
   * // => ['a', 'b', 'c']
   *
   * _.toArray(1);
   * // => []
   *
   * _.toArray(null);
   * // => []
   */
  function toArray(value) {
    if (!value) {
      return [];
    }
    if (isArrayLike(value)) {
      return isString(value) ? stringToArray(value) : copyArray(value);
    }
    if (symIterator && value[symIterator]) {
      return iteratorToArray(value[symIterator]());
    }
    var tag = getTag(value),
        func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

    return func(value);
  }

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = (value < 0 ? -1 : 1);
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;

    return result === result ? (remainder ? result - remainder : result) : 0;
  }

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  /*------------------------------------------------------------------------*/

  /**
   * Assigns own enumerable string keyed properties of source objects to the
   * destination object. Source objects are applied from left to right.
   * Subsequent sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assignIn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assign({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3 }
   */
  var assign = createAssigner(function(object, source) {
    if (isPrototype(source) || isArrayLike(source)) {
      copyObject(source, keys(source), object);
      return;
    }
    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        assignValue(object, key, source[key]);
      }
    }
  });

  /**
   * This method is like `_.assign` except that it iterates over own and
   * inherited source properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extend
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assign
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assignIn({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
   */
  var assignIn = createAssigner(function(object, source) {
    copyObject(source, keysIn(source), object);
  });

  /**
   * Creates an object that inherits from the `prototype` object. If a
   * `properties` object is given, its own enumerable string keyed properties
   * are assigned to the created object.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Object
   * @param {Object} prototype The object to inherit from.
   * @param {Object} [properties] The properties to assign to the object.
   * @returns {Object} Returns the new object.
   * @example
   *
   * function Shape() {
   *   this.x = 0;
   *   this.y = 0;
   * }
   *
   * function Circle() {
   *   Shape.call(this);
   * }
   *
   * Circle.prototype = _.create(Shape.prototype, {
   *   'constructor': Circle
   * });
   *
   * var circle = new Circle;
   * circle instanceof Circle;
   * // => true
   *
   * circle instanceof Shape;
   * // => true
   */
  function create(prototype, properties) {
    var result = baseCreate(prototype);
    return properties == null ? result : baseAssign(result, properties);
  }

  /**
   * Assigns own and inherited enumerable string keyed properties of source
   * objects to the destination object for all destination properties that
   * resolve to `undefined`. Source objects are applied from left to right.
   * Once a property is set, additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.defaultsDeep
   * @example
   *
   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var defaults = baseRest(function(object, sources) {
    object = Object(object);

    var index = -1;
    var length = sources.length;
    var guard = length > 2 ? sources[2] : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      length = 1;
    }

    while (++index < length) {
      var source = sources[index];
      var props = keysIn(source);
      var propsIndex = -1;
      var propsLength = props.length;

      while (++propsIndex < propsLength) {
        var key = props[propsIndex];
        var value = object[key];

        if (value === undefined ||
            (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          object[key] = source[key];
        }
      }
    }

    return object;
  });

  /**
   * Iterates over own enumerable string keyed properties of an object and
   * invokes `iteratee` for each property. The iteratee is invoked with three
   * arguments: (value, key, object). Iteratee functions may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @since 0.3.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns `object`.
   * @see _.forOwnRight
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forOwn(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forOwn(object, iteratee) {
    return object && baseForOwn(object, getIteratee(iteratee, 3));
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has(object, path) {
    return object != null && hasPath(object, path, baseHas);
  }

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  /**
   * Creates an object with the same keys as `object` and values generated
   * by running each own enumerable string keyed property of `object` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, key, object).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns the new mapped object.
   * @see _.mapKeys
   * @example
   *
   * var users = {
   *   'fred':    { 'user': 'fred',    'age': 40 },
   *   'pebbles': { 'user': 'pebbles', 'age': 1 }
   * };
   *
   * _.mapValues(users, function(o) { return o.age; });
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   *
   * // The `_.property` iteratee shorthand.
   * _.mapValues(users, 'age');
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   */
  function mapValues(object, iteratee) {
    var result = {};
    iteratee = getIteratee(iteratee, 3);

    baseForOwn(object, function(value, key, object) {
      baseAssignValue(result, key, iteratee(value, key, object));
    });
    return result;
  }

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = flatRest(function(object, paths) {
    return object == null ? {} : basePick(object, paths);
  });

  /**
   * Creates an object composed of the `object` properties `predicate` returns
   * truthy for. The predicate is invoked with two arguments: (value, key).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The source object.
   * @param {Function} [predicate=_.identity] The function invoked per property.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pickBy(object, _.isNumber);
   * // => { 'a': 1, 'c': 3 }
   */
  function pickBy(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = arrayMap(getAllKeysIn(object), function(prop) {
      return [prop];
    });
    predicate = getIteratee(predicate);
    return basePickBy(object, props, function(value, path) {
      return predicate(value, path[0]);
    });
  }

  /**
   * This method is like `_.get` except that if the resolved value is a
   * function it's invoked with the `this` binding of its parent object and
   * its result is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to resolve.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
   *
   * _.result(object, 'a[0].b.c1');
   * // => 3
   *
   * _.result(object, 'a[0].b.c2');
   * // => 4
   *
   * _.result(object, 'a[0].b.c3', 'default');
   * // => 'default'
   *
   * _.result(object, 'a[0].b.c3', _.constant('default'));
   * // => 'default'
   */
  function result(object, path, defaultValue) {
    path = castPath(path, object);

    var index = -1,
        length = path.length;

    // Ensure the loop is entered when path is empty.
    if (!length) {
      length = 1;
      object = undefined;
    }
    while (++index < length) {
      var value = object == null ? undefined : object[toKey(path[index])];
      if (value === undefined) {
        index = length;
        value = defaultValue;
      }
      object = isFunction(value) ? value.call(object) : value;
    }
    return object;
  }

  /**
   * Creates an array of the own enumerable string keyed property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object == null ? [] : baseValues(object, keys(object));
  }

  /*------------------------------------------------------------------------*/

  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */
  function escape(string) {
    string = toString(string);
    return (string && reHasUnescapedHtml.test(string))
      ? string.replace(reUnescapedHtml, escapeHtmlChar)
      : string;
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /**
   * Creates a function that invokes `func` with the arguments of the created
   * function. If `func` is a property name, the created function returns the
   * property value for a given element. If `func` is an array or object, the
   * created function returns `true` for elements that contain the equivalent
   * source properties, otherwise it returns `false`.
   *
   * @static
   * @since 4.0.0
   * @memberOf _
   * @category Util
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @returns {Function} Returns the callback.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
   * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, _.iteratee(['user', 'fred']));
   * // => [{ 'user': 'fred', 'age': 40 }]
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, _.iteratee('user'));
   * // => ['barney', 'fred']
   *
   * // Create custom iteratee shorthands.
   * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
   *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
   *     return func.test(string);
   *   };
   * });
   *
   * _.filter(['abc', 'def'], /ef/);
   * // => ['def']
   */
  function iteratee(func) {
    return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
  }

  /**
   * Creates a function that performs a partial deep comparison between a given
   * object and `source`, returning `true` if the given object has equivalent
   * property values, else `false`.
   *
   * **Note:** The created function is equivalent to `_.isMatch` with `source`
   * partially applied.
   *
   * Partial comparisons will match empty array and empty object `source`
   * values against any array or object value, respectively. See `_.isEqual`
   * for a list of supported value comparisons.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   * @example
   *
   * var objects = [
   *   { 'a': 1, 'b': 2, 'c': 3 },
   *   { 'a': 4, 'b': 5, 'c': 6 }
   * ];
   *
   * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
   * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
   */
  function matches(source) {
    return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
  }

  /**
   * Adds all own enumerable string keyed function properties of a source
   * object to the destination object. If `object` is a function, then methods
   * are added to its prototype as well.
   *
   * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
   * avoid conflicts caused by modifying the original.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {Function|Object} [object=lodash] The destination object.
   * @param {Object} source The object of functions to add.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
   * @returns {Function|Object} Returns `object`.
   * @example
   *
   * function vowels(string) {
   *   return _.filter(string, function(v) {
   *     return /[aeiou]/i.test(v);
   *   });
   * }
   *
   * _.mixin({ 'vowels': vowels });
   * _.vowels('fred');
   * // => ['e']
   *
   * _('fred').vowels().value();
   * // => ['e']
   *
   * _.mixin({ 'vowels': vowels }, { 'chain': false });
   * _('fred').vowels();
   * // => ['e']
   */
  function mixin(object, source, options) {
    var props = keys(source),
        methodNames = baseFunctions(source, props);

    if (options == null &&
        !(isObject(source) && (methodNames.length || !props.length))) {
      options = source;
      source = object;
      object = this;
      methodNames = baseFunctions(source, keys(source));
    }
    var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
        isFunc = isFunction(object);

    arrayEach(methodNames, function(methodName) {
      var func = source[methodName];
      object[methodName] = func;
      if (isFunc) {
        object.prototype[methodName] = function() {
          var chainAll = this.__chain__;
          if (chain || chainAll) {
            var result = object(this.__wrapped__),
                actions = result.__actions__ = copyArray(this.__actions__);

            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
            result.__chain__ = chainAll;
            return result;
          }
          return func.apply(object, arrayPush([this.value()], arguments));
        };
      }
    });

    return object;
  }

  /**
   * Reverts the `_` variable to its previous value and returns a reference to
   * the `lodash` function.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @returns {Function} Returns the `lodash` function.
   * @example
   *
   * var lodash = _.noConflict();
   */
  function noConflict() {
    if (root._ === this) {
      root._ = oldDash;
    }
    return this;
  }

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString(prefix) + id;
  }

  /*------------------------------------------------------------------------*/

  /**
   * Computes the maximum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the maximum value.
   * @example
   *
   * _.max([4, 2, 8, 6]);
   * // => 8
   *
   * _.max([]);
   * // => undefined
   */
  function max(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, baseGt)
      : undefined;
  }

  /**
   * Computes the minimum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the minimum value.
   * @example
   *
   * _.min([4, 2, 8, 6]);
   * // => 2
   *
   * _.min([]);
   * // => undefined
   */
  function min(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, baseLt)
      : undefined;
  }

  /**
   * This method is like `_.sum` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the value to be summed.
   * The iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Math
   * @param {Array} array The array to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {number} Returns the sum.
   * @example
   *
   * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
   *
   * _.sumBy(objects, function(o) { return o.n; });
   * // => 20
   *
   * // The `_.property` iteratee shorthand.
   * _.sumBy(objects, 'n');
   * // => 20
   */
  function sumBy(array, iteratee) {
    return (array && array.length)
      ? baseSum(array, getIteratee(iteratee, 2))
      : 0;
  }

  /*------------------------------------------------------------------------*/

  // Add methods that return wrapped values in chain sequences.
  lodash.assign = assign;
  lodash.assignIn = assignIn;
  lodash.before = before;
  lodash.bind = bind;
  lodash.chain = chain;
  lodash.compact = compact;
  lodash.concat = concat;
  lodash.constant = constant;
  lodash.create = create;
  lodash.debounce = debounce;
  lodash.defaults = defaults;
  lodash.defer = defer;
  lodash.delay = delay;
  lodash.filter = filter;
  lodash.flatten = flatten;
  lodash.flattenDeep = flattenDeep;
  lodash.groupBy = groupBy;
  lodash.iteratee = iteratee;
  lodash.keys = keys;
  lodash.keysIn = keysIn;
  lodash.map = map;
  lodash.mapValues = mapValues;
  lodash.matches = matches;
  lodash.memoize = memoize;
  lodash.mixin = mixin;
  lodash.negate = negate;
  lodash.once = once;
  lodash.partition = partition;
  lodash.pick = pick;
  lodash.pickBy = pickBy;
  lodash.property = property;
  lodash.remove = remove;
  lodash.reverse = reverse;
  lodash.slice = slice;
  lodash.sortBy = sortBy;
  lodash.take = take;
  lodash.tap = tap;
  lodash.throttle = throttle;
  lodash.thru = thru;
  lodash.toArray = toArray;
  lodash.uniq = uniq;
  lodash.uniqBy = uniqBy;
  lodash.values = values;

  // Add aliases.
  lodash.extend = assignIn;

  // Add methods to `lodash.prototype`.
  mixin(lodash, lodash);

  /*------------------------------------------------------------------------*/

  // Add methods that return unwrapped values in chain sequences.
  lodash.clone = clone;
  lodash.cloneDeep = cloneDeep;
  lodash.eq = eq;
  lodash.escape = escape;
  lodash.every = every;
  lodash.find = find;
  lodash.findIndex = findIndex;
  lodash.findLast = findLast;
  lodash.findLastIndex = findLastIndex;
  lodash.forEach = forEach;
  lodash.forOwn = forOwn;
  lodash.get = get;
  lodash.has = has;
  lodash.hasIn = hasIn;
  lodash.head = head;
  lodash.identity = identity;
  lodash.includes = includes;
  lodash.indexOf = indexOf;
  lodash.isArguments = isArguments;
  lodash.isArray = isArray;
  lodash.isArrayLike = isArrayLike;
  lodash.isBoolean = isBoolean;
  lodash.isBuffer = isBuffer;
  lodash.isDate = isDate;
  lodash.isEmpty = isEmpty;
  lodash.isEqual = isEqual;
  lodash.isFinite = isFinite;
  lodash.isFunction = isFunction;
  lodash.isLength = isLength;
  lodash.isMap = isMap;
  lodash.isNaN = isNaN;
  lodash.isNull = isNull;
  lodash.isNumber = isNumber;
  lodash.isObject = isObject;
  lodash.isObjectLike = isObjectLike;
  lodash.isRegExp = isRegExp;
  lodash.isSet = isSet;
  lodash.isString = isString;
  lodash.isSymbol = isSymbol;
  lodash.isTypedArray = isTypedArray;
  lodash.isUndefined = isUndefined;
  lodash.last = last;
  lodash.max = max;
  lodash.min = min;
  lodash.stubArray = stubArray;
  lodash.stubFalse = stubFalse;
  lodash.noConflict = noConflict;
  lodash.noop = noop;
  lodash.now = now;
  lodash.reduce = reduce;
  lodash.result = result;
  lodash.size = size;
  lodash.some = some;
  lodash.sumBy = sumBy;
  lodash.toFinite = toFinite;
  lodash.toInteger = toInteger;
  lodash.toNumber = toNumber;
  lodash.toString = toString;
  lodash.uniqueId = uniqueId;

  // Add aliases.
  lodash.each = forEach;
  lodash.first = head;

  mixin(lodash, (function() {
    var source = {};
    baseForOwn(lodash, function(func, methodName) {
      if (!hasOwnProperty.call(lodash.prototype, methodName)) {
        source[methodName] = func;
      }
    });
    return source;
  }()), { 'chain': false });

  /*------------------------------------------------------------------------*/

  /**
   * The semantic version number.
   *
   * @static
   * @memberOf _
   * @type {string}
   */
  lodash.VERSION = VERSION;

  // Assign default placeholders.
  bind.placeholder = lodash;

  // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
  arrayEach(['drop', 'take'], function(methodName, index) {
    LazyWrapper.prototype[methodName] = function(n) {
      n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

      var result = (this.__filtered__ && !index)
        ? new LazyWrapper(this)
        : this.clone();

      if (result.__filtered__) {
        result.__takeCount__ = nativeMin(n, result.__takeCount__);
      } else {
        result.__views__.push({
          'size': nativeMin(n, MAX_ARRAY_LENGTH),
          'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
        });
      }
      return result;
    };

    LazyWrapper.prototype[methodName + 'Right'] = function(n) {
      return this.reverse()[methodName](n).reverse();
    };
  });

  // Add `LazyWrapper` methods that accept an `iteratee` value.
  arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
    var type = index + 1,
        isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

    LazyWrapper.prototype[methodName] = function(iteratee) {
      var result = this.clone();
      result.__iteratees__.push({
        'iteratee': getIteratee(iteratee, 3),
        'type': type
      });
      result.__filtered__ = result.__filtered__ || isFilter;
      return result;
    };
  });

  // Add `LazyWrapper` methods for `_.head` and `_.last`.
  arrayEach(['head', 'last'], function(methodName, index) {
    var takeName = 'take' + (index ? 'Right' : '');

    LazyWrapper.prototype[methodName] = function() {
      return this[takeName](1).value()[0];
    };
  });

  // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
  arrayEach(['initial', 'tail'], function(methodName, index) {
    var dropName = 'drop' + (index ? '' : 'Right');

    LazyWrapper.prototype[methodName] = function() {
      return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
    };
  });

  LazyWrapper.prototype.compact = function() {
    return this.filter(identity);
  };

  LazyWrapper.prototype.find = function(predicate) {
    return this.filter(predicate).head();
  };

  LazyWrapper.prototype.findLast = function(predicate) {
    return this.reverse().find(predicate);
  };

  LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
    if (typeof path == 'function') {
      return new LazyWrapper(this);
    }
    return this.map(function(value) {
      return baseInvoke(value, path, args);
    });
  });

  LazyWrapper.prototype.reject = function(predicate) {
    return this.filter(negate(getIteratee(predicate)));
  };

  LazyWrapper.prototype.slice = function(start, end) {
    start = toInteger(start);

    var result = this;
    if (result.__filtered__ && (start > 0 || end < 0)) {
      return new LazyWrapper(result);
    }
    if (start < 0) {
      result = result.takeRight(-start);
    } else if (start) {
      result = result.drop(start);
    }
    if (end !== undefined) {
      end = toInteger(end);
      result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    }
    return result;
  };

  LazyWrapper.prototype.takeRightWhile = function(predicate) {
    return this.reverse().takeWhile(predicate).reverse();
  };

  LazyWrapper.prototype.toArray = function() {
    return this.take(MAX_ARRAY_LENGTH);
  };

  // Add `LazyWrapper` methods to `lodash.prototype`.
  baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
        isTaker = /^(?:head|last)$/.test(methodName),
        lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
        retUnwrapped = isTaker || /^find/.test(methodName);

    if (!lodashFunc) {
      return;
    }
    lodash.prototype[methodName] = function() {
      var value = this.__wrapped__,
          args = isTaker ? [1] : arguments,
          isLazy = value instanceof LazyWrapper,
          iteratee = args[0],
          useLazy = isLazy || isArray(value);

      var interceptor = function(value) {
        var result = lodashFunc.apply(lodash, arrayPush([value], args));
        return (isTaker && chainAll) ? result[0] : result;
      };

      if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
        // Avoid lazy use if the iteratee has a "length" value other than `1`.
        isLazy = useLazy = false;
      }
      var chainAll = this.__chain__,
          isHybrid = !!this.__actions__.length,
          isUnwrapped = retUnwrapped && !chainAll,
          onlyLazy = isLazy && !isHybrid;

      if (!retUnwrapped && useLazy) {
        value = onlyLazy ? value : new LazyWrapper(this);
        var result = func.apply(value, args);
        result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(result, chainAll);
      }
      if (isUnwrapped && onlyLazy) {
        return func.apply(this, args);
      }
      result = this.thru(interceptor);
      return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
    };
  });

  // Add `Array` methods to `lodash.prototype`.
  arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    var func = arrayProto[methodName],
        chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
        retUnwrapped = /^(?:pop|shift)$/.test(methodName);

    lodash.prototype[methodName] = function() {
      var args = arguments;
      if (retUnwrapped && !this.__chain__) {
        var value = this.value();
        return func.apply(isArray(value) ? value : [], args);
      }
      return this[chainName](function(value) {
        return func.apply(isArray(value) ? value : [], args);
      });
    };
  });

  // Map minified method names to their real names.
  baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    var lodashFunc = lodash[methodName];
    if (lodashFunc) {
      var key = (lodashFunc.name + ''),
          names = realNames[key] || (realNames[key] = []);

      names.push({ 'name': methodName, 'func': lodashFunc });
    }
  });

  realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
    'name': 'wrapper',
    'func': undefined
  }];

  // Add methods to `LazyWrapper`.
  LazyWrapper.prototype.clone = lazyClone;
  LazyWrapper.prototype.reverse = lazyReverse;
  LazyWrapper.prototype.value = lazyValue;

  // Add chain sequence methods to the `lodash` wrapper.
  lodash.prototype.chain = wrapperChain;
  lodash.prototype.commit = wrapperCommit;
  lodash.prototype.next = wrapperNext;
  lodash.prototype.plant = wrapperPlant;
  lodash.prototype.reverse = wrapperReverse;
  lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

  // Add lazy aliases.
  lodash.prototype.first = lodash.prototype.head;

  if (symIterator) {
    lodash.prototype[symIterator] = wrapperToIterator;
  }

  /*--------------------------------------------------------------------------*/

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = lodash;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return lodash;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = lodash)._ = lodash;
    // Export for CommonJS support.
    freeExports._ = lodash;
  }
  else {
    // Export to the global object.
    root._ = lodash;
  }
}.call(this));


//=====================================================================================
//=====================================================================================
//=====================================================================================



/* Next file: client/third-party/non-angular-slugify.js  */ /**
 * angular-slugify -- provides slugification for AngularJS
 *
 * Copyright © 2013 Paul Smith <paulsmith@pobox.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Parts Copyright (c) 2015 Kaj Magnus Lindberg
// I removed the Angular stuff and exposed a global function named debikiSlugify.
// And added some lines marked with [kajmagnus]; they remove all weird characters.


// Unicode (non-control) characters in the Latin-1 Supplement and Latin
// Extended-A blocks, transliterated into ASCII characters.
var __nonAngularSlugifyCharmap = {
    ' ': " ",
    '¡': "!",
    '¢': "c",
    '£': "lb",
    '¥': "yen",
    '¦': "|",
    '§': "SS",
    '¨': "\"",
    '©': "(c)",
    'ª': "a",
    '«': "<<",
    '¬': "not",
    '­': "-",
    '®': "(R)",
    '°': "^0",
    '±': "+/-",
    '²': "^2",
    '³': "^3",
    '´': "'",
    'µ': "u",
    '¶': "P",
    '·': ".",
    '¸': ",",
    '¹': "^1",
    'º': "o",
    '»': ">>",
    '¼': "-1-in-4-", // was:  " 1/4 ",  [kajmagnus]
    '½': "-1-in-2-", // was:  " 1/2 ",  [kajmagnus]
    '¾': "-3-in-4-", // was:  " 3/4 ",  [kajmagnus]
    '¿': "?",
    'À': "`A",
    'Á': "'A",
    'Â': "^A",
    'Ã': "~A",
    'Ä': '"A',
    'Å': "A",
    'Æ': "AE",
    'Ç': "C",
    'È': "`E",
    'É': "'E",
    'Ê': "^E",
    'Ë': '"E',
    'Ì': "`I",
    'Í': "'I",
    'Î': "^I",
    'Ï': '"I',
    'Ð': "D",
    'Ñ': "~N",
    'Ò': "`O",
    'Ó': "'O",
    'Ô': "^O",
    'Õ': "~O",
    'Ö': '"O',
    '×': "x",
    'Ø': "O",
    'Ù': "`U",
    'Ú': "'U",
    'Û': "^U",
    'Ü': '"U',
    'Ý': "'Y",
    'Þ': "Th",
    'ß': "ss",
    'à': "`a",
    'á': "'a",
    'â': "^a",
    'ã': "~a",
    'ä': '"a',
    'å': "a",
    'æ': "ae",
    'ç': "c",
    'è': "`e",
    'é': "'e",
    'ê': "^e",
    'ë': '"e',
    'ì': "`i",
    'í': "'i",
    'î': "^i",
    'ï': '"i',
    'ð': "d",
    'ñ': "~n",
    'ò': "`o",
    'ó': "'o",
    'ô': "^o",
    'õ': "~o",
    'ö': '"o',
    '÷': ":",
    'ø': "o",
    'ù': "`u",
    'ú': "'u",
    'û': "^u",
    'ü': '"u',
    'ý': "'y",
    'þ': "th",
    'ÿ': '"y',
    'Ā': "A",
    'ā': "a",
    'Ă': "A",
    'ă': "a",
    'Ą': "A",
    'ą': "a",
    'Ć': "'C",
    'ć': "'c",
    'Ĉ': "^C",
    'ĉ': "^c",
    'Ċ': "C",
    'ċ': "c",
    'Č': "C",
    'č': "c",
    'Ď': "D",
    'ď': "d",
    'Đ': "D",
    'đ': "d",
    'Ē': "E",
    'ē': "e",
    'Ĕ': "E",
    'ĕ': "e",
    'Ė': "E",
    'ė': "e",
    'Ę': "E",
    'ę': "e",
    'Ě': "E",
    'ě': "e",
    'Ĝ': "^G",
    'ĝ': "^g",
    'Ğ': "G",
    'ğ': "g",
    'Ġ': "G",
    'ġ': "g",
    'Ģ': "G",
    'ģ': "g",
    'Ĥ': "^H",
    'ĥ': "^h",
    'Ħ': "H",
    'ħ': "h",
    'Ĩ': "~I",
    'ĩ': "~i",
    'Ī': "I",
    'ī': "i",
    'Ĭ': "I",
    'ĭ': "i",
    'Į': "I",
    'į': "i",
    'İ': "I",
    'ı': "i",
    'Ĳ': "IJ",
    'ĳ': "ij",
    'Ĵ': "^J",
    'ĵ': "^j",
    'Ķ': "K",
    'ķ': "k",
    'Ĺ': "L",
    'ĺ': "l",
    'Ļ': "L",
    'ļ': "l",
    'Ľ': "L",
    'ľ': "l",
    'Ŀ': "L",
    'ŀ': "l",
    'Ł': "L",
    'ł': "l",
    'Ń': "'N",
    'ń': "'n",
    'Ņ': "N",
    'ņ': "n",
    'Ň': "N",
    'ň': "n",
    'ŉ': "'n",
    'Ō': "O",
    'ō': "o",
    'Ŏ': "O",
    'ŏ': "o",
    'Ő': '"O',
    'ő': '"o',
    'Œ': "OE",
    'œ': "oe",
    'Ŕ': "'R",
    'ŕ': "'r",
    'Ŗ': "R",
    'ŗ': "r",
    'Ř': "R",
    'ř': "r",
    'Ś': "'S",
    'ś': "'s",
    'Ŝ': "^S",
    'ŝ': "^s",
    'Ş': "S",
    'ş': "s",
    'Š': "S",
    'š': "s",
    'Ţ': "T",
    'ţ': "t",
    'Ť': "T",
    'ť': "t",
    'Ŧ': "T",
    'ŧ': "t",
    'Ũ': "~U",
    'ũ': "~u",
    'Ū': "U",
    'ū': "u",
    'Ŭ': "U",
    'ŭ': "u",
    'Ů': "U",
    'ů': "u",
    'Ű': '"U',
    'ű': '"u',
    'Ų': "U",
    'ų': "u",
    'Ŵ': "^W",
    'ŵ': "^w",
    'Ŷ': "^Y",
    'ŷ': "^y",
    'Ÿ': '"Y',
    'Ź': "'Z",
    'ź': "'z",
    'Ż': "Z",
    'ż': "z",
    'Ž': "Z",
    'ž': "z",
    'ſ': "s"
};

function debikiSlugify(s) {
   if (!s) return "";
   var ascii = [];
   var ch, cp;
   for (var i = 0; i < s.length; i++) {
     if ((cp = s.charCodeAt(i)) < 0x180) {
       ch = String.fromCharCode(cp);
       ascii.push(__nonAngularSlugifyCharmap[ch] || ch);
     }
   }
   s = ascii.join("");

   // Tested here: [TyT692SKBDWJ74]

   // URLs should not be mixed case; people would not remember the correct casing.
   s = s.trim().toLowerCase();  // [kajmagnus]

   // For now, allow only ASCII [30BDAH256]  (and [ -] which we'll replace with '-' later).
   s = s.replace(/[^a-z0-9 -]/g, '')  // [kajmagnus]

   // Don't think this is needed any longer?
   s = s.replace(/[^\w\s-]/g, "");

   // Collapse-replace blanks with a single '-':
   s = s.replace(/[-\s]+/g, "-");

   // Remove start '-':  (would it make sense to keep any leading '-'? in case
   // a page title starts with a negative number? — I don't think so)
   s = s.replace(/^-+/, '');

   // There server restricts the slug length.
   var MaxSlugLength = 100;  // sync with Scala [MXPGSLGLN]
   s = s.substr(0, MaxSlugLength);

   // Remove trailing '-':  (do here after truncation)
   s = s.replace(/-+$/, '');

   // Not impossible that the slug is now just '' (the empty string).
   return s;
}

window.debikiSlugify = debikiSlugify;  // [5FK2W08]



//=====================================================================================
//=====================================================================================
//=====================================================================================



var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/* Next file: client/server/ReactActions.ts  */ // This avoids 'Cannot read property "..." from undefined' errors.
var debiki2;
(function (debiki2) {
    debiki2.ReactActions = {};
})(debiki2 || (debiki2 = {}));
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/ReactStore.ts  */ // An implementation is provided in app/debiki/ReactRenderer.scala for server side rendering.
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function win_getSessWinStore() {
        return window.theStore; // [ONESTORE]
    }
    debiki2.win_getSessWinStore = win_getSessWinStore;
    function makeNoPageData() { debiki2.die('K42B01'); }
    debiki2.makeNoPageData = makeNoPageData;
    function makeAutoPage(path) { debiki2.die('K42B02'); }
    debiki2.makeAutoPage = makeAutoPage;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/Server.ts  */
var debiki2;
(function (debiki2) {
    debiki2.Server = {
        logError: function (errorMessage) {
            console.error(errorMessage);
        }
    };
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/*
 * Copyright (c) 2015-2019 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var InheritNesting = 0; // not stored (Null is stored instead in Postgres)
var InfiniteNesting = -1; // sync with Scala
// vim: et ts=2 sw=2 tw=0 fo=r list
/* Next file: client/server/model.ts  */ /*
 * Copyright (c) 2015-2019 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="./../types-and-const-enums.ts" />
/// <reference path="./../third-party/third-party-types.d.ts" />
// vim: et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/constants.ts  */ /*
 * Copyright (C) 2015 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
// If the service worker js and the page js, are the same version, they'll
// accept each other's messages. Otherwise:
// 1) If the page js is newer, it registers a new up-to-date service worker [REGSW],
// and waits for it to claim the page. Thereafter the page and the service
// worker happily talk with each other.
// 2) If the sw js is newer, it'll reject messages from the page,
// and tell the page to show a dialog "Please refresh. New version available".
// This is a separate version number, so won't need to reinstall the service
// worker, if it didn't change. Hmm?
var TalkyardVersion = 
// @ifdef DEBUG
// gulp-preprocess hasn't been configured to processes debug builds ...
'debug-build-0001';
// @endif
// ... only prod builds, so this'll work:
'/* @echo TALKYARD_VERSION */';
var ReactStartedClass = 'dw-react-started';
var EmptyPageId = '0';
var NumEmptyPageDummyPosts = 2; // orig post dummy title and body
// When self hosting, exactly one site is created, by default, and its id is FirstSiteId.
var FirstSiteId = 1;
var NoId = 0;
var NoCategoryId = 0;
var NoPermissionId = 0;
// COULD_OPTIMIZE SMALLER_BUNDLE MOVE to  const enum PostNrs in types-and-const-enums.ts?
var NoPostId = -1; // dupl in reply.js
var TitleNr = 0;
var BodyNr = 1;
var BodyNrStr = '1';
var FirstReplyNr = 2;
var NoDraftNr = 0; // move to No.DraftNr in types-and-const-enums.ts
// Posts nrs below this, are previews of reply drafts not yet published.
var MaxVirtPostNr = -1000 * 1000;
var MinRealPostNr = TitleNr;
// COULD_OPTIMIZE SMALLER_BUNDLE MOVE to  const enum PatIds or Pats?
//  — Doing, see client/types-and-const-enums.ts, const enum Pats.
var NoUserId = 0;
var SystemUserId = 1;
var SysbotUserId = 2;
//const SuperAdminId = 3;  ?
//const SuperStaffId = 4;  ?
var MinMemberId = SystemUserId;
var LowestAuthenticatedUserId = 100; // also in scala  [8PWK1Q2W] RENAMING to Pats.MinAuthnMemberId
var LowestNormalMemberId = 10; // also in scala  [S7KPWG42] RENAMING to Pats.MinNotSysMemberId?
var MaxUsernameLength = 20; // in scala [6AKBR20Q]
var MaxGuestId = -2;
var UnknownUserId = -3;
//const CurrentUserNotLoggedInId = -1?  or  -4;  ?
var ReviewDecisionUndoTimoutSeconds = 12; // sync with Scala and test code [2PUKQB0]
var ManualReadMark = 1;
var YellowStarMark = 2;
var FirstStarMark = 2;
var BlueStarMark = 3;
var LastStarMark = 3;
// Sync with Scala, and an input error checker [6KG2W57]
var MaxNumFirstPosts = 10;
var MaxEmailsPerUser = 5; // also in scala [4GKRDF0]
// If we try to load a user with this id, or a post with this nr, etc, then
// something is amiss. Can then show and error or do nothing.
var TooHighNumber = 100e6; // [05RKVJWG2]
var IgnoreThisError = -112233;
var ShowNoErrorDialog = -112234;
var UseBeacon = 'UseBeacon';
// COULD_OPTIMIZE SMALLER_BUNDLE MOVE to const enum somehow?
var SiteStatusStrings = [
    'NoAdmin',
    'Active',
    'ReadAndCleanOnly',
    'HiddenUnlessStaff',
    'HiddenUnlessAdmin',
    'Deleted',
    'Purged'
];
// COULD_OPTIMIZE SMALLER_BUNDLE MOVE to  const enum UrlPaths in types-and-const-enums.ts?
// + see other MOVE in this file too.
var ApiUrlPathPrefix = '/-/';
var UsersRoot = '/-/users/';
var GroupsRoot = '/-/groups/';
var SearchRootPath = '/-/search';
var AdminRoot = '/-/admin/';
// MOVE to const enum ForumRoutePaths in types-and-const-enums.ts?
var RoutePathLatest = 'latest'; // change to 'active'?  here too: [394SMDLW20] + 99 more places?
var RoutePathNew = 'new';
var RoutePathTop = 'top';
var RoutePathCategories = 'categories';
// MOVE to const enum CookieNames in types-and-const-enums.ts?
var ImpersonationCookieName = 'esCoImp';
// MOVE to const enum WidthsPx ? in types-and-const-enums.ts? ------
// Some CSS and layout related constants. [6PFDS3]
// Also see: docs/ux-design.adoc
var UseWideForumLayoutMinWidth = 1000; // (or 1024 would work too, doesn't matter)
var UseWidePageLayoutMinWidth = 750; // (or 768 ok too)
var UseNarrowForumLayoutMaxWidth = 419; // smart watches
// Also see: [wide_topbar_min_px]
var WatchbarWidth = 230; // dupl in css [7GYK42]
var ContextbarMinWidth = 270; // dupl in css [4FK0ZD]
// Server side, Talkyard renders html twice per page — once with html suitable for
// narrow things,  and once with html suitable for wider things.  React.js wants
// the exact correct html, othewise hydration fails, causes randomly broken html.
// So, browser side, the initial rendering typescript code should pretend the page
// width is either ServerSideWindowWidthMobile wide or ServerSideWindowWidthLaptop
// — see store.isHydrating = true  [1st_rndr_hydr]
//
var ServerSideWindowWidthMobile = 500;
// 1920 x 1080 is a common resoltion, down to 14'' laptops, more and more popular.
// But looking at: https://gs.statcounter.com/#resolution-ww-monthly-201507-202006,
// 1366 x 768 is still the most common laptop resolution — about 21% vs 19% for 1920.
// There's also 1600 x 900 for budget 17'' laptops — maybe 1600px would be better,
// then, than 1920 but let's pick 1366.
// Nice (although old): https://ux.stackexchange.com/a/16610  — 1366 makes sense.
//
var ServerSideWindowWidthLaptop = 1366;
var OriginRegex = /^https?:\/\/[^/]+/i; // CLEAN_UP this regex not in use everywhere, some dupl regexs
// MOVE to const enum FragActions in types-and-const-enums.ts?
var FragActionAndReplyToPost = '&replyToPost';
var FragActionAndEditPost = '&editPost';
var FragActionHashComposeTopic = '#composeTopic';
var FragActionHashComposeMessage = '#composeDirectMessage';
var FragActionHashScrollLatest = '#scrollToLatestPost';
var FragActionHashScrollToBottom = '#scrollToBottom'; // rename to ...BottomButtons?
// MOVE to const enum FragParams in types-and-const-enums.ts?
// The post nr param looks a bit different, '-' not '=', because it's used in urls to link to
// posts, so nice if it uses '-' like url tend to do. Whereas the other params are more like
// api request params to the Javascript code, so then they can look like code & url params?
var FragParamPostNr = '#post-';
var FragParamCommentNr = '#comment-';
var FragParamDraftNr = '&draftNr=';
var FragParamReplyType = '&replyType=';
var FragParamTopicType = '&topicType=';
var FragParamCategoryId = '&categoryId='; // REMOVE  use &category=<number>  instead [305RKTJ33]
var FragParamCategory = '&category=';
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/magic-time.ts  */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function addTestExtraMillis() {
    }
    debiki2.addTestExtraMillis = addTestExtraMillis;
    function getNowMs() {
        return Date.now();
    }
    debiki2.getNowMs = getNowMs;
    function magicTimeout(millis, callback) {
    }
    debiki2.magicTimeout = magicTimeout;
    function startMagicTime(anyStartTimeMs) {
    }
    debiki2.startMagicTime = startMagicTime;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/prelude.ts  */ /*
 * Copyright (C) 2015 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../types-and-const-enums.ts" />
/// <reference path="../reactjs-types.ts" />
/// <reference path="model.ts" />
/// <reference path="constants.ts" />
/// <reference path="translations.d.ts" />
/// <reference path="magic-time.ts" />
var rFragment = reactCreateFactory(React.Fragment);
var rFr = rFragment;
// backw compat, later, do once per file instead (don't want a global 'r').
//
// ReactDOMFactories looks like:
//
// var ReactDOMFactories = {
//   a: createDOMFactory('a'),
//   abbr: ...
//
// function createDOMFactory(type) {
//   var factory = React.createElement.bind(null, type);
//   factory.type = type; // makes:  `<Foo />.type === Foo`  work
//   return factory;
//  };
//
// and React.createElement(type: keyof ReactHTML, props, ...children) returns:
//   DetailedReactHTMLElement<P, T>
//
var r = ReactDOMFactories;
// Let this be a function, not a variable, so it can be used directly.
// (Otherwise there's a server side reactCreateFactory-not-yet-inited error)
function reactCreateFactory(type) {
    // Deprecated, causes warning, from React >= 16.13.0:
    // `return React['createFactory'](x);`
    // See: https://reactjs.org/blog/2020/02/26/react-v16.13.0.html#deprecating-reactcreatefactory
    // Instead:
    return React.createElement.bind(null, type);
}
function isServerSide() {
    return !!window['ReactDOMServer'];
}
function isSelfHosted() {
    return eds.siteId === 1;
}
// Use this function to call getBoundingClientRect() and other stuff just before the next repaint,
// to avoid forced refresh of the layout.
function doNextFrameOrNow(something) {
    if (window.requestAnimationFrame) {
        window.requestAnimationFrame(something);
    }
    else {
        something();
    }
}
/**
 * Basic stuff needed by essentially all modules / files.
 */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    // Typescript changes this so the macro breaks somehow, in prod builds:
    // x ifdef DEBUG
    function toStr(x, indentation) {
        if (indentation === void 0) { indentation = 2; }
        return JSON.stringify(x, undefined, indentation);
    }
    debiki2.toStr = toStr;
    // x endif
    /// Lowercases the 1st char.
    ///
    function firstToLower(text, doIt) {
        if (doIt === void 0) { doIt = true; }
        if (!doIt || !text)
            return text;
        var firstButLowercase = text[0].toLowerCase();
        return firstButLowercase + text.substr(1);
    }
    debiki2.firstToLower = firstToLower;
    function oneIfDef(x) {
        return x ? 1 : 0;
    }
    debiki2.oneIfDef = oneIfDef;
    /// Wrapper for console.log().
    ///
    /// But uses *debug* level if we're in an embedded blog comments iframe — because
    /// blog authors sometimes look in the console, and send emails asking about
    /// actually harmless log messages in the console. — With debug log level,
    /// though, the browser won't show those messages, by default.
    ///
    /// Otherwise, use normal log level — so if someone copy-pastes a real warning
    /// or error from the console, the console.log() messages are visible and
    /// get included, simplifying troubleshooting.
    ///
    function logM(message, ex) {
        if (eds.isInIframe) {
            console.debug.apply(console, arguments);
        }
        else {
            console.log.apply(console, arguments);
        }
    }
    debiki2.logM = logM;
    function logW(message, ex) {
        console.warn.apply(console, arguments);
    }
    debiki2.logW = logW;
    function logE(message, ex) {
        console.error.apply(console, arguments);
    }
    debiki2.logE = logE;
    /// Wrapper for console.debug().
    ///
    /// So can change how logging works, from this one place, rather than updating
    /// console.debug() everywhere.
    ///
    function logD(message, ex) {
        console.debug.apply(console, arguments);
    }
    debiki2.logD = logD;
    debiki2.logT = logD; // for now, trace.
    function logAndDebugDie(errorMessage, ex) {
        console.error(errorMessage, ex);
        // @ifdef DEBUG
        die(errorMessage);
        // @endif
        void 0; // [macro-bug]
    }
    debiki2.logAndDebugDie = logAndDebugDie;
    function die(errorMessage) {
        // @ifdef DEBUG
        debugger;
        // @endif
        var dialogs = debiki2['pagedialogs'];
        // I don't remember why I added setTimeout() but there was a good reason.
        setTimeout(function () {
            debiki2['Server'].logError(errorMessage);
        });
        if (dialogs && dialogs.showAndThrowClientSideError) {
            dialogs.showAndThrowClientSideError(errorMessage);
        }
        else {
            // Server side.
            throw Error(errorMessage);
        }
    }
    debiki2.die = die;
    function dieIf(condition, errorMessage) {
        if (condition) {
            die(errorMessage);
        }
    }
    debiki2.dieIf = dieIf;
    function showClientError(errMsg) {
        if (isServerSide())
            return;
        // Not incl in server bundle, so access via lookup, to avoid harmless transpiler warnings.
        debiki2.pagedialogs['showClientError'](errMsg);
    }
    debiki2.showClientError = showClientError;
    function logError(errorMessage) {
        console.error(Error(errorMessage));
        // Why setTimeout()? I don't remember, see above in die(errorMessage).
        // @ifdef DEBUG
        debugger;
        // @endif
        setTimeout(function () {
            debiki2['Server'].logError(errorMessage);
        });
    }
    debiki2.logError = logError;
    function logErrorIf(condition, errorMessage) {
        if (condition) {
            logError(errorMessage);
        }
    }
    debiki2.logErrorIf = logErrorIf;
    function scrollToBottom(node) {
        dieIf(!node, 'DwE9FMW2');
        node.scrollTop = node.scrollHeight;
    }
    debiki2.scrollToBottom = scrollToBottom;
    function seemsSelfHosted() {
        return eds.siteId === FirstSiteId;
    }
    debiki2.seemsSelfHosted = seemsSelfHosted;
    function isBlogCommentsSite() {
        return location.hostname.startsWith('comments-for-'); // or how know? [7PLBKA24]
    }
    debiki2.isBlogCommentsSite = isBlogCommentsSite;
    function isCommunitySite() {
        return !isBlogCommentsSite();
    }
    debiki2.isCommunitySite = isCommunitySite;
    // RENAME to win_isEmbSthIframe()  QUICK
    function isInSomeEmbCommentsIframe() {
        return eds.isInEmbeddedCommentsIframe || eds.isInEmbeddedEditor;
    }
    debiki2.isInSomeEmbCommentsIframe = isInSomeEmbCommentsIframe;
    function win_isLoginPopup() {
        var result = eds.isInLoginPopup;
        // If we're in a login popup, and got rediected back from an
        // OAuth provider, then eds.isInLoginPopup is false. Instead,
        // the window name is 'TyLoginPopup'.
        //
        // (The popup window apparently keeps its name, also when going to the
        // Identity Provider (IDP) and logging in there, and getting redirected back.)
        //
        result = result || window.name === 'TyLoginPopup';
        // @ifdef DEBUG
        // We never place a login popup in an iframe (no reason to do that). If we're in
        // an iframe, then, instead, this is an embedded editor, embedded blog comments,
        // or an embedded forum or embedded-something. — Not a login popup.
        dieIf(result && eds.isInIframe, 'TyE305RKEDM2');
        // @endif
        return result;
    }
    debiki2.win_isLoginPopup = win_isLoginPopup;
    /**
     * Finds the main embedded comments window, where the per page temporary xsrf token
     * and sesion id are kept, when logging in without cookies. So they'll be accessible
     * everywhere: http requests that need the xsrf token or session id,
     * are made from the editor iframe and login popup wins too, not just the main
     * comments win.
     */
    function getMainWin() {
        // Maybe there're no iframes and we're already in the main win?
        // (window.opener might still be defined though — could be an embedded
        // comments iframe, in another browser tab. So if we were to continue below,
        // we could find the main win from the *wrong* browser tab with the wrong
        // React store. )
        if (!eds.isInIframe && !win_isLoginPopup()) {
            return window;
        }
        var lookingForName = 'edComments';
        if (window.name === lookingForName) {
            // @ifdef DEBUG
            dieIf(!window.typs, 'TyE7S2063D');
            // @endif
            return window;
        }
        // This is the main window already, unless we're on an embedded comments page
        // or in a login popup.
        var win = window;
        // If we're in a login popup window, switch to the opener, which should be either the
        // main win (with comments and discussions), or an embedded comments or editor iframe.
        try {
            if (win.opener && win.opener.typs) {
                win = win.opener;
            }
        }
        catch (ignored) {
            // The opener is apparently a different domain that e.g. window.open():ed
            // the current page. Then, may not access opener.typs — that results in
            // an "accessing a cross-origin frame" error. Fine, just ignore.
        }
        if (win.name !== lookingForName) {
            // We're in the embedded editor iframe window, or in an embedded comments iframe
            // but not in the one we're looking for (which is the #talkyard-session iframe).
            // @ifdef DEBUG
            dieIf(win.name !== 'edEditor' && !/edComments-[0-9]+/.test(win.name), "This window has an unexpected name: '".concat(win.name, "' TyE7S2RME75"));
            // The parent window is the embedding window, e.g. a blog post with
            // comments embedded. It can have one or many iframes with embedded comments.
            dieIf(!win.parent, 'TyE7KKWGCE2');
            // @endif
            try {
                win = win.parent[lookingForName];
            }
            catch (ex) {
                // Maybe got deleted by scripts on the embedding page? Then what?
                logW("Main win '".concat(lookingForName, "' not found [TyE0MAINWIN]"));
            }
        }
        // @ifdef DEBUG
        dieIf(!win, 'TyE5KTGW0258');
        dieIf(!win.typs, 'TyE5KTGW0256');
        // @endif
        return win;
    }
    debiki2.getMainWin = getMainWin;
    function win_getEditorWin() {
        if (window.name === 'edEditor') {
            return window;
        }
        // The editor iframe is created first, so this should always work. [ed_ifr_1st]
        var win;
        try {
            win = window.parent['edEditor'];
        }
        catch (ignored) {
            logW("Editor iframe 'edEditor' not found [TyE0EDWIN]");
        }
        return win;
    }
    debiki2.win_getEditorWin = win_getEditorWin;
    function anyE2eTestPassword() {
        return (window.location.search.match(/e2eTestPassword=([^&#]+)/) || [])[1];
    }
    debiki2.anyE2eTestPassword = anyE2eTestPassword;
    function anyForbiddenPassword() {
        return (window.location.search.match(/forbiddenPassword=([^&#]+)/) || [])[1];
    }
    debiki2.anyForbiddenPassword = anyForbiddenPassword;
    // function findDOMNode(instance: ReactInstance): Element | null | Text
    debiki2.findDOMNode = isServerSide() ? null : window['ReactDOM'].findDOMNode;
    dieIf(!isServerSide() && !debiki2.findDOMNode, 'EsE6UMGY2');
    function hasErrorCode(request, statusCode) {
        return request.responseText && request.responseText.indexOf(statusCode) !== -1;
    }
    debiki2.hasErrorCode = hasErrorCode;
    /// Returns a string with many-enough crypto-random digits.
    ///
    function randomNumSt() {
        var array = new Uint32Array(3);
        window.crypto.getRandomValues(array);
        var st = '';
        for (var i = 0; i < array.length; i++) {
            var n = array[i];
            st += ('00000000' + n).slice(-8);
        }
        // @ifdef DEBUG
        dieIf(st.length !== 24, 'TyE205RKEKDM24');
        // @endif
        return st;
    }
    debiki2.randomNumSt = randomNumSt;
    function toId(x) {
        if (_.isNumber(x))
            return x;
        var nr = x['id'];
        if (_.isNumber(nr))
            return nr;
        return x['uniqueId'];
    }
    debiki2.toId = toId;
    function isNumGeZ(value) {
        // Ignore exponents for now ('123e45').
        return /^\d+(\.\d+)?$/.test(value);
    }
    debiki2.isNumGeZ = isNumGeZ;
    function isDigitsOnly(maybeDigits) {
        return /^\d+$/.test(maybeDigits);
        // Also negative numbers:  insert:  [\+-]?
        // Number.isInteger not supported in IE11.
        // (isNaN('222aaa') is false — the whole string needs to be a number. Except that
        // it thinks '' is a number: isNaN('') === false.
        // It considers '123e45' a number though so don't use. )
    }
    debiki2.isDigitsOnly = isDigitsOnly;
    // E.g. 55555.0 —> 56000, looks nicer? But:  .toPrecision(2) —> "5.6e+4".
    // Also in s/tyd and e2e tests. [pretty_num]
    function prettyNum(num, digits) {
        if (digits === void 0) { digits = 2; }
        // Ugh: (55555.0).toPrecision(2)          —> "5.6e+4"
        // But:  Number((55555.0).toPrecision(2)) —> 56000   nice
        // Thanks, https://stackoverflow.com/a/4689230/694469
        return Number(num.toPrecision(digits));
    }
    debiki2.prettyNum = prettyNum;
    function uppercaseFirst(text) {
        return !text ? text : (text[0].toUpperCase() + text.substr(1));
    }
    debiki2.uppercaseFirst = uppercaseFirst;
    function isBlank(x) {
        return _.isEmpty(x) || !x.trim();
    }
    debiki2.isBlank = isBlank;
    function nonEmpty(x) {
        return !_.isEmpty(x);
    }
    debiki2.nonEmpty = nonEmpty;
    function isDefined2(x) {
        return isDef(x);
    }
    debiki2.isDefined2 = isDefined2;
    function isDef(x) {
        return !isUndef(x);
    }
    debiki2.isDef = isDef;
    function isDefButNot(x, y) {
        return isDef(x) && x !== y;
    }
    debiki2.isDefButNot = isDefButNot;
    // REMOVE  use  notDef(x) instead
    function isUndef(x) {
        return _.isUndefined(x);
    }
    debiki2.isUndef = isUndef;
    function notDef(x) {
        return _.isUndefined(x);
    }
    debiki2.notDef = notDef;
    // CLEAN_UP; RENAME to isNumType because _.isNumber() returns true for NaN
    // — NaN is of *type* number, although it is Not-a-Number.
    // (Can incl an isNumFinite that says false for NaN and +-Inf.)
    function isNum(x) {
        return _.isNumber(x);
    }
    debiki2.isNum = isNum;
    function asIntOrNull(v) {
        return asNumOrNull(false, v);
    }
    debiki2.asIntOrNull = asIntOrNull;
    function asFloatOrNull(v) {
        return asNumOrNull(true, v);
    }
    debiki2.asFloatOrNull = asFloatOrNull;
    function asNumOrNull(toFloat, v) {
        if (!v)
            return null;
        if (!numRegex.test(v))
            return null;
        var nr = toFloat ? parseFloat(v) : parseInt(v);
        return isNaN(nr) || !isFinite(nr) ? null : nr;
    }
    var numRegex = /^ *[+-]? *\d+(\.\d*)? *$/;
    // Ooops bad name  RENAME to isVal
    function isDefined(x) {
        return isVal(x);
    }
    debiki2.isDefined = isDefined;
    // Let's talk about undefined and null as not real values, but 0, '' etc are
    // real values.
    function isVal(x) {
        return !notVal(x);
    }
    debiki2.isVal = isVal;
    function isNullOrUndefined(x) {
        return notVal(x);
    }
    debiki2.isNullOrUndefined = isNullOrUndefined;
    function notVal(x) {
        return _.isNull(x) || _.isUndefined(x);
    }
    debiki2.notVal = notVal;
    function firstDefinedOf(x, y, z) {
        return !_.isUndefined(x) ? x : (!_.isUndefined(y) ? y : z);
    }
    debiki2.firstDefinedOf = firstDefinedOf;
    function firstValOf(x, y, z) {
        return isVal(x) ? x : (isVal(y) ? y : z);
    }
    debiki2.firstValOf = firstValOf;
    /** Says if `a` and `b` are the same, ignoring keys with `undefined` values,
      * and ignoring key order. Uses _.isEqual() under the hood.
      * Avoids the: [unintened_undefined_bug].
      */
    function obj_isDeepEqIgnUndef(a, b) {
        // @ifdef DEBUG
        dieIf(isVal(a) && !_.isObject(a), "a is not an object [TyE502RMH6A]");
        dieIf(isVal(b) && !_.isObject(b), "b is not an object [TyE502RMH6B]");
        dieIf(!a && !b && (a === null) != (b === null), "One of a and b is null, the other is undefined, " +
            "this'll evaluate to not-equal — is that what we want?  [TyE502RMH6U]");
        // @endif
        function findUndefKeys(obj) {
            var undefKeys = [];
            for (var key_1 in obj) {
                var val = obj[key_1];
                if (isUndef(val))
                    undefKeys.push(key_1);
            }
            return undefKeys;
        }
        var undefKeysInA = findUndefKeys(a);
        var undefKeysInB = findUndefKeys(b);
        // Small optimization for the common case when there're no undef values,
        // to avoid { ... } spread-copying a and b (further below).
        if (_.isEqual(undefKeysInA, undefKeysInB))
            return _.isEqual(a, b);
        var a2 = __assign({}, a);
        var b2 = __assign({}, b);
        for (var _i = 0, undefKeysInA_1 = undefKeysInA; _i < undefKeysInA_1.length; _i++) {
            var key_2 = undefKeysInA_1[_i];
            delete a2[key_2];
        }
        for (var _a = 0, undefKeysInB_1 = undefKeysInB; _a < undefKeysInB_1.length; _a++) {
            var key_3 = undefKeysInB_1[_a];
            delete b2[key_3];
        }
        return _.isEqual(a2, b2);
    }
    debiki2.obj_isDeepEqIgnUndef = obj_isDeepEqIgnUndef;
    /** Like _.groupBy but keeps just one value per key.
        RENAME to arr_groupByKeepOne ?
      */
    function groupByKeepOne(vs, fn) {
        var result = {};
        for (var _i = 0, vs_1 = vs; _i < vs_1.length; _i++) {
            var v = vs_1[_i];
            var key_4 = fn(v);
            if (notVal(key_4))
                continue;
            // Keep the first value only.
            if (!result.hasOwnProperty(key_4)) {
                result[key_4] = v;
            }
        }
        return result;
    }
    debiki2.groupByKeepOne = groupByKeepOne;
    function arr_replaceMany(arr, newerItems, isSame) {
        var newArr = __spreadArray([], arr, true);
        arr_replaceManyInPl(newArr, newerItems, isSame);
        return newArr;
    }
    debiki2.arr_replaceMany = arr_replaceMany;
    function arr_replaceManyInPl(arr, newerItems, isSame) {
        for (var _i = 0, newerItems_1 = newerItems; _i < newerItems_1.length; _i++) {
            var newerItem = newerItems_1[_i];
            arr_replaceOneInPl(arr, newerItem, isSame);
        }
    }
    debiki2.arr_replaceManyInPl = arr_replaceManyInPl;
    function arr_replaceOneInPl(arr, newerItem, isSame) {
        var fnLen = isSame.length;
        // @ifdef DEBUG
        dieIf(fnLen < 1 || 2 < fnLen, 'TyE60MEPWH32');
        // @endif
        var getFieldVal = fnLen === 1 ? isSame : undefined;
        var newerFieldVal = getFieldVal && getFieldVal(newerItem);
        var ix = _.findIndex(arr, function (oldItem) {
            if (getFieldVal)
                return getFieldVal(oldItem) === newerFieldVal;
            else
                return isSame(oldItem, newerItem);
        });
        if (ix >= 0) {
            arr[ix] = newerItem;
        }
    }
    debiki2.arr_replaceOneInPl = arr_replaceOneInPl;
    // Finds and replaces (in-place) the first item with item.id = replacement.id.
    // Dies, if there's not matching item.
    // REFACTOR use arr_replaceOneInPl & x => x.id  instead.
    // + add an IfNotFound.ThenDie/ThenAppend/ThenIgnore param? Default to ThenDie?
    function replaceById(itemsWithId, replacement) {
        // @ifdef DEBUG
        dieIf(isNullOrUndefined(replacement.id), 'EdE4GJTH02');
        // @endif
        for (var i = 0; i < itemsWithId.length; ++i) {
            var item = itemsWithId[i];
            // @ifdef DEBUG
            dieIf(isNullOrUndefined(item.id), 'EdE2FJ0U7');
            // @endif
            if (item.id === replacement.id) {
                itemsWithId[i] = replacement;
                break;
            }
            dieIf(i === itemsWithId.length - 1, 'EdE8KA0N2');
        }
    }
    debiki2.replaceById = replaceById;
    function deleteById(itemsWithId, idToDelete) {
        for (var i = 0; i < itemsWithId.length; ++i) {
            var item = itemsWithId[i];
            // @ifdef DEBUG
            dieIf(isNullOrUndefined(item.id), 'EdE6JHW0U2');
            // @endif
            if (item.id === idToDelete) {
                itemsWithId.splice(i, 1);
                break;
            }
        }
    }
    debiki2.deleteById = deleteById;
    function url_getHost(url) {
        // @ifdef DEBUG
        dieIf(!url, 'TyE305RKSG');
        // @endif
        if (!url)
            return '';
        var parts = url.split('/');
        return parts && parts.length >= 3 ? parts[2] : '';
    }
    debiki2.url_getHost = url_getHost;
    function arr_sortAlphaInPlace(vs, strFn) {
        var langCode = 'en'; // for now. Later, add a t.localeCompareLangCode field? I18N  [subcats]
        // See:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation
        // Creating a collator just once, outside sort(), is > 10x faster, than using
        // localCompare from inside sort().
        // https://stackoverflow.com/a/52369951/694469.
        // Just 200 sub cats might get laggy-slow, on low end mobile devices, if instead
        // calling str.localeCompare() from inside sort() — sorting 200 elems in that way,
        // takes 19ms on my core i7 laptop, and that might mean 200 ms on a mobile device?
        // That would be noticeable.
        // But takes just 1.3 ms, with a Collator created once outside sort(), as done below
        // — maybe means 10 - 20 ms on a slow mobile, seems fast enough.
        // (`strA < strB` style comparison takes just 0.2 ms, but doesn't sort properly.)
        //
        // One Ty community has a main cat with 119 sub cats, as of 2020-08. So 100 - 200
        // sub cats, does happen sometimes.  119 sub cats: localeCompare in sort(): 9 ms,
        // collator outside: 0.8 ms.  `strA < strB` is just 0.1 ms but doesn't sort properly.
        var collator;
        try {
            collator = new Intl.Collator(langCode, {
                // Makes  a = á  and  a = A   (but a != b of course).
                sensitivity: 'base',
                ignorePunctuation: true,
                // Nice for version numbers or book chapters?
                numeric: true,
            });
        }
        catch (ex) {
            // Intl.Collator not supported?
        }
        vs.sort(function (a, b) {
            var strA = strFn(a) || '';
            var strB = strFn(b) || '';
            if (collator) {
                return collator.compare(strA, strB);
            }
            else {
                return strA.localeCompare(strB);
            }
        });
    }
    debiki2.arr_sortAlphaInPlace = arr_sortAlphaInPlace;
    function arr_delInPlace(ts, toDelete) {
        while (true) {
            var ix = ts.indexOf(toDelete);
            if (ix === -1)
                return;
            ts.splice(ix, 1);
        }
    }
    debiki2.arr_delInPlace = arr_delInPlace;
    function arr_delInCopy(vs, toDelete) {
        var ix = vs.indexOf(toDelete);
        if (ix === -1)
            return vs;
        var copy = __spreadArray([], vs, true);
        arr_delInPlace(copy, toDelete);
        return copy;
    }
    debiki2.arr_delInCopy = arr_delInCopy;
    function shallowMergeFirstItemLast(items) {
        var result = {};
        if (items) {
            for (var i = items.length - 1; i >= 0; --i) {
                var item = items[i];
                if (item) {
                    result = __assign(__assign({}, result), item);
                }
            }
        }
        return result;
    }
    debiki2.shallowMergeFirstItemLast = shallowMergeFirstItemLast;
    function parsePostNr(postElem) {
        // 5 = drop 'post-' from 'post-123'.
        return parseInt(postElem.id && postElem.id.substr(5, 9));
    }
    debiki2.parsePostNr = parsePostNr;
    /**
     * Calls the callback if the event happens on the selector, unless on the skipSelector.
     *
     * elem.matches('...:not(.aaa, .bbb)') doesn't work, because of the ','. Can use this
     * fn instead: set skipSelector to '.aaa, .bbb'.
     */
    function ifEventOnNotThen(event, selector, skipSelector, callback) {
        Bliss.delegate(document.body, event, selector, function (event) {
            var elem = event.target;
            if (!elem)
                return;
            if (skipSelector) {
                if (elem.matches && elem.matches(skipSelector))
                    return;
            }
            callback(elem, event);
        });
    }
    debiki2.ifEventOnNotThen = ifEventOnNotThen;
    debiki2.$all = $bySelector;
    debiki2.$$all = $bySelector; // use $all instead?
    debiki2.$$bySelector = $bySelector; // returns many, so should be named $$... not just $...
    function $bySelector(selector, elem) {
        return (elem || document).querySelectorAll(selector);
    }
    debiki2.$bySelector = $bySelector;
    function $first(selector, elem) {
        var elems = (elem || document).querySelectorAll(selector);
        return (elems.length ? elems[0] : null);
    }
    debiki2.$first = $first;
    function $byId(elemId) {
        // @ifdef DEBUG
        dieIf(/#\., /.test(elemId), 'EdE2KWWE45');
        // @endif
        return document.getElementById(elemId);
    }
    debiki2.$byId = $byId;
    function $$byClass(className, context) {
        // @ifdef DEBUG
        // getElementsByClassName() works with one single class only.
        dieIf(/#\., /.test(className), 'EdE5JLKS02');
        // @endif
        return (context || document).getElementsByClassName(className);
    }
    debiki2.$$byClass = $$byClass;
    debiki2.$h = {
        hasClass: function (elem, clazz) {
            return elem.classList.contains(clazz);
        },
        // classesString should be a space and/or comma separated class name string.
        addClasses: function (elem, classesString) {
            var _a;
            if (!classesString || !elem)
                return;
            // @ifdef DEBUG
            dieIf(/#\./.test(classesString), 'EdE6EF2T47');
            // @endif
            var classes = classesString.replace(/ *, */g, ',').replace(/ +/g, ',').split(',');
            (_a = elem.classList).add.apply(_a, classes);
        },
        removeClasses: function (elems, classesString) {
            var _a, _b;
            if (!classesString || !elems) {
                // If proceeding, would get this error:
                // """Failed to execute 'remove' on 'DOMTokenList': The token provided must not be empty."""
                return;
            }
            // @ifdef DEBUG
            dieIf(/#\./.test(classesString), 'EdEKEW20P7');
            // @endif
            var classes = classesString.replace(/ *, */g, ',').replace(/ +/g, ',').split(',');
            var anyElems = elems;
            if (_.isNumber(anyElems.length)) {
                for (var i = 0; i < anyElems.length; ++i) {
                    (_a = elems[i].classList).remove.apply(_a, classes);
                }
            }
            else {
                (_b = anyElems.classList).remove.apply(_b, classes);
            }
        },
        // Returns true if the class was added, that is, is present afterwards.
        //
        toggleClass: function (elem, clazz) {
            if (!clazz)
                return;
            // @ifdef DEBUG
            dieIf(/#\. /.test(clazz), 'EdE5JFB8W2');
            // @endif
            if (!elem)
                return;
            var classes = elem.classList;
            var shallAdd = !classes.contains(clazz);
            if (shallAdd)
                classes.add(clazz);
            else
                classes.remove(clazz);
            return shallAdd;
        },
        parseHtml: function (htmlText) {
            var doc = document.implementation.createHTMLDocument(''); // empty dummy title
            doc.body.innerHTML = htmlText;
            return doc.body.children;
        },
        wrapParseHtml: function (htmlText) {
            return debiki2.$h.parseHtml('<div>' + htmlText + '</div>')[0];
        }
    };
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/ServerApi.ts  */ /*
 * Copyright (C) 2015 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="prelude.ts" />
/* This file is available in both server and client side JS.
 * The server's API needs to be available server side too so that
 * React components can construct <a href=...> links, e.g. to load more
 * forum topics, when React runs server side.
 */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var ServerApi;
    (function (ServerApi) {
        //------------------------------------------------------------------------------
        function makeForumTopicsQueryParams(orderOffset) {
            var params = '';
            if (orderOffset.sortOrder === 1 /* TopicSortOrder.BumpTime */) {
                params += 'sortOrder=ByBumpTime';
            }
            else if (orderOffset.sortOrder === 2 /* TopicSortOrder.CreatedAt */) {
                params += 'sortOrder=ByCreatedAt';
            }
            else if (orderOffset.sortOrder === 3 /* TopicSortOrder.ScoreAndBumpTime */) {
                params += 'sortOrder=ByScore';
                params += '&period=' + orderOffset.period;
                if (_.isNumber(orderOffset.score)) {
                    params += '&maxScore=' + orderOffset.score;
                }
                if (_.isNumber(orderOffset.scoreAlg)) {
                    params += '&scoreAlg=' + orderOffset.scoreAlg;
                }
            }
            if (orderOffset.olderThan) {
                params += '&olderThan=' + orderOffset.olderThan;
            }
            /* Perhaps add back sort-by-likes later?
            else if (orderOffset.sortOrder === TopicSortOrder.LikesAndBumpTime) {
              params += 'sortOrder=ByLikes';
              if (_.isNumber(orderOffset.numLikes) && orderOffset.olderThan) {
                params += '&num=' + orderOffset.numLikes;
                params += '&olderThan=' + orderOffset.bumpedAt;
              }
            } */
            if (orderOffset.topicFilter) {
                params += '&filter=' + orderOffset.topicFilter;
            }
            return params;
        }
        ServerApi.makeForumTopicsQueryParams = makeForumTopicsQueryParams;
        //------------------------------------------------------------------------------
    })(ServerApi = debiki2.ServerApi || (debiki2.ServerApi = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/editor-bundle-not-yet-loaded.ts  */ // This makes the TypeScript compiler happy when it bundles server side code.
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/utils/utils.ts  */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function putInLocalStorage(key, value) {
        throw new Error('putInLocalStorage called server side [DwE902D3]');
    }
    debiki2.putInLocalStorage = putInLocalStorage;
    function putInSessionStorage(key, value) {
        throw new Error('putInSessionStorage called server side [EdE2WKB7Z]');
    }
    debiki2.putInSessionStorage = putInSessionStorage;
    function getFromLocalStorage(key) {
        return null;
    }
    debiki2.getFromLocalStorage = getFromLocalStorage;
    function getFromSessionStorage(key) {
        return null;
    }
    debiki2.getFromSessionStorage = getFromSessionStorage;
    function removeFromLocalStorage(key) {
        throw new Error('removeFromLocalStorage called server side [DwE8PUMK2]');
    }
    debiki2.removeFromLocalStorage = removeFromLocalStorage;
    function removeFromSessionStorage(key) {
        throw new Error('removeFromSessionStorage called server side [TyE8PM26B]');
    }
    debiki2.removeFromSessionStorage = removeFromSessionStorage;
    function urlEncodeSearchQuery(query) {
        return '';
    }
    debiki2.urlEncodeSearchQuery = urlEncodeSearchQuery;
    function prettyMonthDayYear(when, includeCurrentYear) {
        throw new Error('prettyMonthDayYear called server side [TyE506RKT3]');
    }
    debiki2.prettyMonthDayYear = prettyMonthDayYear;
    function getPageScrollableRect() {
        throw new Error('getPageScrollableRect called server side [DwE2YPK03]');
    }
    debiki2.getPageScrollableRect = getPageScrollableRect;
    function getPageRect() {
        throw new Error('getPageRect called server side [DwE7UYKW2]');
    }
    debiki2.getPageRect = getPageRect;
    function reactGetRefRect(ref) {
        throw new Error('reactGetRefRect called server side [DwE7GDY20C]');
    }
    debiki2.reactGetRefRect = reactGetRefRect;
    function cloneRect(rect) {
        throw new Error('cloneRect called server side [DwE8PK0GW1]');
    }
    debiki2.cloneRect = cloneRect;
    function cloneEventTargetRect(event) {
        throw new Error('cloneEventTargetRect called server side [TyE4UKWQ2]');
    }
    debiki2.cloneEventTargetRect = cloneEventTargetRect;
    function event_isEnter(event) {
        throw new Error('event_isEnter called server side [DwE5KYF204]');
    }
    debiki2.event_isEnter = event_isEnter;
    function event_isCtrlEnter(event) {
        throw new Error('event_isCtrlEnter called server side [DwE3U83Y2]');
    }
    debiki2.event_isCtrlEnter = event_isCtrlEnter;
    function event_isShiftEnter(event) {
        throw new Error('event_isShiftEnter called server side [DwE5YU80]');
    }
    debiki2.event_isShiftEnter = event_isShiftEnter;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/links.ts  */ /*
 * Copyright (c) 2016-2018 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
// In this file: Constructs links, e.g. to a user's profile page.
//
// Usage example: MenuItemLink({ to: linkToPatsProfile(user) }, "View your profile")
/// <reference path="prelude.ts"/>
/// <reference path="utils/utils.ts"/>
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    // In embedded comments, need incl the Talkyard server url, otherwise links will [EMBCMTSORIG]
    // resolve to the embeddING server.
    function origin() {
        // Currently there's always exactly one store, and it always has embeddedOriginOrEmpty
        // set. When in the embedded editor, it's undefined (or maybe ''), [60MRKDJ56]
        // so get it from the main store instead.
        //
        // This needs to happen in a function, so gets reevaluated server side, where the same script
        // engine gets reused, for rendering pages at different sites, different origins.
        //
        // We cache the origin, so, if many Ty comments iframes,  [many_embcom_iframes]
        // so we won't need to access a different iframe all the time.
        // But if server side, don't cache — the origin will change when rendering pages
        // for different sites. (Also, then no need to cache, aren't any iframes.)
        //
        if (debiki2.notDef(cachedEmbOrig) || isServerSide()) {
            var mainStore = debiki2.win_getSessWinStore();
            cachedEmbOrig = mainStore.embeddedOriginOrEmpty; // [ONESTORE]
        }
        return cachedEmbOrig;
    }
    debiki2.origin = origin;
    var cachedEmbOrig;
    function linkToPageId(pageId) {
        return origin() + '/-' + pageId;
    }
    debiki2.linkToPageId = linkToPageId;
    function linkToPostNr(pageId, postNr) {
        return linkToPageId(pageId) + '#post-' + postNr;
    }
    debiki2.linkToPostNr = linkToPostNr;
    function linkToAdminPage() {
        return origin() + '/-/admin/';
    }
    debiki2.linkToAdminPage = linkToAdminPage;
    function linkToAdminPageLoginSettings() {
        return linkToAdminPage() + 'settings/login';
    }
    debiki2.linkToAdminPageLoginSettings = linkToAdminPageLoginSettings;
    function linkToAdminApi() {
        return linkToAdminPage() + 'api';
    }
    debiki2.linkToAdminApi = linkToAdminApi;
    function linkToAdminPageModerationSettings() {
        return linkToAdminPage() + 'settings/moderation';
    }
    debiki2.linkToAdminPageModerationSettings = linkToAdminPageModerationSettings;
    function linkToAdminPageEmbeddedSettings() {
        return linkToAdminPage() + 'settings/embedded-comments';
    }
    debiki2.linkToAdminPageEmbeddedSettings = linkToAdminPageEmbeddedSettings;
    function linkToAdminPageAdvancedSettings(differentHostname) {
        // This fn is called if we change the hostname, to jump to site settings at the new address.
        var maybeNewOrigin = differentHostname ? '//' + differentHostname : origin();
        return maybeNewOrigin + '/-/admin/settings/site';
    }
    debiki2.linkToAdminPageAdvancedSettings = linkToAdminPageAdvancedSettings;
    function linkToUserInAdminArea(user) {
        // If Myself specified, should be logged in and thus have username or id. (2UBASP5)
        // @ifdef DEBUG
        debiki2.dieIf(!user, 'TyE4KPWQT6');
        debiki2.dieIf(_.isObject(user) && !user.id, 'TyE4KPWQT5');
        // @endif
        var userId = _.isObject(user) ? user.id : user;
        return linkToStaffUsersPage() + 'id/' + userId;
    }
    debiki2.linkToUserInAdminArea = linkToUserInAdminArea;
    function linkToEmbeddedDiscussions() {
        // Later: link to the correct category, when emb comments topics have their own category.
        return origin();
    }
    debiki2.linkToEmbeddedDiscussions = linkToEmbeddedDiscussions;
    function linkToReviewPage() {
        return origin() + '/-/admin/review/all';
    }
    debiki2.linkToReviewPage = linkToReviewPage;
    function linkToStaffInvitePage() {
        return origin() + '/-/admin/users/invited';
    }
    debiki2.linkToStaffInvitePage = linkToStaffInvitePage;
    function linkToStaffUsersPage() {
        return origin() + '/-/admin/users/';
    }
    debiki2.linkToStaffUsersPage = linkToStaffUsersPage;
    function linkToGroups() {
        return origin() + '/-/groups/';
    }
    debiki2.linkToGroups = linkToGroups;
    // RENAME to linkToPatsProfile, and remove that fn
    function linkToUserProfilePage(who) {
        return origin() + pathTo(who);
    }
    debiki2.linkToUserProfilePage = linkToUserProfilePage;
    // RENAME to pathToProfile ?
    function pathTo(who) {
        // @ifdef DEBUG
        debiki2.dieIf(!who, 'TyE7UKWQT2');
        // @endif
        var rootPath;
        var idOrUsername;
        if (_.isObject(who)) {
            var patOrStore = who;
            var pat = patOrStore.me || patOrStore;
            // Guests have no username — instead, use their participant id.
            idOrUsername = pat.username || pat.id;
            // If Me specified, should be logged in and thus have username or id. (2UBASP5)
            // @ifdef DEBUG
            debiki2.dieIf(!idOrUsername, 'TyE7UKWQT3');
            // @endif
            rootPath = pat.isGroup ? GroupsRoot : UsersRoot;
        }
        else {
            idOrUsername = who;
            rootPath = UsersRoot; // will get redirected to GroupsRoot, if is group
        }
        if (_.isString(idOrUsername)) {
            idOrUsername = idOrUsername.toLowerCase();
        }
        return rootPath + idOrUsername;
    }
    debiki2.pathTo = pathTo;
    function linkToUsersNotfs(who) {
        return linkToUserProfilePage(who) + '/notifications';
    }
    debiki2.linkToUsersNotfs = linkToUsersNotfs;
    // CLEAN_UP  change to  who: Who  for alll user link fns -----
    function linkToMembersNotfPrefs(userIdOrUsername) {
        return linkToUserProfilePage(userIdOrUsername) + '/preferences/notifications';
    }
    debiki2.linkToMembersNotfPrefs = linkToMembersNotfPrefs;
    function linkToSendMessage(userIdOrUsername) {
        return linkToUserProfilePage(userIdOrUsername) + '/activity/posts' + FragActionHashComposeMessage;
    }
    debiki2.linkToSendMessage = linkToSendMessage;
    function linkToInvitesFromUser(userId) {
        return linkToUserProfilePage(userId) + '/invites';
    }
    debiki2.linkToInvitesFromUser = linkToInvitesFromUser;
    function linkToUsersEmailAddrs(userIdOrUsername) {
        return linkToUserProfilePage(userIdOrUsername) + '/preferences/account';
    }
    debiki2.linkToUsersEmailAddrs = linkToUsersEmailAddrs;
    function linkToMyDraftsEtc(store) {
        return linkToMyProfilePage(store) + '/drafts-etc';
    }
    debiki2.linkToMyDraftsEtc = linkToMyDraftsEtc;
    function linkToMyProfilePage(store) {
        return linkToPatsProfile(store);
    }
    debiki2.linkToMyProfilePage = linkToMyProfilePage;
    // REMOVE use linkToUserProfilePage instead, but renamed to this name:
    function linkToPatsProfile(patOrStore) {
        return linkToUserProfilePage(patOrStore);
    }
    debiki2.linkToPatsProfile = linkToPatsProfile;
    // --- / CLEAN_UP  --------------------------------------------
    /// COULD_OPTIMIZE, SMALLER_BUNDLE: Move to more-bundle?
    /// And many other link fns?
    ///
    function linkToDraftSource(draft, pageId, postNr) {
        var locator = draft.forWhat;
        // The current page id and post nr, might be different from draft.pageId and draft.postNr,
        // if the post was moved to another page. So better use pageId, it's up-to-date the correct
        // page id directly from the server.
        var maybeNewPageUrl = function () { return origin() + '/-' + (pageId || locator.pageId); };
        var theLink;
        switch (locator.draftType) {
            case 2 /* DraftType.Topic */:
                // Incl page url, so we'll go to the right place, also if the topic list is located at e.g.
                // /forum/  or  /sub-community/ instead of  /.
                theLink = origin() + '/-' + locator.pageId + FragActionHashComposeTopic;
                if (draft.topicType)
                    theLink += FragParamTopicType + draft.topicType;
                if (locator.categoryId)
                    theLink += FragParamCategoryId + locator.categoryId; // [305RKTJ33]
                break;
            case 3 /* DraftType.DirectMessage */:
                theLink = linkToSendMessage(locator.toUserId);
                break;
            case 5 /* DraftType.Reply */: // fall through
            case 6 /* DraftType.ProgressPost */:
                var hashFragAction = void 0;
                if (draft.postType === 3 /* PostType.ChatMessage */) {
                    // No fragment action needed for chat messages — then the chat message input box is shown
                    // by default, and will load the draft. Do incl a '#' hash though so + &draftNr=... works.
                    hashFragAction = '#';
                }
                else {
                    hashFragAction =
                        FragParamPostNr + locator.postNr +
                            FragActionAndReplyToPost +
                            FragParamReplyType + draft.postType;
                }
                theLink = maybeNewPageUrl() + hashFragAction;
                break;
            case 4 /* DraftType.Edit */:
                theLink = maybeNewPageUrl() + FragParamPostNr + postNr + FragActionAndEditPost;
                break;
            default:
                debiki2.die("Unknown draft type: ".concat(locator.draftType, " [TyE5AD2M4]"));
        }
        theLink += FragParamDraftNr + draft.draftNr;
        return theLink;
    }
    debiki2.linkToDraftSource = linkToDraftSource;
    function linkToNotificationSource(notf) {
        if (notf.pageId && notf.postNr) {
            return origin() + '/-' + notf.pageId + FragParamPostNr + notf.postNr;
        }
        else {
            debiki2.die("Unknown notification type [EsE5GUKW2]");
        }
    }
    debiki2.linkToNotificationSource = linkToNotificationSource;
    function linkToRedirToAboutCategoryPage(categoryId) {
        return origin() + '/-/redir-to-about?categoryId=' + categoryId;
    }
    debiki2.linkToRedirToAboutCategoryPage = linkToRedirToAboutCategoryPage;
    function linkToResetPassword() {
        return origin() + '/-/reset-password/specify-email';
    }
    debiki2.linkToResetPassword = linkToResetPassword;
    function linkToTermsOfUse() {
        return origin() + '/-/terms-of-use';
    }
    debiki2.linkToTermsOfUse = linkToTermsOfUse;
    function linkToAboutPage() {
        return origin() + '/about';
    }
    debiki2.linkToAboutPage = linkToAboutPage;
    function linkToUpload(origins, uploadsPath) {
        // If 1) there's a UGC CDN, always access uploaded pics via that. Or if 2) we're
        // in an embedded comments discussion, access the pics via the Talkyard server's
        // origin = the remote origin, otherwise the pic urls would resolve relative to
        // the *blog*'s address, but the blog doesn't host the pics (they'd be 404 Not Found).
        // Otherwise 3) no origin needed (empty string).
        var origin = origins.anyUgcOrigin || origins.anyCdnOrigin || origins.embeddedOriginOrEmpty;
        var uploadsUrlBasePath = '/-/u/';
        return origin + uploadsUrlBasePath + origins.pubSiteId + '/' + uploadsPath;
    }
    debiki2.linkToUpload = linkToUpload;
    function rememberBackUrl(url) {
        var theUrl = url || location.pathname + location.search + location.hash;
        // Skip API pages — those are the ones we're returning *from*.
        if (url && url.indexOf(ApiUrlPathPrefix) >= 0 || // not === 0, might be a hostname
            location.pathname.indexOf(ApiUrlPathPrefix) === 0) {
            return;
        }
        debiki2.putInSessionStorage('returnToSiteUrl', theUrl);
    }
    debiki2.rememberBackUrl = rememberBackUrl;
    /**
     * The page that the user viewed before s/he entered the admin or
     * about-user area, or to the homepage ('/') if there's no previous page.
     */
    function linkBackToSite() {
        return debiki2.getFromSessionStorage('returnToSiteUrl') || '/';
    }
    debiki2.linkBackToSite = linkBackToSite;
    function externalLinkToAdminHelp() {
        return 'https://www.talkyard.io/forum/latest/support';
    }
    debiki2.externalLinkToAdminHelp = externalLinkToAdminHelp;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/me-getters.ts  */ /*
 * Copyright (c) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="prelude.ts" />
/// <reference path="utils/utils.ts" />
/* This Flux store is perhaps a bit weird, not sure. I'll switch to Redux or
 * Flummox or Fluxxor or whatever later, and rewrite everything in a better way?
 * Also perhaps there should be more than one store, so events won't be broadcasted
 * to everyone all the time.
 */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    /// I can haz session id?
    ///
    function me_hasSid() {
        return !!(getSetCookie('dwCoSid') || // old
            getSetCookie('TyCoSid123') || // new, better  [btr_sid]
            debiki2.getMainWin().typs.weakSessionId); // if cookies don't work
    }
    debiki2.me_hasSid = me_hasSid;
    function me_isAuthenticated(me) {
        return me.id && me.id >= MinMemberId;
    }
    debiki2.me_isAuthenticated = me_isAuthenticated;
    function me_toBriefUser(me) {
        return {
            id: me.id,
            fullName: me.fullName,
            username: me.username,
            isAdmin: me.isAdmin,
            isModerator: me.isModerator,
            isGuest: me.id && me.id <= MaxGuestId,
            isEmailUnknown: undefined,
            avatarSmallHashPath: me.avatarSmallHashPath,
            pubTags: me.pubTags,
        };
    }
    debiki2.me_toBriefUser = me_toBriefUser;
    function me_hasVoted(me, postId, what) {
        var votes = me.myCurrentPageData.votes[postId] || [];
        return votes.indexOf(what) !== -1;
    }
    debiki2.me_hasVoted = me_hasVoted;
    /// Sync w Scala: Pat.mayMessage().
    ///
    function store_maySendDirectMessageTo(store, user) {
        var settings = store.settings;
        var me = store.me;
        if (settings.enableDirectMessages === false)
            return false;
        if (debiki2.user_isGone(user))
            return false;
        if (!debiki2.user_isMember(me) || !debiki2.user_isMember(user))
            return false;
        if (me.id === SystemUserId || user.id === SystemUserId)
            return false;
        if (me.id === user.id)
            return false;
        var myTrustLevel = debiki2.user_trustLevel(me);
        if (user.maySendMeDmsTrLv && myTrustLevel < user.maySendMeDmsTrLv)
            return false;
        if (debiki2.user_isStaffOrCoreMember(me))
            return true;
        return me.threatLevel <= 3 /* ThreatLevel.HopefullySafe */ || debiki2.isStaff(user); // [bad_pat_dms]
    }
    debiki2.store_maySendDirectMessageTo = store_maySendDirectMessageTo;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/more-bundle-not-yet-loaded.ts  */ // This makes the TypeScript compiler happy when it bundles server side code.
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/store-getters.ts  */ /*
 * Copyright (c) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="prelude.ts" />
/// <reference path="me-getters.ts" />
/// <reference path="utils/utils.ts" />
/* This Flux store is perhaps a bit weird, not sure. I'll switch to Redux or
 * Flummox or Fluxxor or whatever later, and rewrite everything in a better way?
 * Also perhaps there should be more than one store, so events won't be broadcasted
 * to everyone all the time.
 */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function pat_isAuthorOf(pat, post, patsById) {
        // @ifdef DEBUG
        debiki2.dieIf(!post, 'TyE2065MRTJ3');
        // @endif
        // If pat typeof Me, and not logged in, .id is undefined.
        if (!pat.id || !post)
            return false;
        // If pat used hens real account (or if pat is an anonym and the post author too).
        if (pat.id === post.authorId)
            return true;
        // Is pat used an anonym or [pseudonyms_later].
        var author = patsById[post.authorId];
        return !!author && author.anonForId === pat.id;
    }
    debiki2.pat_isAuthorOf = pat_isAuthorOf;
    function store_thisIsMyPage(store) {
        var page = store.currentPage;
        if (!page || !store.me.id)
            return false;
        var me = store.me;
        var bodyOrTitle = page.postsByNr[BodyNr] || page.postsByNr[TitleNr];
        // If !bodyOrTitle, we're on an auto page, e.g. a user profile page, or in the admin area.
        if (!bodyOrTitle)
            return false;
        return pat_isAuthorOf(me, bodyOrTitle, store.usersByIdBrief);
    }
    debiki2.store_thisIsMyPage = store_thisIsMyPage;
    function store_getAuthorOrMissing(store, post) {
        // If we're composing a new reply, without having logged in, then, there's not yet
        // any author id, when rendering the reply preview. [305KGWGH2]
        // So, at least for now, create a dummy user with the UnknownUserId — later,
        // maybe instead use a different id like CurrentUserNotLoggedInId?
        if (!post.authorId) {
            // @ifdef DEBUG
            debiki2.dieIf(!post.isPreview, 'TyE047KDJF2');
            // @endif
            return {
                id: UnknownUserId,
                fullName: t.You,
            };
        }
        // If replying using a new anonym, its future id is not yet konw:
        if (post.authorId === -4 /* Pats.FutureAnonId */) {
            return {
                id: -4 /* Pats.FutureAnonId */,
                // We don't know for sure what name sequence number this anonym will get,
                // so let's use '?' instead of A1 or A2 etc.
                fullName: "Anonym (you)",
                isAnon: true,
            };
        }
        var user = store_getUserOrMissing(store, post.authorId);
        if (user.isMissing) {
            debiki2.logError("Author " + post.authorId + " missing, page: " +
                store.currentPageId + ", post nr: " + post.nr + " [EsE6TK2R0]");
        }
        return user;
    }
    debiki2.store_getAuthorOrMissing = store_getAuthorOrMissing;
    function store_getUserOrMissing(store, userId, errorCode2) {
        var user = store.usersByIdBrief[userId];
        if (!user) {
            if (errorCode2) {
                debiki2.logError("Participant ".concat(userId, " missing, page: ").concat(store.currentPageId) +
                    " [TyE0PP-".concat(errorCode2, "]"));
            }
            return {
                id: userId,
                // The first char is shown in the avatar image [7ED8A2M]. Use a square, not a character,
                // so it'll be easier to debug-find-out that something is amiss.
                fullName: "\u25A1 missing, id: ".concat(userId, " [EsE4FK07_]"),
                isMissing: true,
            };
        }
        return user;
    }
    debiki2.store_getUserOrMissing = store_getUserOrMissing;
    function store_isUserOnline(store, userId) {
        return store.userIdsOnline && store.userIdsOnline[userId];
    }
    debiki2.store_isUserOnline = store_isUserOnline;
    function store_getPageMembersList(store) {
        var page = store.currentPage;
        return page.pageMemberIds.map(function (id) { return store_getUserOrMissing(store, id, 'EsE4UY2S'); });
    }
    debiki2.store_getPageMembersList = store_getPageMembersList;
    function store_getUsersOnThisPage(store) {
        var page = store.currentPage;
        var users = [];
        _.each(page.postsByNr, function (post) {
            if (_.every(users, function (u) { return u.id !== post.authorId; })) {
                var user = store_getAuthorOrMissing(store, post);
                users.push(user);
            }
        });
        return users;
    }
    debiki2.store_getUsersOnThisPage = store_getUsersOnThisPage;
    function store_getUsersOnline(store) {
        var users = [];
        _.forOwn(store.userIdsOnline, function (alwaysTrue, userIdString) {
            var userId = parseInt(userIdString);
            debiki2.dieIf(!alwaysTrue, 'TyE0ALWTRUE');
            var user = store_getUserOrMissing(store, userId, 'EsE5GK0Y');
            if (user)
                users.push(user);
        });
        return users;
    }
    debiki2.store_getUsersOnline = store_getUsersOnline;
    function store_getUsersHere(store) {
        var page = store.currentPage;
        var isChat = debiki2.page_isChat(page.pageRole);
        var users;
        var listMembers = isChat;
        var listUsersOnPage = !listMembers && debiki2.page_isDiscussion(page.pageRole);
        if (listMembers) {
            users = store_getPageMembersList(store);
        }
        else if (listUsersOnPage) {
            users = store_getUsersOnThisPage(store);
        }
        else {
            users = store_getUsersOnline(store);
        }
        var numOnline = 0;
        var iAmHere = false;
        _.each(users, function (user) {
            numOnline += store_isUserOnline(store, user.id) ? 1 : 0;
            iAmHere = iAmHere || user.id === store.me.id;
        });
        return {
            users: users,
            areChatChannelMembers: listMembers,
            areTopicContributors: listUsersOnPage,
            numOnline: numOnline,
            iAmHere: iAmHere,
            onlyMeOnline: iAmHere && numOnline === 1,
        };
    }
    debiki2.store_getUsersHere = store_getUsersHere;
    // -------
    // Also see:  store_isPageDeleted(store) and  page_isAncCatDeld(page),
    // maybe move those and these together?
    function store_canDeletePage(store) {
        var page = store.currentPage;
        // For now, don't let people delete sections = their forum — that just makes them confused.
        // Unless there are many sub communities — then let them delete all but one.
        // Sync w server side [who_del_pge]
        var someoneCanDelete = !page.pageDeletedAtMs && page.pageRole && (!debiki2.isSection(page.pageRole) || store_numSubCommunities(store) > 1);
        return someoneCanDelete && (debiki2.isStaff(store.me) || (debiki2.page_authorId(page) === store.me.id &&
            page.numRepliesVisible == 0));
    }
    debiki2.store_canDeletePage = store_canDeletePage;
    function store_canUndeletePage(store) {
        var page = store.currentPage;
        var pat = store.me;
        return !!page.pageDeletedAtMs && (debiki2.isStaff(pat) || debiki2.page_authorId(page) === pat.id);
        // later, change to:  page.deletedById === pat.id
    }
    debiki2.store_canUndeletePage = store_canUndeletePage;
    // -------
    //export function store_canSelectPosts(store: Store): boolean {
    //  const page: Page = store.currentPage;
    //  return isStaff(store.me) && !isSection(page.pageRole) &&
    //      page.pageRole !== PageRole.CustomHtmlPage;
    //}
    // Returns the current category, or if none, the default category.
    //
    // Don't use if on a PageType.Forum page, see dieIf below.
    //
    // Also see: store_findTheDefaultCategory(store) [GETACTDEFCAT]
    //
    function store_getCurrOrDefaultCat(store) {
        var currCatId = store.currentPage.categoryId;
        var currCat = _.find(store.currentCategories, function (c) { return c.id === currCatId; });
        // @ifdef DEBUG
        debiki2.dieIf(currCat && !currCat.parentId, "Don't use store_getCurrOrDefaultCat() when on a " +
            "PageType.Forum page \u2014 ForumComponent has its own this.props.activeCategory [TyEACTVCAT]");
        // @endif
        if (currCat)
            return currCat;
        // Apparently we're not currently placed in any particular category, or site section.
        // Happens for example if we're currently reading in a direct message topic
        // — direct messages aren't placed in any category or site section.
        // So, pick a default category, preferably from the current site section's category list,
        // or if no current site secton, then from all site sections and categories.
        // UX: The caller COULD show a dropdown? so the user notices there's a choice here? rather
        // than just picking the default category in a random site section. [4GWRQA28]
        var categories = store.currentCategories.length ? store.currentCategories : store.allCategoriesHacky;
        return _.find(categories, function (c) { return c.isDefaultCategory; });
    }
    debiki2.store_getCurrOrDefaultCat = store_getCurrOrDefaultCat;
    function store_numSubCommunities(store) {
        var forumPages = _.filter(store.siteSections, function (s) { return s.pageRole === 7 /* PageRole.Forum */; });
        return forumPages.length;
    }
    debiki2.store_numSubCommunities = store_numSubCommunities;
    function store_thereAreFormReplies(store) {
        var page = store.currentPage;
        return _.some(page.postsByNr, function (post) {
            return post.postType === 21 /* PostType.CompletedForm */;
        });
    }
    debiki2.store_thereAreFormReplies = store_thereAreFormReplies;
    function store_shallShowPageToolsButton(store) {
        return store_canPinPage(store) || store_canDeletePage(store) || store_canUndeletePage(store);
    }
    debiki2.store_shallShowPageToolsButton = store_shallShowPageToolsButton;
    function store_canPinPage(store) {
        var page = store.currentPage;
        return (page.categoryId
            && page.pageRole !== 4 /* PageRole.SpecialContent */
            && page.pageRole !== 5 /* PageRole.EmbeddedComments */
            && page.pageRole !== 6 /* PageRole.Blog */
            && page.pageRole !== 7 /* PageRole.Forum */
            && page.pageRole !== 17 /* PageRole.FormalMessage */
            && page.pageRole !== 19 /* PageRole.PrivateChat */
            && page.pageRole !== 16 /* PageRole.Critique */
            && page.pageRole !== 21 /* PageRole.UsabilityTesting */
            && !page.pageDeletedAtMs);
    }
    debiki2.store_canPinPage = store_canPinPage;
    // Use for responsive layout, when you need the page width (excluding watchbar and contextbar).
    // Avoid $().width() or elem.getBoundingClientRect() because they force a layout reflow,
    // which makes the initial rendering of the page take longer (about 30ms longer = 8% longer,
    // as of September 2016, core i7 laptop).
    //
    // Could use https://github.com/marcj/css-element-queries/, but store_getApproxPageWidth() is
    // probably faster (since doesn't need to ask the browser about anything, no layout
    // reflows needed), and simpler too (a lot less code, in total).
    //
    function store_getApproxPageWidth(store) {
        if (isServerSide() || store.isHydrating)
            return store.widthLayout === 3 /* WidthLayout.Medium */ ?
                ServerSideWindowWidthLaptop : ServerSideWindowWidthMobile;
        // outerWidth supposedly doesn't force a reflow (and I've verified in Chrome Dev Tools Timeline
        // that it doesn't). So use it instead of innerWidth — they might differ perhaps 10 pixels
        // because of browser window borders (or what else? There are no window scrollbars [6GKF0WZ]).
        var browserWidth = window.outerWidth;
        var width = browserWidth;
        if (store.isWatchbarOpen) {
            width -= WatchbarWidth;
        }
        if (store.isContextbarOpen) {
            var contextbarWidth = browserWidth * 0.25; // 0.25 is dupl in css [5RK9W2]
            if (contextbarWidth < ContextbarMinWidth) {
                contextbarWidth = ContextbarMinWidth;
            }
            width -= contextbarWidth;
        }
        // This is not the exact width in pixels, unless the browser window is in full screen so that
        // there are no browser window borders.
        return width;
    }
    debiki2.store_getApproxPageWidth = store_getApproxPageWidth;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/oop-methods.ts  */ /*
 * Copyright (c) 2016-2017 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="prelude.ts" />
/// <reference path="utils/utils.ts" />
/// <reference path="store-getters.ts" />
/* Object Oriented Programming methods, like so: className_methodName(instance, args...),
 * just like in C.
 *
 * Some classes/things have lots of methods and have been broken out to separate files,
 * e.g. store-methods.ts.
 */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function win_canUseCookies(win) {
        return (
        // This first test is if the server got no cookies, although it should have
        // gotten some cookie. Is this a bit fragile? Not sure if always works.
        !win.typs.xsrfTokenIfNoCookies &&
            // This is more reliable?
            win.typs.canUseCookies);
    }
    debiki2.win_canUseCookies = win_canUseCookies;
    function event_isCmdShiftClick(event) {
        // I think on Mac, the Command key is the same as the Meta = Windows key on PC?
        // "Ctrl" on Linux seems to behave in the same way as Command on Mac, so
        // include it too.
        return event.ctrlKey || event.metaKey || event.shiftKey;
    }
    debiki2.event_isCmdShiftClick = event_isCmdShiftClick;
    function event_canBeKeyTarget(event) {
        var _a;
        var anyTagName = (_a = event.target) === null || _a === void 0 ? void 0 : _a.tagName;
        return anyTagName === 'INPUT' || anyTagName === 'TEXTAREA' || anyTagName === 'SELECT';
    }
    debiki2.event_canBeKeyTarget = event_canBeKeyTarget;
    function urlPath_isToPageId(urlPath, pageId) {
        var idPathRegex = new RegExp("^.*/-".concat(pageId, "(/.*)?$")); // [2WBG49]
        return idPathRegex.test(urlPath);
    }
    debiki2.urlPath_isToPageId = urlPath_isToPageId;
    function urlPath_isToForum(urlPath, forumPath) {
        if (urlPath === forumPath)
            return true;
        // Look for forum-path + /active|/new|etc routes:
        var slash = forumPath[forumPath.length - 1] === '/' ? '' : '/';
        var latest = RoutePathLatest;
        var neew = RoutePathNew;
        var top = RoutePathTop;
        var cats = RoutePathCategories;
        var isToForumRegex = new RegExp("^".concat(forumPath).concat(slash, "(").concat(latest, "|").concat(neew, "|").concat(top, "|").concat(cats, ")(/.*)?$"));
        return isToForumRegex.test(urlPath);
    }
    debiki2.urlPath_isToForum = urlPath_isToForum;
    function autoPageType_isProfile(autoPageType) {
        return autoPageType === -1 /* AutoPageType.UserProfilePage */ ||
            autoPageType === -3 /* AutoPageType.AllGroupsPage */ ||
            autoPageType === -2 /* AutoPageType.GroupProfilePage */;
    }
    debiki2.autoPageType_isProfile = autoPageType_isProfile;
    function location_autoPageType(location) {
        var urlPath = location ? location.pathname : '';
        if (urlPath.indexOf(UsersRoot) === 0)
            return -1 /* AutoPageType.UserProfilePage */;
        if (urlPath === GroupsRoot)
            return -3 /* AutoPageType.AllGroupsPage */;
        if (urlPath.indexOf(GroupsRoot) === 0)
            return -2 /* AutoPageType.GroupProfilePage */;
        if (urlPath.indexOf(SearchRootPath) === 0)
            return -11 /* AutoPageType.SearchPage */;
        if (urlPath.indexOf(AdminRoot) === 0)
            return -22 /* AutoPageType.AdminArea */;
        // This'd be weird: (instead, ought to match one of the locations above)
        if (urlPath.indexOf(ApiUrlPathPrefix) === 0)
            return -99 /* AutoPageType.ApiSomewhere */;
        return 0 /* AutoPageType.NoAutoPage */;
    }
    debiki2.location_autoPageType = location_autoPageType;
    function topic_lastActivityAtMs(topic) {
        return topic.bumpedAtMs || topic.createdAtMs;
    }
    debiki2.topic_lastActivityAtMs = topic_lastActivityAtMs;
    /** Returns < 0, or > 0, or === 0, if t should be listed before t2, after t2, or if same position.
      */
    function topic_sortByLatestActivity(t, t2, categoryId) {
        if (t.pinWhere === 3 /* PinPageWhere.Globally */ && t2.pinWhere === 3 /* PinPageWhere.Globally */) {
            if (t.pinOrder !== t2.pinOrder) {
                return t.pinOrder - t2.pinOrder; // lowest first
            }
        }
        else if (t.pinWhere === 3 /* PinPageWhere.Globally */) {
            return -1;
        }
        else if (t2.pinWhere === 3 /* PinPageWhere.Globally */) {
            return +1;
        }
        var pin1stInCategory = t.pinWhere === 1 /* PinPageWhere.InCategory */ && t.categoryId === categoryId;
        var pin2ndInCategory = t2.pinWhere === 1 /* PinPageWhere.InCategory */ && t2.categoryId === categoryId;
        if (pin1stInCategory && pin2ndInCategory) {
            if (t.pinOrder !== t2.pinOrder) {
                return t.pinOrder - t2.pinOrder; // lowest first
            }
        }
        else if (pin1stInCategory) {
            return -1;
        }
        else if (pin2ndInCategory) {
            return +1;
        }
        return topic_lastActivityAtMs(t2) - topic_lastActivityAtMs(t);
    }
    debiki2.topic_sortByLatestActivity = topic_sortByLatestActivity;
    function siteStatusToString(siteStatus) {
        return SiteStatusStrings[siteStatus - 1];
    }
    debiki2.siteStatusToString = siteStatusToString;
    // Update-inserts a notf pref into a list of prefs.
    //
    function pageNotfPrefs_copyWithUpdatedPref(prefs, newNotfPref) {
        var index = prefs.findIndex(function (p) { return pageNotfPref_hasSameTarget(p, newNotfPref); });
        if (index === -1) {
            return __spreadArray(__spreadArray([], prefs, true), [newNotfPref], false);
        }
        else {
            var clone = __spreadArray([], prefs, true);
            clone[index] = newNotfPref;
            return clone;
        }
    }
    debiki2.pageNotfPrefs_copyWithUpdatedPref = pageNotfPrefs_copyWithUpdatedPref;
    function pageNotfPref_hasSameTarget(self, other) {
        return ((self.pageId && self.pageId === other.pageId) ||
            (self.pagesInCategoryId && self.pagesInCategoryId === other.pagesInCategoryId) ||
            (self.wholeSite && other.wholeSite));
    }
    /// Calculates what notifications the server would send — the logic here
    /// should match the logic in  NotificationGenerator.scala.
    ///
    function pageNotfPrefTarget_findEffPref(target, store, ownPrefs) {
        var _a, _b, _c;
        var prelResult = _findEffPref_skipInteractionPrefs(target, store, ownPrefs);
        var result = prelResult;
        // ----- Pages-replied-to notf prefs?
        // Tests:  notf-prefs-pages-replied-to.2br  TyTE2E402SM53
        // If this is about a page pat has replied to, then, set the notf level
        // to any  pagesPatRepliedTo notf pref  — but only if it's higher;
        // it'd be weird to send *fewer* notfs about a page, just because
        // pat showed interest in the page by replying to someone there.
        // BUG, harmless: This won't work if pat has replied, but deleted hens reply,
        // or if the page is really large so the server didn't include all replies.
        // But should work for any not-yet-approved replies: one can see one's
        // unapproved replies (and edit them).
        // The real fix would be to include a `MyPageData.iHaveReplied` field server side?
        // Like so: ownPrefs.myDataByPageId[target.pageId].iHaveReplied ?
        var anyReplyByPat = _.find((_a = store.pagesById[target.pageId]) === null || _a === void 0 ? void 0 : _a.postsByNr, // [On1]
        function (p) { return p.authorId === store.me.id; });
        // If pat has configured a notf level for this specific page,
        // then, that overrides any default notf pref for pages-replied-to.
        var hasNotfPrefDirectlyOnPage = !!((_b = result.myPref) === null || _b === void 0 ? void 0 : _b.pageId);
        var isNotfPrefsConfPage = !!target.pagesPatRepliedTo;
        if (anyReplyByPat && !hasNotfPrefDirectlyOnPage || isNotfPrefsConfPage) {
            var ownLvl = result.notfLevel;
            var inhLvl = (_c = result.inheritedNotfPref) === null || _c === void 0 ? void 0 : _c.notfLevel;
            var ownReplPref = _.find(ownPrefs.myCatsTagsSiteNotfPrefs, function (p) { return p.pagesPatRepliedTo; });
            var groupReplPref = maxPref(ownPrefs.groupsCatsTagsSiteNotfPrefs, function (p) { return p.pagesPatRepliedTo; });
            if (ownReplPref) {
                var otherOwnLvlIsHigherOrEq = ownLvl && ownLvl >= ownReplPref.notfLevel;
                // But show own pref, not group's pref, if same level — so one sees
                // in the UI that one's changes have effect:  use  >  not  >=
                var inhGroupLvlIsHigher = inhLvl && inhLvl > ownReplPref.notfLevel;
                if (otherOwnLvlIsHigherOrEq || inhGroupLvlIsHigher) {
                    // Noop, don't lower the notf level.
                }
                else {
                    // Pat has replied on the page, and has configured this notf level for
                    // has-replied-to pages:
                    result.myPref = ownReplPref;
                    result.notfLevel = ownReplPref.notfLevel;
                }
            }
            if (groupReplPref) {
                if (inhLvl && inhLvl >= groupReplPref.notfLevel) {
                    // Noop, don't lower the notf level.
                }
                else {
                    // Pat has replied on the page, and inherits this higher notf level
                    // from a group hen is in:
                    result.inheritedNotfPref = groupReplPref;
                }
            }
        }
        // Default fallback.
        result.inheritedNotfPref = result.inheritedNotfPref || {
            notfLevel: 3 /* PageNotfLevel.Normal */,
            memberId: 10 /* Groups.EveryoneId */,
        };
        return result;
    }
    debiki2.pageNotfPrefTarget_findEffPref = pageNotfPrefTarget_findEffPref;
    function _findEffPref_skipInteractionPrefs(target, store, ownPrefs) {
        // @ifdef DEBUG
        debiki2.dieIf(debiki2.oneIfDef(target.pageId) + debiki2.oneIfDef(target.pagesInCategoryId) +
            debiki2.oneIfDef(target.wholeSite) + debiki2.oneIfDef(target.pagesPatCreated) +
            debiki2.oneIfDef(target.pagesPatRepliedTo) !== 1, 'TyE6SKDW207');
        debiki2.dieIf(!ownPrefs.id, 'TyE305HD2');
        // @endif
        var result = __assign(__assign({}, target), { forMemberId: ownPrefs.id });
        // ----- Notf prefs on page?
        var myPageData = ownPrefs.myDataByPageId && ownPrefs.myDataByPageId[target.pageId];
        if (myPageData) {
            if (myPageData.myPageNotfPref) {
                result.myPref = myPageData.myPageNotfPref;
                result.notfLevel = myPageData.myPageNotfPref.notfLevel;
                // Continue below to find out if we're also inheriting a notf level
                // from a category or group. (If so, then it's not in use — since we've
                // now found a notf level explicitly for this page, on the line above).
            }
            var maxGroupsPref = maxPref(myPageData.groupsPageNotfPrefs);
            if (maxGroupsPref) {
                result.inheritedNotfPref = maxGroupsPref;
                return result;
            }
        }
        // ----- Notf prefs on category?
        // Check for notf prefs for a category, or,
        // if the target is a page, for the category it is in.
        var page = store.pagesById[target.pageId];
        var categoryId = page ? page.categoryId : target.pagesInCategoryId;
        if (categoryId) {
            var myPref = _.find(ownPrefs.myCatsTagsSiteNotfPrefs, function (p) { return p.pagesInCategoryId == categoryId; });
            var groupsPrefs = _.filter(ownPrefs.groupsCatsTagsSiteNotfPrefs, function (p) { return p.pagesInCategoryId == categoryId; });
            var maxGroupsPref = maxPref(groupsPrefs);
            if (target.pageId) {
                // When the target is a page, and we find a notf pref for a *category*, then
                // that pref is inherited, from one's own category notf pefs, or the category notf
                // prefs of a group one is in.
                result.inheritedNotfPref = myPref || maxGroupsPref;
                if (result.inheritedNotfPref)
                    return result;
            }
            else if (target.pagesInCategoryId) {
                // If, however, the target is itself a category, then, if we have our own notf level
                // for this category, it's not inherited — it's explicitly for this category.
                if (myPref) {
                    // @ifdef DEBUG
                    // Note that this is for *categories* so we didn't run the  "Notf prefs on page"
                    // if block higher up.
                    debiki2.dieIf(result.notfLevel, 'TyE305RDKM24');
                    // @endif
                    result.myPref = myPref;
                    result.notfLevel = myPref.notfLevel;
                }
                // Maybe inheriting from a group? (And has no effect, if myPref.notLevel
                // already defined.)
                if (maxGroupsPref) {
                    result.inheritedNotfPref = maxGroupsPref;
                    return result;
                }
            }
        }
        // Check prefs for the whole site.
        {
            var myPref = _.find(ownPrefs.myCatsTagsSiteNotfPrefs, function (p) { return p.wholeSite; });
            var groupsPrefs = _.filter(ownPrefs.groupsCatsTagsSiteNotfPrefs, function (p) { return p.wholeSite; });
            var maxGroupsPref = maxPref(groupsPrefs);
            if (!target.wholeSite) {
                result.inheritedNotfPref = myPref || maxGroupsPref;
                if (result.inheritedNotfPref)
                    return result;
            }
            else {
                if (myPref) {
                    result.myPref = myPref;
                    result.notfLevel = myPref.notfLevel;
                }
                if (maxGroupsPref) {
                    result.inheritedNotfPref = maxGroupsPref;
                    return result;
                }
            }
        }
        return result;
    }
    function maxPref(prefs, filterFn) {
        var maxPref;
        _.each(prefs, function (p) {
            var isWrong = filterFn && !filterFn(p);
            if (isWrong)
                return;
            // @ifdef DEBUG
            debiki2.dieIf(maxPref && !pageNotfPref_hasSameTarget(maxPref, p), 'TyE2ABKS0648');
            // @endif
            if (!maxPref || p.notfLevel > maxPref.notfLevel) {
                maxPref = p;
            }
        });
        return maxPref;
    }
    function notfPref_level(notfPref) {
        return notfPref.notfLevel ||
            notfPref.inheritedNotfPref && notfPref.inheritedNotfPref.notfLevel ||
            3 /* PageNotfLevel.Normal */;
    }
    debiki2.notfPref_level = notfPref_level;
    function notfPref_title(notfPref) {
        return notfLevel_title(notfPref_level(notfPref), !!notfPref.pageId);
    }
    debiki2.notfPref_title = notfPref_title;
    function notfLevel_title(level, isOnPage) {
        switch (level) {
            case 9 /* PageNotfLevel.EveryPostAllEdits */: return 'EveryPostAllEdits unimpl';
            case 8 /* PageNotfLevel.EveryPost */: return t.nl.EveryPost;
            case 7 /* PageNotfLevel.TopicProgress */: return 'TopicProgress unimpl';
            case 6 /* PageNotfLevel.TopicSolved */: return 'TopicSolved unimpl';
            case 5 /* PageNotfLevel.NewTopics */: // [2ABK05R8]
                if (isOnPage)
                    return t.nl.Normal;
                else
                    return t.nl.NewTopics;
            case 4 /* PageNotfLevel.Tracking */: return t.nl.Tracking;
            case 3 /* PageNotfLevel.Normal */: return t.nl.Normal;
            case 2 /* PageNotfLevel.Hushed */: return t.nl.Hushed;
            case 1 /* PageNotfLevel.Muted */: return t.nl.Muted;
        }
        // @ifdef DEBUG
        debiki2.die('TyE2AKS402');
        // @endif
        return '?';
    }
    debiki2.notfLevel_title = notfLevel_title;
    function notfLevel_descr(notfLevel, effPref, ppsById) {
        var descr;
        switch (notfLevel) {
            case 9 /* PageNotfLevel.EveryPostAllEdits */:
                descr = 'EveryPostAllEdits unimpl';
                break;
            case 8 /* PageNotfLevel.EveryPost */:
                if (effPref.pageId)
                    descr = t.nl.EveryPostInTopic;
                else if (effPref.pagesInCategoryId)
                    descr = t.nl.EveryPostInCat;
                //if (???) return t.nl.EveryPostInTopicsWithTag;
                else if (effPref.wholeSite)
                    descr = t.nl.EveryPostWholeSite;
                else if (effPref.pagesPatCreated)
                    descr = "You'll be notified of replies on pages you've created."; // I18N
                else if (effPref.pagesPatRepliedTo)
                    descr = "You'll be notified of replies on pages where you've replied yourself."; // I18N
                break;
            case 7 /* PageNotfLevel.TopicProgress */:
                descr = 'TopicProgress unimpl';
                break;
            case 6 /* PageNotfLevel.TopicSolved */:
                descr = 'TopicSolved unimpl';
                break;
            case 5 /* PageNotfLevel.NewTopics */:
                if (effPref.pagesInCategoryId)
                    descr = t.nl.NewTopicsInCat;
                //else if (effPref.forPagesWithTagId) descr = t.nl.NewTopicsWithTag;
                else if (effPref.wholeSite)
                    descr = t.nl.NewTopicsWholeSite;
                else {
                    // Inside a topic, watching New Topics works as Normal, because [2ABK05R8]
                    // topic already created.
                    descr = t.nl.NormalDescr;
                }
                // @ifdef DEBUG
                debiki2.dieIf(effPref.pageId, 'TyE7WK20R');
                // @endif
                break;
            case 4 /* PageNotfLevel.Tracking */:
                descr = t.nl.Tracking;
                break;
            case 3 /* PageNotfLevel.Normal */:
                descr = t.nl.NormalDescr;
                break;
            case 2 /* PageNotfLevel.Hushed */:
                descr = t.nl.HushedDescr;
                break;
            case 1 /* PageNotfLevel.Muted */:
                descr = t.nl.MutedTopic;
                break;
        }
        // @ifdef DEBUG
        debiki2.dieIf(!descr, 'TyE2AKS403');
        // @endif
        var explainWhyInherited;
        if (!effPref.inheritedNotfPref) {
            // This preference is not inherited from a group or ancestor category; nothing to explain.
        }
        else {
            // Treat watching-new-topics as Normal, when on a topic that exists already, [4WKBG0268]
            // because it makes no sense to use the NewTopics text, when we're in a topic
            // that exists already.
            var useNormalLevel = 
            // If this is for a page (not a category or the whole site)...
            effPref.pageId &&
                // and we're creating text for the Normal level...
                notfLevel === 3 /* PageNotfLevel.Normal */ &&
                // and inheriting PageNotfLevel.NewTopics — then use the Normal level text.
                effPref.inheritedNotfPref.notfLevel === 5 /* PageNotfLevel.NewTopics */;
            if (effPref.inheritedNotfPref.notfLevel !== notfLevel && !useNormalLevel) {
                // A notf level is inherited, but not this notf level.
            }
            else {
                // This notf level is inherited from a parent category, or from a group one is in.
                // Add a bit text that explains this — so people understand why this setting
                // is in use, or has the text "Default", although they didn't do anything themselves.
                explainWhyInherited = r.div({ className: 's_NotfPrefDD_WhyInh' }, makeWhyNotfLvlInheritedExpl(effPref, ppsById));
            }
        }
        return rFragment({}, descr, explainWhyInherited);
    }
    debiki2.notfLevel_descr = notfLevel_descr;
    function makeWhyNotfLvlInheritedExpl(effPref, ppsById) {
        var inhPref = effPref.inheritedNotfPref;
        var inhFromMember = ppsById[inhPref.memberId];
        var isInherited = !effPref.notfLevel;
        var inheritedOrDefault = isInherited ? "Inherited" : "The default";
        var fromUserName = effPref.forMemberId === inhPref.memberId ? '' :
            ", from group @" + (inhFromMember && inhFromMember.username || "#".concat(inhPref.memberId));
        var forWholeSite = inhPref.wholeSite ? ", whole site setting" : '';
        var onCategory = inhPref.pagesInCategoryId ? ", category #" + inhPref.pagesInCategoryId : '';
        return inheritedOrDefault + fromUserName + forWholeSite + onCategory;
    }
    debiki2.makeWhyNotfLvlInheritedExpl = makeWhyNotfLvlInheritedExpl;
    function emailPref_title(emailNotfPref) {
        switch (emailNotfPref) {
            case 5 /* EmailNotfPrefs.ReceiveAlways */: return "Always";
            case 4 /* EmailNotfPrefs.Unspecified */: // the default is then Receive
            case 1 /* EmailNotfPrefs.Receive */: return "About unread";
            case 6 /* EmailNotfPrefs.DirectMessagesFromStaff */: return "Direct messages from staff";
            case 2 /* EmailNotfPrefs.DontReceive */: return "No";
        }
        // @ifdef DEBUG
        debiki2.die("Bad email notf pref: ".concat(emailNotfPref, " [TyE2AKS6RMY1]"));
        // @endif
        return "TyE7G5MA24";
    }
    debiki2.emailPref_title = emailPref_title;
    function emailPref_descr(emailNotfPref) {
        switch (emailNotfPref) {
            case 5 /* EmailNotfPrefs.ReceiveAlways */:
                return "Get emailed about mentions and replies etc, " +
                    "also if you're here and have seen them already";
            case 4 /* EmailNotfPrefs.Unspecified */: // the default is then Receive
            case 1 /* EmailNotfPrefs.Receive */:
                return "Get emailed about mentions and replies etc " +
                    "that you haven't read";
            case 6 /* EmailNotfPrefs.DirectMessagesFromStaff */:
                // Don't need to repeat "to you" here again.
                return "Only get emailed about direct messages from staff";
            case 2 /* EmailNotfPrefs.DontReceive */:
                return "Don't send emails to you (only about account security)";
        }
        // @ifdef DEBUG
        debiki2.die('TyE2AKS6RMY2');
        // @endif
        return 'TyE7B5AMF4';
    }
    debiki2.emailPref_descr = emailPref_descr;
    function post_isReply(post) {
        return post.nr >= FirstReplyNr &&
            post.postType !== 31 /* PostType.MetaMessage */ &&
            post.postType !== 21 /* PostType.CompletedForm */;
    }
    debiki2.post_isReply = post_isReply;
    function post_isWiki(post) {
        // Skip PostType.StaffWiki, using the permission system instead. [NOSTAFFWIKI]
        return post.postType === 12 /* PostType.CommunityWiki */;
    }
    debiki2.post_isWiki = post_isWiki;
    function post_isDeleted(post) {
        return post.isPostDeleted || post.isTreeDeleted;
    }
    debiki2.post_isDeleted = post_isDeleted;
    function post_isCollapsed(post) {
        return post.isTreeCollapsed || post.isPostCollapsed;
    }
    debiki2.post_isCollapsed = post_isCollapsed;
    function post_isDeletedOrCollapsed(post) {
        return post_isDeleted(post) || post_isCollapsed(post);
    }
    debiki2.post_isDeletedOrCollapsed = post_isDeletedOrCollapsed;
    function post_shallRenderAsDeleted(post) {
        return post_isDeleted(post) && _.isEmpty(post.sanitizedHtml);
    }
    debiki2.post_shallRenderAsDeleted = post_shallRenderAsDeleted;
    function post_shallRenderAsHidden(post) {
        return post.isBodyHidden && _.isEmpty(post.sanitizedHtml);
    }
    debiki2.post_shallRenderAsHidden = post_shallRenderAsHidden;
    function post_isPubVisible(post) {
        // && !== CompletedForm  fix server side too if enabling forms
        return !post.isBodyHidden && post.approvedAtMs && !post_isDeleted(post);
    }
    debiki2.post_isPubVisible = post_isPubVisible;
    // Me
    //----------------------------------
    /// Me2 has precedence over me1, and me3 over me2.
    ///
    function me_merge(me1, me2, me3) {
        var me = me_mergeImpl(me1, me2 || {});
        if (me3) {
            me = me_mergeImpl(me, me3);
        }
        return me;
    }
    debiki2.me_merge = me_merge;
    function me_mergeImpl(me1, me2) {
        var me = __assign(__assign({}, me1), me2);
        me.myDataByPageId = __assign(__assign({}, me1.myDataByPageId), me2.myDataByPageId);
        me.marksByPostId = __assign(__assign({}, me1.marksByPostId), me2.marksByPostId);
        return me;
    }
    function me_isUser(me) {
        return (!debiki2.isGuest(me) && !me.isGroup &&
            // Don't need both these? Oh well.
            me.isAuthenticated && debiki2.me_isAuthenticated(me));
    }
    debiki2.me_isUser = me_isUser;
    function me_hasRead(me, post) {
        // If not logged in, we have no idea.
        debiki2.dieIf(!me.isLoggedIn, 'EdE2WKA0');
        // Title likely already read, before clicking some link to the page.
        if (post.nr === TitleNr)
            return true;
        var myPageData = me.myCurrentPageData;
        return myPageData.postNrsAutoReadLongAgo.indexOf(post.nr) >= 0 ||
            myPageData.postNrsAutoReadNow.indexOf(post.nr) >= 0;
    }
    debiki2.me_hasRead = me_hasRead;
    function me_copyWithNewPageData(me, newPageData) {
        var newCurrentPageData = newPageData.pageId === me.myCurrentPageData.pageId
            ? newPageData // then the new data, is for the current page, so point to the new data
            : me.myCurrentPageData; // the new data, is *not* for the current page, so don't change
        var newDataByPageId = __assign({}, me.myDataByPageId);
        newDataByPageId[newPageData.pageId] = newPageData;
        var newMe = __assign(__assign({}, me), { myCurrentPageData: newCurrentPageData, myDataByPageId: newDataByPageId });
        return newMe;
    }
    debiki2.me_copyWithNewPageData = me_copyWithNewPageData;
    function me_uiPrefs(me) {
        return debiki2.shallowMergeFirstItemLast(me.uiPrefsOwnFirst);
    }
    debiki2.me_uiPrefs = me_uiPrefs;
    /// Oops should use at more places. [me_isPageMember]
    ///
    function me_isPageMember(me, page) {
        if (page.pageMemberIds.indexOf(me.id) >= 0)
            return true;
        // Has any group one is in, been added to the page?
        for (var i = 0; i < me.myGroupIds.length; ++i) {
            var groupId = me.myGroupIds[i];
            if (page.pageMemberIds.indexOf(groupId) >= 0)
                return true;
        }
        return false;
    }
    // Groups
    //----------------------------------
    // Members
    //----------------------------------
    // RENAME to pat_isBuiltIn
    function member_isBuiltIn(member) {
        return (MaxGuestId < member.id && member.id < 100 /* Pats.MinAuthnMemberId */
            // The Unknown user is both a guest and built-in.
            || member.id === UnknownUserId);
    }
    debiki2.member_isBuiltIn = member_isBuiltIn;
    // Users
    //----------------------------------
    // Dupl code [disp_name]
    function pat_name(pat) {
        // Or prioritize username? Did, in the annon posts branch:
        // if (pat.username) return '@' + pat.username;
        return pat.fullName || (pat.username ? '@' + pat.username : "_no_name_");
    }
    debiki2.pat_name = pat_name;
    // Returns 0 if not snoozing or time's up.
    //
    function pp_snoozeLeftMs(me) {
        if (!me.snoozeUntilMins)
            return 0;
        var msLeft = me.snoozeUntilMins * 60 * 1000 - debiki2.getNowMs();
        return msLeft > 0 ? msLeft : 0;
    }
    debiki2.pp_snoozeLeftMs = pp_snoozeLeftMs;
    function user_isSuspended(user, nowMs) {
        return user.suspendedTillEpoch && ((user.suspendedTillEpoch * 1000) > nowMs);
    }
    debiki2.user_isSuspended = user_isSuspended;
    function user_threatLevel(user) {
        return user.lockedThreatLevel || user.threatLevel;
    }
    debiki2.user_threatLevel = user_threatLevel;
    function user_trustLevel(user) {
        return user.effectiveTrustLevel || user.lockedTrustLevel || user.trustLevel;
    }
    debiki2.user_trustLevel = user_trustLevel;
    function user_isTrustMinNotThreat(user, trustLevel) {
        if (debiki2.isStaff(user))
            return true;
        // UX COULD check threat level too, that's done server side, not doing here can result in [5WKABY0]
        // annoying error messages (security though = server side).  Add a Myself.isThreat field?
        return user_trustLevel(user) >= trustLevel;
    }
    debiki2.user_isTrustMinNotThreat = user_isTrustMinNotThreat;
    /// If a bit advanced functionality should be shown to this user (or group members).
    ///
    function pat_isBitAdv(pat) {
        // For now, let's assume people who have become full members, are "advanced".
        // Later, there could be a checkbox in one's user settings. [tech_level]
        return user_trustLevel(pat) >= 3 /* TrustLevel.FullMember */ || debiki2.isStaff(pat);
    }
    debiki2.pat_isBitAdv = pat_isBitAdv;
    /// If more advanced functionality should be shown.
    ///
    function pat_isMoreAdv(pat) {
        // For now.
        return user_trustLevel(pat) >= 4 /* TrustLevel.Trusted */ || debiki2.isStaff(pat);
    }
    debiki2.pat_isMoreAdv = pat_isMoreAdv;
    function user_isGone(user) {
        // These two casts work for ParticipantAnyDetails too.
        var membInclDetails = user;
        var briefUser = user;
        return briefUser.isGone || !!membInclDetails.deactivatedAt || !!membInclDetails.deletedAt;
    }
    debiki2.user_isGone = user_isGone;
    function pat_mayEditTags(me, ps) {
        var isPostDeleted = ps.forPost && post_isDeleted(ps.forPost);
        return !ps.store.isEmbedded &&
            ps.store.settings.enableTags !== false &&
            !isPostDeleted &&
            debiki2.isStaff(me); // for now. Later: user_isStaffOrCoreMember [missing_tags_feats]
        // for page tags, but still isStaff() for pat tags?
        // + || isOwnPost for own post?
    }
    debiki2.pat_mayEditTags = pat_mayEditTags;
    // Settings
    //----------------------------------
    /// CLEAN_UP, try to remove.
    /// Needed (only?) because SettingsVisibleClientSide uses old legacy
    /// field names: `discPostSortOrder` and `discPostNesting`, will rename.
    /// And uses different field names for embedded comments pages,
    /// will change that too, and instead add per page type (& cat)
    /// sort order?  [per_page_type_props]
    ///
    function discProps_pluckFrom(source) {
        // @ifdef DEBUG
        debiki2.dieIf(!source, "No 'source' [TyE70W3MR8M]");
        // @endif
        // Don't set any field to undefined. [unintened_undefined_bug]
        var result = {};
        for (var _i = 0, DiscPropNames_1 = DiscPropNames; _i < DiscPropNames_1.length; _i++) {
            var prop = DiscPropNames_1[_i];
            if (source[prop])
                result[prop] = source[prop];
        }
        return result;
    }
    debiki2.discProps_pluckFrom = discProps_pluckFrom;
    /// Sync w Scala, AllSettings.discPropsFor(..)  [per_page_type_props]
    ///
    function discProps_pluckFromSettings(settings, pageType) {
        // @ifdef DEBUG
        debiki2.dieIf(!settings, "No 'settings' [TyE70W3MR8M]");
        // @endif
        // Don't set any field to undefined. [unintened_undefined_bug]
        var result = {};
        // Some settings have the same names as the cat props. They will get moved
        // to the root category instead? Or to  pat_node_multi_rels_t?  [add_nodes_t].
        // But for now: (those with different names, won't be found in this loop —
        // they're handled below instead)
        for (var _i = 0, DiscPropNames_2 = DiscPropNames; _i < DiscPropNames_2.length; _i++) {
            var prop = DiscPropNames_2[_i];
            if (settings[prop])
                result[prop] = settings[prop];
        }
        // Other setings have different names than the corresponding cat props.
        // They should get renamed (to the same names) and moved to the root cat
        // or to  pat_node_multi_rels_t.  But for now, we have to:  [per_page_type_props]
        var comtOrder = pageType === 5 /* PageRole.EmbeddedComments */ ?
            settings.embComSortOrder : settings.discPostSortOrder;
        var comtNesting = pageType === 5 /* PageRole.EmbeddedComments */ ?
            settings.embComNesting : settings.discPostNesting;
        if (comtOrder)
            result.comtOrder = comtOrder;
        if (comtNesting)
            result.comtNesting = comtNesting;
        return result;
    }
    debiki2.discProps_pluckFromSettings = discProps_pluckFromSettings;
    function settings_showCategories(settings, me) {
        // Later: by default, do as 'settings' say, but let user preferences override. [8WK4SD7]
        return settings.showCategories !== false;
    }
    debiki2.settings_showCategories = settings_showCategories;
    function settings_showFilterButton(settings, me) {
        if (settings.enableForum === false)
            return false;
        // Later: by default, do as 'settings' say, but let user preferences override. [8WK4SD7]
        return debiki2.isStaff(me) || settings.showTopicFilterButton !== false;
    }
    debiki2.settings_showFilterButton = settings_showFilterButton;
    function settings_showTopicTypes(settings, me) {
        if (settings.enableForum === false)
            return false;
        // Later: by default, do as 'settings' say, but let user preferences override. [8WK4SD7]
        return settings.showTopicTypes !== false;
    }
    debiki2.settings_showTopicTypes = settings_showTopicTypes;
    function settings_selectTopicType(settings, me) {
        if (settings.enableForum === false)
            return false;
        // Later: by default, do as 'settings' say, but let user preferences override. [8WK4SD7]
        return debiki2.isStaff(me) || settings.selectTopicType !== false;
    }
    debiki2.settings_selectTopicType = settings_selectTopicType;
    // Site
    //----------------------------------
    function store_isFeatFlagOn(store, featureFlag) {
        var offFlag = '0' + featureFlag;
        var isOn = _.includes(store.siteFeatureFlags, featureFlag) ||
            _.includes(store.serverFeatureFlags, featureFlag);
        var isOff = _.includes(store.siteFeatureFlags, offFlag) ||
            _.includes(store.serverFeatureFlags, offFlag);
        return isOn && !isOff; // [ff_on_off]
    }
    debiki2.store_isFeatFlagOn = store_isFeatFlagOn;
    // Store
    //----------------------------------
    function store_curPage(store) {
        return !store.currentPage || _.isEmpty(store.curPageTweaks) ? store.currentPage : __assign(__assign({}, store.currentPage), store.curPageTweaks);
    }
    debiki2.store_curPage = store_curPage;
    function store_mainSiteSection(store) {
        // Currently there's always just one sub site, namely the forum.
        // Edit: Actually, there're some old sites, with many sub sites — they
        // got created, before the sub site feature got disabled. In such a case,
        // use the sub site with the lowest root category id, because that one was
        // created by the server and should be the real one / the one actually in use.
        var siteSections = store.siteSections;
        var mainSiteSection;
        _.each(siteSections, function (ss) {
            if (!mainSiteSection || mainSiteSection.rootCategoryId > ss.rootCategoryId) {
                mainSiteSection = ss;
            }
        });
        return mainSiteSection;
    }
    debiki2.store_mainSiteSection = store_mainSiteSection;
    function isNoPage(pageId) {
        return !pageId || pageId === EmptyPageId;
    }
    debiki2.isNoPage = isNoPage;
    // RENAME  to  page_isSelfOrAncCatDeld(page: Page)  ?
    function store_isPageDeleted(store) {
        var page = store.currentPage;
        return !!page.pageDeletedAtMs || page_isAncCatDeld(page);
    }
    debiki2.store_isPageDeleted = store_isPageDeleted;
    function page_isAncCatDeld(page) {
        return _.some(page.ancestorsRootFirst, function (a) { return a.isDeleted; });
    }
    debiki2.page_isAncCatDeld = page_isAncCatDeld;
    function store_mayICreateTopics(store, category) {
        var settings = store.settings;
        if (settings.enableForum === false || !category)
            return false;
        var may;
        var currentCategory = category;
        var me = store.me;
        me.permsOnPages.forEach(function (p) {
            if (p.onWholeSite) {
                if (debiki2.isDefined2(p.mayCreatePage)) {
                    may = p.mayCreatePage;
                }
            }
        });
        if (category.isForumItself) {
            // May we create topics in *any* category in the whole forum?
            may = !!store_findCatsWhereIMayCreateTopics(store).length;
        }
        else {
            // May we create topics in this specific category?
            // @ifdef DEBUG
            // Start with root cat.
            // Test a bit, before enabling sub cats for everyone. [0GMK2WAL] [subcats]
            // Should it be possible for admins to grant permissions on a sub cat,
            // also if those same permissions are missing from the base cat?
            // (Currently can revoke, but not grant, UX wise.)
            var ancCatsRootFirst = store_ancestorCatsCurLast(store, category.id);
            var _loop_1 = function (cat) {
                me.permsOnPages.forEach(function (p) {
                    if (p.onCategoryId === cat.id) {
                        if (debiki2.isDef(p.mayCreatePage)) {
                            // TESTS_MISSING: Disallow mayCreatePage in sub cat.
                            // TESTS_MISSING: Member creates apage from sub cat that was just moved
                            // to staff-only cat, by admin — but the member hadn't refreshed the page.
                            may = p.mayCreatePage;
                        }
                    }
                });
            };
            for (var _i = 0, ancCatsRootFirst_1 = ancCatsRootFirst; _i < ancCatsRootFirst_1.length; _i++) {
                var cat = ancCatsRootFirst_1[_i];
                _loop_1(cat);
            }
            // @endif
            // Old, before sub cats:  [subcats]
            while (currentCategory) {
                me.permsOnPages.forEach(function (p) {
                    if (p.onCategoryId === currentCategory.id) {
                        if (debiki2.isDefined2(p.mayCreatePage)) {
                            may = p.mayCreatePage;
                        }
                    }
                });
                currentCategory = _.find(store.currentCategories, function (c) { return c.id === currentCategory.parentId; });
            }
        }
        return may;
    }
    debiki2.store_mayICreateTopics = store_mayICreateTopics;
    /// Sync w Scala: Authz.mayPostReply()
    /// Some dupl code! (8FUZWY02Q60)
    ///
    function store_mayIReply(store, post) {
        var page = store.currentPage;
        // Each reply on a mind map page is a mind map node. Thus, by replying, one modifies the mind map
        // itself. So, one needs to be allowed to edit the *page*, to add (= reply) mind-map-posts. [7KUE20]
        if (page.pageRole === 11 /* PageRole.MindMap */)
            return store_mayIEditPage(store, post);
        var may;
        var ancestorCategories = page.ancestorsRootFirst;
        var me = store.me;
        // It's ok to reply to deleted comments? E.g. if you had in mind to write
        // "The above comment was deleted because: ..." but you happened to delete it first.
        if (debiki2.isStaff(me))
            return true;
        // Later: [8PA2WFM] Perhaps let staff reply, although not approved. So staff can say
        // "If you please remove <sth that violates the site guidelines>, I'll approve the comment".
        // Or "I won't approve this comment. It's off-topic because ...".
        if (post_isDeletedOrCollapsed(post) || !post.isApproved)
            return false;
        // ----- Page member?
        if (me_isPageMember(me, page))
            may = true;
        // ----- Whole site perms?
        me.permsOnPages.forEach(function (p) {
            if (p.onWholeSite) {
                if (debiki2.isDefined2(p.mayPostComment)) {
                    may = p.mayPostComment;
                }
            }
        });
        var _loop_2 = function (i) {
            var ancestor = ancestorCategories[i];
            me.permsOnPages.forEach(function (p) {
                if (p.onCategoryId === ancestor.categoryId) {
                    if (debiki2.isDefined2(p.mayPostComment)) {
                        may = p.mayPostComment;
                    }
                }
            });
        };
        // ----- Category perms?
        // Here we loop through the cats in the correct order though, [0GMK2WAL].
        for (var i = 0; i < ancestorCategories.length; ++i) {
            _loop_2(i);
        }
        return may;
    }
    debiki2.store_mayIReply = store_mayIReply;
    function store_mayIEditPage(store, post) {
        return store_mayIEditImpl(store, post, true);
    }
    debiki2.store_mayIEditPage = store_mayIEditPage;
    function store_mayIEditPost(store, post) {
        return store_mayIEditImpl(store, post, false);
    }
    debiki2.store_mayIEditPost = store_mayIEditPost;
    // Some dupl code! (8FUZWY02Q60)
    function store_mayIEditImpl(store, post, isEditPage) {
        if (post_isDeletedOrCollapsed(post))
            return false;
        var me = store.me;
        if (me.isAdmin)
            return true;
        var page = store.currentPage;
        var isMindMap = page.pageRole === 11 /* PageRole.MindMap */;
        var isWiki = post_isWiki(post);
        var isOwnPage = debiki2.store_thisIsMyPage(store);
        var isOwnPost = debiki2.pat_isAuthorOf(me, post, store.usersByIdBrief);
        var isOwn = isEditPage ? isOwnPage :
            isOwnPost ||
                // In one's own mind map, one may edit all nodes, even if posted by others. [0JUK2WA5]
                post.isApproved && isMindMap && isOwnPage;
        // Not present in server side checks. And not needed?
        //if (!post.isApproved && !may)
        //  return false;
        var may;
        // Direct messages aren't placed in any category and thus aren't affected by permissions.
        // Need this extra 'if':
        if (me_isPageMember(me, page) && isOwn)
            may = true;
        // Least specific: Whole site permissions. Can be overridden per category and
        // sub cats, in the ancestor categories loop below.
        me.permsOnPages.forEach(function (p) {
            if (p.onWholeSite) {
                // --- What!? Can't all this just be:
                var simplerMay = p.mayEditPage ||
                    p.mayEditWiki && isWiki ||
                    p.mayEditOwn && isOwn;
                // And:
                // may = may || simplerMay
                // Hmm, but below, if !mayEditOwn, then, different. But why would
                // anyone ever config such permissions?
                // -----------------
                if (debiki2.isDefined2(p.mayEditPage)) {
                    may = p.mayEditPage;
                }
                if (debiki2.isDefined2(p.mayEditWiki) && isWiki) {
                    may = may || p.mayEditWiki;
                }
                if (debiki2.isDefined2(p.mayEditOwn) && isOwn) {
                    may = p.mayEditOwn;
                }
                // @ifdef DEBUG
                debiki2.dieIf(simplerMay !== may, 'TyE35MRKTDJ35');
                // @endif
                void 0;
            }
        });
        // Here we loop through ancestor cateories, from root cat to sub cat. [0GMK2WAL].
        var ancestorCategories = page.ancestorsRootFirst;
        var _loop_3 = function (i) {
            var ancestor = ancestorCategories[i];
            me.permsOnPages.forEach(function (p) {
                if (p.onCategoryId === ancestor.categoryId) {
                    var mayThisCat = void 0;
                    // This can change `may` from true to false — so, you can prevent people
                    // from editing a sub category, even if they can edit the parent category.
                    if (debiki2.isDefined2(p.mayEditPage)) {
                        mayThisCat = p.mayEditPage;
                    }
                    // But this is weird! What if one may edit all pages in the parent cat,
                    // and this post is a wiki — but one may not edit wikis in this category?
                    // Then, should be allowed to edit it.  isWiki should only *add* edit permissions,
                    // never remove.
                    // However, if the permission in the parent cat, was for *wiki*, then,
                    // !mayEditWiki here, should cancel that. So, need to keep track of if
                    // permissions are because is-wiki or not.  [subcats]
                    // Fortunately, sub cats not so very implemented yet. So whatever is fine, now.
                    if (debiki2.isDefined2(p.mayEditWiki) && isWiki) {
                        mayThisCat = mayThisCat || p.mayEditWiki
                            || may; // <—— so won't remove parent cat perms
                    }
                    if (debiki2.isDefined2(p.mayEditOwn) && isOwn) {
                        mayThisCat = p.mayEditOwn;
                    }
                    if (debiki2.isDefined2(mayThisCat)) {
                        may = mayThisCat;
                    }
                }
            });
        };
        for (var i = 0; i < ancestorCategories.length; ++i) {
            _loop_3(i);
        }
        // COULD check threat level here? May-not if is-severe-threat.
        return may;
    }
    function store_isReplyingTo(store, post) {
        return store.editorsPageId === store.currentPageId &&
            store.replyingToPostNr === post.nr;
    }
    debiki2.store_isReplyingTo = store_isReplyingTo;
    function store_isReplyingToOrEditing(store, post) {
        // @ifdef DEBUG
        debiki2.dieIf(store.editorsPageId !== store.currentPageId &&
            store.editingPostId === post.uniqueId, 'TyE60IMJ257');
        // @endif
        return store_isReplyingTo(store, post) || store.editingPostId === post.uniqueId;
    }
    debiki2.store_isReplyingToOrEditing = store_isReplyingToOrEditing;
    // Also see: store_getCurrOrDefaultCat(store) [GETACTDEFCAT]
    //
    function store_findTheDefaultCategory(store) {
        return _.find(store.currentCategories, function (category) {
            return category.isDefaultCategory;
        });
    }
    debiki2.store_findTheDefaultCategory = store_findTheDefaultCategory;
    function store_findCatByRefOrId(store, refOrId) {
        var curCats = store.currentCategories || [];
        var allCatsHacky = store.allCategoriesHacky || [];
        var cats = __spreadArray(__spreadArray([], curCats, true), allCatsHacky, true);
        if (_.isNumber(refOrId)) {
            return _.find(cats, function (c) { return c.id === refOrId; });
        }
        else {
            // @ifdef DEBUG
            debiki2.dieIf(refOrId.indexOf('slug:') !== 0, 'Only cat slug refs supported now [TyE35RKTDJ39]');
            // @endif
            return _.find(cats, function (c) { return 'slug:' + c.slug === refOrId; });
        }
    }
    debiki2.store_findCatByRefOrId = store_findCatByRefOrId;
    /// Like store_ancestorCatsCurFirst() but reverses the order.
    ///
    /// Getting the root cat and base cat first in the ancestor cats list,
    /// is good when looking at permissions — because if there's something pat
    /// may not access, we shouldn't look into its descendants (sub cats).
    ///
    function store_ancestorCatsCurLast(store, catId) {
        var ancestors = store_ancestorCatsCurFirst(store, catId);
        // This is faster than unshift() — the latter allocates new memory and
        // copies the new elem plus the old array, into that new memory (!).
        ancestors.reverse();
        return ancestors;
    }
    debiki2.store_ancestorCatsCurLast = store_ancestorCatsCurLast;
    /// Returns a list with category catId first, then its parent, grandparent
    /// etc cat up to the root category, last (root cats currently not incl,
    /// client side).
    ///
    /// Getting the current cat first in the ancestor cats list, is good
    /// when deriving page properties — then we start with the most
    /// specific thing (the page), and continue with less and less specific
    /// things: the parent cat, grandparent, root cat, and, lastly,
    /// whole site settings.
    ///
    function store_ancestorCatsCurFirst(store, catId) {
        var ancestors = [];
        var cats = store.currentCategories;
        var nextCatId = catId;
        // Stop at 10 in case of cycles. Should never be more than 2 (base cat, sub cat).
        for (var i = 0; i < 10; ++i) {
            var nextCat = _.find(cats, function (c) { return c.id === nextCatId; }); // [On2]
            if (!nextCat) {
                // The prev cat is a top level cat, and root cats currently isn't incl in
                // the json sent to the browser. So we won't find the root cat. However
                // the root cat's id should be one of the SiteSection's root cat ids, so
                // at least we can add an assertion:
                // @ifdef DEBUG
                /*  Need to [update_warmup_json] (otherwise this fails at startup, right?)
                const siteSection = _.find(store.siteSections, s => s.rootCategoryId === nextCatId);
                dieIf(!siteSection, `No site section root cat found for cat ${catId},` +
                    `\n   root cat id: ${nextCatId} [TyE036RKTHF2]` +
                    `\n   site sections: ${JSON.stringify(store.siteSections)}` +
                    `\n   ancestor cats found: ${JSON.stringify(ancestors)}` +
                    `\n   store.currentCategories: ${JSON.stringify(store.currentCategories)}`);
                    */
                // @endif
                break;
            }
            ancestors.push(nextCat);
            nextCatId = nextCat.parentId;
            if (!nextCatId)
                break;
        }
        return ancestors;
    }
    debiki2.store_ancestorCatsCurFirst = store_ancestorCatsCurFirst;
    function store_findCatsWhereIMayCreateTopics(store) {
        return _.filter(store.currentCategories, function (c) {
            if (c.isForumItself)
                return false;
            return store_mayICreateTopics(store, c);
        });
    }
    debiki2.store_findCatsWhereIMayCreateTopics = store_findCatsWhereIMayCreateTopics;
    function store_getPostId(store, pageId, postNr) {
        // If we're on a blog bost with embedded comments, then, the Talkyard embedded
        // comments page might not yet have been created.
        if (isNoPage(pageId))
            return undefined;
        // The page might not be the current page, if the editor is open and we've
        // temporarily jumped to a different page or user's profile maybe.
        // BUG happens sometimes, browser error auto reported on 2021-07-15 from one ip addr.
        var page = store.pagesById[pageId];
        debiki2.dieIf(!page, 'TyE603KWUDB4');
        var post = page.postsByNr[postNr];
        return post && post.uniqueId;
    }
    debiki2.store_getPostId = store_getPostId;
    function page_makePostPatch(page, post) {
        var patch = {
            pageVersionsByPageId: {},
            postsByPageId: {},
        };
        patch.postsByPageId[page.pageId] = [post];
        patch.pageVersionsByPageId[page.pageId] = page.pageVersion;
        return patch;
    }
    debiki2.page_makePostPatch = page_makePostPatch;
    function store_makeDraftPostPatch(store, page, draft) {
        var draftPost = store_makePostForDraft(store.me.id, draft);
        return page_makePostPatch(page, draftPost);
    }
    debiki2.store_makeDraftPostPatch = store_makeDraftPostPatch;
    function store_makeNewPostPreviewPatch(store, page, parentPostNr, safePreviewHtml, newPostType, doAsAnon) {
        // If this is an anon post, and one's first on this page, then, the anonym
        // who will be used in place of oneself, hasn't yet been created.
        // Then use the magic built-in id Pats.FutureAnonId which will
        // make an anonym with '?' as sequence number appear.
        var authorId = doAsAnon ? doAsAnon.sameAnonId || -4 /* Pats.FutureAnonId */ : store.me.id;
        var previewPost = store_makePreviewPost({
            authorId: authorId,
            parentPostNr: parentPostNr,
            safePreviewHtml: safePreviewHtml,
            newPostType: newPostType,
            isEditing: true
        });
        return page_makePostPatch(page, previewPost);
    }
    debiki2.store_makeNewPostPreviewPatch = store_makeNewPostPreviewPatch;
    function page_makeEditsPreviewPatch(page, post, safePreviewHtml) {
        var previewPost = __assign(__assign({}, post), { sanitizedHtml: safePreviewHtml, isPreview: true, isEditing: true });
        return page_makePostPatch(page, previewPost);
    }
    debiki2.page_makeEditsPreviewPatch = page_makeEditsPreviewPatch;
    function draftType_toPostType(draftType) {
        switch (draftType) {
            case 5 /* DraftType.Reply */: return 1 /* PostType.Normal */; // could also be ChatMessage
            case 6 /* DraftType.ProgressPost */: return 4 /* PostType.BottomComment */;
            default:
                return undefined;
        }
    }
    debiki2.draftType_toPostType = draftType_toPostType;
    function postType_toDraftType(postType) {
        switch (postType) {
            case 1 /* PostType.Normal */: return 5 /* DraftType.Reply */;
            case 3 /* PostType.ChatMessage */: return 5 /* DraftType.Reply */;
            case 4 /* PostType.BottomComment */: return 6 /* DraftType.ProgressPost */;
            default:
                return undefined;
        }
    }
    debiki2.postType_toDraftType = postType_toDraftType;
    // RENAME? to draft_makePreviewPost(draft, authorId)?
    function store_makePostForDraft(authorId, draft) {
        var locator = draft.forWhat;
        var parentPostNr = locator.postNr;
        var postType = draftType_toPostType(draft.forWhat.draftType);
        if (!postType)
            return null; // then skip draft post, for now
        // It'd be nice if we saved a preview of the drafts, so can show nice preview html,
        // instead of just the CommonMark source. Cannot load the CommonMark engine here,
        // that'd make the page-load too slow I think. [DRAFTPRVW]
        // For now, use the CommonMark source instead.
        var previewPost = store_makePreviewPost({
            authorId: authorId,
            parentPostNr: parentPostNr,
            unsafeSource: draft.text, newPostType: postType,
            isForDraftNr: draft.draftNr || true
        });
        return previewPost;
    }
    debiki2.store_makePostForDraft = store_makePostForDraft;
    function post_makePreviewIdNr(parentNr, newPostType) {
        // So won't overlap with post nrs and ids.
        var previewOffset = -1000 * 1000;
        var previewPostIdNr = previewOffset -
            // We create one preview posts, per parent post we're replying to, so
            // inclue the parent post nr, so the preview posts won't overwrite each other,
            // in the page.postsByNr map.
            // Chat messages have no parent post; there can be only one preview
            // chat message [CHATPRNT].
            (parentNr || 0) * 100 -
            // We show different preview posts for 1) progress orig-post reply, and
            // 2) discussion orig-post reply. — If is editing, not replying, use 0.
            (newPostType || 0);
        return previewPostIdNr;
    }
    debiki2.post_makePreviewIdNr = post_makePreviewIdNr;
    function store_makePreviewPost(_a) {
        var authorId = _a.authorId, parentPostNr = _a.parentPostNr, safePreviewHtml = _a.safePreviewHtml, unsafeSource = _a.unsafeSource, newPostType = _a.newPostType, isForDraftNr = _a.isForDraftNr, isEditing = _a.isEditing;
        debiki2.dieIf(!newPostType, "Don't use for edit previews [TyE4903KS]");
        var previewPostIdNr = post_makePreviewIdNr(parentPostNr, newPostType);
        var now = debiki2.getNowMs();
        var previewPost = {
            isPreview: true,
            isForDraftNr: isForDraftNr,
            isEditing: isEditing,
            uniqueId: previewPostIdNr,
            nr: previewPostIdNr,
            parentNr: parentPostNr,
            multireplyPostNrs: [],
            postType: newPostType,
            authorId: authorId,
            createdAtMs: now,
            //approvedAtMs?: number;
            //lastApprovedEditAtMs: number;
            numEditors: 1,
            numLikeVotes: 0,
            numWrongVotes: 0,
            numBuryVotes: 0,
            numUnwantedVotes: 0,
            numPendingEditSuggestions: 0,
            summarize: false,
            //summary?: string;
            squash: false,
            //isBodyHidden?: boolean;
            isTreeDeleted: false,
            isPostDeleted: false,
            isTreeCollapsed: false,
            isPostCollapsed: false,
            isTreeClosed: false,
            isApproved: false,
            pinnedPosition: 0,
            branchSideways: 0,
            likeScore: 0,
            childNrsSorted: [],
            unsafeSource: unsafeSource,
            sanitizedHtml: safePreviewHtml,
            //tags?: string[];
            //numPendingFlags?: number;
            //numHandledFlags?: number;
        };
        return previewPost;
    }
    /* Not in use, but maybe later? Instead, for now, this: [60MNW53].
    export function store_makeDeleteDraftPostPatch(store: Store, draft: Draft): StorePatch {
      const draftPost = store_makePostForDraft(store.me.id, draft);
      return store_makeDeletePostPatch(draftPost);
    } */
    function store_makeDeletePreviewPostPatch(store, parentPostNr, newPostType) {
        var previewPost = store_makePreviewPost({
            authorId: store.me.id,
            parentPostNr: parentPostNr,
            safePreviewHtml: '',
            newPostType: newPostType
        });
        return store_makeDeletePostPatch(previewPost);
    }
    debiki2.store_makeDeletePreviewPostPatch = store_makeDeletePreviewPostPatch;
    function store_makeDeletePostPatch(post) {
        var postsByPageId = {};
        // This'll remove the post from `page`, since it got "moved" away from that page.
        postsByPageId['_no_page_'] = [post];
        return {
            postsByPageId: postsByPageId,
        };
    }
    debiki2.store_makeDeletePostPatch = store_makeDeletePostPatch;
    // Permissions
    //----------------------------------
    /// Joins oldPerms and newPerms. Any new perm replaces any old
    /// perm for the same thing (e.g. category) and group (participant).
    ///
    function perms_addNew(oldPerms, newPerms) {
        var result = __spreadArray([], newPerms, true);
        var _loop_4 = function (old) {
            var dupl = _.find(result, function (newerPerm) { return perm_samePatAndThing(old, newerPerm); });
            if (!dupl) {
                result.push(old);
            }
        };
        for (var _i = 0, oldPerms_1 = oldPerms; _i < oldPerms_1.length; _i++) {
            var old = oldPerms_1[_i];
            _loop_4(old);
        }
        // COULD delete perms with all !may....
        // Currently the server sorts by permission id, ascending  [SORTCATPERMS]
        // — let's do here to.
        result.sort(function (a, b) { return a.id - b.id; });
        return result;
    }
    debiki2.perms_addNew = perms_addNew;
    function perm_samePatAndThing(a, b) {
        // @ifdef DEBUG
        debiki2.dieIf(a.onWholeSite === null || a.onCategoryId === null ||
            a.onPageId === null || a.onPostId === null ||
            b.onWholeSite === null || b.onCategoryId === null ||
            b.onPageId === null || b.onPostId === null, 'TyE602MRSKDP34');
        // @endif
        return (a.forPeopleId === b.forPeopleId
            && a.onWholeSite === b.onWholeSite
            && a.onCategoryId === b.onCategoryId
            && a.onPageId === b.onPageId
            && a.onPostId === b.onPostId);
    }
    function perms_join(pA, pB) {
        if (!pB)
            return pA;
        return {
            // id — omitted
            // forPeopleId — omitted
            onWholeSite: pA.onWholeSite || pB.onWholeSite,
            onCategoryId: pA.onCategoryId || pB.onCategoryId,
            onPageId: pA.onPageId || pB.onPageId,
            onPostId: pA.onPostId || pB.onPostId,
            // later: onTagId?: TagId;
            mayEditPage: pA.mayEditPage || pB.mayEditPage,
            mayEditComment: pA.mayEditComment || pB.mayEditComment,
            mayEditWiki: pA.mayEditWiki || pB.mayEditWiki,
            mayEditOwn: pA.mayEditOwn || pB.mayEditOwn,
            mayDeletePage: pA.mayDeletePage || pB.mayDeletePage,
            mayDeleteComment: pA.mayDeleteComment || pB.mayDeleteComment,
            mayCreatePage: pA.mayCreatePage || pB.mayCreatePage,
            mayPostComment: pA.mayPostComment || pB.mayPostComment,
            // later: mayPostProgressNotes ?
            maySee: pA.maySee || pB.maySee,
            maySeeOwn: pA.maySeeOwn || pB.maySeeOwn,
        };
    }
    debiki2.perms_join = perms_join;
    // Category
    //----------------------------------
    function category_isPublic(category, store) {
        // REFACTOR? !category happens here: [4JKKQS20], for the root category (looked up by id).
        // Because the root cat isn't included in the store. Maybe should include it? Then 'category'
        // will never be missing here.
        if (!category || category.isForumItself) {
            // This is the All Categories category dropdown item.
            return true;
        }
        return _.some(store.publicCategories, function (c) {
            return c.id === category.id;
        });
    }
    debiki2.category_isPublic = category_isPublic;
    function category_iconClass(category, store) {
        // (Deleted and unlisted categories aren't included in the public categories list. [5JKWT42])
        var anyCategory = _.isNumber(category) ? _.find(store.currentCategories, function (c) { return c.id === category; }) : category;
        var isPublic = category_isPublic(anyCategory, store);
        if (!isPublic)
            return (anyCategory.isDeleted ? 'icon-trash ' : (
            // Both category and topics unlisted? (Unlisting category means unlisting the topics too)
            anyCategory.unlistCategory ? 'icon-2x-unlisted ' : 'icon-lock '));
        // Ony topics unlisted?
        return anyCategory && anyCategory.unlistTopics ? 'icon-unlisted ' : '';
    }
    debiki2.category_iconClass = category_iconClass;
    function categories_sortTree(categories) {
        var catsById = {};
        var rootCats = [];
        var baseCats = [];
        for (var _i = 0, categories_1 = categories; _i < categories_1.length; _i++) {
            var c = categories_1[_i];
            // We'll add isX and subCats fields, so copy the cat.
            var catCopy = __assign({}, c);
            var isRootCat = !c.parentId || // <— yes
                c.parentId === c.id; // <— not needed?
            if (isRootCat) {
                catCopy.isRootCat = true;
                rootCats.push(catCopy);
            }
            catsById[c.id] = catCopy;
        }
        _.forEach(catsById, function (thisCat, id) {
            var parentCat = catsById[thisCat.parentId];
            var isBaseCat;
            var isSubCat;
            // let isSubSubCat; // maybe later
            if (parentCat) {
                parentCat.subCats = parentCat.subCats || [];
                parentCat.subCats.push(thisCat);
                isBaseCat = parentCat.isRootCat;
                if (!isBaseCat) {
                    var grandpaCat = catsById[parentCat.parentId];
                    // This: !grandpaCat happens if root cats not incl by the server.
                    isSubCat = !grandpaCat || grandpaCat.isRootCat;
                }
            }
            else {
                // This happens if root cats not included by the server
                // (it currently never includes root cats?).
                isBaseCat = true;
            }
            // @ifdef DEBUG
            // Cats have to be *something*.
            debiki2.dieIf(!thisCat.isRootCat && !isBaseCat && !isSubCat, 'TyE052RMDM3');
            // @endif
            if (isBaseCat) {
                thisCat.isBaseCat = true;
                baseCats.push(thisCat);
            }
            else if (isSubCat) {
                thisCat.isSubCat = true;
            }
        });
        // Sort base cats by position, and sub & sub-sub cats by name.  [sort_cats]
        // Later, this'll be configurable — e.g. sorting by popularity or
        // weekly new topics.
        baseCats.sort(function (a, b) { return a.position - b.position; });
        _.forEach(catsById, function (cat, id) {
            if (cat.isRootCat && cat.subCats) {
                // These sub cats are base cats.
                cat.subCats.sort(function (a, b) { return a.position - b.position; });
            }
            else if (cat.subCats) {
                debiki2.arr_sortAlphaInPlace(cat.subCats, function (c) { return c.name; });
            }
        });
        return { rootCats: rootCats, baseCats: baseCats, catsById: catsById };
    }
    debiki2.categories_sortTree = categories_sortTree;
    // Tags
    //----------------------------------
    function tags_mkSortFn(tagTypesById) {
        return function (tagA, tagB) {
            var tagTypeA = tagTypesById[tagA.tagTypeId];
            var tagTypeB = tagTypesById[tagB.tagTypeId];
            // @ifdef DEBUG
            if (numTagTypeMissingWarnings < 3 && (!tagTypeA || !tagTypeB)) {
                numTagTypeMissingWarnings += 1;
                var warningNr = "\n\n(Warning nr ".concat(numTagTypeMissingWarnings, " of max 3)");
                !tagTypeA && debiki2.showClientError("Tag type missing, id: ".concat(tagA.tagTypeId, " [TyE5MW208M2]") + warningNr);
                !tagTypeB && debiki2.showClientError("Tag type missing, id: ".concat(tagB.tagTypeId, " [TyE5MW208M3]") + warningNr);
            }
            // @endif
            // Place any tag with a missing tag type last. (Would be a bug. '~' is last ASCII char.)
            var nameA = tagTypeA && tagTypeA.dispName || ('~' + tagA.tagTypeId);
            var nameB = tagTypeB && tagTypeB.dispName || ('~' + tagB.tagTypeId);
            return nameA.localeCompare(nameB);
        };
    }
    debiki2.tags_mkSortFn = tags_mkSortFn;
    // @ifdef DEBUG
    var numTagTypeMissingWarnings = 0;
    // @endif
    // Layout
    //----------------------------------
    function layout_sortOrderForChildsOf(layout, post) {
        switch (layout.comtOrder) {
            case 18 /* PostSortOrder.NewestThenBest */:
                return post.nr === BodyNr ? 2 /* PostSortOrder.NewestFirst */ : 1 /* PostSortOrder.BestFirst */;
            case 50 /* PostSortOrder.NewestThenOldest */:
                return post.nr === BodyNr ? 2 /* PostSortOrder.NewestFirst */ : 3 /* PostSortOrder.OldestFirst */;
            default:
                return layout.comtOrder;
        }
    }
    debiki2.layout_sortOrderForChildsOf = layout_sortOrderForChildsOf;
    // Page
    //----------------------------------
    // Sync w interface DiscPropsSource and ...?  in Scala.
    // Also: [derive_node_props_on_server], later.
    var DiscPropDefaults = {
        comtOrder: 3 /* PostSortOrder.OldestFirst */,
        comtNesting: -1,
        comtsStartHidden: 2 /* NeverAlways.NeverButCanContinue */,
        comtsStartAnon: 2 /* NeverAlways.NeverButCanContinue */,
        opStartsAnon: 2 /* NeverAlways.NeverButCanContinue */,
        // For now. Later: OnlySelfCanDeanon.
        newAnonStatus: 2097151 /* AnonStatus.IsAnonCanAutoDeanon */,
    };
    var DiscPropNames = Object.keys(DiscPropDefaults);
    function node_deriveLayout(props) {
        // This is either for a specific page, or a category (and all pages therein).
        debiki2.dieIf(!!props.cat == !!props.page, 'TyE604MWJJ34');
        var layoutSource;
        if (props.cat) {
            layoutSource = discProps_pluckFrom(props.cat);
        }
        else {
            layoutSource = discProps_pluckFrom(props.page);
            // Apply any current page temp layout tweaks (disappear on page reload).
            if (props.layoutFor === 1 /* LayoutFor.PageWithTweaks */ && props.store.curPageTweaks) {
                var tempLayoutTweaks = discProps_pluckFrom(props.store.curPageTweaks);
                layoutSource = __assign(__assign({}, layoutSource), tempLayoutTweaks);
            }
        }
        // If we're A) altering the page layout, e.g. the comments sort order,
        // but not saving server side, then:  layoutFor === PageWithTweaks,
        // and the default layout is the page *without* tweaks,
        // that is:  PageNoTweaks = PageWithTweaks + 1.
        //
        // And if we're B) saving server side, then:  layoutFor === PageNoTweaks,
        // and the defaults would be the parent category's layout props
        // that is,  LayoutFor.Ancestors = PageNoTweaks + 1.
        //
        // So, the "parent" layout is +1:
        //
        var layoutForParent = props.layoutFor + 1;
        var actualLayout = props.page
            ? page_deriveLayout(props.page, props.store, props.layoutFor)
            : cat_deriveLayout(props.cat, props.store, props.layoutFor);
        var parentsLayout = props.page
            ? page_deriveLayout(props.page, props.store, layoutForParent)
            : cat_deriveLayout(props.cat, props.store, layoutForParent);
        return { layoutSource: layoutSource, parentsLayout: parentsLayout, actualLayout: actualLayout };
    }
    debiki2.node_deriveLayout = node_deriveLayout;
    /// Discussion properties. For each unspecified page property, e.g. sort order,
    /// looks at the ancestor categories, to find out what value to use.
    /// And if unspecified everywhere, uses the global site settings.
    ///
    /// RENAME to page_deriveLayout ?  no to page_deriveDiscProps?
    function page_deriveLayout(page, store, layoutFor) {
        return deriveLayoutImpl(page, null, store, layoutFor);
    }
    debiki2.page_deriveLayout = page_deriveLayout;
    /// RENAME to  cat_deriveDiscProps?
    function cat_deriveLayout(cat, store, layoutFor) {
        return deriveLayoutImpl(null, cat, store, layoutFor);
    }
    debiki2.cat_deriveLayout = cat_deriveLayout;
    /// Layout props can be specified on a specific page, a category,
    /// or whole site settings. Layout props set on a cat or the whole site, are
    /// inherited by things inside (sub cats, and pages in those cats).
    ///
    /// The most specific props, have precedence — that is, props set on the
    /// page or cat itself, override parent cat props and site settings.
    /// If unspecified everywhere, Ty's built-in defaults gets used.
    ///
    function deriveLayoutImpl(page, cat, store, layoutFor) {
        // ----- The page/cat itself
        var discProps = layoutFor === 3 /* LayoutFor.Ancestors */ ?
            {} : discProps_pluckFrom(page || cat);
        var selfRef = function () { return page ? "pageid:".concat(page.pageId) : "catid:".concat(cat.id); };
        // Some time later, can use  ts-transformer-keys
        // instead of the repetitive code below?
        // These says from where each effective setting is.  For example, if comtOrder
        // is set directly on a page, then, the comment order is from the page,
        // and comtOrderFrom becomes 'pageid:that-page's-id`.
        var propsFrom = {};
        for (var _i = 0, DiscPropNames_3 = DiscPropNames; _i < DiscPropNames_3.length; _i++) {
            var prop = DiscPropNames_3[_i];
            if (discProps[prop])
                propsFrom[prop] = selfRef();
        }
        // ----- Ancestor cats
        // Start with the parent cat, since it's the most specific cat. Then the
        // grandparent, and so on. Finally, the whole site settings.
        //
        // These: page.ancestorsRootFirst  don't include the comtOrder etc fields.
        // Maybe they should? For now, call this fn instead:
        var ancCatId = page ? page.categoryId : cat.parentId;
        var ancCats = store_ancestorCatsCurFirst(store, ancCatId);
        for (var _a = 0, ancCats_1 = ancCats; _a < ancCats_1.length; _a++) {
            var cat_1 = ancCats_1[_a];
            // Same as: DiscPropsMerged.addMissing() in Scala.  [disc_props_js_scala]
            // Don't set any field to undefined. [unintened_undefined_bug]
            for (var _b = 0, DiscPropNames_4 = DiscPropNames; _b < DiscPropNames_4.length; _b++) {
                var prop = DiscPropNames_4[_b];
                if (!discProps[prop] && cat_1[prop]) {
                    discProps[prop] = cat_1[prop];
                    propsFrom[prop] = cat_1;
                }
            }
        }
        // ----- Site settings
        var anyPageType = page === null || page === void 0 ? void 0 : page.pageRole;
        var isEmbedded = anyPageType === 5 /* PageRole.EmbeddedComments */;
        // BUG, harmless: This'll be wrong, if configuring sort order for embedded comments
        // in a category — because then we don't have `anyPageType` (edit: what?), and
        // the sort order for non-embedded discussions will be shown. Harmless corner
        // case.  See: [per_page_type_props]  (incl just below).
        var settings = store.settings || undefined;
        var settingsDiscProps = !settings ? {} :
            discProps_pluckFromSettings(settings, anyPageType);
        discProps = __assign(__assign({}, settingsDiscProps), discProps);
        // (sstg = setting, see docs/abbreviations.txt.)
        for (var _c = 0, DiscPropNames_5 = DiscPropNames; _c < DiscPropNames_5.length; _c++) {
            var prop = DiscPropNames_5[_c];
            if (!propsFrom[prop] && discProps[prop])
                propsFrom[prop] = "sstg:".concat(prop);
        }
        // ----- Hardcoded defaults
        // Backw comp hack, until [per_page_type_props]:  For blog comments, the default
        // is BestFirst, otherwise (see DiscPropDefaults) OldestFirst.
        var BuiltIn = "BuiltIn";
        if (!discProps.comtOrder && isEmbedded) {
            discProps.comtOrder = 1 /* PostSortOrder.BestFirst */;
            propsFrom.comtOrder = BuiltIn + "Emb";
        }
        // Apply defaults.
        discProps = __assign(__assign({}, DiscPropDefaults), discProps);
        for (var _d = 0, DiscPropNames_6 = DiscPropNames; _d < DiscPropNames_6.length; _d++) {
            var prop = DiscPropNames_6[_d];
            if (!propsFrom[prop] && discProps[prop])
                propsFrom[prop] = BuiltIn;
        }
        // ----- Temp tweaks
        var anyTweaks = layoutFor === 1 /* LayoutFor.PageWithTweaks */
            && page && page.pageId === store.currentPageId ?
            store.curPageTweaks : undefined;
        if (anyTweaks) {
            discProps = __assign(__assign({}, discProps), anyTweaks);
            for (var _e = 0, DiscPropNames_7 = DiscPropNames; _e < DiscPropNames_7.length; _e++) {
                var prop = DiscPropNames_7[_e];
                if (anyTweaks[prop])
                    propsFrom[prop] = "CurPageTweaks";
            }
        }
        var result = __assign(__assign({}, discProps), { from: propsFrom });
        return result;
    }
    function page_authorId(page) {
        var origPost = page.postsByNr[BodyNr];
        return origPost && origPost.authorId;
    }
    debiki2.page_authorId = page_authorId;
    function page_isClosedUnfinished(page) {
        return page_isClosed(page) && !page_isSolved(page) && !page_isDone(page);
    }
    debiki2.page_isClosedUnfinished = page_isClosedUnfinished;
    function page_isOpen(page) {
        var isClosed = page_isClosed(page);
        var doneOrSolved = page_isSolved(page) || page_isDone(page);
        // @ifdef DEBUG
        // If done or solved, must also be closed.
        debiki2.dieIf(!isClosed && doneOrSolved, 'TyE305MRKT2');
        // @endif
        return !isClosed && !doneOrSolved;
    }
    debiki2.page_isOpen = page_isOpen;
    function page_isClosed(page) {
        var closedAt = page.pageClosedAtMs || page.closedAtMs;
        return !!closedAt;
    }
    debiki2.page_isClosed = page_isClosed;
    function page_isDone(page) {
        // If doneAt, but !page_canBeDone, then, the topic type was changed
        // to e.g. a Question, after the page doing status had been changed to Done
        // already. And Ty remembers the doing status, in case we'll change
        // the topic type back again — then, the doing status becomes active again.
        var doneAt = page.pageDoneAtMs || page.doneAtMs;
        return doneAt && page_canBeDone(page);
    }
    debiki2.page_isDone = page_isDone;
    function page_canBeDone(page) {
        var pageType = page.pageRole;
        return pageType === 14 /* PageRole.Problem */ || pageType === 15 /* PageRole.Idea */ ||
            pageType === 13 /* PageRole.ToDo */ ||
            pageType === 21 /* PageRole.UsabilityTesting */; // [plugin]
    }
    debiki2.page_canBeDone = page_canBeDone;
    function page_isSolved(page) {
        var solvedAt = page.pageAnsweredAtMs || page.answeredAtMs;
        return solvedAt && page_canBeSolved(page);
    }
    debiki2.page_isSolved = page_isSolved;
    function page_canBeSolved(page) {
        // tyworld.adoc: [tpc_typ_solv]
        return (page.pageRole === 10 /* PageRole.Question */
            || page.pageRole === 15 /* PageRole.Idea */
            || page.pageRole === 14 /* PageRole.Problem */);
    }
    debiki2.page_canBeSolved = page_canBeSolved;
    function page_getUnsolvedIcon(page) {
        switch (page.pageRole) {
            case 10 /* PageRole.Question */:
                return 'icon-ok-circled-empty';
            case 14 /* PageRole.Problem */:
            // Later: iconClass = 'icon-warning-checked';  ?
            // For now, fall through.
            case 15 /* PageRole.Idea */:
            default:
                return 'icon-check-empty';
        }
    }
    debiki2.page_getUnsolvedIcon = page_getUnsolvedIcon;
    function page_getSolvedIcon(page) {
        // Actually, use the same icon for both solutions to problems,  [ans_solved_icon]
        // and answers to questions — it's not that interesting if originally
        // the topic was phrased as a question, or problem? What matters
        // is that it's been handled, done, right.
        return 'icon-ok-circled c_Solved';
        /*
        switch (page.pageRole) {
          case PageRole.Question:
            return 'icon-ok-circled c_Solved';
          case PageRole.Problem:
            // Later: iconClass = 'icon-warning-unchecked';  ?
            // For now, fall through.
          case PageRole.Idea:
          default:
            return 'icon-check c_Solved';
        }*/
    }
    debiki2.page_getSolvedIcon = page_getSolvedIcon;
    function page_isAlwaysFlatDiscourse(page) {
        var pageRole = page.pageRole;
        return (pageRole === 17 /* PageRole.FormalMessage */
            || pageRole === 20 /* PageRole.Form */);
    }
    debiki2.page_isAlwaysFlatDiscourse = page_isAlwaysFlatDiscourse;
    function page_isFlatProgress(page) {
        if (page_isAlwaysFlatDiscourse(page))
            return true;
        if (page.pageLayout === 1002 /* TopicLayout.FlatProgress */)
            return true;
        /* Later, could:
        const pageRole = page.pageRole;
        return (pageRole === PageRole.Idea
            || pageRole === PageRole.Problem
            || pageRole === PageRole.ToDo);
        */
        // However, for now: (backw compat, so as not to upset people)
        return false;
    }
    debiki2.page_isFlatProgress = page_isFlatProgress;
    function page_isThreadedDiscussion(page) {
        if (page_isAlwaysFlatDiscourse(page))
            return false;
        if (page.pageLayout === 1001 /* TopicLayout.ThreadedDiscussion */)
            return true;
        if (page.pageLayout === 1003 /* TopicLayout.SplitDiscussionProgress */ ||
            page.pageLayout === 1002 /* TopicLayout.FlatProgress */)
            return false;
        /* Later, could:
        const pageRole = page.pageRole;
        return pageRole === PageRole.Question || pageRole === PageRole.Discussion ||
            pageRole === PageRole.EmbeddedComments;
        */
        // However, for now: (backw compat, to not upset people)
        return true;
    }
    debiki2.page_isThreadedDiscussion = page_isThreadedDiscussion;
    function page_canChangeCategory(page) {
        var pageRole = page.pageRole;
        return (pageRole !== 3 /* PageRole.Code */
            && pageRole !== 4 /* PageRole.SpecialContent */
            && pageRole !== 6 /* PageRole.Blog */
            && pageRole !== 7 /* PageRole.Forum */
            && pageRole !== 9 /* PageRole.About */
            && pageRole !== 17 /* PageRole.FormalMessage */
            && pageRole !== 19 /* PageRole.PrivateChat */);
    }
    debiki2.page_canChangeCategory = page_canChangeCategory;
    function page_mostRecentPostNr(page) {
        // BUG not urgent. COULD incl the max post nr in Page, so even if not yet loaded,
        // we'll know its nr, and can load and scroll to it, from doUrlFragmentAction().
        var maxNr = -1;
        _.values(page.postsByNr).forEach(function (post) {
            maxNr = Math.max(post.nr, maxNr);
        });
        // @ifdef DEBUG
        debiki2.dieIf(maxNr < TitleNr, 'TyE5FKBQATS');
        // @endif
        return maxNr;
    }
    debiki2.page_mostRecentPostNr = page_mostRecentPostNr;
    /// Depth-first-search traverses all `posts` and their successors,
    /// and calls `fn` — posts[0] and its successors, first.
    /// Stops and returns after having visited stopAfter
    /// posts (regardless of if they're successors or directly
    /// in `posts`).
    ///
    function page_depthFirstWalk(page, posts, stopAfter, fn) {
        // @ifdef DEBUG
        // Maybe could cause performance problems?
        debiki2.dieIf(stopAfter > 999, 'TyE051TKSEXSD');
        // @endif
        var numSeen = 0;
        traverse(posts);
        function traverse(ps) {
            _.each(ps, function (p) {
                if (!p || numSeen > stopAfter)
                    return;
                numSeen += 1;
                fn(p);
                var childPosts = p.childNrsSorted.map(function (nr) { return page.postsByNr[nr]; });
                traverse(childPosts);
            });
        }
    }
    debiki2.page_depthFirstWalk = page_depthFirstWalk;
    function page_deletePostInPlace(page, post) {
        delete page.postsByNr[post.nr];
        debiki2.arr_delInPlace(page.parentlessReplyNrsSorted, post.nr);
        debiki2.arr_delInPlace(page.progressPostNrsSorted, post.nr);
        page_removeFromParentInPlace(page, post);
    }
    debiki2.page_deletePostInPlace = page_deletePostInPlace;
    function page_removeFromParentInPlace(page, post) {
        var parent = page.postsByNr[post.parentNr];
        if (parent && parent.childNrsSorted) {
            debiki2.arr_delInPlace(parent.childNrsSorted, post.nr);
        }
    }
    debiki2.page_removeFromParentInPlace = page_removeFromParentInPlace;
    function page_voteTypeEnabled(page, post, voteType) {
        // Just for now. All vote types enabled by default,
        // but Disagree can be disabled. See:  [tyworld_5mj98267]
        return page.enableDisagreeVote || voteType !== 42 /* PostVoteType.Disagree */;
    }
    debiki2.page_voteTypeEnabled = page_voteTypeEnabled;
    // Forum buttons
    //----------------------------------
    function topPeriod_toString(period) {
        switch (period) {
            case 1 /* TopTopicsPeriod.Day */: return t.PastDay;
            case 2 /* TopTopicsPeriod.Week */: return t.PastWeek;
            case 3 /* TopTopicsPeriod.Month */: return t.PastMonth;
            case 4 /* TopTopicsPeriod.Quarter */: return t.PastQuarter;
            case 5 /* TopTopicsPeriod.Year */: return t.PastYear;
            case 6 /* TopTopicsPeriod.Triennial */: return "Past three years"; // t.Past3Years  I18N
            case 7 /* TopTopicsPeriod.All */: return t.AllTime;
            default: return '' + period;
        }
    }
    debiki2.topPeriod_toString = topPeriod_toString;
    // Trust and threat levels
    //----------------------------------
    function trustLevel_toString(trustLevel) {
        switch (trustLevel) {
            case 0 /* TrustLevel.Stranger */: return t.Stranger || "Stranger"; // I18N
            case 1 /* TrustLevel.New */: return t.NewMember;
            case 2 /* TrustLevel.Basic */: return t.BasicMember;
            case 3 /* TrustLevel.FullMember */: return t.FullMember;
            case 4 /* TrustLevel.Trusted */: return t.TrustedMember;
            case 5 /* TrustLevel.Regular */: return t.RegularMember;
            case 6 /* TrustLevel.CoreMember */: return t.CoreMember;
            default:
                if (trustLevel === 7 /* DummyTrustLevel.Staff */)
                    return t.Staff || "Staff"; // I18N
                if (trustLevel === 8 /* DummyTrustLevel.Admin */)
                    return t.Admin;
                return "Unknown trust level: ".concat(trustLevel, " [TyEUNKTRLVL]");
        }
    }
    debiki2.trustLevel_toString = trustLevel_toString;
    /// Returns [title, sub title].
    ///
    function threatLevel_toString(threatLevel) {
        // (This is for admins, don't translate. [5JKBWS2])
        switch (threatLevel) {
            case 1 /* ThreatLevel.SuperSafe */: return ["Super safe", ''];
            case 2 /* ThreatLevel.SeemsSafe */: return ["Seems safe", ''];
            case 3 /* ThreatLevel.HopefullySafe */: return ["Default", ''];
            case 4 /* ThreatLevel.MildThreat */: return ["Mild", "mods notified of new posts"];
            case 5 /* ThreatLevel.ModerateThreat */: return ["Moderate", "posts hidden until approved"];
            case 6 /* ThreatLevel.SevereThreat */: return ["Block Completely", ''];
            default: debiki2.die("Lvl ".concat(threatLevel, " [TyEUNKTHRLVL]"));
        }
    }
    debiki2.threatLevel_toString = threatLevel_toString;
    /// Returns `$bold-title ($brief-explanation)`.
    ///
    function threatLevel_toElem(threatLevel) {
        var _a = threatLevel_toString(threatLevel), title = _a[0], subTitle = _a[1];
        var boldTitle = r.b({ className: "s_TrtLvTl e_TrtLv-".concat(threatLevel) }, title);
        return subTitle ? rFr({}, boldTitle, " (".concat(subTitle, ")")) : boldTitle;
    }
    debiki2.threatLevel_toElem = threatLevel_toElem;
    // User stats
    //----------------------------------
    function userStats_totalNumPosts(stats) {
        return stats.numChatMessagesPosted + stats.numChatTopicsCreated +
            stats.numDiscourseRepliesPosted + stats.numDiscourseTopicsCreated;
    }
    debiki2.userStats_totalNumPosts = userStats_totalNumPosts;
    function userStats_totalNumPostsRead(stats) {
        return stats.numChatMessagesRead + stats.numChatTopicsEntered +
            stats.numDiscourseRepliesRead + stats.numDiscourseTopicsEntered;
    }
    debiki2.userStats_totalNumPostsRead = userStats_totalNumPostsRead;
    // Review
    //----------------------------------
    /*
    function isReviewPostTask(reviewTask: ReviewTask): boolean {
      // See above. <<0 .. <<3 are for user types. <<4 ..<<19 are for review-post stuff.
      // And <<20 and up are for users. Later: uploads? groups? categories?
      return (1 << 4) <= reviewTask.reasonsLong && reviewTask.reasonsLong < (1 << 20);
    }  */
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-methods.ts  */ /*
 * Copyright (c) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="prelude.ts" />
/// <reference path="utils/utils.ts" />
/* This Flux store is perhaps a bit weird, not sure. I'll switch to Redux or
 * Flummox or Fluxxor or whatever later, and rewrite everything in a better way?
 * Also perhaps there should be more than one store, so events won't be broadcasted
 * to everyone all the time.
 */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function page_isGroupTalk(pageRole) {
        return page_isPersonalTalk(pageRole) || debiki2.page_isChat(pageRole);
    }
    debiki2.page_isGroupTalk = page_isGroupTalk;
    function page_isPersonalTalk(pageRole) {
        return pageRole === 17 /* PageRole.FormalMessage */ ||
            false; // later: === PageRole.PersonalChat (but not Open/PrivateChatChannel)
    }
    function page_isPrivateGroup(pageRole) {
        return pageRole === 17 /* PageRole.FormalMessage */ || pageRole === 19 /* PageRole.PrivateChat */;
    }
    debiki2.page_isPrivateGroup = page_isPrivateGroup;
    function page_isInfoPage(pageRole) {
        return pageRole === 1 /* PageRole.CustomHtmlPage */ || pageRole === 2 /* PageRole.WebPage */;
    }
    debiki2.page_isInfoPage = page_isInfoPage;
    function page_findPostById(page, postId) {
        var thePost = undefined;
        _.each(page.postsByNr, function (post) {
            if (post.uniqueId === postId) {
                thePost = post;
            }
        });
        return thePost;
    }
    debiki2.page_findPostById = page_findPostById;
    function page_mayChangeRole(pageRole) {
        // Sync with Scala [6KUW204]
        return !debiki2.isSection(pageRole) && !page_isPrivateGroup(pageRole) &&
            pageRole !== 9 /* PageRole.About */ &&
            pageRole !== 3 /* PageRole.Code */ &&
            pageRole !== 4 /* PageRole.SpecialContent */;
    }
    debiki2.page_mayChangeRole = page_mayChangeRole;
    function page_canToggleClosed(page) {
        // Lock private message pages instead, so no new replies can be added.
        return (!page.pageLockedAtMs
            && !page.pageFrozenAtMs
            && !page.pageDeletedAtMs
            && !debiki2.page_isPrivateGroup(page.pageRole));
    }
    debiki2.page_canToggleClosed = page_canToggleClosed;
    // REMOVE, use  makeTitle() from forum.ts  instead. [same_title_everywhere]
    function pageRole_iconClass(pageRole) {
        switch (pageRole) {
            case 1 /* PageRole.CustomHtmlPage */: return '';
            case 2 /* PageRole.WebPage */: return '';
            case 3 /* PageRole.Code */: return '';
            case 4 /* PageRole.SpecialContent */: return '';
            case 5 /* PageRole.EmbeddedComments */: return '';
            case 6 /* PageRole.Blog */: return '';
            case 7 /* PageRole.Forum */: return '';
            case 9 /* PageRole.About */: return '';
            case 10 /* PageRole.Question */: return 'icon-help-circled';
            case 14 /* PageRole.Problem */: return 'icon-attention-circled';
            case 15 /* PageRole.Idea */: return 'icon-idea';
            case 13 /* PageRole.ToDo */: return 'icon-check-empty';
            case 11 /* PageRole.MindMap */: return 'icon-sitemap';
            case 12 /* PageRole.Discussion */: return 'icon-comment-empty';
            case 17 /* PageRole.FormalMessage */: return 'icon-mail';
            case 22 /* PageRole.JoinlessChat */: // same icon
            case 18 /* PageRole.OpenChat */: return 'icon-chat';
            case 19 /* PageRole.PrivateChat */: return 'icon-lock';
            case 20 /* PageRole.Form */: return 'icon-th-list';
            case 16 /* PageRole.Critique */: return ''; // [plugin]
            case 21 /* PageRole.UsabilityTesting */: return 'icon-check-empty'; // [plugin]
            default: debiki2.die("Bad page role: ".concat(pageRole, " [EdE2KW4A0]"));
        }
    }
    debiki2.pageRole_iconClass = pageRole_iconClass;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/rules.ts  */ /*
 * Copyright (c) 2015 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
// In this file: Small functions that says something about a model class instance.
// Would have been member functions, had it been possible to amend the React
// state tree with functions.
/// <reference path="prelude.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function mayMayNot(may, reason) {
        return { value: may, do_: may, not: !may, yes: may, no: !may, reason: reason };
    }
    debiki2.mayMayNot = mayMayNot;
    function mayIndeed() {
        return mayMayNot(true, null);
    }
    debiki2.mayIndeed = mayIndeed;
    function page_isOpenChat(pageRole) {
        return pageRole === 22 /* PageRole.JoinlessChat */ ||
            pageRole === 18 /* PageRole.OpenChat */;
    }
    debiki2.page_isOpenChat = page_isOpenChat;
    function page_isChat(pageRole) {
        return page_isOpenChat(pageRole) || pageRole === 19 /* PageRole.PrivateChat */;
    }
    debiki2.page_isChat = page_isChat;
    // Hmm now there's a Discussion topic type (= page role), then page_isDiscussion is an a
    // bit confusing name?
    function page_isDiscussion(pageRole) {
        return pageRole && !isSection(pageRole) &&
            pageRole !== 20 /* PageRole.Form */ &&
            pageRole !== 4 /* PageRole.SpecialContent */ &&
            pageRole !== 1 /* PageRole.CustomHtmlPage */ &&
            pageRole !== 2 /* PageRole.WebPage */;
        // pageRole !== PageRole.WikiMainPage;
    }
    debiki2.page_isDiscussion = page_isDiscussion;
    // [refactor] Move to page-methods.ts and rename to page_hmmHmmWhat? + isSection too, below.
    function isPageWithComments(pageRole) {
        return page_isDiscussion(pageRole) && pageRole !== 17 /* PageRole.FormalMessage */;
    }
    debiki2.isPageWithComments = isPageWithComments;
    function isSection(page) {
        var pageRole = _.isObject(page) ? page.pageRole : page;
        return pageRole === 7 /* PageRole.Forum */ || pageRole === 6 /* PageRole.Blog */;
    }
    debiki2.isSection = isSection;
    function isPageWithSidebar(pageRole) {
        return true; // hmm remove this fn then, now
    }
    debiki2.isPageWithSidebar = isPageWithSidebar;
    function pageRole_shallInclInWatchbar(pageRole) {
        switch (pageRole) {
            case 5 /* PageRole.EmbeddedComments */:
            case 1 /* PageRole.CustomHtmlPage */:
            case 2 /* PageRole.WebPage */:
            case 3 /* PageRole.Code */:
            case 4 /* PageRole.SpecialContent */:
                return false;
            default:
                return !!pageRole;
        }
    }
    debiki2.pageRole_shallInclInWatchbar = pageRole_shallInclInWatchbar;
    function me_isStranger(me) {
        return !me.id;
    }
    debiki2.me_isStranger = me_isStranger;
    // RENAME to pat_maySendInvites(pat, store: StoreView_Settings): MayMayNot
    function store_maySendInvites(store, user) {
        if (store.settings.ssoUrl) {
            return mayMayNot(false, "SSO enabled");
        }
        // Currently only staff and core members may send invites. [who_may_invite]
        if (!user_isStaffOrCoreMember(user) || user.isGroup) {
            return mayMayNot(false, "is not staff or core member");
        }
        return mayIndeed();
    }
    debiki2.store_maySendInvites = store_maySendInvites;
    function pat_isMember(pat) {
        if (!pat)
            return false;
        var patId = _.isObject(pat) ? pat.id : pat;
        return patId > MaxGuestId;
    }
    debiki2.pat_isMember = pat_isMember;
    debiki2.user_isMember = pat_isMember; // CLEAN_UP REMOVE QUICK SMALLER_BUNDLE
    function isGuest(user) {
        return debiki2.user_isGuest(user);
    }
    debiki2.isGuest = isGuest;
    function pat_isGuest(user) {
        return user.id <= MaxGuestId;
    }
    debiki2.pat_isGuest = pat_isGuest;
    debiki2.user_isGuest = pat_isGuest; // CLEAN_UP REMOVE QUICK SMALLER_BUNDLE  remove isGuest() and isMember() too
    function userId_isGuest(userId) {
        return userId <= MaxGuestId;
    }
    debiki2.userId_isGuest = userId_isGuest;
    // Old name  CLEAN_UP REMOVE
    debiki2.isMember = pat_isMember;
    function pat_isStaff(user) {
        return user.isAdmin || user.isModerator;
    }
    debiki2.pat_isStaff = pat_isStaff;
    // Old name  CLEAN_UP REMOVE
    debiki2.isStaff = pat_isStaff;
    // RENAME to pat_isStaffOrCore
    function user_isStaffOrCoreMember(user) {
        return debiki2.isStaff(user) || debiki2.user_trustLevel(user) >= 6 /* TrustLevel.CoreMember */;
    }
    debiki2.user_isStaffOrCoreMember = user_isStaffOrCoreMember;
    function pat_isSys(pat) {
        // BUGs elsewhere:  look for SysbotUserId too not just SystemUserId.  NEXT QUICK
        return pat.id === SystemUserId || pat.id === SysbotUserId;
    }
    debiki2.pat_isSys = pat_isSys;
    function isTalkToMeNotification(notf) {
        return notf.type === 301 /* NotificationType.DirectReply */ ||
            notf.type === 302 /* NotificationType.Mention */ ||
            notf.type === 304 /* NotificationType.Message */ ||
            notf.type === 453 /* NotificationType.Assigned */ ||
            notf.type === 454 /* NotificationType.Unassigned */ ||
            // But not: NotificationType.AssigneesChanged — that's about others.
            notf.type === 501 /* NotificationType.OneLikeVote */; // for now  [like_notf_ico]
    }
    debiki2.isTalkToMeNotification = isTalkToMeNotification;
    function isTalkToOthersNotification(notf) {
        return notf.type === 305 /* NotificationType.NewPost */ ||
            notf.type === 306 /* NotificationType.IndirectReply */ ||
            notf.type === 451 /* NotificationType.AssigneesChanged */;
    }
    debiki2.isTalkToOthersNotification = isTalkToOthersNotification;
    function isDeleted(post) {
        return !post || post.isTreeDeleted || post.isPostDeleted;
    }
    debiki2.isDeleted = isDeleted;
    function isWikiPost(postOrPostType) {
        var type;
        if (postOrPostType) {
            type = postOrPostType.postType || postOrPostType;
        }
        return type === 11 /* PostType.StaffWiki */ || type === 12 /* PostType.CommunityWiki */;
    }
    debiki2.isWikiPost = isWikiPost;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/server-side-type-stubs.ts  */ // These dummy types prevent compilation errors when compiling TypeScript for
// server side rendering.
//
// The classes listed below aren't included among the server side TypeScript files,
// so unless they're declared here the TypeScript compiler complains.
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/server-vars.ts  */ /// <reference path="model.ts" />
//=====================================================================================
//=====================================================================================
//=====================================================================================
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/widgets.ts  */ /*
 * Copyright (c) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="prelude.ts" />
/// <reference path="links.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    var r = ReactDOMFactories;
    debiki2.Router = reactCreateFactory(isServerSide() ? ReactRouterDOM.StaticRouter : ReactRouterDOM.BrowserRouter);
    debiki2.Switch = reactCreateFactory(ReactRouterDOM.Switch);
    debiki2.Route = reactCreateFactory(ReactRouterDOM.Route);
    debiki2.Redirect = reactCreateFactory(ReactRouterDOM.Redirect);
    debiki2.Link = reactCreateFactory(ReactRouterDOM.Link);
    debiki2.NavLink = reactCreateFactory(ReactRouterDOM.NavLink);
    // A react-router NavLink wrapped in a <li>.
    function LiNavLink() {
        var propsAndContents = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            propsAndContents[_i] = arguments[_i];
        }
        return r.li({}, debiki2.NavLink.apply(this, arguments));
    }
    debiki2.LiNavLink = LiNavLink;
    function LiExtLink() {
        var propsAndContents = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            propsAndContents[_i] = arguments[_i];
        }
        return r.li({}, r.a.apply(this, arguments));
    }
    debiki2.LiExtLink = LiExtLink;
    function ExtVerbLink(url) {
        return r.a({ href: url }, url);
    }
    debiki2.ExtVerbLink = ExtVerbLink;
    /**
     * Redirects the URL path only — preserves query string and hash fragment.
     */
    function RedirPath(props) {
        // @ifdef DEBUG
        if (_.isString(props.to)) {
            debiki2.dieIf(props.to.indexOf('?') >= 0, 'TyE2ABKS0');
            debiki2.dieIf(props.to.indexOf('#') >= 0, 'TyE5BKRP2');
        }
        // @endif
        var path = props.path;
        var exact = props.exact;
        var strict = props.strict;
        // [React_Router_v51] skip render(), use hooks and useParams instead.
        return debiki2.Route({ path: path, exact: exact, strict: strict, render: function (routeProps) {
                var newPathname = _.isFunction(props.to) ? props.to(routeProps.match.params) : props.to;
                // @ifdef DEBUG
                debiki2.dieIf(newPathname.indexOf('?') >= 0, 'TyE5ABKR20');
                debiki2.dieIf(newPathname.indexOf('#') >= 0, 'TyE6WKBL72');
                // @endif
                return debiki2.Redirect({
                    from: path,
                    exact: exact,
                    strict: strict,
                    to: {
                        pathname: newPathname,
                        search: routeProps.location.search,
                        hash: routeProps.location.hash
                    }
                });
            } });
    }
    debiki2.RedirPath = RedirPath;
    // Redirs to path, which should be like '/some/path/', to just '/some/path' with no trailing slash.
    // Keeps any ?query=string&and=hash#fragment.
    function RedirToNoSlash(_a) {
        var path = _a.path;
        return RedirPath({
            path: path,
            to: path.substr(0, path.length - 1),
            exact: true,
            strict: true, // otherwise ignores the trailing '/'
        });
    }
    debiki2.RedirToNoSlash = RedirToNoSlash;
    // Redirs to path + append.
    function RedirAppend(_a) {
        var path = _a.path, append = _a.append;
        return debiki2.Redirect({
            from: path,
            to: path + append,
            exact: true, // so won't match if there's more stuff after the last '/'
        });
    }
    debiki2.RedirAppend = RedirAppend;
    // Use an icon with on-hover instead?
    // Was: "Only *admins*", but now also mods and core members can see others'
    // email addresses, *if* this has been configured, by an admin.
    // UX WOULD send permission info to here, and show "Only admins" or
    // "Only admins and moderators" etc, as appropriate. But is it that important,
    // let's wait.
    debiki2.OnlyAdminsSee = r.span({ className: 's_OnlAdmTxt' }, " (only staff can see)"); // or "admins" or "core-members and moderators", hmm.  I18N
    // UX: Click on space? If 'btn'?  [sch_b_space]
    debiki2.PrimaryButton = makeWidget(r.button, ' btn btn-primary');
    debiki2.Button = makeWidget(r.button, ' btn btn-default');
    debiki2.PrimaryLinkButton = makeWidget(r.a, ' btn btn-primary');
    debiki2.LinkUnstyled = makeWidget(r.a, '');
    debiki2.LinkButton = makeWidget(r.a, ' btn btn-default'); // not blue [2GKR5L0]
    debiki2.ExtLinkButton = makeWidget(r.a, ' btn btn-default', { ext: true });
    debiki2.InputTypeSubmit = makeWidget(r.input, ' btn btn-primary', { type: 'submit' });
    function makeWidget(what, spaceWidgetClasses, extraProps) {
        return function (origProps) {
            var children = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                children[_i - 1] = arguments[_i];
            }
            var newProps = _.assign({}, origProps || {}, extraProps);
            var helpText = newProps.help;
            if (helpText) {
                // We'll show a help text <p> below the widget.
                delete newProps.help;
                newProps.key = newProps.key || 'widget';
            }
            newProps.className = (origProps.className || '') + spaceWidgetClasses;
            // Prevent automatic submission of Button when placed in a <form>.
            // And, if primary button, add Bootstrap's primary button color class.
            if (what === r.button || what === r.input && extraProps.type === 'submit') {
                newProps.onClick = function (event) {
                    if (origProps.disabled) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    if (origProps.onClick) {
                        event.preventDefault();
                        origProps.onClick(event);
                    }
                    // else: Don't prevent-default; instead, submit form.
                };
                if (origProps.primary) {
                    newProps.className = newProps.className + ' btn-primary';
                }
                // Don't do this inside the above `if`; that won't work if `.primary` is undef/false.
                delete newProps.primary;
            }
            // React Bootstrap's Link uses 'to', so better if UnstyledLink works with 'to' too, not only 'href'.
            if (what === r.a && !newProps.href)
                newProps.href = newProps.to;
            // Make link buttons navigate within the single-page-app, no page reloads. Even if they're
            // in a different React root. The admin app is it's own SPA [6TKQ20] so, when in the admin area,
            // links to user profiles and discussions, are external. And vice versa.
            if (what === r.a && !newProps.onClick) {
                var isExternal = newProps.ext || eds.isInEmbeddedCommentsIframe;
                // @ifdef DEBUG
                debiki2.dieIf(isServerSide() && eds.isInEmbeddedCommentsIframe, 'TyE2KWT05');
                // @endif
                var href_1 = newProps.href;
                var linksToAdminArea = href_1 && href_1.indexOf('/-/admin/') === 0; // dupl [5JKSW20]
                isExternal = isExternal || eds.isInAdminArea !== linksToAdminArea;
                if (!isExternal) {
                    var afterClick_1 = newProps.afterClick; // field deleted below
                    newProps.onClick = function (event) {
                        event.preventDefault(); // avoids full page reload
                        debiki2.page['Hacks'].navigateTo(href_1);
                        // Some ancestor components ignore events whose target is not their own divs & stuff.
                        // Not my code, cannot change that. I have in mind React-Bootstrap's Modal, which does this:
                        // `if (e.target !== e.currentTarget) return; this.props.onHide();` — so onHide() never
                        // gets called. But we can use afterClick: ...:
                        if (afterClick_1) {
                            afterClick_1();
                        }
                    };
                }
            }
            delete newProps.afterClick;
            delete newProps.ext;
            var anyHelpDiv = helpText && r.p({ className: 'help-block', key: newProps.key + '-help' }, helpText);
            var widgetArgs = [newProps].concat(children);
            var widget = what.apply(undefined, widgetArgs);
            return anyHelpDiv ? [widget, anyHelpDiv] : widget;
        };
    }
    function MenuItemsMany(props) {
        var children = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            children[_i - 1] = arguments[_i];
        }
        var className = 's_Hz ' + (props.className || '');
        // COULD Do nothing if clicking between the child list items — unclear which one one intended.
        // But then the menu won't close, if actually clicks an item inside. ... Fix later somehow.
        //props:  onClick: (event) => event.stopPropagation() },
        return (r.li.apply(r, __spreadArray([__assign(__assign({ role: 'presentation' }, props), { className: className })], children, false)));
    }
    debiki2.MenuItemsMany = MenuItemsMany;
    function MenuItem(props) {
        var children = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            children[_i - 1] = arguments[_i];
        }
        var className = props.className || '';
        if (props.active) {
            className += ' active';
        }
        // If there's both a href and a click handler, then that's so that by mouse-middle-
        // clicking, one can open the link in a new tab. And then, if clicking normally
        // (left mouse button), the href should be ignored (otherwise, would trigger a page
        // navigation).
        var onClickFn = props.onClick || props.onSelect;
        var onClick = onClickFn && function (event) {
            event.preventDefault();
            onClickFn();
        };
        // Don't do  r.a(props, children)  because that'd result in an """an array or iterator
        // should have a unique "key" prop""" React.js warning.
        var linkProps = { role: 'button', id: props.id, href: props.href, onClick: onClick, tabIndex: props.tabIndex || -1 };
        return (r.li({ role: 'presentation', className: className, key: props.key }, r.a.apply(null, __spreadArray([linkProps], children, true))));
    }
    debiki2.MenuItem = MenuItem;
    function MenuItemLink(props) {
        // Don't do  r.a(props, children)  because that'd result in an """an array or iterator
        // should have a unique "key" prop""" React.js warning.
        var children = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            children[_i - 1] = arguments[_i];
        }
        // If we're in the admin area, use <a href> because then the destinations are in another
        // single-page-app. And if we're in the forum app, use Link, for instant
        // within-the-SPA navigation.  A bit dupl, see [5JKSW20]
        var linksToAdminArea = props.to.indexOf('/-/admin/') === 0;
        var isExternal = props.to.indexOf('//') >= 0; // e.g. https://  or  //hostname/...
        var useSinglePageAppLink = !isExternal && eds.isInAdminArea === linksToAdminArea;
        // If useSinglePageAppLink, create a Link({ to: ... }),
        // otherwise, create a r.a({ href: ... }):
        var linkFn = useSinglePageAppLink ? debiki2.Link : r.a;
        var addrAttr = useSinglePageAppLink ? 'to' : 'href';
        var linkProps = { role: 'button', tabIndex: props.tabIndex || -1,
            target: props.target, id: props.id };
        linkProps[addrAttr] = props.to;
        return (r.li({ role: 'presentation', className: props.className, key: props.key }, linkFn.apply(null, [linkProps].concat(children))));
    }
    debiki2.MenuItemLink = MenuItemLink;
    function MenuItemDivider() {
        return r.li({ role: 'separator', className: 'divider' });
    }
    debiki2.MenuItemDivider = MenuItemDivider;
    function UserNameLink(props) {
        return UserName(__assign(__assign({}, props), { makeLink: true }));
    }
    debiki2.UserNameLink = UserNameLink;
    function UserName(props) {
        // Some dupl code, see discussion.ts, edit-history-dialog.ts & avatar.ts [88MYU2]
        var settings = props.settings || props.store.settings;
        var user = props.user || props.store.usersByIdBrief[props.patId];
        var showHow = settings.showAuthorHow;
        // (All StackExchange demo sites use ShowAuthorHow.FullNameThenUsername, so
        // only used in that if branch, below.)
        var isStackExchangeUser = user.username && user.username.indexOf('__sx_') === 0; // [2QWGRC8P]
        var isUnknown = user.id === UnknownUserId;
        var guestClass = debiki2.user_isGuest(user) ? ' esP_By_F-G' : '';
        var namePartOne;
        var namePartTwo;
        if (user.isAnon) {
            // There's already "By" before, and "anonym" isn't a name, so use lowercase.
            namePartOne = r.span({ className: 'esP_By_F esP_By_F-G' }, t.Anonym);
            if (props.store && user.anonForId) { // maybe always take a DiscStore as fn props?
                var store = props.store;
                if (store.me.id === user.anonForId) {
                    // For now: ...
                    namePartTwo = rFr({}, " ", r.span({ className: 'c_P_By_AnonYou' }, "you")); // I18N
                }
                else {
                    // ... Later: show "you" if it's oneself. But otherwise, set `user = the-real-user`
                    // and generate namePartOne & namePartTwo as usual, as if wasn't anon?
                    // And prefix with "anonym, namely: ..." and let "anonym" link to
                    // the anonym's profile page. — This is only for admins, who can, if they want,
                    // see who the anonyms are — can be needed to stop bad behavior.
                    var anyRealAuthor = store.usersByIdBrief[user.anonForId];
                    if (anyRealAuthor) {
                        // ...
                        // user = anyRealAuthor?  + do the if{} below as usual (remove the 'else') ?
                        // ...
                    }
                }
            }
        }
        else if (showHow === 1 /* ShowAuthorHow.UsernameOnly */) {
            // CLEAN_UP rename these CSS classes from ...By_F to By_1 and By_2 for part 1 (bold font)
            // and 2 (normal font) instead?
            // But for now, use By_F for the *username* just because it's bold, and By_U for the full name,
            // because it's thin.
            var username = !user.username ? null : r.span({ className: 'esP_By_F' }, user.username);
            var fullName = username ? null :
                r.span({ className: 'esP_By_U' + guestClass }, user.fullName);
            namePartOne = username;
            namePartTwo = fullName;
        }
        else if (showHow === 2 /* ShowAuthorHow.UsernameThenFullName */) {
            var username = !user.username ? null : r.span({ className: 'esP_By_F' }, user.username + ' ');
            var skipName = !user.fullName || (props.avoidFullName && user.username) || user.username == user.fullName;
            var fullName = skipName ? undefined :
                r.span({ className: 'esP_By_U' + guestClass }, user.fullName);
            namePartOne = username;
            namePartTwo = fullName;
        }
        else {
            // @ifdef DEBUG
            debiki2.dieIf(showHow && showHow !== 3 /* ShowAuthorHow.FullNameThenUsername */, 'TyEE4KGUDQ2');
            // @endif
            var fullName = !user.fullName || (props.avoidFullName && user.username) ? undefined :
                r.span({ className: 'esP_By_F' + guestClass }, user.fullName + (guestClass ? '' : ' '));
            var username = !user.username || isStackExchangeUser ? null :
                r.span({ className: 'esP_By_U' }, r.span({ className: 'esP_By_U_at' }, '@'), user.username);
            namePartOne = fullName;
            namePartTwo = username;
        }
        if (!namePartOne && !namePartTwo) {
            namePartOne = "(Unknown author)";
        }
        var linkFn = (props.makeLink && !isUnknown ? r.a : r.span);
        var newProps = {
            className: 'dw-p-by esP_By' + (isUnknown ? ' s_P_By-Unk' : ''),
        };
        if (debiki2.isVal(props.key)) {
            newProps.key = props.key;
        }
        // Talkyard demo hack: usernames that starts with '__sx_' are of the form    [2QWGRC8P]
        // '__sx_[subdomain]_[user-id]' where [subdomain] is a StackExchange subdomain, and
        // [user-id] is a StackExchange user id. In this way, we can link & attribute comments
        // directly to people at StackExchange, as required by StackOverflow's CC-By license.
        if (isStackExchangeUser) {
            var subdomainAndIdStr = user.username.substr(5, 9999);
            var array = subdomainAndIdStr.split('_');
            var subdomain = array[0];
            var userId = array[1];
            newProps.target = '_blank';
            newProps.href = subdomain === 'so'
                ? "https://stackoverflow.com/users/".concat(userId)
                : "https://".concat(subdomain, ".stackexchange.com/users/").concat(userId);
        }
        else if (!isUnknown) {
            if (props.makeLink) {
                // This will incl the Talkyard server origin, if we're in an embedded comments discussion
                // — otherwise, would link to the embedding server, totally wrong.  [EMBCMTSORIG]
                // (Previously, there was such a bug.)
                newProps.href = debiki2.linkToUserProfilePage(user);
            }
            // Can disable onClick by specifying null? because null = defined.
            if (debiki2.isDefined2(props.onClick)) {
                newProps.onClick = props.onClick;
            }
            else {
                newProps.onClick = function (event) {
                    // Dupl code [1FVBP4E]  —  can remove elsewhere?
                    debiki2.morebundle.openAboutUserDialog(user, event.target);
                    event.preventDefault();
                    event.stopPropagation();
                };
            }
        }
        // Later: If including is-admin/moderator info, need to uncache pages where name shown. [5KSIQ24]
        return linkFn(newProps, namePartOne, namePartTwo);
    }
    debiki2.UserName = UserName;
    function TagListLive(ps) {
        var store = ps.store;
        if (store.settings.enableTags === false)
            return null;
        var me = store.me;
        var tags = (ps.forPost && ps.forPost.pubTags) || (ps.forPat && ps.forPat.pubTags);
        var canEditTags = ps.live !== false && debiki2.pat_mayEditTags(me, ps);
        var thereAreTags = tags && tags.length;
        if (!thereAreTags && !canEditTags)
            return;
        var maybeOpenTagsDiag = !canEditTags ? null : function () {
            debiki2.morebundle.openTagsDialog(ps);
        };
        return TagList(__assign(__assign({}, ps), { onClick: maybeOpenTagsDiag }));
    }
    debiki2.TagListLive = TagListLive;
    function TagList(ps) {
        var _a, _b, _c;
        // @ifdef DEBUG
        // Only one of { tags, forPat, forPost } should be specified.
        debiki2.dieIf(ps.tags && ps.forPat, 'TyE4MGD2RUJ6');
        debiki2.dieIf(ps.tags && ps.forPost, 'TyE4MGD2RUJ5');
        debiki2.dieIf(ps.forPost && ps.forPat, 'TyE4MGD2RUJ7');
        // @endif
        var patOrPostClass = ps.forPat ? ' c_Tag-Pat' : ' c_Tag-Po';
        var anyTags = ps.tags || ((_a = ps.forPost) === null || _a === void 0 ? void 0 : _a.pubTags) || ((_b = ps.forPat) === null || _b === void 0 ? void 0 : _b.pubTags);
        var tagTypesById = (
        //ps.tagTypesById ||  // maybe later
        ((_c = ps.store) === null || _c === void 0 ? void 0 : _c.tagTypesById) || {});
        var thereAreTags = anyTags && anyTags.length;
        var canEditTags = ps.onClick;
        var tagElms = [];
        var canEditAnyClass = !canEditTags ? '' : ' c_TagL-CanEdAny';
        var canEditThisClass = !canEditTags ? '' : ' c_TagL_Tag-CanEd';
        function onClick(event) {
            event.stopPropagation();
            event.preventDefault();
            if (ps.onClick)
                ps.onClick();
        }
        if (thereAreTags) {
            // The e2e tests expect the tags in the same order always. [sort_tags]
            // Not that much point in sorting server side, because it's good to sort
            // here anyway, if pat adds a single tag browser side.
            var tagsSorted = __spreadArray([], anyTags, true).sort(debiki2.tags_mkSortFn(tagTypesById));
            tagElms = tagsSorted.map(function (tag) {
                var tagType = tagTypesById[tag.tagTypeId];
                return (r.li({ key: tag.id }, r.a({ className: 'c_TagL_Tag' + canEditThisClass + patOrPostClass, onClick: onClick }, (tagType === null || tagType === void 0 ? void 0 : tagType.dispName) ||
                    // In case there's some bug so the tag type wasn't found.
                    "tag_id: ".concat(tag.id, " tag_type: ").concat(tag.tagTypeId))));
            });
        }
        // Don't show the add tag button at reply posts — usually doesn't make
        // any sense to tag replies.
        if (canEditTags && (!ps.forPost || ps.forPost.nr === BodyNr)) {
            tagElms.push(r.li({ key: '+' }, debiki2.Button({ onClick: onClick, className: 'c_TagL_AddB' }, '+ ...')));
        }
        // Maybe always add classes 'n_TagL-Pat' and 'n_TagL-Po' here? Instead of only
        // if on a discussion page?  [alw_tag_type]
        return r.ul({ className: ' c_TagL ' + (ps.className || '') + canEditAnyClass }, tagElms);
    }
    debiki2.TagList = TagList;
    /// A modal dialog that pops up instantly. Works also before React-Bootstrap loaded.
    ///
    /// React-Bootsrap's Modal, ModalBody etc components might not yet be available,
    /// so we create all elems ourselves here manually.
    ///
    function InstaDiag(ps) {
        return r.div({ className: 's_InstaDgW ' + (ps.diagClassName || '') }, r.div({ className: 'modal-backdrop fade in', style: { opacity: 0.5 } }), r.div({ role: 'dialog', className: 'fade in modal',
            style: { display: 'block' } }, r.div({ className: 'modal-dialog' }, r.div({ className: 'modal-content', role: 'document' }, !ps.title ? null : r.div({ className: 'modal-header' }, r.h4({ className: 'modal-title ' + (ps.titleClassName || '') }, ps.title)), r.div({ className: 'modal-body' }, ps.body, !ps.footer ? null : r.div({ className: 'modal-footer' }, ps.footer))))));
    }
    debiki2.InstaDiag = InstaDiag;
    // Facebook logo.
    // Need to follow Facebook's brand guidelines, and use this image for Facebook
    // login and share buttons. [FBBRAND]  Otherwise, when staff at Facebook inspect your
    // OAuth app, they'll notice this and contact you, and tell you that you need to
    // follow Facebook's brand guidelines.
    debiki2.FacebookLogoImage = r.img({ src: eds.cdnOrServerOrigin + '/-/media/brands/facebook/flogo-HexRBG-Wht-58.png',
        className: 's_FbIcon' });
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/utils/react-utils.ts  */ /*
 * Copyright (C) 2015 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="utils.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function createComponent(componentDefinition) {
        if (isServerSide()) {
            // The mere presence of these functions cause an unknown error when rendering
            // React-Router server side. So remove them; they're never called server side anyway.
            // The error logs the message '{}' to console.error(); no idea what that means.
            delete componentDefinition.UNSAFE_componentWillUpdate;
            delete componentDefinition.UNSAFE_componentWillReceiveProps;
        }
        return reactCreateFactory(createReactClass(componentDefinition));
    }
    debiki2.createComponent = createComponent;
    function createClassAndFactory(componentDefinition) {
        return createComponent(componentDefinition);
    }
    debiki2.createClassAndFactory = createClassAndFactory;
    // ... let's name it "createFactory" only
    function createFactory(compSpec) {
        return createComponent(compSpec);
    }
    debiki2.createFactory = createFactory;
    function whenMsToIsoDate(whenMs) {
        return new Date(whenMs).toISOString().replace(/T/, ' ');
    }
    debiki2.whenMsToIsoDate = whenMsToIsoDate;
    /**
     * Wraps the ISO8601 in a <span class="dw-ago"> so jQuery can find it and replace
     * the fixed ISO date with something like "5 hours ago" — see processTimeAgo
     * just below.  The server inculdes only ISO dates, not "x time ago", in its HTML,
     * so that it can be cached.
     *
     * CLEAN_UP: Nowadays, jQuery is gone.
     */
    function timeAgo(whenMs, clazz) {
        var isoDate = whenMsToIsoDate(whenMs);
        return r.span({ className: 'dw-ago ' + (clazz || '') }, isoDate);
    }
    debiki2.timeAgo = timeAgo;
    /**
     * Like timeAgo(isoDate) but results in just "5h" instead of "5 hours ago".
     * That is, uses only one single letter, instead of many words.
     *
     * CLEAN_UP: For whatever reason, this fn is nowadays the same as timeAgo()
     * just above, minus the '-ltr' CSS class suffix.
     */
    function prettyLetterTimeAgo(whenMs, clazz) {
        var isoDate = whenMsToIsoDate(whenMs);
        return r.span({ className: 'dw-ago-ltr ' + (clazz || '') }, isoDate);
    }
    debiki2.prettyLetterTimeAgo = prettyLetterTimeAgo;
    function timeExact(whenMs, clazz) {
        return timeAgo(whenMs, clazz); /*
        // This no longer works, because moment.js was moved to more-bundle.js, so    [E5F29V]
        // cannot convert to e.g. "Yesterday 05:30 PM". Instead, show "4 hours ago" or sth like that.
        var isoDate = whenMsToIsoDate(whenMs);
        return r.span({ className: 'esTimeExact ' + (clazz || '') }, isoDate);
        */
    }
    debiki2.timeExact = timeExact;
    /**
     * Replaces ISO8601 timestamps with "5 hours ago" or just "5h".
     *
     * Before when I was using moment.js: (no longer do, it's rather large)
     * Takes 25-30ms for 80 unprocessed comments on my computer, and 2ms for 160
     * that have been processed already.
     */
    // COULD move to page/hacks.ts
    function processTimeAgo(selector) {
        // COULD_OPTIMIZE seems is called twice? but once should be enough.
        selector = selector || '';
        var timeDoneClass = 'esTimeDone';
        var now = Date.now();
        // First handle all long version timestamps (don't end with -ltr ("letter")).
        // Result: e.g. "5 hours ago"
        var elemsLongAgoText = debiki2.$all(selector + ' .dw-ago:not(.' + timeDoneClass + ')');
        _.each(elemsLongAgoText, function (elem) {
            var isoDate = elem.textContent;
            var then = debiki2['isoDateStringToMillis'](isoDate); // typescript compilation error without []
            var timeAgoString = debiki.prettyDuration(then, now);
            elem.textContent = timeAgoString;
            debiki2.$h.addClasses(elem, timeDoneClass);
            // But don't add any title tooltip attr, see [85YKW20] above.
        });
        // Then handle all one-letter timestamps (end with -ltr ("letter")).
        // Result: e.g. "5h" (instead of "5 hours ago").
        var elemsLetter = debiki2.$all(selector + ' .dw-ago-ltr:not(.' + timeDoneClass + ')');
        _.each(elemsLetter, function (elem) {
            var isoDate = elem.textContent;
            var then = debiki2['isoDateStringToMillis'](isoDate); // typescript compilation error without []
            var durationLetter = debiki.prettyLetterDuration(then, now);
            elem.textContent = durationLetter;
            // Don't add any title tooltip [85YKW20]. That's better done by the React.js components
            // that knows what this date is about, so the tooltip can be e.g. "Last edited on <date>" or
            // "Created on <date>" rather than just the date.
            debiki2.$h.addClasses(elem, timeDoneClass);
        });
        // This no longer works, here in slim-bundle.js, because moment.js moved to more-bundle.js [E5F29V]
        // & all exact timestamps (end with -exact).
        // Result: e.g. "Yesterday 12:59 am", or, if today, only "13:59".
        /*
        $(selector + ' .esTimeExact:not(.' + timeDoneClass + ')').each(function() {
          var $this = $(this);
          var isoDate = $this.text();
          var m = moment(isoDate);  // or exclude Moment from default JS bundle? [6KFW02]
          var whenText;
          if (m.year() !== debiki.currentYear) {
            whenText = m.format('ll'); // e.g. "Sep 4 2015"
          }
          else if (m.isBefore(moment().startOf('day'))) {
            whenText = m.format('MMM D'); // e.g. "Sep 4"  (MMMM = September, not Sep)
          }
          else {
            whenText = m.format('LT');  // e.g. 8:30 PM
          }
          // getTimezoneOffset() returns -60 (not +60) for UTC+1. Weird. So use subtract(..).
          //m = m.subtract((new Date()).getTimezoneOffset(), 'minutes'); -- Oops not needed.
          $this.text(whenText);
          $this.addClass(timeDoneClass);
          // But don't add any title tooltip attr, see [85YKW20] above.
        });
        */
    }
    debiki2.processTimeAgo = processTimeAgo;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
(function (debiki2) {
    var utils;
    (function (utils) {
        //------------------------------------------------------------------------------
        // Websearch for "react hooks dialog"
        // Also see:
        // https://codesandbox.io/s/7kxj9p9qm0?from-embed=&file=/src/Dialog/index.js
        //
        function makeMountNode() {
            var elem = Bliss.create('div');
            document.body.appendChild(elem);
            return elem;
        }
        utils.makeMountNode = makeMountNode;
        //------------------------------------------------------------------------------
    })(utils = debiki2.utils || (debiki2.utils = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/avatar/avatar.ts  */ /*
 * Copyright (c) 2015-2018 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../rules.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var avatar;
    (function (avatar) {
        //------------------------------------------------------------------------------
        var NumAvatarColors = 10;
        var AvatarColorHueDistance = 360 / NumAvatarColors;
        var textAvatarsTaken = {}; // for now [95MFU2]
        var textAvatarsByUserId = {}; // for now [95MFU2]
        function resetAvatars() {
            textAvatarsTaken = {}; // for now [95MFU2]
            textAvatarsByUserId = {};
        }
        avatar.resetAvatars = resetAvatars;
        avatar.Avatar = debiki2.createComponent({
            displayName: 'Avatar',
            onClick: function (event) {
                event.stopPropagation();
                event.preventDefault();
                debiki2.morebundle.openAboutUserDialog(this.props.user.id, event.target, this.props.title);
            },
            tiny: function () {
                return !this.props.size || this.props.size === 1 /* AvatarSize.Tiny */;
            },
            makeTextAvatar: function () {
                var user = this.props.user;
                var hidden = this.props.hidden;
                var result = textAvatarsByUserId[user.id];
                if (result)
                    return result;
                var color;
                var colorIndex;
                var firstLetterInName;
                var isGuestClass = '';
                var manyLettersClass = '';
                if (user.username && user.username.indexOf('__sx_') === -1) { // [2QWGRC8P]
                    firstLetterInName = user.username[0].toUpperCase();
                }
                else if (user.fullName) {
                    firstLetterInName = user.fullName[0].toUpperCase(); // [7ED8A2M]
                }
                else if (user.isAnon) {
                    firstLetterInName = '?';
                }
                else {
                    debiki2.die("Name missing: " + JSON.stringify(user) + " [EdE7UMYP3]");
                }
                if (hidden) {
                    // Give avatars for hidden posts the boring gray guest color.
                    isGuestClass = ' esAvtr-gst';
                }
                else if (user.id > 0) {
                    // Always use the same color for the same user (unless the color palette gets changed).
                    colorIndex = user.id % NumAvatarColors;
                    var hue = AvatarColorHueDistance * colorIndex;
                    var saturation = 58;
                    var lightness = 76;
                    if (this.tiny()) {
                        // Use a darker color, because otherwise hard to see these small avatars.
                        // Reduce saturation too, or the color becomes too strong (since darker = more color here).
                        lightness -= 4;
                        saturation -= 3;
                    }
                    if (50 <= hue && hue <= 80) {
                        // These colors (yellow, green) are hard to discern. Make them stronger.
                        lightness -= 10;
                        saturation -= 4;
                    }
                    else if (40 <= hue && hue <= 185) {
                        // A bit hard to discern.
                        lightness -= 5;
                        saturation -= 2;
                    }
                    color = 'hsl(' + hue + ', ' + saturation + '%, ' + lightness + '%)';
                }
                else if (user.id === SystemUserId) {
                    isGuestClass = ' esAvtr-sys';
                }
                else {
                    // Give all guests and anonyms the same boring gray color.
                    isGuestClass = ' esAvtr-gst';
                }
                // Append a number to make the letters unique on this page.
                // Possibly different numbers on different pages, for the same user.
                var isUnknownHiddenOrGone = user.id === UnknownUserId || user.id == -4 /* Pats.FutureAnonId */ ||
                    hidden || debiki2.user_isGone(user);
                var number = 1;
                var text = user.id == -4 /* Pats.FutureAnonId */ ? 'A?' : (isUnknownHiddenOrGone ? '?' : firstLetterInName);
                var textAndColor = text + colorIndex;
                var alreadyInUse = !isUnknownHiddenOrGone && textAvatarsTaken[textAndColor];
                while (alreadyInUse) {
                    number += 1;
                    if (number >= 10) {
                        text = firstLetterInName + '?';
                        break;
                    }
                    text = firstLetterInName + number;
                    textAndColor = text + colorIndex;
                    alreadyInUse = textAvatarsTaken[textAndColor];
                }
                if (text.length > 1) {
                    manyLettersClass = ' edAvtr-manyLetters';
                }
                result = {
                    text: text,
                    classes: ' esAvtr-ltr' + manyLettersClass + isGuestClass,
                    color: color,
                };
                // Show a many-people icon, instead of a character, for groups.
                if (user.isGroup) {
                    result.text = '';
                    result.classes = ' icon-users' + result.classes;
                }
                if (!hidden) {
                    textAvatarsTaken[textAndColor] = true;
                    textAvatarsByUserId[user.id] = result;
                }
                return result;
            },
            render: function () {
                var user = this.props.user;
                var ignoreClicks = this.props.ignoreClicks ||
                    // The user is unknow when rendering the author avatar, in
                    // the new reply preview, if we haven't logged in. [305KGWGH2]
                    user.id === UnknownUserId;
                // One or more of these might be undefined, even if the user has an avatar:
                // hash paths for only *some* avatar sizes are included.
                var medPath = user.avatarMediumHashPath;
                var smlPath = user.avatarSmallHashPath;
                var tnyPath = user.avatarTinyHashPath;
                var extraClasses = this.tiny() ? ' esAvtr-tny' : '';
                extraClasses += ignoreClicks ? ' esAv-IgnoreClicks' : '';
                var content;
                var style;
                var largestPicPath = medPath || smlPath || tnyPath;
                if (largestPicPath) {
                    // If we don't know the hash path to the avatar of the requested size, then use another size.
                    var picPath = void 0;
                    if (this.props.size === 3 /* AvatarSize.Medium */) {
                        picPath = largestPicPath;
                    }
                    else if (this.props.size === 2 /* AvatarSize.Small */) {
                        picPath = smlPath || tnyPath || medPath;
                    }
                    else {
                        picPath = tnyPath || smlPath || medPath;
                    }
                    var origins = this.props.origins;
                    content = r.img({ src: debiki2.linkToUpload(origins, picPath) });
                }
                else {
                    var lettersClassesColor = this.makeTextAvatar();
                    extraClasses += lettersClassesColor.classes;
                    content = lettersClassesColor.text;
                    if (lettersClassesColor.color) {
                        style = { backgroundColor: lettersClassesColor.color };
                    }
                }
                var title = user.username || user.fullName;
                if (this.props.title) {
                    title += ' — ' + this.props.title;
                }
                // Later: If including some is-admin/moderator symbol, then need to uncache pages
                // where this avatar is shown. [5KSIQ24]
                var elemName = ignoreClicks ? 'span' : 'a';
                var elemFn = r[elemName];
                var href = ignoreClicks ? null : debiki2.linkToUserProfilePage(user);
                var onClick = ignoreClicks || this.props.clickOpensUserProfilePage ?
                    null : this.onClick;
                return (elemFn({ className: 'esAvtr edAvtr' + extraClasses, href: href, title: title, style: style, onClick: onClick }, content));
            }
        });
        //------------------------------------------------------------------------------
    })(avatar = debiki2.avatar || (debiki2.avatar = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/avatar/AvatarAndName.ts  */ /*
 * Copyright (c) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="avatar.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var avatar;
    (function (avatar_1) {
        //------------------------------------------------------------------------------
        avatar_1.AvatarAndName = function (props) {
            var user = props.user;
            var avatar = props.hideAvatar ?
                null : debiki2.avatar.Avatar({ user: user, origins: props.origins, ignoreClicks: true });
            // Dupl code, see posts.ts [88MYU2]
            var namePart1;
            var namePart2;
            if (user.fullName && user.username) {
                namePart1 = r.span({ className: 'esAvtrName_username' }, user.username);
                namePart2 = r.span({ className: 'esAvtrName_fullName' }, ' (' + user.fullName + ')');
            }
            else if (user.fullName) {
                namePart1 = r.span({ className: 'esAvtrName_fullName' }, user.fullName);
                namePart2 = r.span({ className: 'esAvtrName_isGuest' }, user.isEmailUnknown ? '??' : '?');
            }
            else if (user.username) {
                namePart1 = r.span({ className: 'esAvtrName_username' }, user.username);
            }
            else {
                namePart1 = r.span({ className: 'esAvtrName' }, '(Unknown author)');
            }
            var onClick = props.ignoreClicks ?
                null : function (event) { return debiki2.morebundle.openAboutUserDialog(user.id, event.target); };
            return (r.span({ className: 'esAvtrName', onClick: onClick }, avatar, namePart1, namePart2));
        };
        //------------------------------------------------------------------------------
    })(avatar = debiki2.avatar || (debiki2.avatar = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/edit-history/edit-history-dialog.ts  */ // This makes the TypeScript compiler happy when it bundles server side code.
var debiki2;
(function (debiki2) {
    debiki2.edithistory = {};
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/editor/CdnLinkifyer.ts  */ /*
 * Copyright (C) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//------------------------------------------------------------------------------
var ed;
(function (ed) {
    var editor;
    (function (editor) {
        var CdnLinkifyer;
        (function (CdnLinkifyer) {
            //------------------------------------------------------------------------------
            // SECURITY regex & evil input
            // COULD match any origin too: (and (?:...) is a non capturing group)
            //    (?:(?:https?:)\/\/[^\/]+)?
            var uploadsLinkRegex = /\/-\/(u|uploads\/public)\/([a-zA-Z0-9\/\._-]+)/;
            // SECURITY regex & evil input
            // A tiny tiny bit buggy: matches this:
            //   <a weird="<tag-in-attr" href="/-/u/....">
            // although I don't want it to match if there're 2 '<' like that.
            // Barely matters though; works fine in real life.
            var uploadsRegexInTag = /(\<[^\<\>]+\s[a-z]+=['"])\/-\/(u|uploads\/public)\/([a-zA-Z0-9\/\._-]+['"][^\<\>]*\>)/;
            function replaceLinks(md) {
                // (Don't exit here if !eds.uploadsUrlPrefixCommonmark, because it changes "suddenly"
                // when rendering server side. [5YKF02])
                // (There's always a rules.image.)
                md.renderer.rules.image = makeMarkdownUrlReplacerRule('src', md.renderer.rules.image);
                md.renderer.rules.link_open =
                    makeMarkdownUrlReplacerRule('href', md.renderer.rules.link_open || defaultInlineRule);
                md.renderer.rules.html_inline =
                    makeHtmlUrlReplacerRule(md, md.renderer.rules.html_inline);
                // This might in some rare cases also transforms html tag text contents that
                // matches /-/u/... to cdn-origin/-/u/...,
                // COULD use an HTML parser to ensure only tag attributes are considered, instead.
                // Not so very important though — we sanitize the resulting html anyway.
                md.renderer.rules.html_block =
                    makeHtmlUrlReplacerRule(md, md.renderer.rules.html_block);
            }
            CdnLinkifyer.replaceLinks = replaceLinks;
            function defaultInlineRule(tokens, idx, options, env, self) {
                return self.renderToken(tokens, idx, options);
            }
            function makeMarkdownUrlReplacerRule(attrName, defaultRule) {
                return function (tokens, idx, options, env, self) {
                    // (Don't test this earlier, because eds.uploadsUrlPrefixCommonmark changes "suddenly"
                    // when rendering server side. [5YKF02])
                    // Later: What? How could there ever *not* be any uploads url prefix? This is probably an old
                    // if-test, before site pub-id incl in the uploads url path? Always false now? Can be removed?
                    if (!eds.uploadsUrlPrefixCommonmark)
                        return defaultRule(tokens, idx, options, env, self);
                    var token = tokens[idx];
                    var attrIndex = token.attrIndex(attrName);
                    if (attrIndex !== -1) {
                        var attrNameValue = token.attrs[attrIndex];
                        var matches = attrNameValue[1].match(uploadsLinkRegex);
                        if (matches) {
                            attrNameValue[1] = eds.uploadsUrlPrefixCommonmark + matches[2];
                        }
                    }
                    return defaultRule(tokens, idx, options, env, self);
                };
            }
            function makeHtmlUrlReplacerRule(md, defaultInlineRule) {
                return function (tokens, idx, options, env, self) {
                    // (Don't test this earlier, because eds.uploadsUrlPrefixCommonmark changes "suddenly"
                    // when rendering server side. [5YKF02])
                    if (!eds.uploadsUrlPrefixCommonmark)
                        return defaultInlineRule(tokens, idx, options, env, self);
                    // Inside an html tag, replace any /-/u/... (uploads) match with the CDN address.
                    var token = tokens[idx];
                    var content = token.content;
                    token.content = content.replace(uploadsRegexInTag, '$1' + eds.uploadsUrlPrefixCommonmark + '$3');
                    return defaultInlineRule(tokens, idx, options, env, self);
                };
            }
            //------------------------------------------------------------------------------
        })(CdnLinkifyer = editor.CdnLinkifyer || (editor.CdnLinkifyer = {}));
    })(editor = ed.editor || (ed.editor = {}));
})(ed || (ed = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/editor/link-previews-markdown-it-plugin.editor.ts  */ /*
 * Copyright (C) 2015, 2020 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
// In Markdown-it, an attribute is a two elems array: [attr-name, attr-value].
var AtrNameIx = 0;
var AtrValIx = 1;
// We replace the link-open fn, to show inline link previews.
var origLinkOpenRenderFn;
function renderLinkOpen(tokens, idx, options, env, self) {
    //console.debug('TOKENS: ' + JSON.stringify(tokens, undefined, 4));
    // See the docs: https://github.com/markdown-it/markdown-it-for-inline#use
    // example 2, to see how one can replace the text in a link
    // — the approach taken below.
    // The link-open will get rendered as: <a herf=... >.
    var linkOpenToken = tokens[idx];
    var classAtrIx = linkOpenToken.attrIndex('class');
    var linkHrefAtrIx = linkOpenToken.attrIndex('href');
    var hrefAtr = linkHrefAtrIx >= 0 && linkOpenToken.attrs[linkHrefAtrIx];
    var linkUrl = hrefAtr && hrefAtr[AtrValIx];
    // The text to show in the <a> tag — typically tne same as the href attr.
    // But we want to replace it with the title of the linked page.
    var textToken = tokens[idx + 1];
    // Will appear as: </a>.
    var linkCloseToken = tokens[idx + 2];
    // We'll generate previews only for links that don't already have a title
    // explicitly specified. E.g.:  "https://site/some/thing" or "www.example.com",
    // but not:  "[link title](https://url")  and not:  "<a href=... >Link Title</a>"
    // (title already specified).
    // Apparently Markdown-it sets Token.markup to 'linkify', for such auto-detected
    // links (the Markdown-it plugin Linkify-it does this?).
    var isAutoLink = linkOpenToken.markup === 'linkify';
    if (isAutoLink && linkUrl && (textToken === null || textToken === void 0 ? void 0 : textToken.type) === 'text' &&
        (linkCloseToken === null || linkCloseToken === void 0 ? void 0 : linkCloseToken.type) === 'link_close') {
        var serverRenderer = debiki.internal.serverSideLinkPreviewRenderer;
        if (serverRenderer) {
            // We're server side. In case the string is a Nashorn ConsString,
            // which won't work now when calling back out to Scala/Java code
            // — change to a Java string:
            var linkJavaSt = String(linkUrl);
            var resultJsonSt = serverRenderer.renderAndSanitizeInlineLinkPreview(// [js_scala_interop]  HMMM
            linkJavaSt);
            // There were annoying runtime errors when trying to invoke a Scala
            // class instance method, so let's just use JSON instead (for now at least).
            var result = JSON.parse(resultJsonSt);
            if (result.safeTitleCont) {
                textToken.content = result.safeTitleCont;
            }
            if (result.classAtr) {
                if (classAtrIx >= 0) {
                    var curClass = linkOpenToken.attrs[classAtrIx][AtrValIx];
                    var newClass = (curClass ? curClass + ' ' : '') + result.classAtr;
                    linkOpenToken.attrs[classAtrIx][AtrValIx] = newClass;
                }
                else {
                    linkOpenToken.attrPush(['class', result.classAtr]);
                }
            }
        }
        else {
            var randomClass_1 = 'c_LnPv-' + Math.random().toString(36).slice(2); // [js_rand_val]
            var loadingClasses_1 = "icon icon-loading ".concat(randomClass_1);
            if (classAtrIx >= 0) {
                var curClass = linkOpenToken.attrs[classAtrIx][AtrValIx];
                linkOpenToken.attrs[classAtrIx][AtrValIx] = "".concat(curClass, " ").concat(loadingClasses_1);
            }
            else {
                linkOpenToken.attrPush(['class', loadingClasses_1]);
            }
            // console.log(`Fetching page title for: ${linkUrl}`)
            debiki2.Server.fetchLinkPreview(linkUrl, true /*inline*/, function (preview) {
                var placeholders = debiki2.$all('.' + randomClass_1);
                // The placeholders might have disappeared, if the editor was closed or the
                // text deleted, for example.
                _.each(placeholders, function (ph) {
                    debiki2.$h.removeClasses(ph, loadingClasses_1);
                    if (preview) {
                        if (preview.classAtr) {
                            debiki2.$h.addClasses(ph, preview.classAtr);
                        }
                        if (preview.safeTitleCont) {
                            ph.innerText = preview.safeTitleCont;
                        }
                    }
                });
            });
        }
        //console.log('3 tokens: ' +
        //      JSON.stringify([linkOpenToken, textToken, linkCloseToken], undefined, 3));
    }
    return origLinkOpenRenderFn(tokens, idx, options, env, self);
}
;
var pluginId = 'LnPvRndr'; // means LinkPreviewRenderer
/**
 * Converts a paragraph consisting of an unindented link to e.g. a YouTube snippet
 * or a Wikipedia article excerpt, depending on the link.
 * Differs from Discourse's onebox in that links have to be in separate paragraphs.
 */
debiki.internal.LinkPreviewMarkdownItPlugin = function (md) {
    md.block.ruler.before('paragraph', pluginId, tryParseLink);
    md.renderer.rules[pluginId] = renderLinkPreviewBlock;
    origLinkOpenRenderFn = md.renderer.rules.link_open ||
        function (tokens, idx, options, env, self) {
            return self.renderToken(tokens, idx, options);
        };
    md.renderer.rules.link_open = renderLinkOpen;
};
function tryParseLink(state, startLineIndex, endLineIndex, whatIsThis) {
    var startLine = state.getLines(startLineIndex, startLineIndex + 1, state.blkIndent, false);
    // Ooops! cancels if 1st line not the link.
    if (startLine[0] !== 'h' || startLine[1] !== 't' || startLine[2] !== 't')
        return false;
    // Ooops! cancels if >= 2 lines in para.
    var nextLine = state.getLines(startLineIndex + 1, startLineIndex + 2, state.blkIndent, false);
    if (nextLine)
        return false;
    // SHOULD require only its own line, not its own paragraph! (Otherwise,
    // people don't "discover" the link preview functionality).
    if (state.parentType !== 'root' && // works with markdown-it 7
        state.parentType !== 'paragraph') // works with markdown-it 8
        return false; // not a top level block
    var match = startLine.match(/^https?:\/\/[^\s]+\s*$/);
    if (!match)
        return false;
    if (whatIsThis) {
        console.warn('whatIsThis is not false, it is: ' + whatIsThis);
    }
    var link = match[0];
    state.line += 1;
    var token = state.push(pluginId, '');
    token.link = link;
    token.level = state.level;
    return true;
}
function renderLinkPreviewBlock(tokens, index, options, env, renderer_unused) {
    var token = tokens[index];
    var previewHtml;
    var serverRenderer = debiki.internal.serverSideLinkPreviewRenderer;
    if (serverRenderer) {
        // We're server side. In case the string is a Nashorn ConsString,
        // which won't work now when calling back out to Scala/Java code:
        var linkJavaSt = String(token.link);
        previewHtml = serverRenderer.renderAndSanitizeBlockLinkPreview(// [js_scala_interop]  HMMM
        linkJavaSt);
    }
    else {
        var randomClass = 'c_LnPv-' + Math.random().toString(36).slice(2); // [js_rand_val]
        debiki2.Server.fetchLinkPreview(token.link, false /*inline*/, function (preview) {
            var Bliss = window['Bliss'];
            function makeReplacement() {
                var repl;
                if (preview && preview.safeHtml) {
                    repl = debiki2.$h.parseHtml(preview.safeHtml)[0];
                }
                else {
                    // No link preview available; show a plain <a href=...> link instead.
                    // (rel=nofollow gets added here: [rel_nofollow] for no-preview-attempted
                    // links.)
                    // Sync w server side code [0PVLN] [brkn_int_ln_pv].
                    var clazz = 'c_LnPvNone' + (!(preview === null || preview === void 0 ? void 0 : preview.errCode) ? '' : '-' + preview.errCode);
                    var link = Bliss.create('a', {
                        href: token.link,
                        class: clazz,
                        // target: _blank — don't add! without also adding noopener on the next line:
                        rel: 'nofollow',
                        text: token.link,
                    });
                    repl = Bliss.create('p', { around: link });
                }
                return repl;
            }
            var placeholders = debiki2.$all('.' + randomClass);
            // The placeholders might have disappeared, if the editor was closed or the
            // text deleted, for example.
            _.each(placeholders, function (ph) {
                Bliss.after(makeReplacement(), ph);
                ph.remove();
            });
        });
        var safeLink = debiki2.editor.sanitizeHtml(token.link);
        // The sanitizer must allow the id and class, see [6Q8KEF2] in
        // client/third-party/html-css-sanitizer-bundle.js.
        previewHtml =
            "<p class=\"".concat(randomClass, "\"><a class=\"icon icon-loading\">").concat(safeLink, "</a></p>");
    }
    return previewHtml;
}
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/editor/mentions-markdown-it-plugin.ts  */ /*
 * Copyright (C) 2014 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var nodejsUtilInherits = function (constructor, superConstructor) {
    constructor.super_ = superConstructor;
    constructor.prototype = Object.create(superConstructor.prototype, {
        constructor: {
            value: constructor,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
};
nodejsUtilInherits(MentionsMarkdownItPlugin, Function);
function MentionsMarkdownItPlugin() {
    var plugin = function (md, options) {
        plugin.options = options;
        console.warn(`plugin.init(md)  is:  ` + plugin.init);  // HMMM
//      plugin.init(md);  HMMM
    };
    plugin.__proto__ = MentionsMarkdownItPlugin.prototype;
    // Cannot match '.@(...)' because markdown-it seems to consume all letters,
    // it considers them unimportant and won't feed them to the below parse()
    // function. It sends only '@...' to parse, not any [a-z] before the '@'.
    // So skip the char before the '@', and fetch and check it inside parse()
    // instead.
    // [.-] are allowed inside the username only (not as first or last chars). [UNPUNCT] [UNAMECHARS]
    // None of [_.-] allowed as last char.  Currently min length is 3, but later
    // there'll be a site config value that lets one change to 2? So allow 2 here.
    plugin.mentionsRegex = /^@[a-zA-Z0-9_][a-zA-Z0-9_.-]*[a-zA-Z0-9]/; // [4LKBG782]
    plugin.whitespaceRegex = /\s/;
    plugin.id = 'MentionsMarkdownItPlugin';
    return plugin;
}
MentionsMarkdownItPlugin.prototype.init = function (md) {
    md.inline.ruler.push(this.id, this.parse.bind(this));
    md.renderer.rules[this.id] = this.render.bind(this);
};
MentionsMarkdownItPlugin.prototype.parse = function (state, silent) {
    var nextChars = state.src.slice(state.pos);
    var match = nextChars.match(this.mentionsRegex);
    if (!match)
        return false;
    // Ensure there's whitespace before the '@'. Otherwise we might be inside a word
    // — could be an email address, but it's not a mention.
    if (state.pos > 0) {
        var prevChar = state.src[state.pos - 1];
        if (!this.whitespaceRegex.test(prevChar))
            return false;
    }
    // We've found a mention. Advance the cursor.
    state.pos += match[0].length;
    // In silent mode, we shouldn't output anything or push anything to the state.
    if (silent)
        return true;
    var token = state.push('MentionsMarkdownItPlugin', '');
    token.level = state.level;
    token.username = nextChars.slice(1, match[0].length);
    return true;
};
MentionsMarkdownItPlugin.prototype.render = function (tokens, id, options, env) {
    // The username is [a-zA-Z_0-9] so we don't need to escape it. And besides we sanitize
    // everything later on anyway.
    var username = tokens[id].username;
    // Make @mentions found available server side.
    if (debiki.mentionsServerHelp) {
        debiki.mentionsServerHelp.push(username);
    }
    // In embedded comments discussions, the /-/users/ local links would resolve to
    // https://the.EMBEDDING.site/-/users/ — so in hack.ts [6JKD2A] they're changed
    // to point to the Talkyard server instead. (Also see: [EMBCMTSORIG])
    return '<a class="esMention" href="/-/users/' + username + '">@' + username + '</a>';
};
debiki.internal.MentionsMarkdownItPlugin = MentionsMarkdownItPlugin;
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/editor/title-editor.ts  */ // This makes the TypeScript compiler happy when it bundles server side code.
var debiki2;
(function (debiki2) {
    var titleeditor;
    (function (titleeditor) {
        titleeditor.TitleEditor = {};
    })(titleeditor = debiki2.titleeditor || (debiki2.titleeditor = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/forum/edit-intro-dialog.ts  */ //------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var forum;
    (function (forum) {
        //------------------------------------------------------------------------------
        function openEditIntroDialog() {
        }
        forum.openEditIntroDialog = openEditIntroDialog;
        //------------------------------------------------------------------------------
    })(forum = debiki2.forum || (debiki2.forum = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/utils/window-zoom-resize-mixin.ts  */ var debiki2;
(function (debiki2) {
    var utils;
    (function (utils) {
        utils.WindowZoomResizeMixin = {};
    })(utils = debiki2.utils || (debiki2.utils = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/util/ExplainingDropdown.ts  */ /*
 * Copyright (c) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * In this file: A dropdown modal with entries to select, each one has a title and
 * an explanation text.
 *
 * Hmm but I haven't yet moved all code to here. Fairly much code is still somewhere
 * inside ../forum/forum.ts instead.
 */
// (Could move to more-bundle.js — but it's nice to be able to create the menu
// items inline, directly in slim-bundle.js.)
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var util;
    (function (util) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        // COULD change to pure fn
        util.ExplainingListItem = debiki2.createComponent({
            displayName: 'ExplainingListItem',
            onClick: function (event) {
                var props = this.props;
                event.preventDefault();
                if (props.onClick) {
                    props.onClick(event);
                }
                if (props.onSelect) {
                    props.onSelect(props); // = calls onSelect(props: ExplainingTitleText)
                }
            },
            render: function () {
                var props = this.props;
                var entry = this.props;
                var activeClass = props.active || _.isUndefined(props.active) && (props.onSelect && props.activeEventKey === props.eventKey) ?
                    ' active' : '';
                var disabledClass = props.disabled ? ' c_Dis' : '';
                var subStuff = !entry.subStuff ? null :
                    r.div({ className: 'esExplDrp_entry_sub' }, entry.subStuff);
                var onClick = props.disabled ? undefined : this.onClick;
                return (r.li({ className: 'esExplDrp_entry' + activeClass + disabledClass }, r.a({ onClick: onClick, id: props.id, className: props.className }, r.div({ className: 'esExplDrp_entry_title' }, entry.title), r.div({ className: 'esExplDrp_entry_expl' }, entry.text)), subStuff));
            },
        });
        //------------------------------------------------------------------------------
    })(util = debiki2.util || (debiki2.util = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/utils/scroll-into-view.ts  */ //------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var utils;
    (function (utils) {
        //------------------------------------------------------------------------------
        function calcScrollIntoViewCoordsInPageColumn() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
            throw new Error('calcScrollIntoViewCoordsInPageColumn called server side [TyE4ARK053]');
        }
        utils.calcScrollIntoViewCoordsInPageColumn = calcScrollIntoViewCoordsInPageColumn;
        function scrollIntoViewInPageColumn() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
            throw new Error('scrollIntoViewInPageColumn called server side [TyE2AS07U3]');
        }
        utils.scrollIntoViewInPageColumn = scrollIntoViewInPageColumn;
        function elemIsVisible() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
            throw new Error('elemIsVisible called server side [TyE4AKRB067]');
        }
        utils.elemIsVisible = elemIsVisible;
        function makeShowPostFn() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
        }
        utils.makeShowPostFn = makeShowPostFn;
        //------------------------------------------------------------------------------
    })(utils = debiki2.utils || (debiki2.utils = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=100 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/help/help.ts  */ /*
 * Copyright (C) 2015-2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="../ReactStore.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../rules.ts" />
/// <reference path="../widgets.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var help;
    (function (help) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        function isHelpMessageClosedAnyVersion(store, messageId) {
            return store.me && (!!store.me.closedHelpMessages[messageId] ||
                store.me.tourTipsSeen.indexOf(messageId) >= 0);
        }
        help.isHelpMessageClosedAnyVersion = isHelpMessageClosedAnyVersion;
        function isHelpMessageClosed(store, message) {
            if (!store.me)
                return false;
            if (store.me.tourTipsSeen.indexOf(message.id) >= 0) {
                // Let's ignore the version number. Unnecessarily complicated.
                // Instead, change the id of a tips, if it's important that everyone reads it again.
                return true;
            }
            var closedVersion = store.me.closedHelpMessages[message.id];
            return closedVersion && closedVersion === message.version;
        }
        help.isHelpMessageClosed = isHelpMessageClosed;
        help.HelpMessageBox = debiki2.createComponent({
            mixins: [debiki2.StoreListenerMixin],
            getInitialState: function () {
                return this.computeState();
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            onChange: function () {
                // A store change event might invoke this, although unmounted. [MIXINBUG]
                if (this.isGone)
                    return;
                this.setState(this.computeState());
            },
            computeState: function () {
                var props = this.props;
                var message = props.message;
                var store = debiki2.ReactStore.allData();
                var me = store.me;
                if (!store.userSpecificDataAdded) {
                    // Don't want search engines to index help text.
                    return { hidden: true };
                }
                if (!message.id) {
                    // Then cannot close.
                    return {};
                }
                // CLEAN_UP why don't this code use isHelpMessageClosed() above instead?
                var closedMessages = me.closedHelpMessages || {};
                var thisMessClosedVersion = closedMessages[message.id];
                var hidden = thisMessClosedVersion === message.version ||
                    me.tourTipsSeen.indexOf(message.id) >= 0;
                return { hidden: hidden };
            },
            hideThisHelp: function () {
                var props = this.props;
                debiki2.ReactActions.hideTips(props.message);
                var store = debiki2.ReactStore.allData();
                var me = store.me;
                var closedMessages = me.closedHelpMessages || {};
                var numClosed = _.size(closedMessages);
                var minNumClosedToShowUnhideTips = 3;
                // Wait a short while with opening this, so one first sees the effect of clicking Close.
                // Also, wait until one has clicked 3? Close buttons — to me, it otherwise feels annoying
                // that this tips pops up directly, and I have to close it too.
                if (props.showUnhideTips !== false && numClosed >= minNumClosedToShowUnhideTips) {
                    setTimeout(function () { return debiki2.morebundle.openHelpDialogUnlessHidden({
                        content: r.span({}, t.help.YouCanShowAgain_1, r.b({}, t.help.YouCanShowAgain_2), '.'),
                        id: '5YK7EW3',
                    }); }, 550);
                }
            },
            render: function () {
                var props = this.props;
                var message = props.message;
                var alwaysShow = (props.alwaysShow || message.alwaysShow || !message.id);
                if (this.state.hidden && !alwaysShow)
                    return null;
                // If there are more help dialogs afterwards, show a comment icon instead to give
                // the impression that we're talking with the computer. Only when no more help awaits,
                // show the close (well "cancel") icon.
                var okayIcon = message.moreHelpAwaits ? 'icon-comment' : 'icon-cancel';
                var okayButton = message.alwaysShow
                    ? null
                    : r.a({ className: okayIcon + ' dw-hide', onClick: this.hideThisHelp }, message.okayText || t.Hide);
                var className = props.className || message.className || '';
                var largeClass = props.large ? ' dwHelp-large' : '';
                var warningClass = message.isWarning ? ' esHelp-warning' : '';
                var niceClass = message.isNice ? ' c_Help-Nice' : '';
                var classes = className + ' dw-help' + largeClass + warningClass + niceClass;
                return (r.div({ className: classes, key: props.key }, r.div({ className: 'dw-help-text' }, message.content), okayButton));
            }
        });
        //------------------------------------------------------------------------------
    })(help = debiki2.help || (debiki2.help = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/utils/page-scroll-mixin.ts  */ var debiki2;
(function (debiki2) {
    var utils;
    (function (utils) {
        utils.PageScrollMixin = {};
    })(utils = debiki2.utils || (debiki2.utils = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/utils/DropdownModal.ts  */ /*
 * Copyright (c) 2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../../../node_modules/@types/keymaster/index.d.ts" />
/// <reference path="../prelude.ts" />
/// <reference path="../rules.ts" />
/// <reference path="../widgets.ts" />
/// <reference path="../utils/react-utils.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var utils;
    (function (utils) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        var keymaster = window['keymaster'];
        utils.ModalDropdownButton = debiki2.createComponent({
            displayName: 'ModalDropdownButton',
            getInitialState: function () {
                return {
                    isOpen: false,
                    buttonX: -1,
                    buttonY: -1,
                    modalCreated: false,
                };
            },
            componentDidMount: function () {
                if (this.props.onClose) {
                    keymaster('escape', this.props.onClose); // but what about this.closeDropdown() ?
                }
            },
            componentWillUnmount: function () {
                if (this.props.onClose) {
                    keymaster.unbind('escape', 'all');
                }
            },
            openDropdown: function () {
                var pullLeft = this.props.pullLeft;
                if (eds.isRtl)
                    pullLeft = !pullLeft;
                var rect = ReactDOM.findDOMNode(this.refs.openButton).getBoundingClientRect();
                this.setState({ modalCreated: true, isOpen: true,
                    buttonX: pullLeft ? rect.left : rect.right, buttonY: rect.bottom });
            },
            closeDropdown: function () {
                // Don't set created: false though, because then React breaks.
                this.setState({ isOpen: false });
            },
            hideBackdrop: function () {
                if (this.refs.dropdownModal)
                    this.refs.dropdownModal.hideBackdrop();
            },
            render: function () {
                var _this = this;
                var props = this.props;
                var state = this.state;
                // Don't create immediately, because creating all dropdowns and dialogs directly on
                // page load makes the page load slower (a few millis per dialog I think, adding up to
                // 30ms? 70ms? which is a lot).
                var dropdownModal;
                if (state.modalCreated) {
                    dropdownModal =
                        // Prevent clicks from propagating outside the modal, and e.g. triggering an onClick outside.
                        r.span({ onClick: function (event) { return event.stopPropagation(); }, key: 'MDM' }, utils.DropdownModal({ show: state.isOpen, pullLeft: props.pullLeft,
                            onHide: this.closeDropdown, atX: state.buttonX, atY: state.buttonY,
                            dialogClassName2: props.dialogClassName2,
                            className: props.dialogClassName,
                            id: props.dialogId,
                            allowFullWidth: props.allowFullWidth, ref: 'dropdownModal',
                            showCloseButton: props.showCloseButton,
                            bottomCloseButton: props.bottomCloseButton,
                            onContentClick: props.closeOnClick === false ? null : function (event) {
                                if (!props.stayOpenOnCmdShiftClick || !debiki2.event_isCmdShiftClick(event)) {
                                    _this.closeDropdown();
                                }
                            } }, props.render ? props.render({ closeDropdown: this.closeDropdown }) : props.children));
                }
                // Don't nest the dropdownModal inside the Button — then, all clicks inside the modal dialog,
                // would propagate to the button, which does event.preventDefault(), making links inside the
                // modal dialog stop working.
                return [
                    debiki2.Button({ onClick: this.openDropdown, className: props.className, id: props.id,
                        ref: 'openButton', key: 'MDB' }, this.props.title),
                    dropdownModal
                ];
            }
        });
        /**
         * Places a dropdown at (this.props.atX, this.props.atY) and tries to fit it inside the
         * current viewport. Dims everything outside the dropdown just a little bit.
         */
        // [refactor] Rename to ModalDropdownDialog
        utils.DropdownModal = debiki2.createComponent({
            displayName: 'DropdownModal',
            getInitialState: function () {
                return {};
            },
            componentDidMount: function () {
                var _this = this;
                debiki2.Server.loadMoreScriptsBundle(function () {
                    if (_this.isGone)
                        return;
                    _this.setState({ moreBundleLoaded: true });
                });
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            componentDidUpdate: function () {
                var _this = this;
                // Wait until all stuff inside has gotten its proper size. Apparently componentDidUpdate()
                // fires before the browser has done that — because without setTimeout(_, 0), the dialog
                // can become too small.
                setTimeout(function () {
                    if (!_this.props.show || !_this.refs.content || _this.isGone)
                        return;
                    var content = _this.refs.content;
                    var rect = debiki2.cloneRect(content.getBoundingClientRect());
                    // top = distance from real win top to the top of the iframe, if in embedded comments iframe.
                    // height = real window height (not the iframe's height).
                    // (Skip any iframe left offset, for now — most websites don't have horizontal scrolling.)
                    var winOfsSize = debiki2.iframeOffsetWinSize || { top: 0, height: window.innerHeight };
                    rect.top -= winOfsSize.top;
                    rect.bottom -= winOfsSize.top;
                    var rectHeight = rect.bottom - rect.top;
                    var winVisibleHeight = winOfsSize.iframeVisibleHeight || winOfsSize.height;
                    if (rectHeight >= winVisibleHeight) {
                        // The dialog is larger than the window. Place it at the top, so if resizing the window
                        // (it'll expand downwards), the hidden part of the dialog becomes visible.
                        // Important for blog comments, if one opens the notf prefs dialog before there're
                        // any comments — then, the iframe is shorter than the notfs prefs dialog. [IFRRESIZE]
                        _this.refs.content.style.top = winOfsSize.top;
                    }
                    else if (rect.bottom > winOfsSize.height) {
                        _this.fitInWindowVertically(winOfsSize);
                    }
                    // (This right-&-left stuff works also in iframes.)
                    if (rect.right > window.innerWidth) {
                        _this.moveLeftwardsSoFitsInWindow();
                    }
                    else if (rect.left < 6) {
                        // max-width is 89% [4YK8ST2] so we have some pixels to spare, and looks better with
                        // to the left, so 6px not 0px here:
                        content.style.left = '6px';
                    }
                    // This calls componentDidUpdate() and could create a "loop", so do only if needed.
                    if (!_this.state.fitsInDisplay) {
                        _this.setState({ fitsInDisplay: true });
                    }
                }, 0);
            },
            fitInWindowVertically: function (winOfsSize) {
                var content = this.refs.content;
                var contentHeight = content.clientHeight;
                if (contentHeight > winOfsSize.height - 5) {
                    // Full window height, + scrollbar.
                    Bliss.style(content, {
                        top: winOfsSize.top, height: winOfsSize.height + 'px', 'overflow-y': 'auto'
                    });
                }
                else {
                    // Place at the bottom of the window, a little bit up, so the box-shadow can be seen.
                    content.style.top = (winOfsSize.top + winOfsSize.height - contentHeight - 5) + 'px';
                }
            },
            moveLeftwardsSoFitsInWindow: function () {
                var winWidth = window.innerWidth;
                var content = this.refs.content;
                var contentWidth = content.clientWidth;
                if (content.clientWidth > winWidth) {
                    // Better show the left side, that's where any titles and texts start.
                    // However, this should never happen, because max-width always leaves some
                    // space outside to click to close. [4YK8ST2]
                    content.style.left = '0px';
                }
                else {
                    content.style.left = (winWidth - contentWidth - 4) + 'px';
                }
            },
            hideBackdrop: function () {
                this.setState({ hideBackdrop: true });
            },
            render: function () {
                var _this = this;
                if (!this.state.moreBundleLoaded)
                    return null;
                var content;
                if (this.props.show) {
                    var closeButton = !this.props.showCloseButton ? null :
                        r.div({ className: 'esDropModal_CloseB esCloseCross', onClick: this.props.onHide });
                    var bottomCloseButton = undefined;
                    // COULD LATER UX  show extra close button, if small screen, so won't need to scroll up to
                    // the menu top, to find the close button
                    //const bottomCloseButton = !this.props.bottomCloseButton ? null :
                    //  r.div({ className: 'esDropModal_CloseB esCloseCross', onClick: this.props.onHide });
                    // Try to remove props.atX & .pullLeft, use betweenX everywhere instead. CLEAN_UP
                    var atX = this.props.atX;
                    var atY = this.props.atY;
                    var pullLeft = this.props.pullLeft;
                    if (eds.isRtl)
                        pullLeft = !pullLeft;
                    var rect = this.props.atRect;
                    if (rect) {
                        var windowMiddle = this.props.windowWidth / 2;
                        var spaceLeft = windowMiddle - rect.left;
                        var spaceRight = rect.right - windowMiddle;
                        pullLeft = spaceLeft > spaceRight;
                        atX = pullLeft ? rect.left : rect.right;
                        atY = rect.bottom;
                    }
                    // Place at atX, atY.
                    var left = pullLeft ? atX : undefined;
                    // If atX is too close to the left edge. set it to at least the below, so the dialog
                    // won't get too narrow.  UX, COULD set atX more to the left, if the open-dialog-
                    // button is far to the left, and the dialog is really narrow — so the dialog
                    // won't pop up far to the right of the button. Would need to remember
                    // getBoundingClientRect() in the did-update fn? But store in this.state just once,
                    // so won't cause some eternal update-setState-update... loop.
                    var atXMin = Math.max(atX, 470);
                    var right = pullLeft ? undefined : "calc(100% - min(100% - 10px, ".concat(atXMin, "px))");
                    var styles = {
                        left: left,
                        right: right,
                        top: atY,
                        // Avoid flashing it at the wrong position, before it's been moved to fit on screen.
                        visibility: this.state.fitsInDisplay ? 'visible' : 'hidden',
                    };
                    content =
                        r.div({ className: 'esDropModal_content ' + (this.props.className || ''), style: styles,
                            ref: 'content', onClick: this.props.onContentClick }, closeButton, this.props.children, bottomCloseButton);
                }
                var backdropStyle = { opacity: 0.14 };
                if (this.state.hideBackdrop)
                    backdropStyle.display = 'none';
                var dialogClassName = this.props.dialogClassName2 ? ' ' + this.props.dialogClassName2 : '';
                var notTooWideClass = this.props.allowFullWidth ? '' : ' esDropModal-NotTooWide';
                return (rb.Modal({ show: this.props.show, onHide: this.props.onHide,
                    onShow: function () { return _this.setState({ hideBackdrop: false }); },
                    dialogClassName: 'esDropModal' + notTooWideClass + dialogClassName,
                    backdropStyle: backdropStyle }, content));
            }
        });
        //------------------------------------------------------------------------------
    })(utils = debiki2.utils || (debiki2.utils = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/login/login-if-needed.ts  */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var login;
    (function (login) {
        //------------------------------------------------------------------------------
        function loginIfNeededReturnToPost(loginReason, postNr, success, willCompose) {
        }
        login.loginIfNeededReturnToPost = loginIfNeededReturnToPost;
        function loginIfNeededReturnToAnchor(loginReason, anchor, success, willCompose) {
        }
        login.loginIfNeededReturnToAnchor = loginIfNeededReturnToAnchor;
        function openLoginDialogToSignUp(purpose) {
        }
        login.openLoginDialogToSignUp = openLoginDialogToSignUp;
        function openLoginDialog(purpose) {
        }
        login.openLoginDialog = openLoginDialog;
        //------------------------------------------------------------------------------
    })(login = debiki2.login || (debiki2.login = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/cats-or-home-link.ts  */ /*
 * Copyright (c) 2020 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../../reactjs-types.ts" />
/// <reference path="../prelude.ts" />
/// <reference path="../oop-methods.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../utils/scroll-into-view.ts" />
/// <reference path="../rules.ts" />
/// <reference path="../widgets.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var page;
    (function (page_1) {
        //------------------------------------------------------------------------------
        function CatsOrHomeLink(page, store, forTopbar) {
            // Section pages have no ancestors — instead, they list topics,
            // categores, sub cats. And they're "home" already.
            var isSectionPage = debiki2.isSection(page.pageRole);
            if (isSectionPage)
                return null;
            // A new category permission: SeeUnlistedTopics? For now:  [staff_can_see]
            var me = store.me;
            var isUnlisted = _.some(page.ancestorsRootFirst, function (a) { return a.unlistCategory; });
            var isUnlistedSoHideCats = isUnlisted && !debiki2.isStaff(me);
            var hasAncestorsCats = debiki2.nonEmpty(page.ancestorsRootFirst);
            var showCategories = hasAncestorsCats &&
                !isUnlistedSoHideCats &&
                debiki2.settings_showCategories(store.settings, me);
            var catsOrHomeLink = null;
            if (showCategories) {
                catsOrHomeLink =
                    // RENAME  esTopbar_ancestors  and  s_Tb_Pg_Cs
                    r.ol({ className: 'esTopbar_ancestors s_Tb_Pg_Cs' }, page.ancestorsRootFirst.map(function (ancestor) {
                        var deletedClass = ancestor.isDeleted ? ' s_Tb_Pg_Cs_C-Dd' : '';
                        var catIcon = debiki2.category_iconClass(ancestor.categoryId, store); // [4JKKQS20]
                        var key = ancestor.categoryId;
                        return (r.li({ key: key, className: 's_Tb_Pg_Cs_C' + deletedClass }, 
                        // RENAME esTopbar_ancestors_link to just s_AncCs_Ln?
                        debiki2.Link({ className: catIcon + 'esTopbar_ancestors_link btn',
                            // The path is from here, server side: [anc_cat_path].
                            to: ancestor.path }, ancestor.title)));
                    }));
            }
            else if (debiki2.page_isInfoPage(page.pageRole) && !forTopbar) {
                // Then skip Home link — looks weird on Info pages; instead, there's
                // typically a topbar custom nav menu just above + site logo home link.
                // But if we've scrolled down, then it's nice with a Home link
                // in the topbar? So, do show, if is for topbar (then skip this noop block).
            }
            else {
                // Show a Home link, so there's somewhere to return to. Dupl code [HOMELN495]
                var mainSiteSection = debiki2.store_mainSiteSection(store);
                var homePath = mainSiteSection.path;
                catsOrHomeLink =
                    r.ol({ className: 'esTopbar_ancestors s_Tb_Pg_Cs' }, r.li({ key: 'h' }, debiki2.Link({ className: 'esTopbar_ancestors_link btn', to: homePath }, t.Home)));
            }
            return catsOrHomeLink;
        }
        page_1.CatsOrHomeLink = CatsOrHomeLink;
        //------------------------------------------------------------------------------
    })(page = debiki2.page || (debiki2.page = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/topbar/topbar.ts  */ /*
 * Copyright (C) 2014-2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../ReactStore.ts" />
/// <reference path="../ReactActions.ts" />
/// <reference path="../links.ts" />
/// <reference path="../widgets.ts" />
/// <reference path="../page-methods.ts" />
/// <reference path="../utils/page-scroll-mixin.ts" />
/// <reference path="../utils/scroll-into-view.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/DropdownModal.ts" />
/// <reference path="../avatar/avatar.ts" />
/// <reference path="../login/login-if-needed.ts" />
/// <reference path="../page/cats-or-home-link.ts" />
/// <reference path="../Server.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var topbar;
    (function (topbar) {
        //------------------------------------------------------------------------------
        var FixedTopDist = 8;
        // Shadow size (the '+ X') dupl here: [topb_shdw], 6px + 9px diffusion ~= 10px?
        // No, skip this — otherwise, when switching from static to fixed, the page
        // would jump downwards with this amount.
        var TopbarShadow = 0; // 10;
        function getTopbarHeightInclShadow() {
            var topbarElem = debiki2.$first('.s_Tb');
            return !topbarElem ? 0 : topbarElem.offsetHeight + TopbarShadow;
        }
        topbar.getTopbarHeightInclShadow = getTopbarHeightInclShadow;
        topbar.TopBar = debiki2.createComponent({
            displayName: 'TopBar',
            mixins: [debiki2.StoreListenerMixin, debiki2.utils.PageScrollMixin],
            getInitialState: function () {
                var store = debiki2.ReactStore.allData();
                var state = {
                    store: store,
                    fixed: false,
                    curName: '',
                    nameWidth: 0,
                    pageWidth: debiki2.store_getApproxPageWidth(store),
                };
                return state;
            },
            componentWillUnmount: function () {
                this.isGone = true;
                clearInterval(this.timerHandle);
            },
            componentDidMount: function () {
                var _this = this;
                doNextFrameOrNow(function () {
                    // This unfortunately still triggers a FORCED_REFLOW before the first paint. Is there any
                    // way to avoid that? Perhaps if window.scrollTop is 0, then we know the topbar should
                    // *not* be position = fixed, initially. And can do:
                    //    getPageScrollableRect().top - this-rect.top
                    // later? — This layout reflow takes about 15 ms (core i7 laptop), that's about 5% of
                    // the total time spent scripting and rendering before the first paint.
                    if (_this.isGone)
                        return;
                    var rect = _this.getThisRect();
                    var pageTop = debiki2.getPageScrollableRect().top;
                    _this.setState({
                        initialOffsetTop: rect.top - pageTop,
                        fixed: rect.top < -FixedTopDist,
                    });
                });
                // Dupl code [5KFEWR7]  — maybe move to inside doNextFrameOrNow()?
                this.timerHandle = setInterval(this.checkSizeChangeLayout, 500);
            },
            checkSizeChangeLayout: function () {
                var _this = this;
                var _a, _b, _c;
                // Dupl code [5KFEWR7]  — now no longer dupl, now this is different (& better?)
                if (this.isGone)
                    return;
                var state = this.state;
                var store = state.store;
                var pageWidthNow = debiki2.store_getApproxPageWidth(store);
                var oldWidth = state.pageWidth;
                // Don't rerender unless 1) the page width changed in a noticeable way,
                // say, > 30 px, and > 10%.
                var signedWidthChange = pageWidthNow - oldWidth;
                var absChange = Math.abs(signedWidthChange);
                var changedALot = absChange > 30 && (absChange / Math.max(oldWidth, 1)) > 0.1;
                // Or 2) if there's a custom navigation menu, on two rows, in narrow layout,
                // and now the window got wider (or narrower) so should switch from two to
                // one row layout (or from one to two) — that is, if the available topbar
                // width crossed the navConf.tb1Rw breakpoint.
                var navConf = store.settings.navConf || {};
                var justOneRowBefore = !navConf.tb1Rw || navConf.tb1Rw <= oldWidth;
                var justOneRowAfter = !navConf.tb1Rw || navConf.tb1Rw <= pageWidthNow;
                var numRowsChanged = justOneRowBefore !== justOneRowAfter;
                // Or 3) if we logged in / out: then, a username dis/appeared, changing
                // how much space is left for buttons and custom nav links, so
                // we might need to change the layout from one to two rows.
                var curName = ((_a = store.me) === null || _a === void 0 ? void 0 : _a.username) || '';
                var nameChanged = curName !== state.curName;
                var nameWidth = state.nameWidth;
                if (nameChanged) {
                    // We only do if name actually changed — can otherwise trigger layout reflow?
                    // UX COULD:  subtr width of  .s_Tb_MyBs  instead?
                    // And, not only if name changed — but if notf icons dis/appeared.
                    var nameElem = debiki2.$first('.esAvtrName_name');
                    var width = (_b = nameElem === null || nameElem === void 0 ? void 0 : nameElem.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width;
                    if (!width) {
                        // Look in row 2 — name shown there, if 2 rows layout.
                        nameElem = debiki2.$first('.s_Tb-Rw2 .esAvtrName_name');
                        width = ((_c = nameElem === null || nameElem === void 0 ? void 0 : nameElem.getBoundingClientRect()) === null || _c === void 0 ? void 0 : _c.width) || 0;
                    }
                    nameWidth = width;
                }
                if (changedALot || numRowsChanged || nameChanged) {
                    var newState = {
                        pageWidth: pageWidthNow,
                        curName: curName,
                        nameWidth: nameWidth,
                    };
                    // If more/fewer rows, and fixed layout, need to resize the placeholder, so the
                    // topbar won't occlude the page if scrolling almost all the way up.
                    // But wait for a moment, so the browser is done rerendering and we can get
                    // the new topbar size.
                    if (numRowsChanged && state.fixed) {
                        setTimeout(function () {
                            if (_this.isGone)
                                return;
                            var placeholderHeightPx = getTopbarHeightInclShadow();
                            _this.setState({ placeholderHeightPx: placeholderHeightPx });
                        }, 1);
                    }
                    this.setState(newState);
                }
            },
            getThisRect: function () {
                return ReactDOM.findDOMNode(this).getBoundingClientRect();
            },
            onChange: function () {
                this.setState({
                    store: debiki2.ReactStore.allData()
                });
                // If the watchbar was opened or closed, we need to rerender with new left: offset.
                this.onScroll();
            },
            onScroll: function () {
                var state = this.state;
                if (!_.isNumber(state.initialOffsetTop))
                    return;
                var store = state.store;
                var pageRect = debiki2.getPageScrollableRect();
                var pageLeft = pageRect.left;
                if (store.isWatchbarOpen && !store.shallSidebarsOverlayPage) {
                    pageLeft -= WatchbarWidth;
                }
                var pageTop = pageRect.top;
                var newTop = -pageTop - state.initialOffsetTop;
                this.setState({ top: newTop, left: -pageLeft }); // CLEAN_UP `top` not used. What about `left`?
                if (!state.fixed) {
                    if (-pageTop > state.initialOffsetTop + FixedTopDist || pageLeft < -40) {
                        var rect = this.getThisRect();
                        this.setState({
                            fixed: true,
                            // Update the height here, not in componentDidMount, because the height might change
                            // if the window is made wider/smaller, after mount.
                            placeholderHeightPx: (rect.height + TopbarShadow) + 'px',
                        });
                    }
                }
                else if (pageLeft < -20) {
                    // We've scrolled fairly much to the right, so stay fixed.  [2D_LAYOUT]
                }
                else {
                    // Add +X otherwise sometimes the fixed state won't vanish although back at top of page.
                    if (-pageTop < state.initialOffsetTop + 5) {
                        this.setState({ fixed: false, top: 0, left: 0 });
                    }
                }
            },
            onSignUpClick: function () {
                var props = this.props;
                debiki2.login.openLoginDialogToSignUp(props.purpose || 13 /* LoginReason.SignUp */);
            },
            onLoginClick: function () {
                var props = this.props;
                debiki2.login.openLoginDialog(props.purpose || 20 /* LoginReason.LoginToLogin */);
            },
            showTools: function () {
                debiki2.morebundle.openPageToolsDialog();
            },
            render: function () {
                var _this = this;
                var _a;
                var props = this.props;
                var state = this.state;
                var store = state.store;
                var page = store.currentPage;
                var me = store.me;
                var pageRole = page.pageRole;
                var isEmbComments = pageRole === 5 /* PageRole.EmbeddedComments */;
                var isSectionPage = debiki2.isSection(pageRole);
                var isBitDown = state.fixed;
                var availableWidth = Math.max(state.pageWidth - state.nameWidth, 0);
                var navConf = store.settings.navConf || {};
                // [wide_topbar_min_px]
                var justOneRow = !navConf.tb1Rw || navConf.tb1Rw <= availableWidth;
                // Don't show all these buttons on a homepage / landing page, until after has scrolled down.
                // If not logged in, never show it — there's no reason for new users to login on the homepage.
                if (pageRole === 1 /* PageRole.CustomHtmlPage */ && (!state.fixed || !me || !me.isLoggedIn))
                    return r.div();
                var autoPageType = debiki2.location_autoPageType(props.location);
                // No custom navigation or menus, when in the admin area
                // — bad if a bug breaks the admin area.
                var skipCustomCode = autoPageType === -22 /* AutoPageType.AdminArea */;
                // Sidebars just make newcomers confused, if shown on some About Us page. However, if logged
                // in already, then one likely knows how they work —> then one would instead be confused,
                // if the open-sidebars buttons were suddenly gone?
                var hideSidebarBtns = debiki2.page_isInfoPage(pageRole) && !me.isLoggedIn;
                // ------- Page title and categories
                // When we've scrolled down, so the in-page title (rather than in-topbar page title)
                // and category breadcrumbs are no longer visible (they've scrolled up and away),
                // we show the page title in the topbar. And categories too, unless topic unlisted.
                // (So pat sees what topic the page is about, if leaves and returns "much later".)
                var CatsAndTitle = function () { return null; };
                var noCatsMaybeTitle = false;
                // Before we've scrolled down, the title and categories are visible
                // in the page contents instead.
                var catsOrHomeLink = !isBitDown ? false :
                    debiki2.page.CatsOrHomeLink(page, store, /* forTopbar = */ true);
                var anyUnsafeTitleSource = (_a = page.postsByNr[TitleNr]) === null || _a === void 0 ? void 0 : _a.unsafeSource;
                var showTitle = isBitDown && anyUnsafeTitleSource;
                if (catsOrHomeLink || showTitle) {
                    var anyTitle_1 = !showTitle ? null :
                        r.div({ className: 's_Tb_Pg_Ttl' }, // [title_plain_txt]
                        anyUnsafeTitleSource);
                    noCatsMaybeTitle = isSectionPage;
                    CatsAndTitle = function () {
                        return r.div({ className: 's_Tb_Pg' }, catsOrHomeLink, anyTitle_1);
                    };
                }
                // ------- My Menu (avatar + username dropdown menu)
                var urgentReviewTasks = makeNotfIcon('reviewUrgent', me.numUrgentReviewTasks);
                var otherReviewTasks = makeNotfIcon('reviewOther', me.numOtherReviewTasks);
                var talkToMeNotfs = makeNotfIcon('toMe', me.numTalkToMeNotfs);
                var talkToOthersNotfs = makeNotfIcon('toOthers', me.numTalkToOthersNotfs);
                var otherNotfs = makeNotfIcon('other', me.numOtherNotfs);
                var isImpersonatingClass = '';
                var impersonatingStrangerInfo;
                if (store.isImpersonating) {
                    isImpersonatingClass = ' s_MMB-IsImp';
                    if (!me.isLoggedIn) {
                        isImpersonatingClass += ' s_MMB-IsImp-Stranger';
                        impersonatingStrangerInfo = "Viewing as stranger"; // (skip i18n, is for staff)
                        // SECURITY COULD add a logout button, so won't need to first click stop-viewing-as,
                        // and then also click Logout. 2 steps = a bit risky, 1 step = simpler, safer.
                    }
                }
                var myAvatar = !me.isLoggedIn ? null :
                    debiki2.avatar.Avatar({ user: me, origins: store, ignoreClicks: true });
                var snoozeLeftMs = debiki2.pp_snoozeLeftMs(me);
                if (snoozeLeftMs > 50 * 60 * 1000) {
                    // Almost an hour — then, exact time isn't important. Add 9 mins, so X hours
                    // won't seem to change to X - 1 hours after a millisecond.
                    snoozeLeftMs += 9 * 60 * 1000;
                }
                // Show num days, if within a month. Otherwse, exact date.
                var snoozeUntilTxt = snoozeLeftMs && (snoozeLeftMs < 1000 * 3600 * 24 * 31
                    ? debiki.prettyLetterDuration(snoozeLeftMs)
                    : debiki2.prettyMonthDayYear(debiki2.getNowMs() + snoozeLeftMs, true));
                var snoozeIcon = !!snoozeUntilTxt &&
                    r.span({ className: 's_MMB_Snz' }, r.img({ alt: "Snoozing", className: 's_SnzI',
                        src: '/-/media/sysuicons/bell_snooze.svg' }), snoozeUntilTxt);
                var avatarNameDropdown = !me.isLoggedIn && !impersonatingStrangerInfo ? null :
                    debiki2.utils.ModalDropdownButton({
                        // RENAME 'esMyMenu' to 's_MMB' (my-menu button).
                        className: 'esAvtrName esMyMenu s_MMB' + isImpersonatingClass,
                        dialogClassName: 's_MM',
                        ref: 'myMenuButton',
                        showCloseButton: true,
                        bottomCloseButton: true,
                        // MyMenu might list many notifications, and people Command-Click to open
                        // them in new browser tabs, or Shift-Click to open in new windows — then,
                        // they want MyMenu to stay open so they can continue Command-Click
                        // opening notifications.
                        stayOpenOnCmdShiftClick: true,
                        title: rFragment({}, urgentReviewTasks, otherReviewTasks, impersonatingStrangerInfo, myAvatar, 
                        // RENAME classes below to: s_MMB_Un (username) and s_MMB_You
                        // If screen wide:
                        r.span({ className: 'esAvtrName_name' }, me.username || me.fullName), 
                        // If screen narrow:  [narrow]
                        r.span({ className: 'esAvtrName_you' }, t.You), talkToMeNotfs, talkToOthersNotfs, otherNotfs, snoozeIcon)
                    }, MyMenuContentComponent({ store: store }));
                // ------- Login button
                // Don't show Log In on info pages, like a custom HTML homepage or About pages — that
                // has so far only made people confused.
                var hideLogInAndSignUp = me.isLoggedIn || debiki2.page_isInfoPage(pageRole) || impersonatingStrangerInfo;
                var hideSignup = store.settings.allowSignup === false;
                var SignupButton = function () { return hideLogInAndSignUp || hideSignup ? null :
                    debiki2.PrimaryButton({ className: 'dw-login esTopbar_signUp', onClick: _this.onSignUpClick }, r.span({}, t.SignUp)); };
                var LoginButton = function () { return hideLogInAndSignUp ? null :
                    debiki2.PrimaryButton({ className: 'dw-login esTopbar_logIn', onClick: _this.onLoginClick }, r.span({ className: 'icon-user' }, t.LogIn)); };
                // ------- Tools button
                // Placed in the topbar, so available also when one has scrolled down a bit.
                // (Is it ok to call another React component from here? I.e. the page tools dialog.)
                var toolsButton = !debiki2.isStaff(me) || !debiki2.store_shallShowPageToolsButton(store) ? null :
                    debiki2.Button({ className: 'dw-a-tools', onClick: this.showTools }, r.a({ className: 'icon-wrench' }, r.span({ className: 's_Ttl' }, t.Tools)));
                // ------- Search button
                var searchButton = debiki2.utils.ModalDropdownButton({ title: r.span({ className: 'icon-search' }),
                    className: 'esTB_SearchBtn', allowFullWidth: true, closeOnClick: false,
                    render: topbar.SearchForm });
                // ------- Custom site logo
                var siteLogoHtml = isBitDown && navConf.topbarBitDownLogo || navConf.topbarAtTopLogo;
                var siteLogoTitle = !skipCustomCode && siteLogoHtml &&
                    r.div({
                        className: 's_Tb_CuLogo s_Cu',
                        dangerouslySetInnerHTML: { __html: siteLogoHtml }
                    });
                // ------- Custom title & Back to site button
                // CLEAN_UP remove the props? Use if(path.search..) also for the admin area?
                var extraMargin = props.extraMargin;
                var customTitle = props.customTitle;
                var backToSiteButton = props.backToSiteButtonTitle;
                var backToGroups = autoPageType !== -2 /* AutoPageType.GroupProfilePage */ ? null :
                    debiki2.LinkUnstyled({ to: GroupsRoot,
                        className: 's_Tb_Ln s_Tb_Ln-Grps btn icon-reply' }, t.mm.ViewGroups);
                if (debiki2.autoPageType_isProfile(autoPageType)) {
                    backToSiteButton = t.tb.BackFromUsr;
                    /*
                    const isAllGroupsPage = autoPageType === AutoPageType.AllGroupsPage;
                    const isOneGroup = autoPageType === AutoPageType.GroupProfilePage;
                    customTitle = isAllGroupsPage
                          ? t.GroupsC
                          : (isOneGroup ? LinkUnstyled({ to: GroupsRoot }, t.GroupsC)
                                        : t.tb.AbtUsr);
                    */
                }
                else if (autoPageType === -11 /* AutoPageType.SearchPage */) {
                    customTitle = t.tb.SearchPg;
                    backToSiteButton = t.Back;
                }
                if (siteLogoTitle) {
                    // Show only siteLogoTitle, i.e. custom site logo & title.
                    customTitle = undefined;
                }
                else if (customTitle) {
                    customTitle = r.h1({ className: 'esTopbar_custom_title' }, customTitle);
                }
                if (props.showBackToSite || backToSiteButton) {
                    backToSiteButton = debiki2.LinkUnstyled({ className: 's_Tb_Ln s_Tb_Ln-Bck btn icon-reply',
                        href: debiki2.linkBackToSite() }, backToSiteButton || t.tb.BackFromAdm);
                    extraMargin = true;
                }
                // ------- Custom navigation
                var custNavRow1Html = !skipCustomCode && (isBitDown && navConf.topbarBitDownNav || navConf.topbarAtTopNav);
                var custNavRow1 = custNavRow1Html &&
                    r.div({
                        className: 's_Tb_CuNv s_Tb_CuNav s_Cu',
                        dangerouslySetInnerHTML: { __html: custNavRow1Html }
                    });
                // If we've scrolled down, use the ...BitDown... config, if present.
                // Otherwise use the ...AtTop... config, if present.
                // If ...NavLine2 configured, use it. Otherwise, if ...Nav2Rows == true,
                // use ...TopNav.
                var custNavRow2Html = !skipCustomCode && !justOneRow && ( // (justOneRow || topbarAlw2Rows)
                isBitDown && (navConf.topbarBitDownNavLine2 ||
                    navConf.topbarBitDownNav2Rows && navConf.topbarBitDownNav)
                    || (navConf.topbarAtTopNavLine2 ||
                        navConf.topbarAtTopNav2Rows && navConf.topbarAtTopNav));
                var custNavRow2 = !!custNavRow2Html &&
                    r.div({
                        className: 's_Tb_CuNv s_Tb_CuNav s_Cu',
                        dangerouslySetInnerHTML: { __html: custNavRow2Html }
                    });
                // ------- Search field and own buttons
                var use2Rows = !skipCustomCode && !justOneRow && (custNavRow2 || navConf.topbarBitDownTitleRow2);
                //  && (justOneRow || topbarAlw2Rows)  ?
                var searchAndMyButtonsRow1 = r.div({ className: 's_Tb_MyBs' }, searchButton, // later:  show input field so can just start typing
                SignupButton(), LoginButton(), 
                // We don't know when CSS hides or shows the 2nd row, so better to
                // include always.
                toolsButton, avatarNameDropdown);
                // No:
                //(!use2Rows || justOneRow) && toolsButton,
                //(!use2Rows || justOneRow) && avatarNameDropdown);
                var topbarRow2 = use2Rows &&
                    rFragment({}, navConf.topbarBitDownTitleRow2 && CatsAndTitle(), custNavRow2, r.div({ className: 's_Tb_MyBs' }, 
                    // Signup and login buttons needed here, or Reactjs hydration fails.
                    // Include in both row 1 and 2.
                    SignupButton(), LoginButton(), 
                    // These buttons won't mess up hydration — they are not rendered server side.
                    // Include in only one of row 1 and 2.
                    toolsButton, avatarNameDropdown));
                // No:
                //!justOneRow && toolsButton,
                //!justOneRow && avatarNameDropdown));
                // ------- Open Contextbar button
                // If server side, don't render any "X online" because that'd make the server side html
                // different from the html React generates client side to verify that the server's
                // html is up-to-date.
                var usersHere = store.userSpecificDataAdded ? debiki2.store_getUsersHere(store) : null;
                // We'll show "X users online", to encourage people to open and learn about the contextbar.
                // They'll more likely to do that, if they see a message that means "other people here too,
                // check them out".
                var contextbarTipsDetailed;
                var contextbarTipsBrief;
                if (!usersHere) {
                    // Server side — skip this. Or own data not yet activated – wait until later.
                }
                else if (usersHere.areTopicContributors) {
                    // Don't show any num-users tip for normal forum topics like this, because non-chat
                    // discussions happen slowly, perhaps one comment per user per day. Doesn't matter
                    // which people are online exactly now. — Instead, when opening the sidebar,
                    // we'll show a list of the most recent comments (rather than onlne topic contributors).
                    // COULD show click-to-see-recent-comments tips, if the user doesn't seem to know about that.
                    // For now, show this dummy text, because otherwise people get confused when the
                    // "X users online" text disappears:
                    contextbarTipsDetailed = t.tb.RecentPosts;
                    contextbarTipsBrief = r.span({}, '0', r.span({ className: 'icon-comment-empty' }));
                }
                else {
                    /* don't:
                    var numOthers = usersHere.numOnline - (usersHere.iAmHere ? 1 : 0);
                    because then people get confused when inside the contextbar they see: sth like '1 user, you'
                    although when collapsed, says '0 users'. So for now: */
                    var numOthers = usersHere.numOnline;
                    var isChat = usersHere.areChatChannelMembers;
                    contextbarTipsDetailed = numOthers + (isChat ? t.tb.NumOnlChat : t.tb.NumOnlForum);
                    contextbarTipsBrief = r.span({}, '' + numOthers, r.span({ className: 'icon-user' }));
                }
                var contextbarTips = !contextbarTipsDetailed ? null :
                    r.span({ className: 'esOpenCtxbarBtn_numOnline' }, r.span({ className: 'detailed' }, contextbarTipsDetailed), r.span({ className: 'brief' }, contextbarTipsBrief));
                var openContextbarButton = hideSidebarBtns ? null :
                    debiki2.Button({ className: 'esOpenPagebarBtn', onClick: debiki2.ReactActions.openPagebar,
                        title: contextbarTipsDetailed }, contextbarTips, r.span({ className: 'icon-left-open' }));
                // ------- Open Watchbar button
                var openWatchbarButton = hideSidebarBtns ? null : OpenWatchbarButton();
                // ------- Admin tips
                // HACK? CLEAN_UP MOVE to ...   forum.ts of course   === PageRole.Forum on next line.
                var showAdminTips = page.pageRole === 7 /* PageRole.Forum */ && me.isAdmin &&
                    store.settings.enableForum !== false;
                var adminGettingStartedTips = !showAdminTips ? null :
                    r.div({ className: 's_AdmTps container' }, debiki2.help.HelpMessageBox({ message: {
                            id: '94ktj',
                            version: 1,
                            content: rFragment({}, r.i({}, "Admin to do: "), "Configure ", r.a({ href: debiki2.linkToAdminPage() }, "settings")),
                        } }), debiki2.help.HelpMessageBox({ message: {
                            id: '40ehw',
                            version: 1,
                            content: rFragment({}, "Create ", r.a({ href: debiki2.linkToGroups() }, "groups"), '?'),
                        } }), debiki2.help.HelpMessageBox({ message: {
                            id: '25fwk6',
                            version: 1,
                            content: rFragment({}, r.a({ href: debiki2.linkToStaffInvitePage() }, "Invite people")),
                        } }));
                // ------- The result
                var extraMarginClass = extraMargin ? ' esTopbar-extraMargin' : '';
                var maintWorkNow = (eds.mainWorkUntilSecs || // backw compat, CLEAN_UP remove
                    eds.volatileDataFromServer &&
                        eds.volatileDataFromServer.maintWorkUntilSecs);
                var anyMaintWorkMessage = !maintWorkNow || isServerSide() ? null :
                    r.div({ className: 's_MaintWorkM' }, r.span({ className: 'n_SysMsg_Txt' }, r.b({}, "Under maintenance"), ", read-only. ", r.button({ onClick: function () { return location.reload(); } }, "Click here"), " to retry")); /* + (
                  eds.mainWorkUntilSecs === 1 ? '' : (
                    " Time left: " +
                    Math.max(0, Math.ceil((eds.mainWorkUntilSecs * 1000 - Date.now()) / 3600/1000)) + " hours")));
                    */
                var topbarRow1 = r.div({ className: 'esTopbar' + extraMarginClass }, // REMOVE esTopbar divs
                siteLogoTitle, r.div({ className: 'esTopbar_custom' }, customTitle, 
                // UX REFACTOR break out to its own widget, incl a retry-timeout countdown?
                // And place in the middle, *after* CatsAndTitle? [maint_msg_in_middle]
                // ----------------------
                r.div({ className: 's_NoInetM' }, t.ni.NoInet), //  [NOINETMSG]
                // "Will retry in X seconds"  I18N  seconds for live notfs retry, not reading progr
                // No, it's better if instead the server sends a msg when maint work done?
                anyMaintWorkMessage, 
                // ----------------------
                backToGroups, backToSiteButton), 
                // Incl also if custNavRow2 defined — otherwise React's hydration won't work.
                custNavRow1, CatsAndTitle(), searchAndMyButtonsRow1);
                var fixItClass = ' s_Tb-Stc'; // static
                var placeholderIfFixed;
                if (state.fixed) {
                    fixItClass = ' dw-fixed-topbar-wrap s_Tb-Fxd'; // RENAME to s_Tb-Fxd
                    // (This placeholder is actually totally needed, otherwise in some cases it'd be
                    // impossible to scroll down — because when the topbar gets removed from the flow
                    // via position:fixed, the page gets shorter, and then sometimes this results in the
                    // scrollbars disappearing and scroll-top becoming 0. Then onScroll() above
                    // gets called, it changes the topbar to position:static again, the topbar gets reinserted
                    // and the bottom of the page gets pushed down again — the effect is that, in this
                    // rare case, it's impossible to scroll down (without this placeholder). )
                    placeholderIfFixed =
                        r.div({ style: { height: state.placeholderHeightPx, width: '10px' } });
                    // No, use position: fixed instead. CLEAN_UP 2016-10: remove `styles` + this.state.top & left
                    //styles = { top: this.state.top, left: this.state.left }
                }
                // Just so can style via `s_TbW + .other-class ...`
                var topbarWrapClases = 's_TbW ' + (state.fixed ? 's_TbW-Fxd' : 's_TbW-Stc');
                var topbarClases = fixItClass +
                    (showTitle ? ' s_Tb-Ttl' : '') +
                    (noCatsMaybeTitle ? ' s_Tb-NoCs' : '') +
                    (!noCatsMaybeTitle ? ' s_Tb-Cs' : '') +
                    (use2Rows ? ' s_Tb-2Rws s_Tb-2Rows' : ' s_Tb-1Rw') + // CLEAN_UP RENAME 2Rows to 2Rws
                    (navConf.topbarBitDownTitleRow2 ? ' s_Tb-TlRw2' : '') +
                    (custNavRow2 ? ' s_Tb-CuNvRw2 s_Tb-CuNavRow2' : '') +
                    // s_Tb-LtSm means "less than small", -LtLg means "less than large".
                    // s_Tb-Sm means "width greater or equal to small screens",
                    // a mobile-first breakpoints mindset, like Tailwind CSS.
                    (navConf.tbSm && availableWidth < navConf.tbSm ? ' s_Tb-LtSm' : '') +
                    (navConf.tbSm && navConf.tbSm <= availableWidth ? ' s_Tb-Sm' : '') +
                    (navConf.tbMd && availableWidth < navConf.tbMd ? ' s_Tb-LtMd' : '') +
                    (navConf.tbMd && navConf.tbMd <= availableWidth ? ' s_Tb-Md' : '') +
                    (navConf.tbLg && availableWidth < navConf.tbLg ? ' s_Tb-LtLg' : '') +
                    (navConf.tbLg && navConf.tbLg <= availableWidth ? ' s_Tb-Lg' : '') +
                    (navConf.tbXl && availableWidth < navConf.tbXl ? ' s_Tb-LtXl' : '') +
                    (navConf.tbXl && navConf.tbXl <= availableWidth ? ' s_Tb-Xl' : '');
                return rFragment({}, r.div({ className: topbarWrapClases }, placeholderIfFixed, r.div({ className: 'esTopbarWrap s_Tb' + topbarClases }, // RENAME to s_Tb, no Wrap
                r.div({ className: 's_Tb_Rw1 s_Tb_Row1' }, openWatchbarButton, openContextbarButton, r.div({ className: 'container' }, topbarRow1)), 
                // Sometimes nice with a 2nd row, for nav links, if on mobile.
                // Instead of hamburger menu (which "hides" the nav links).
                use2Rows &&
                    r.div({ className: 's_Tb_Rw2 s_Tb_Row2' }, r.div({ className: 'container' }, r.div({ className: 'esTopbar' + extraMarginClass }, // REMOVE esTopbar divs
                    // However!  >= 1 site  use it for styling colors.
                    // So, first add basic theming functionality. Then, have people
                    // change colors via themes.  *Then* remove .esTopbar. [themes]
                    topbarRow2))))), adminGettingStartedTips);
            }
        });
        var MyMenuContentComponent = debiki2.createFactory({
            displayName: 'MyMenuContentComponent',
            componentDidMount: function () {
                var _this = this;
                debiki2.Server.loadMoreScriptsBundle(function () {
                    if (_this.isGone)
                        return;
                    _this.setState({ moreScriptsLoaded: true });
                });
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            render: function () {
                if (!this.state)
                    return r.p({}, t.Loading);
                // Lazy loaded.
                return debiki2.topbar['MyMenuContent']({ store: this.props.store });
            }
        });
        function makeNotfIcon(type, number) {
            // Dupl code [M396ARTD]
            if (!number)
                return null;
            var numMax99 = Math.min(99, number);
            var wideClass = number >= 10 ? ' esNotfIcon-wide' : '';
            return r.div({ className: 'esNotfIcon esNotfIcon-' + type + wideClass }, numMax99);
        }
        // COULD move SearchForm to more-bundle, so won't need to access via ['search']
        // (needs to do that currently, because not available server side)
        //
        // MOVE to widgets.s?
        topbar.SearchForm = debiki2.createComponent({
            displayName: 'SearchForm',
            getInitialState: function () {
                return { queryInputText: '' };
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            componentDidMount: function () {
                var _this = this;
                // Focus the search text input.
                // This won't work — I think focus() gets invoked without 'input' as 'this'
                // causing a "Illegal invocation" error:
                //   setTimeout(this.refs.input.focus, 900);
                // This works:
                // Oops! But forces the browser to recalculate styles and layout, takes 6ms. [FORCED_REFLOW]
                // this.refs.input.focus();
                // So let's do only from setTimeout:
                // (also good to try later anyway, in case doing directly didn't work when fading in)
                setTimeout(function () {
                    if (_this.isGone)
                        return;
                    _this.refs.input.focus();
                }, 150);
            },
            onQueryChange: function (event) {
                this.setState({ queryInputText: event.target.value });
            },
            render: function () {
                var urlEncodedQuery = debiki2.urlEncodeSearchQuery(this.state.queryInputText);
                var searchEndpoint = '/-/search';
                var searchUrl = '/-/search?q=' + urlEncodedQuery;
                var searchUrlAdvanced = '/-/search?advanced=true&q=' + urlEncodedQuery;
                var afterClick = this.props.closeDropdown;
                return (r.form({ className: 'c_SchD', ref: 'form',
                    method: 'get', acceptCharset: 'UTF-8', action: searchEndpoint }, r.div({ className: 'c_SchD_QnB' }, // QnB = query field and button
                r.input({ type: 'text', tabIndex: '1',
                    placeholder: t.s.SearchForHelp || t.s.TxtToFind,
                    ref: 'input', name: 'q',
                    value: this.state.queryInputText, onChange: this.onQueryChange }), debiki2.PrimaryLinkButton({ href: searchUrl, tabIndex: '2',
                    className: 'e_SchB', afterClick: afterClick }, t.Search)), r.div({ className: 'c_SchD_X' }, 
                // UX: These should activate on Space, not just Enter? [sch_b_space]
                r.a({ className: 'c_SchD_X_B', href: searchUrl, target: '_blank',
                    tabIndex: '3' }, "Search in new tab"), // I18N
                r.a({ className: 'c_SchD_X_B', href: searchUrlAdvanced,
                    tabIndex: '4' }, t.AdvSearch))));
            }
        });
        function OpenWatchbarButton() {
            return debiki2.Button({ className: 'esOpenWatchbarBtn', onClick: debiki2.ReactActions.openWatchbar,
                title: t.tb.WatchbToolt }, r.span({ className: 'icon-right-open' }), 
            // Button title:
            // 1) An eye icon makes sense? because the first list is "Recently *viewed*".
            // And one kind of uses that whole sidebar to *watch* / get-updated-about topics
            // one is interested in.
            // — no, hmm, someone remembers it from Photoshop and view-layers.
            // Don't:  r.span({ className: 'icon-eye' }));
            // 2) Let's call it "Activity"? since highlights topics with new posts.
            // (Better give it a label, then easier for people to remember what it does.)
            // r.span({ className: 'esOpenWatchbarBtn_text' }, "Activity"));
            // No, most topics listed won't have any recent activity.
            // 3) "Your topics"? Since shows topics one has viewed, or created, or chats
            // one has joined. But, "Your topics" is too long, on tablets, mobile.
            // Then, just: "Topics".
            // 4) Maybe always ues just "Topics" instead. Looks better, and, the topics
            // usually aren't "owned" by oneself anyway.  [open_wb_btn_ttl]
            //
            r.span({ className: 'esOpenWatchbarBtn_text' }, t.Topics)); // could:  justOneRow ? t.tb.WatchbBtn : t.Topics
        }
        topbar.OpenWatchbarButton = OpenWatchbarButton;
        //------------------------------------------------------------------------------
    })(topbar = debiki2.topbar || (debiki2.topbar = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/react-elements/name-login-btns.ts  */ /*
 * Copyright (C) 2014 Kaj Magnus Lindberg (born 1979)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../ReactStore.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var reactelements;
    (function (reactelements) {
        //------------------------------------------------------------------------------
        reactelements.NameLoginBtns = debiki2.createComponent({
            displayName: 'NameLoginBtns',
            mixins: [debiki2.StoreListenerMixin],
            getInitialState: function () {
                return { store: debiki2.ReactStore.allData() };
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            onChange: function () {
                if (this.isGone) {
                    // Don't know how this can happen, but it does inside the NonExistingPage component.
                    return;
                }
                this.setState({ store: debiki2.ReactStore.allData() });
            },
            onLoginClick: function () {
                debiki2.login.loginIfNeededReturnToAnchor(this.props.purpose || 20 /* LoginReason.LoginToLogin */, '');
            },
            onLogoutClick: function () {
                debiki2.ReactActions.logout();
            },
            render: function () {
                var store = this.state.store;
                var me = store.me;
                var settings = store.settings;
                var showAuthnBtns = true; /*  [hide_authn_btns]
                // Rethink this later. Need to store session type inside session string?
                if (settings.enableSso) {
                  if (me.isLoggedIn) {
                    if (settings.ssoLogoutRedirUrl &&
                              settings.ssoShowEmbAuthnBtns !== ShowEmbAuthnBtnsBitf.None) {
                      // Show logout button.
                    }
                    else {
                      // If auto logged in via token in embedding html, then auto log out,
                      // if it's not there any longer.
                ———>  // But! accessing another frame from here maybe is bad for perforamnce?
                      // (getMainWin() might be another iframe, if embedded comments)
                      const sessType = getMainWin().typs.sessType;
                      if (sessType === SessionType.AutoTokenSiteCustomSso) {
                        showAuthnBtns = false;
                      }
                      else {
                        // Leave showAuthnBtns = true — apparently we got logged in in
                        // some other way, maybe just before an admin cahnged the settings.
                      }
                    }
                  }
                  else {
                    showAuthnBtns = settings.ssoShowEmbAuthnBtns !== ShowEmbAuthnBtnsBitf.None;
                  }
                }
                */
                var userNameElem = null;
                var logoutBtnElem = null;
                var target = store.isEmbedded ? '_blank' : undefined;
                if (me.isLoggedIn) {
                    userNameElem =
                        r.span({ className: 'dw-u-info' }, t.LoggedInAs, r.a({ className: 's_MB_Name', href: debiki2.linkToUserProfilePage(me), target: target }, !me.fullName ? null : r.span({ className: 'esP_By_F' }, me.fullName + ' '), !me.username ? null : r.span({ className: 'esP_By_U' }, '@' + me.username)));
                    logoutBtnElem = !showAuthnBtns ? null :
                        r.span({ className: 'dw-a-logout', onClick: this.onLogoutClick, id: this.props.id }, t.LogOut);
                }
                var loginBtnElem = null;
                if (!me.isLoggedIn && showAuthnBtns) {
                    var disabled = this.props.disabled ? 'disabled' : '';
                    loginBtnElem =
                        r.span({ className: 'dw-a-login btn btn-primary ' + disabled,
                            onClick: disabled ? null : this.onLoginClick, id: this.props.id }, this.props.title || t.LogIn);
                }
                return (r.span({ className: 'dw-u-lgi-lgo' }, userNameElem, loginBtnElem, logoutBtnElem));
            }
        });
        //------------------------------------------------------------------------------
    })(reactelements = debiki2.reactelements || (debiki2.reactelements = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/notification/notf-prefs-button.ts  */ /*
 * Copyright (c) 2018 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var notfs;
    (function (notfs) {
        //------------------------------------------------------------------------------
        function PageNotfPrefButton(props) {
            return null;
        }
        notfs.PageNotfPrefButton = PageNotfPrefButton;
        //------------------------------------------------------------------------------
    })(notfs = debiki2.notfs || (debiki2.notfs = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/widgets/widget-open-buttons.ts  */ /*
 * Copyright (c) 2022 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../more-bundle-not-yet-loaded.ts" />
// Buttons that open lazy loaded dialogs.
//
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var widgets;
    (function (widgets) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        function openAssignToDiag(post, store, onOk) {
            var _a;
            var curPats = (_a = post.assigneeIds) === null || _a === void 0 ? void 0 : _a.map(function (id) { return store.usersByIdBrief[id]; });
            debiki2.morebundle.openAddPeopleDialog({ curPats: curPats, onChanges: function (res) {
                    debiki2.Server.changeAssignees(__assign(__assign({}, res), { postId: post.uniqueId }), onOk);
                } });
        }
        widgets.openAssignToDiag = openAssignToDiag;
        widgets.DiscLayoutDropdownBtn = React.createFactory(function (props) {
            var derived = debiki2.node_deriveLayout(props);
            // Bit dupl code. [node_props_btn]
            return (debiki2.Button({ className: 'e_DscLayB', onClick: function (event) {
                    var atRect = debiki2.cloneEventTargetRect(event);
                    debiki2.morebundle.openDiscLayoutDiag({
                        atRect: atRect,
                        // This is what's being edited.
                        layout: derived.layoutSource,
                        // This is the defaults, e.g. parent category settings, will get used
                        // if layoutSource settings cleared (gets set to Inherit).
                        default: derived.parentsLayout,
                        // These forSth just affect the dialog title.
                        forCat: !!props.cat,
                        forEveryone: props.forEveryone,
                        onSelect: props.onSelect
                    });
                } }, comtOrder_title(derived.actualLayout.comtOrder), ' ', r.span({ className: 'caret' })));
        });
        function comtOrder_title(comtOrder) {
            switch (comtOrder) {
                // case PostSortOrder.Inherit:
                //  Not supposed to happen. Instead the DiscLayoutDiag constructs a list item
                //  for the admins. [def_disc_layout_title]
                //  Using `default:` case, below.
                case 3 /* PostSortOrder.OldestFirst */: return "Oldest first"; // I18N here and below
                case 2 /* PostSortOrder.NewestFirst */: return "Newest first";
                case 1 /* PostSortOrder.BestFirst */: return "Popular first";
                case 18 /* PostSortOrder.NewestThenBest */: return "Newest then Popular";
                case 50 /* PostSortOrder.NewestThenOldest */: return "Newest then Oldest";
                default:
                    return "Bad: ".concat(comtOrder, " TyECMTORDR");
            }
        }
        widgets.comtOrder_title = comtOrder_title;
        //------------------------------------------------------------------------------
    })(widgets = debiki2.widgets || (debiki2.widgets = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/metabar.ts  */ /*
 * Copyright (c) 2014-2018 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../ReactStore.ts" />
/// <reference path="../react-elements/name-login-btns.ts" />
/// <reference path="../utils/DropdownModal.ts" />
/// <reference path="../util/ExplainingDropdown.ts" />
/// <reference path="../notification/notf-prefs-button.ts" />
/// <reference path="../widgets.ts" />
/// <reference path="../oop-methods.ts" />
/// <reference path="../widgets/widget-open-buttons.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var page;
    (function (page_2) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        var DropdownModal = debiki2.utils.DropdownModal;
        var ExplainingListItem = debiki2.util.ExplainingListItem;
        /**
         * Shows meta information about the page: created by, when, num replies,
         * message members (if is a private message page), summarize replies button, etc.
         *
         * RENAME to Pagebar?  "Meta" is too unspecific?  or PageMetaBar?  [metabar_2_pagebar]
         */
        page_2.Metabar = debiki2.createComponent({
            displayName: 'Metabar',
            getInitialState: function () {
                return {
                    store: debiki2.ReactStore.allData(),
                    ui: { showDetails: false },
                    numRepliesSummarized: null,
                };
            },
            componentDidMount: function () {
                debiki2.ReactStore.addChangeListener(this.onChange);
            },
            componentWillUnmount: function () {
                this.isGone = true;
                debiki2.ReactStore.removeChangeListener(this.onChange);
            },
            onChange: function () {
                if (this.isGone)
                    return;
                this.setState({
                    store: debiki2.ReactStore.allData(),
                    ui: this.state.ui
                });
            },
            onReplyClick: function () {
                debiki2.die('unimpl [EdE2QKT0]'); // was: d.i.showReplyFormEmbeddedComments(); [todo-emb-cmts]
            },
            onToggleDetailsClick: function () {
                // [redux] modifying in place :-/
                this.state.ui.showDetails = !this.state.ui.showDetails;
                this.setState(this.state);
            },
            summarizeReplies: function () {
                var _this = this;
                debiki2.ReactActions.summarizeReplies();
                setTimeout(function () {
                    _this.setState({
                        numRepliesVisible: debiki2.$$all('.dw-p').length,
                        numRepliesSummarized: debiki2.$$all('.dw-p.dw-x').length
                    });
                }, 1);
            },
            render: function () {
                var store = this.state.store;
                var page = store.currentPage;
                var ui = this.state.ui;
                var me = store.me;
                var isBlogComments = page.pageRole === 5 /* PageRole.EmbeddedComments */;
                var notfLevelElem = null;
                if (me.isAuthenticated && !ui.showDetails) {
                    // Add a notf level button — so won't need to expand the metabar, to click it.
                    var effPref = debiki2.pageNotfPrefTarget_findEffPref({ pageId: page.pageId }, store, me);
                    var level = debiki2.notfPref_level(effPref);
                    notfLevelElem = r.span({ className: "dw-page-notf-level n_NfLv-".concat(level) }, t.Notifications + ': ', debiki2.notfs.PageNotfPrefButton({ target: { pageId: store.currentPageId }, store: store, ownPrefs: me }));
                }
                var toggleDetailsBtn = !me.isLoggedIn ? null :
                    r.button({ className: 'dw-cmts-tlbr-open', onClick: this.onToggleDetailsClick }, r.span({ className: (ui.showDetails ? 'icon-up-open' : 'icon-down-open') }));
                // If not in emb cmts, then login btns in topbar, need not show here too.
                var nameLoginBtns = !isBlogComments ? null :
                    r.li({}, debiki2.reactelements.NameLoginBtns({}));
                var summaryElem = r.div({ className: 'dw-cmts-tlbr-head' }, r.ul({ className: 'dw-cmts-tlbr-summary' }, r.li({ className: 'dw-cmts-count' }, page.numRepliesVisible + ' ' + (isBlogComments ? (t.comments || t.replies) : t.replies)), // I18N t.comments missing
                r.li({}, debiki2.widgets.DiscLayoutDropdownBtn({ page: page, store: store, layoutFor: 1 /* LayoutFor.PageWithTweaks */,
                    onSelect: function (newLayout) {
                        // This'll change the layout in this browser only (not saved server side).
                        debiki2.ReactActions.patchTheStore({
                            curPageTweaks: newLayout,
                        });
                    } })), nameLoginBtns, r.li({}, notfLevelElem)), toggleDetailsBtn);
                var detailsElem = ui.showDetails
                    ? MetabarDetails({ store: store })
                    : null;
                var anyExtraMeta;
                if (page.pageRole === 17 /* PageRole.FormalMessage */) {
                    var members = debiki2.store_getPageMembersList(store);
                    var memberList = members.map(function (user) {
                        return (r.div({ className: 'esMetabar_msgMmbr', key: user.id }, debiki2.avatar.Avatar({ user: user, origins: store }), r.span({ className: 'esMetabar_msgMmbr_username' }, user.username)));
                    });
                    anyExtraMeta =
                        r.div({ className: 'esMetabar_extra' }, r.div({ className: 'icon-mail' }, t.mb.Msg), r.div({ className: 'esMetabar_msgMmbrs' }, memberList));
                }
                // ----- Summarize replies section
                var summarizeStuff;
                if (page.numRepliesVisible >= 10) {
                    var doneSummarizing = !_.isNumber(this.state.numRepliesSummarized) ? null :
                        r.span({ style: { marginLeft: '1em' } }, 
                        // Only visiblie replies are summarized, so the count might be confusingly low,
                        // if we don't clarify that only visible replies get summarized.
                        t.mb.DoneSummarizing(this.state.numRepliesSummarized, this.state.numRepliesVisible));
                    var minutes = estimateReadingTimeMinutesSkipOrigPost(_.values(page.postsByNr));
                    if (minutes >= 10 || page.numRepliesVisible >= 20) {
                        summarizeStuff =
                            r.div({ className: 'esMetabar_summarize' }, r.p({}, t.mb.EstTime(page.numRepliesVisible, Math.ceil(minutes))), debiki2.Button({ onClick: this.summarizeReplies }, t.mb.SmrzRepls), doneSummarizing);
                    }
                }
                // ----- Put everything together
                return (r.div({ className: 'dw-cmts-tlbr esMetabar', id: 'dw-cmts-tlbr' }, summaryElem, detailsElem, anyExtraMeta, summarizeStuff));
            }
        });
        var MetabarDetails = debiki2.createComponent({
            displayName: 'MetabarDetails',
            render: function () {
                var store = this.props.store;
                var me = store.me;
                var notificationsElem = NotfPrefBtn(store, me);
                return (r.div({ className: 'dw-cmts-tlbr-details' }, notificationsElem));
            }
        });
        function NotfPrefBtn(store, me) {
            var userAuthenticated = me && me.isAuthenticated;
            return !userAuthenticated ? null :
                r.div({}, r.div({ className: 'esMB_Dtls_Ntfs_Lbl' }, t.mb.NotfsAbtThisC), debiki2.notfs.PageNotfPrefButton({
                    target: { pageId: store.currentPageId },
                    store: store,
                    ownPrefs: me
                }));
        }
        function estimateReadingTimeMinutesSkipOrigPost(posts) {
            // People read 200 English words per minute, with 60% reading comprehension.
            // But 60% is rather low. Let's improve that, and assume a few distractions –> 120? wpm instead.
            var wordsPerMinute = 120;
            // Google "average word length" –> "English, French, Spanish and German are approximately
            // 5.10, 5.13, 5.22 and 6.26" (www.puchu.net/doc/Average_Word_Length),
            // Russian: 5.3 (http://arxiv.org/pdf/1208.6109.pdf)
            //    — so let's use 5.2.
            // But what about Chinese and Japanese?
            var averageWordLength = 5.2;
            // % html chars varies between 60% and 95% ? fairly much depending on how many <a href=...>
            // there are in comparison to the amount of visible text.
            var removeHtml = 0.8; // guessing that 20% chars is html tags and classes and href=...
            var numChars = _.sumBy(posts, function (post) {
                // Exclude the original post.
                if (post.nr === BodyNr || post.nr === TitleNr)
                    return 0;
                return post.sanitizedHtml ? post.sanitizedHtml.length : 0;
            });
            var numWords = numChars * removeHtml / averageWordLength;
            return numWords / wordsPerMinute;
        }
        // Don't use, only for testing.
        page_2.debugEstimateReadingTime = estimateReadingTimeMinutesSkipOrigPost;
        //------------------------------------------------------------------------------
    })(page = debiki2.page || (debiki2.page = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/open-share-popup.ts  */ //------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        //------------------------------------------------------------------------------
        pagedialogs.Facebook = 'facebook';
        pagedialogs.Twitter = 'twitter';
        pagedialogs.Google = 'google';
        pagedialogs.Email = 'mail';
        pagedialogs.LinkedIn = 'linkedin';
        function openSharePopup(url, where) {
        }
        pagedialogs.openSharePopup = openSharePopup;
        //------------------------------------------------------------------------------
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/chat.ts  */ /*
 * Copyright (c) 2016, 2017 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../ReactStore.ts" />
/// <reference path="../react-elements/name-login-btns.ts" />
/// <reference path="../Server.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/window-zoom-resize-mixin.ts" />
/// <reference path="../avatar/avatar.ts" />
/// <reference path="../avatar/AvatarAndName.ts" />
/// <reference path="discussion.ts" />
/// <reference path="cats-or-home-link.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
/// <reference path="../editor-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var page;
    (function (page_3) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        var EditorBecomeFixedDist = 5;
        var DefaultEditorRows = 2;
        page_3.ChatMessages = debiki2.createComponent({
            displayName: 'ChatMessages',
            componentDidUpdate: function () {
                // We should call onScroll() if a new message gets inserted below the current scroll pos.
                // Simply call it always, instead.
                this.refs.fixedAtBottom.onScroll();
            },
            scrollDown: function () {
                this.refs.titleAndMessages.scrollDown();
            },
            render: function () {
                var store = this.props.store;
                var page = store.currentPage;
                // Use [me_isPageMember] instead, in case any group user is in, is a member?
                var isChatMember = _.some(store.currentPage.pageMemberIds, function (id) { return id === store.me.id; });
                var editorOrJoinButton = isChatMember || page.pageRole === 22 /* PageRole.JoinlessChat */
                    ? ChatMessageEditor({ store: store, scrollDownToViewNewMessage: this.scrollDown })
                    : JoinChatButton({});
                return (r.div({ className: 'esChatPage dw-page', id: 't_PageContent' }, page_3.CatsOrHomeLink(page, store), TitleAndLastChatMessages({ store: store, ref: 'titleAndMessages' }), FixedAtBottom({ ref: 'fixedAtBottom' }, editorOrJoinButton)));
            }
        });
        var TitleAndLastChatMessages = debiki2.createComponent({
            displayName: 'TitleAndLastChatMessages',
            getInitialState: function () {
                return {};
            },
            componentDidMount: function () {
                this.scrollDown();
                this.setState({ hasScrolledDown: true });
            },
            UNSAFE_componentWillUpdate: function () {
                // Scroll down, if comment added, & we're at the bottom already.
                var pageColumnRect = debiki2.getPageRect();
                // Add +2 because sometimes .bottom is 0.1 more than the-win-height, for some weird reason.
                this.shallScrollDown = pageColumnRect.bottom <= window.innerHeight + 2;
            },
            componentDidUpdate: function () {
                if (this.shallScrollDown) {
                    this.scrollDown();
                }
            },
            scrollDown: function () {
                var pageColumn = document.getElementById('esPageColumn');
                pageColumn.scrollTop = pageColumn.scrollHeight;
            },
            render: function () {
                var store = this.props.store;
                var page = store.currentPage;
                var title = page_3.Title({ store: store }); // later: only if not scrolled down too far
                var originalPost = page.postsByNr[store.rootPostId];
                var origPostAuthor = store.usersByIdBrief[originalPost.authorId];
                var origPostHeader = page_3.PostHeader({ store: store, post: originalPost });
                var origPostBody = page_3.PostBody({ store: store, post: originalPost });
                var canScrollUpToFetchOlder = true;
                var messages = [];
                _.each(page.postsByNr, function (post) {
                    if (post.nr === TitleNr || post.nr === BodyNr) {
                        // We show the title & body elsewhere.
                        return;
                    }
                    if (post.isPostDeleted) {
                        messages.push(DeletedChatMessage({ key: post.uniqueId, store: store, post: post }));
                        return;
                    }
                    if (post.nr === FirstReplyNr) {
                        // (COULD make this work also if post nr FirstReplyNr has been moved to another page
                        // and hence will never be found. Fix by scrolling up, noticing that nothing was found,
                        // and remove the you-can-scroll-up indicator?)
                        canScrollUpToFetchOlder = false;
                    }
                    var postProps = { key: post.uniqueId, store: store, post: post };
                    var postElem = post.postType === 31 /* PostType.MetaMessage */ ? page_3.MetaPost(postProps) : ChatMessage(postProps);
                    messages.push(postElem);
                });
                if (!messages.length) {
                    canScrollUpToFetchOlder = false;
                }
                var thisIsTheWhat = r.p({}, t.c.About_1 + debiki2.ReactStore.getPageTitle() + t.c.About_2, debiki2.avatar.AvatarAndName({ user: origPostAuthor, origins: store, hideAvatar: true }), ", ", debiki2.timeExact(originalPost.createdAtMs));
                var perhapsHidden;
                if (!this.state.hasScrolledDown) {
                    // Avoid flash of earlier messages before scrolling to end.
                    perhapsHidden = { display: 'none' };
                }
                var scrollUpTips = !canScrollUpToFetchOlder ? null :
                    r.div({ className: 'esChat_scrollUpTips' }, t.c.ScrollUpViewComments, r.br(), t.NotImplemented);
                return (r.div({ className: 'esLastChatMsgs', style: perhapsHidden }, title, r.div({ className: 'esChatChnl_about' }, thisIsTheWhat, r.div({}, t.c.Purpose), origPostBody), scrollUpTips, messages));
            }
        });
        var ChatMessage = debiki2.createComponent({
            displayName: 'ChatMessage',
            getInitialState: function () {
                return { isEditing: false };
            },
            edit: function () {
                var _this = this;
                this.setState({ isEditing: true });
                var post = this.props.post;
                debiki2.editor.openToEditPostNr(post.nr, function (wasSaved, text) {
                    _this.setState({ isEditing: false });
                });
            },
            delete_: function (event) {
                debiki2.morebundle.openDeletePostDialog(this.props.post, debiki2.cloneEventTargetRect(event));
            },
            render: function () {
                var state = this.state;
                var store = this.props.store;
                var me = store.me;
                var post = this.props.post;
                var author = debiki2.store_getAuthorOrMissing(store, post);
                var headerProps = { store: store, post: post };
                headerProps.isFlat = true;
                headerProps.exactTime = true;
                var isMine = me.id === author.id ||
                    // And, for now, for new post previews: [305KGWGH2]
                    author.id === UnknownUserId;
                var isMineClass = isMine ? ' s_My' : '';
                var mayDelete = post.postType === 3 /* PostType.ChatMessage */ && !state.isEditing &&
                    !post.isPreview && (isMine || debiki2.isStaff(me));
                var mayEdit = mayDelete && !store.isEditorOpen;
                if (mayEdit || mayDelete) {
                    headerProps.stuffToAppend = rFragment({}, !mayEdit ? null :
                        r.button({ className: 's_C_M_B s_C_M_B-Ed icon-edit' + isMineClass,
                            onClick: this.edit }, t.c.edit), 
                    // (Don't show a trash icon, it'd make the page look too cluttered.)
                    !mayDelete ? null :
                        r.button({ className: 's_C_M_B s_C_M_B-Dl' + isMineClass,
                            onClick: this.delete_ }, t.c.delete));
                }
                var isPreviewClass = post.isPreview ? ' s_C_M-Prvw' : '';
                //headerProps.stuffToAppend.push(
                //  r.button({ className: 'esC_M_MoreB icon-ellipsis', key: 'm' }, "more"));
                var chatMessage = (r.div({ className: 'esC_M' + isPreviewClass, id: 'post-' + post.nr }, debiki2.avatar.Avatar({ user: author, origins: store, size: 2 /* AvatarSize.Small */ }), page_3.PostHeader(headerProps), page_3.PostBody({ store: store, post: post })));
                var isEditingExistingPost = post.nr >= MinRealPostNr;
                var anyPreviewInfo = !post.isPreview ? null :
                    r.div({ className: 's_T_YourPrvw' }, t.e.PreviewC + ' ', r.span({ className: 's_T_YourPrvw_ToWho' }, isEditingExistingPost ?
                        t.d.YourEdits : t.d.YourChatMsg));
                return (anyPreviewInfo ?
                    rFragment({}, anyPreviewInfo, chatMessage) : chatMessage);
            }
        });
        function DeletedChatMessage(props) {
            var post = props.post;
            return (r.div({ className: 'esC_M s_C_M-Dd', id: 'post-' + post.nr, key: props.key }, r.div({ className: 'dw-p-bd' }, r.div({ className: 'dw-p-bd-blk' }, t.c.MessageDeleted))));
        }
        var FixedAtBottom = debiki2.createComponent({
            displayName: 'FixedAtBottom',
            mixins: [debiki2.utils.PageScrollMixin, debiki2.utils.WindowZoomResizeMixin],
            getInitialState: function () {
                return { fixed: false, bottom: 0 };
            },
            componentDidMount: function () {
                // Currently we always scroll to the bottom, when opening a chat channel.
                // Later: setState fixed: true, if going back to a chat channel when one has scrolled up.
            },
            onWindowZoomOrResize: function () {
                this.onScroll();
            },
            onScroll: function () {
                var pageBottom = debiki2.getPageRect().bottom;
                var scrollableBottom = window.innerHeight;
                var myNewBottom = pageBottom - scrollableBottom;
                this.setState({ bottom: myNewBottom });
                if (!this.state.fixed) {
                    if (pageBottom > scrollableBottom + EditorBecomeFixedDist) {
                        this.setState({ fixed: true });
                    }
                }
                else {
                    // Add +X otherwise sometimes the fixed state won't vanish although back at top of page.
                    if (pageBottom - scrollableBottom <= +2) {
                        this.setState({ fixed: false, bottom: 0 });
                    }
                }
            },
            render: function () {
                var offsetBottomStyle;
                if (this.state.fixed) {
                    offsetBottomStyle = { bottom: this.state.bottom };
                }
                return (r.div({ className: 'esFixAtBottom', style: offsetBottomStyle }, React.cloneElement(this.props.children, {
                    refreshFixedAtBottom: this.onScroll,
                })));
            }
        });
        var JoinChatButton = debiki2.createComponent({
            displayName: 'JoinChatButton',
            componentWillUnmount: function () {
                this.isGone = true;
            },
            joinChannel: function () {
                var _this = this;
                debiki2.login.loginIfNeededReturnToAnchor(10 /* LoginReason.LoginToChat */, '#theJoinChatB', function () {
                    if (_this.isGone) {
                        // Now after having logged in, this join chat button got removed (unmounted) — that's
                        // because we've joined the chat already (some time long ago). So, need do nothing, now.
                        return;
                    }
                    debiki2.Server.joinPage();
                });
            },
            render: function () {
                return (r.div({ className: 'esJoinChat' }, debiki2.PrimaryButton({ id: 'theJoinChatB', className: 'esJoinChat_btn',
                    onClick: this.joinChannel }, t.c.JoinThisChat)));
            }
        });
        // SMALLER_BUNDLE move to editor script bundle? ... Hmm, could be inline-editor-bundle.js?
        // or editor-shell.js?
        // and the full-text-with-preview could be  advanced-editor-bundle.js?
        var ChatMessageEditor = debiki2.createFactory({
            displayName: 'ChatMessageEditor',
            getInitialState: function () {
                return {
                    text: '',
                    draftStatus: 0 /* DraftStatus.NotLoaded */,
                    rows: DefaultEditorRows,
                    previewYPos: 0,
                };
            },
            componentDidMount: function () {
                var _this = this;
                // Sync delay w e2e test. Dupl code. [upd_ed_pv_delay]
                this.updatePreviewSoon = _.debounce(this.updatePreviewNow, 333);
                this.saveDraftSoon = _.debounce(function () {
                    if (_this.isGone)
                        return;
                    _this.saveDraftNow(); // [7AKBJ42]
                }, 2022);
                window.addEventListener('unload', this.saveDraftUseBeacon);
                // Load editor scripts — but why??? skip? (WAITWJS) and any draft text.
                debiki2.Server.loadEditorAndMoreBundles(function () {
                    if (_this.isGone)
                        return;
                    var store = _this.props.store;
                    var page = store.currentPage;
                    var bodyPostId = page.postsByNr[BodyNr].uniqueId;
                    var draftLocator = {
                        draftType: 5 /* DraftType.Reply */,
                        pageId: page.pageId,
                        postNr: BodyNr,
                        postId: bodyPostId, // ?? why incl here, but not when saving draft (50285RK)
                    };
                    var newState = { scriptsLoaded: true };
                    _this.setState(newState);
                    debiki2.Server.loadDraftAndGuidelines(draftLocator, 4 /* WritingWhat.ChatComment */, page.categoryId, page.pageRole, function (guidelinesSafeHtml, draft) {
                        if (_this.isGone)
                            return;
                        var newState = {
                            draft: draft,
                            draftStatus: 1 /* DraftStatus.NothingHappened */,
                            text: draft ? draft.text : '',
                        };
                        _this.setState(newState);
                    });
                });
            },
            componentWillUnmount: function () {
                this.isGone = true;
                debiki2.logD("ChatMessageEditor: componentWillUnmount");
                window.removeEventListener('unload', this.saveDraftUseBeacon);
                this.saveDraftNow();
            },
            saveDraftUseBeacon: function () {
                this.saveDraftNow(UseBeacon);
            },
            saveDraftNow: function (useBeacon) {
                // Tested here: TyT7JKMW24
                // A bit dupl code [4ABKR2J0]
                var _this = this;
                // Don't save draft from both here, and the advanced editor — then might get dupl drafts. [TyT270424]
                if (this.state.advancedEditorInstead)
                    return;
                // If we're closing the page, do try saving anyway, using becaon, because the current non-beacon
                // request will probably be aborted by the browser? (since, if beacon, the page is getting unloaded)
                if (this.isSavingDraft && !useBeacon)
                    return;
                var store = this.props.store;
                var me = store.me;
                var oldDraft = this.state.draft;
                var draftStatus = this.state.draftStatus;
                if (draftStatus <= 4 /* DraftStatus.NeedNotSave */)
                    return;
                var forWhat = {
                    draftType: 5 /* DraftType.Reply */,
                    pageId: store.currentPageId,
                    postNr: BodyNr,
                    // No postId here? (50285RK)
                };
                if (store.currentPage) {
                    var post = store.currentPage.postsByNr[BodyNr];
                    forWhat.postId = post ? post.uniqueId : undefined;
                }
                var draftOldOrEmpty = oldDraft || {
                    byUserId: me.id,
                    draftNr: NoDraftNr,
                    forWhat: forWhat,
                    createdAt: debiki2.getNowMs(),
                    postType: 3 /* PostType.ChatMessage */,
                    text: '',
                };
                var text = (this.state.text || '').trim();
                // BUG the lost update bug, unlikely to happen: Might overwrite other version of this draft [5KBRZ27].
                var withBeacon = useBeacon ? ', with beacon' : '';
                // If empty. Delete any old draft.  BUG [DRAFTS_BUG] preview doesn't get deleted properly
                if (!text) {
                    if (oldDraft) {
                        debiki2.logD("Deleting draft".concat(withBeacon, "..."));
                        this.setState({ draftStatus: 8 /* DraftStatus.Deleting */ });
                        this.isSavingDraft = true;
                        debiki2.Server.deleteDrafts([oldDraft.draftNr], useBeacon || (function () {
                            // DUPL CODE, bad, here & above [UPSDFTDUPLCD]
                            _this.isSavingDraft = false;
                            debiki2.logD("...Deleted draft.");
                            if (_this.isGone)
                                return;
                            _this.setState({
                                draft: null,
                                draftStatus: 4 /* DraftStatus.Deleted */,
                            });
                        }), useBeacon || this.setCannotSaveDraft);
                    }
                    return;
                }
                var draftToSave = __assign(__assign({}, draftOldOrEmpty), { text: text, title: '' });
                this.setState({
                    draftStatus: 6 /* DraftStatus.SavingSmall */,
                });
                debiki2.logD("Saving draft".concat(withBeacon, ": ").concat(JSON.stringify(draftToSave)));
                this.isSavingDraft = true;
                debiki2.Server.upsertDraft(draftToSave, useBeacon || (function (draftWithNr) {
                    // DUPL CODE, bad, here & above [UPSDFTDUPLCD]
                    debiki2.logD("...Saved draft.");
                    if (_this.isGone)
                        return;
                    _this.isSavingDraft = false;
                    _this.setState({
                        draft: draftWithNr,
                        draftStatus: 3 /* DraftStatus.SavedServerSide */,
                    });
                }), useBeacon || this.setCannotSaveDraft);
            },
            setCannotSaveDraft: function (errorStatusCode) {
                // Dupl code [4ABKR2JZ7]
                debiki2.logW("... Error saving draft, status: ".concat(errorStatusCode));
                if (this.isGone)
                    return;
                this.isSavingDraft = false;
                this.setState({
                    draftStatus: 10 /* DraftStatus.CannotSave */,
                    draftErrorStatusCode: errorStatusCode,
                });
            },
            onTextEdited: function (event) {
                this.updateText(event.target.value);
            },
            updateText: function (text, draftWithStatus) {
                var _this = this;
                var store = this.props.store;
                var state = this.state;
                // numLines won't work with wrapped lines, oh well, fix some other day.
                // COULD use https://github.com/andreypopp/react-textarea-autosize instead.
                var numLines = text.split(/\r\n|\r|\n/).length;
                // A bit dupl code [7WKABF2]
                var draft = state.draft;
                var draftStatus = draft && draft.text === text // ? .trim()
                    ? 2 /* DraftStatus.EditsUndone */
                    : 5 /* DraftStatus.ShouldSave */;
                var textChanged = state.text !== text;
                var textNowEmpty = !text; // isBlank(text); ?
                // COULD use store.isEditorOpen instead — but I think it hasn't been updated yet?
                if (textChanged && !this.state.advancedEditorInstead) {
                    if (textNowEmpty) {
                        debiki2.ReactActions.hideEditorAndPreview({});
                    }
                    else {
                        this.updatePreviewSoon();
                    }
                }
                var newState = {
                    text: text,
                    draft: (draftWithStatus ? draftWithStatus.draft : this.state.draft),
                    draftStatus: (draftWithStatus ? draftWithStatus.draftStatus : draftStatus),
                    rows: Math.max(DefaultEditorRows, Math.min(8, numLines)),
                };
                this.setState(newState, draftStatus === 5 /* DraftStatus.ShouldSave */ ? this.saveDraftSoon : undefined);
                // In case lines were deleted, we need to move the editor a bit downwards, so it
                // remains fixed at the bottom — because now it's smaller.
                if (this.props.refreshFixedAtBottom) {
                    // In case the advanced editor is currently shown, use setTimeout() so we'll
                    // refresh after the current render phase.
                    setTimeout(function () {
                        if (_this.isGone)
                            return;
                        _this.props.refreshFixedAtBottom();
                    }, 0);
                }
            },
            updatePreviewNow: function () {
                var _this = this;
                debiki2.Server.loadEditorAndMoreBundles(function () {
                    var _a, _b;
                    if (_this.isGone)
                        return;
                    var sanitizerOpts = {
                        allowClassAndIdAttr: true,
                        allowDataAttr: false
                    };
                    var safeHtml = debiki2['editor'].markdownToSafeHtml(_this.state.text, window.location.host, sanitizerOpts);
                    // If one has scrolled up manually, so much so the preview is now below
                    // the editor, then stop scrolling the preview into view — because
                    // apparently the user wants to control the scroll henself.
                    var previewElm = debiki2.$first('.s_T_YourPrvw');
                    var previewElmY = ((_a = previewElm === null || previewElm === void 0 ? void 0 : previewElm.getBoundingClientRect()) === null || _a === void 0 ? void 0 : _a.y) || 0;
                    // The simple chat message text box, or the advanced editor.
                    var editorElm = debiki2.$first('.esC_Edtr, .s_E-E');
                    var editorElmY = ((_b = editorElm === null || editorElm === void 0 ? void 0 : editorElm.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.y) || 0;
                    var scrollToPreview = previewElmY <= editorElmY;
                    debiki2.ReactActions.showEditsPreviewInPage({ scrollToPreview: scrollToPreview, safeHtml: safeHtml, highlightPreview: false });
                });
            },
            onKeyPressOrKeyDown: function (event) {
                // Let Return mean newline everywhere, and ctrl+return means Submit everywhere.
                // (Typically, in a chat, Return/Enter means "post my message". However, in Talkyard's
                // "advanced" editor, hitting Return adds a newline — so people (well at least
                // my (KajMagnus') father) get confused if Return instead submits one's chat message.)
                // In my Chrome, Ctrl + Enter won't fire onKeyPress, only onKeyDown. [5KU8W2]
                if (debiki2.event_isCtrlEnter(event)) {
                    var isNotEmpty = /\S/.test(this.state.text);
                    if (isNotEmpty) {
                        event.preventDefault();
                        this.saveChatMessage();
                    }
                }
            },
            saveChatMessage: function () {
                var _this = this;
                this.setState({ isSaving: true });
                debiki2.ReactActions.insertChatMessage(this.state.text, this.state.draft, function () {
                    var _a;
                    if (_this.isGone)
                        return;
                    debiki2.ReactActions.hideEditorAndPreview({});
                    var newState = {
                        text: '',
                        isSaving: false,
                        draft: null,
                        draftStatus: 1 /* DraftStatus.NothingHappened */,
                        rows: DefaultEditorRows,
                    };
                    _this.setState(newState);
                    _this.props.scrollDownToViewNewMessage();
                    (_a = _this.textareaElm) === null || _a === void 0 ? void 0 : _a.focus();
                });
            },
            useAdvancedEditor: function () {
                var _this = this;
                this.setState({ advancedEditorInstead: true });
                var state = this.state;
                debiki2.editor.openToWriteChatMessage(state.text, state.draft, state.draftStatus, function (wasSaved, text, draft, draftStatus) {
                    if (_this.isGone)
                        return;
                    // Now the advanced editor has been closed.
                    _this.setState({
                        advancedEditorInstead: false,
                    });
                    _this.updateText(wasSaved ? '' : text, { draft: draft, draftStatus: draftStatus });
                    if (wasSaved) {
                        _this.props.scrollDownToViewNewMessage();
                    }
                });
            },
            render: function () {
                var _this = this;
                var store = this.props.store;
                if (store.isEditorOpen || !this.state.scriptsLoaded ||
                    // Can remove this check now? using  isEditorOpen  above instead
                    this.state.advancedEditorInstead)
                    return null;
                var state = this.state;
                var draft = state.draft;
                var draftNr = draft ? draft.draftNr : NoDraftNr;
                var draftStatus = state.draftStatus;
                var draftErrorStatusCode = state.draftErrorStatusCode;
                var draftStatusInfo = debiki2.editor['DraftStatusInfo']({ draftStatus: draftStatus, draftNr: draftNr, draftErrorStatusCode: draftErrorStatusCode });
                // We'll disable the editor, until any draft has been loaded. [5AKBW20]
                var anyDraftLoaded = draftStatus !== 0 /* DraftStatus.NotLoaded */;
                var disabled = state.isLoading || !anyDraftLoaded || state.isSaving;
                var buttons = r.div({ className: 'esC_Edtr_Bs' }, draftStatusInfo, r.button({ className: 'esC_Edtr_SaveB btn btn-primary', onClick: this.saveChatMessage,
                    disabled: disabled }, '↵ ' + t.c.PostMessage), r.button({ className: 'esC_Edtr_AdvB btn btn-default', onClick: this.useAdvancedEditor,
                    disabled: disabled }, t.c.AdvancedEditor));
                // In the editor scripts bundle, lazy loaded.
                var ReactTextareaAutocomplete = debiki2.editor['ReactTextareaAutocomplete'];
                var listUsernamesTrigger = debiki2.editor['listUsernamesTrigger'];
                return (r.div({ className: 'esC_Edtr' }, 
                // The @mentions username autocomplete might overflow the textarea. [J7UKFBW]
                ReactTextareaAutocomplete({ className: 'esC_Edtr_textarea',
                    value: anyDraftLoaded ? state.text : t.e.LoadingDraftDots,
                    onChange: this.onTextEdited,
                    onKeyPress: this.onKeyPressOrKeyDown,
                    onKeyDown: this.onKeyPressOrKeyDown,
                    innerRef: function (e) {
                        _this.textareaElm = e;
                        e && e.focus();
                    },
                    placeholder: t.c.TypeHere,
                    disabled: disabled,
                    rows: state.rows,
                    loadingComponent: function () { return r.span({}, t.Loading); },
                    trigger: listUsernamesTrigger }), buttons));
            }
        });
        // Staying at the bottom: http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html
        //------------------------------------------------------------------------------
    })(page = debiki2.page || (debiki2.page = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/post-actions.ts  */ /*
 * Copyright (c) 2014-2018 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="../store-getters.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../utils/DropdownModal.ts" />
/// <reference path="../util/ExplainingDropdown.ts" />
/// <reference path="../help/help.ts" />
/// <reference path="../topbar/topbar.ts" />
/// <reference path="../page-methods.ts" />
/// <reference path="../help/help.ts" />
/// <reference path="../rules.ts" />
/// <reference path="../links.ts" />
/// <reference path="../Server.ts" />
/// <reference path="../login/login-if-needed.ts" />
/// <reference path="chat.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var page;
    (function (page_4) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        var DropdownModal = debiki2.utils.DropdownModal;
        var ExplainingListItem = debiki2.util.ExplainingListItem;
        var moreVotesDropdownModal;
        var moreDialog;
        function openMoreVotesDropdown(post, votesButton) {
            if (!moreVotesDropdownModal) {
                moreVotesDropdownModal = ReactDOM.render(MoreVotesDropdownModal(), debiki2.utils.makeMountNode());
            }
            moreVotesDropdownModal.openForAt(post, votesButton);
        }
        page_4.openMoreVotesDropdown = openMoreVotesDropdown;
        function openMoreDropdown(store, post, moreButton) {
            if (!moreDialog) {
                moreDialog = ReactDOM.render(MoreDropdownModal(), debiki2.utils.makeMountNode());
            }
            moreDialog.openForAt(store, post, moreButton);
        }
        page_4.openMoreDropdown = openMoreDropdown;
        page_4.NoCommentsPageActions = debiki2.createComponent({
            displayName: 'NoCommentsPageActions',
            onEditClick: function (event) {
                debiki2.ReactActions.editPostWithNr(this.props.post.nr);
            },
            render: function () {
                var store = this.props.store;
                var me = store.me;
                var page = store.currentPage;
                var post = this.props.post;
                if (!post.isApproved && !post.sanitizedHtml)
                    return null;
                // Staff may edit Info Pages — other not-a-discussion pages are only
                // editable by admins.  This will be configurable, later. [infopage_perms]
                var isInfoPageMayEdit = page.pageRole === 2 /* PageRole.WebPage */ && debiki2.isStaff(me);
                if (!isInfoPageMayEdit && !me.isAdmin)
                    return null;
                // Dupl code [305RKTDJ2]
                var myPageData = me.myCurrentPageData;
                var anyEditsDraft = _.find(myPageData.myDrafts, function (d) {
                    return d.forWhat.postId === post.uniqueId &&
                        d.forWhat.draftType === 4 /* DraftType.Edit */;
                });
                var unfinEditsClass = anyEditsDraft ? ' s_UnfinEd' : '';
                var spaceWiki = debiki2.post_isWiki(post) ? " Wiki" : ''; // I18N
                var editBtn = store.isEditorOpen ? null :
                    r.a({ className: 'dw-a dw-a-edit icon-edit' + unfinEditsClass, onClick: this.onEditClick }, t.EditV + spaceWiki + (anyEditsDraft ? " — " + t.d.UnfinEdits : '')); // [UFINEDT]
                var actions = editBtn;
                return (r.div({ className: 'dw-p-as dw-as' }, actions));
            }
        });
        function makeReplyBtnIcon(store) {
            var page = store.currentPage;
            return page.pageRole === 11 /* PageRole.MindMap */ ? 'icon-plus' : 'icon-reply';
            // icon-comment if blog post?
        }
        function makeReplyBtnTitle(store, post) {
            var page = store.currentPage;
            if (post.nr !== BodyNr) {
                if (page.pageRole === 11 /* PageRole.MindMap */)
                    return "Add node";
                else
                    return t.ReplyV;
            }
            if (page.origPostReplyBtnTitle)
                return page.origPostReplyBtnTitle;
            switch (page.pageRole) {
                case 16 /* PageRole.Critique */: return "Give Critique"; // [plugin]
                case 21 /* PageRole.UsabilityTesting */: return "Give Feedback"; // [plugin]
                case 11 /* PageRole.MindMap */: return "Add Mind Map node";
                case 5 /* PageRole.EmbeddedComments */: return t.AddComment || t.ReplyV; // I18N t.AddComment missing
                default:
                    return rFragment({}, r.b({}, t.ReplyV), page.pageLayout !== 1003 /* TopicLayout.SplitDiscussionProgress */ ? null : r.span({}, 
                    // This page has both a discussion and a progress section, so clarify
                    // in which section the reply gets addded.  [SPLDSCPRG]
                    ' (' + (page.doingStatus >= 3 /* PageDoingStatus.Started */ ?
                        t.progressN : t.discussion) + ')'));
            }
        }
        page_4.PostActions = debiki2.createComponent({
            displayName: 'PostActions',
            onAcceptAnswerClick: function () {
                debiki2.ReactActions.acceptAnswer(this.props.post.uniqueId);
            },
            onUnacceptAnswerClick: function () {
                debiki2.ReactActions.unacceptAnswer();
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            onReplyClick: function (event) {
                // Some dupl code below. [69KFUW20]
                var _this = this;
                event.preventDefault();
                var eventTarget = event.target; // React.js will clear the field
                var store = this.props.store;
                var page = store.currentPage;
                var post = this.props.post;
                var newPostType;
                if (debiki2.page_isAlwaysFlatDiscourse(page)) {
                    newPostType = 4 /* PostType.BottomComment */;
                }
                else if (post.nr === BodyNr) {
                    // This orig post reply button does different things (inserts the reply, or appends
                    // the reply), depending on if the page layout is threaded or flat.
                    if (debiki2.page_isThreadedDiscussion(page)) {
                        newPostType = 1 /* PostType.Normal */;
                    }
                    else if (debiki2.page_isFlatProgress(page)) {
                        newPostType = 4 /* PostType.BottomComment */;
                    }
                    else {
                        // If the page has both a discussion and a progress section, and
                        // the page (idea/problem) has been started, then, append replies to
                        // the flat progress section. Otherwise, insert into the discussion section.
                        newPostType = page.pageLayout === 1003 /* TopicLayout.SplitDiscussionProgress */ &&
                            page.doingStatus >= 3 /* PageDoingStatus.Started */ // [SPLDSCPRG]
                            ? 4 /* PostType.BottomComment */
                            : 1 /* PostType.Normal */; // discussion reply
                    }
                }
                else {
                    // Use the same type as the post we're replying to. [REPLTYPE]
                    newPostType = (post.postType === 2 /* PostType.Flat */ || post.postType === 4 /* PostType.BottomComment */)
                        ? post.postType
                        : 1 /* PostType.Normal */;
                }
                var loginToWhat = page.pageRole === 5 /* PageRole.EmbeddedComments */ ?
                    16 /* LoginReason.PostEmbeddedComment */ : 18 /* LoginReason.PostReply */;
                debiki2.login.loginIfNeededReturnToPost(loginToWhat, post.nr, function () {
                    if (_this.isGone)
                        return;
                    debiki2.ReactActions.composeReplyTo(post.nr, newPostType);
                }, true);
            },
            onEditClick: function (event) {
                debiki2.ReactActions.editPostWithNr(this.props.post.nr);
            },
            onLinkClick: function (event) {
                debiki2.morebundle.openShareDialog(this.props.post, event.target);
            },
            onLikeClick: function (event) {
                var _this = this;
                var store = this.props.store;
                var post = this.props.post;
                loginIfNeededThen(11 /* LoginReason.LoginToLike */, post.nr, function () {
                    if (_this.isGone)
                        return;
                    var toggleOn = !debiki2.me_hasVoted(store.me, post.nr, 'VoteLike');
                    toggleVote(_this.props.store, post, 'VoteLike', toggleOn);
                });
            },
            openMoreVotesDropdown: function (event) {
                openMoreVotesDropdown(this.props.post, event.target);
            },
            openMoreDropdown: function (event) {
                openMoreDropdown(this.props.store, this.props.post, event.target);
            },
            render: function () {
                var store = this.props.store;
                var post = this.props.post;
                var page = store.currentPage;
                var isThisPageDeleted = !!page.pageDeletedAtMs; // ignore deleted categories
                var canBeSolved = debiki2.page_canBeSolved(page);
                var isEmbeddedComments = page.pageRole === 5 /* PageRole.EmbeddedComments */;
                var me = store.me;
                var myPageData = me.myCurrentPageData;
                var isOwnPost = debiki2.pat_isAuthorOf(me, post, store.usersByIdBrief);
                var isOwnPage = debiki2.store_thisIsMyPage(store);
                var isPageBody = post.nr === BodyNr;
                var votes = myPageData.votes[post.nr] || [];
                var isStaffOrOwnPage = debiki2.isStaff(me) || isOwnPage;
                // Later, will use the upcoming [alterPage] permission instead.
                var isCoreOrOwnPage = isStaffOrOwnPage ||
                    debiki2.user_isTrustMinNotThreat(me, 6 /* TrustLevel.CoreMember */);
                var isEmbeddedOrigPost = isPageBody && store.isEmbedded;
                var isDeleted = debiki2.post_isDeleted(post);
                var isCollapsed = debiki2.post_isCollapsed(post);
                var deletedOrCollapsed = isDeleted || isCollapsed;
                if (post.nr < MinRealPostNr) {
                    // This is a preview of a new reply; it doesn't yet exist for real, there's nothing
                    // we can do with it.  (Later: What if one wants to e.g. schedule the post to get
                    // posted a bit later, then maybe there could be a button for that, here?
                    // Or change background color, or whatever — maybe some action buttons can
                    // make sense, also for a preview post?)
                    // @ifdef DEBUG
                    debiki2.dieIf(!post.isPreview, 'TyE603WKGU42R');
                    // @endif
                    return null;
                }
                var isEditingThisPost = post.isEditing;
                var isEditorOpenAlready = store.isEditorOpen;
                // (Do return a <div> so there'll be some whitespace below for arrows to any replies.)
                if (debiki2.post_shallRenderAsDeleted(post) || isCollapsed)
                    return r.div({ className: 'dw-p-as dw-as' });
                var acceptAnswerButton;
                if (deletedOrCollapsed) {
                    // Show no accept-as-answer button.
                    // (But if is edits preview? Then it's ok click Accept, whilst editing.)
                }
                else if (isCoreOrOwnPage && canBeSolved && !page.pageAnsweredAtMs &&
                    !page.pageClosedAtMs && !isPageBody && post.isApproved) {
                    var icon = debiki2.page_getUnsolvedIcon(page);
                    acceptAnswerButton = r.a({ className: "dw-a dw-a-solve ".concat(icon),
                        onClick: this.onAcceptAnswerClick, title: t.pa.AcceptBtnExpl }, t.pa.SolutionQ);
                }
                else if (canBeSolved && post.uniqueId === page.pageAnswerPostUniqueId) {
                    // (Do this even if !post.isApproved.)
                    var solutionTooltip = isCoreOrOwnPage
                        ? t.pa.ClickUnaccept
                        : t.pa.PostAccepted;
                    var elemType = isCoreOrOwnPage ? 'a' : 'span';
                    var unsolveClass = isCoreOrOwnPage ? ' dw-a-unsolve' : '';
                    var solvedIcon = debiki2.page_getSolvedIcon(page);
                    var className = "dw-a dw-a-solved ".concat(solvedIcon, " ").concat(unsolveClass);
                    acceptAnswerButton = r[elemType]({ className: className, onClick: isCoreOrOwnPage ? this.onUnacceptAnswerClick : null, title: solutionTooltip }, t.Solution);
                }
                var replyingToClass = debiki2.store_isReplyingTo(store, post) ? ' s_PA_B-Active' : '';
                var disabledClass = isEditorOpenAlready ? ' s_PA_B-Disabled' : '';
                var replyButton = !debiki2.store_mayIReply(store, post) ? null : // or  <span .e_MayNotRe> ?
                    r.a({ className: 'dw-a dw-a-reply ' + makeReplyBtnIcon(store)
                            + disabledClass + replyingToClass,
                        // Highlight the post this Reply button replies to.
                        onMouseEnter: isEditorOpenAlready ? undefined :
                            function () { return debiki2.ReactActions.highlightPost(post.nr, true); },
                        // Remove any highlight also if editor open, so disappears after
                        // click —> eitor-opens —> mouseleave.
                        onMouseLeave: function () { return debiki2.ReactActions.highlightPost(post.nr, false); },
                        onClick: isEditorOpenAlready ? undefined : this.onReplyClick }, makeReplyBtnTitle(store, post));
                var changeButton = !isCoreOrOwnPage || !isPageBody || isEditingThisPost ? null :
                    r.a({ className: 'dw-a dw-a-change',
                        onClick: function (event) {
                            var rect = debiki2.cloneEventTargetRect(event);
                            debiki2.morebundle.openChangePageDialog(rect, { page: page });
                        } }, t.ChangeV + ' ...');
                // Votes can be disabled for blog posts only, right now, [POSTSORDR]
                // except for the Disagree vote which can be disabled everywhere.
                var isEmbOrigPost = isEmbeddedComments && isPageBody;
                var useDownvotes = !isEmbOrigPost || page.origPostVotes === 3 /* OrigPostVotes.AllVotes */;
                var useLikeVote = !isEmbOrigPost || page.origPostVotes !== 1 /* OrigPostVotes.NoVotes */;
                var isDisagreeEnabled = debiki2.page_voteTypeEnabled(page, post, 42 /* PostVoteType.Disagree */);
                // If isn't staff, then the only "downvote" is the Disagree vote.
                var canDownvote = useDownvotes && (isDisagreeEnabled || debiki2.isStaff(me));
                var numLikesText;
                if (post.numLikeVotes && useLikeVote) {
                    numLikesText = r.a({ className: 'dw-a dw-vote-count',
                        onClick: function (event) { return debiki2.morebundle.openLikesDialog(post, 41 /* PostVoteType.Like */, event.target); } }, t.pa.NumLikes(post.numLikeVotes));
                }
                var numWrongsText;
                if (post.numWrongVotes && useDownvotes && isDisagreeEnabled) {
                    numWrongsText = r.a({ className: 'dw-a dw-vote-count e_WroVo',
                        onClick: function (event) { return debiki2.morebundle.openLikesDialog(post, 42 /* PostVoteType.Disagree */, event.target); } }, t.pa.NumDisagree(post.numWrongVotes));
                }
                // Bury votes aren't downvotes or bad in any way, so don't show them, except for
                // staff, so they can detect misuse.
                // UX: one won't see one's own Bury vote (unless one is staff). That's confusing. What do about that?
                var numBurysText;
                if (debiki2.isStaff(me) && post.numBuryVotes && useDownvotes) {
                    numBurysText = r.a({ className: 'dw-a dw-vote-count',
                        onClick: function (event) { return debiki2.morebundle.openLikesDialog(post, 43 /* PostVoteType.Bury */, event.target); } }, t.pa.NumBury(post.numBuryVotes));
                }
                var numUnwantedsText;
                if (post.numUnwantedVotes && useDownvotes) {
                    numUnwantedsText = r.a({ className: 'dw-a dw-vote-count',
                        onClick: function (event) { return debiki2.morebundle.openLikesDialog(post, 44 /* PostVoteType.Unwanted */, event.target); } }, t.pa.NumUnwanted(post.numUnwantedVotes));
                }
                var downvotesDropdown;
                var likeVoteButton;
                if (!deletedOrCollapsed && post.isApproved && !isOwnPost &&
                    // Don't allow voting whilst editing — that currently would replace the
                    // edit preview post [EDPVWPST] with the real post.
                    !isEditingThisPost) {
                    var myLikeVote = votes.indexOf('VoteLike') !== -1 ? ' dw-my-vote' : '';
                    var myWrongVote = isDisagreeEnabled && votes.indexOf('VoteWrong') !== -1 ?
                        ' dw-my-vote' : '';
                    var myBuryVote = votes.indexOf('VoteBury') !== -1 ? ' dw-my-vote' : '';
                    var myUnwantedVote = votes.indexOf('VoteUnwanted') !== -1 ? ' dw-my-vote' : '';
                    var myOtherVotes = myWrongVote || myBuryVote || myUnwantedVote ? ' dw-my-vote' : '';
                    // Always hide the downvotes inside this dropdown, so one has to click one
                    // extra time (to open the dropdown), before one can downvote.
                    // For now, skip downvotes for the Orig Post. Don't remember why I
                    // disabled that originally — doesn't look so aesthetically nice at least,
                    // without some CSS tweaks.
                    // Enable when fixing [DBLINHERIT]?  [OPDOWNV]
                    downvotesDropdown = isPageBody || !canDownvote ? null :
                        r.span({ className: 'dropdown navbar-right', title: t.pa.MoreVotes,
                            onClick: this.openMoreVotesDropdown }, r.a({ className: 'dw-a dw-a-votes' + myOtherVotes }, ''));
                    likeVoteButton = !useLikeVote ? null :
                        r.a({ className: 'dw-a dw-a-like icon-heart' + myLikeVote,
                            title: t.pa.LikeThis, onClick: this.onLikeClick });
                }
                // Dupl code [305RKTDJ2]
                var anyEditsDraft = _.find(myPageData.myDrafts, function (d) {
                    return d.forWhat.postId === post.uniqueId &&
                        d.forWhat.draftType === 4 /* DraftType.Edit */;
                });
                var unfinEditsClass = anyEditsDraft ? ' s_UnfinEd' : '';
                var wikiSpace = debiki2.post_isWiki(post) ? "Wiki " : ''; // I18N
                var wikiClass = debiki2.post_isWiki(post) ? ' s_PA-EdWik' : ''; // [hydrate_probl]
                var mayEdit = debiki2.store_mayIEditPost(store, post);
                var editButton = !mayEdit || isEditorOpenAlready ? null :
                    r.a({ className: 'dw-a dw-a-edit icon-edit' + unfinEditsClass + wikiClass,
                        title: t.EditV, onClick: this.onEditClick }, wikiSpace + (anyEditsDraft ? t.d.UnfinEdits : '')); // [UFINEDT]
                var link = r.a({ className: 'dw-a dw-a-link icon-link', title: t.pa.LinkToPost,
                    onClick: this.onLinkClick });
                // Build a More... dropdown, but if it would have only one single menu item, inline
                // that menu item instead. — This stuff makes no sense for an embedded discussion orig-post
                // and gets hidden by CSS [5UKWBP2] (but not here because then React messes up the markup
                // when merging server and client side markup).
                var flagBtn;
                var moreDropdown;
                if (isEditingThisPost) {
                    // Skip the Flag and More buttons — doing such things when the post is being
                    // edited, could have weird effects?  E.g. More + Delete, or + Move-to-other-page,
                    // whilst editing.
                    // But what if one clicks Delete on the parent post, and deletes the whole tree?
                    // Maybe hide the More buttons for *all* posts?
                }
                else if (me.isLoggedIn) {
                    moreDropdown =
                        r.span({ className: 'dropdown navbar-right', onClick: this.openMoreDropdown }, r.a({ className: 'dw-a dw-a-more icon-menu', title: t.MoreDots }));
                }
                else if (!isOwnPost && !deletedOrCollapsed) {
                    flagBtn =
                        r.a({ className: 'dw-a dw-a-flag icon-flag',
                            onClick: function (event) { return flagPost(post, debiki2.cloneEventTargetRect(event)); },
                            title: t.pa.ReportThisPost });
                }
                var adminLink = !me.isAdmin || !isEmbeddedOrigPost ? null : rFragment({}, r.a({ className: 'dw-a dw-a-other-topics icon-link-ext', href: debiki2.linkToEmbeddedDiscussions(),
                    target: '_blank' }, t.pa.DiscIx), r.a({ className: 'dw-a dw-a-admin icon-link-ext', href: debiki2.linkToReviewPage(),
                    target: '_blank' }, t.pa.Admin));
                // BUG? approveOrDeleteBtns won't appear for embedded comments?
                // Instead of this test, should be a post.approvedStatus field. [ApprovedStatus]
                // And `post.isApproved` below will then be: `post.approvedStatus === PendingApproval`.
                var isOrigPostAndPageDeleted = post.nr === BodyNr && isThisPageDeleted;
                // BUG  if deleting page —> mod task completed, then undeleting —>   [undel_posts]
                //   now  post.isApproved is false (was rejected),  mod task done,
                //   but mod buttons still visible :-(
                var approveOrDeleteBtns; // [in_pg_apr]
                if (!deletedOrCollapsed && !post.isApproved && debiki2.isStaff(me)
                    && !isOrigPostAndPageDeleted) {
                    var ModBtn = function (decision, title, clazz) {
                        return debiki2.Button({ className: 's_PA_ModB ' + clazz, onClick: function () {
                                debiki2.morebundle.openDefaultStupidDialog({
                                    body: title + '?',
                                    primaryButtonTitle: t.YesDoThat,
                                    secondaryButonTitle: t.Cancel,
                                    small: true,
                                    onPrimaryClick: function () {
                                        // COULD create a ReactActions fn instead that does this:
                                        debiki2.Server.moderatePostOnPage(post, decision, function (storePatch) {
                                            debiki2.ReactActions.patchTheStore(storePatch, function () {
                                                debiki2.scrollAndFlashPostNr(post.nr);
                                            });
                                        });
                                    },
                                });
                            } }, title);
                    };
                    var spacePage = post.nr === BodyNr ? " page" : '';
                    approveOrDeleteBtns =
                        rFragment({}, 
                        // English is fine — this is for staff. 0I18N.
                        ModBtn(1001 /* ReviewDecision.Accept */, "Approve" + spacePage, 's_PA_ModB-Apr'), ModBtn(5001 /* ReviewDecision.DeletePostOrPage */, 
                        // (Need not repeate the word "page" here.)
                        "Reject and delete", 's_PA_ModB-Rej'));
                }
                return (r.div({ className: 'dw-p-as dw-as esPA', onClick: this.props.onClick }, replyButton, changeButton, adminLink, flagBtn, moreDropdown, link, editButton, downvotesDropdown, likeVoteButton, numBurysText, numWrongsText, numLikesText, numUnwantedsText, acceptAnswerButton, approveOrDeleteBtns));
            }
        });
        // some dupl code [6KUW24]
        var MoreVotesDropdownModal = debiki2.createComponent({
            displayName: 'MoreVotesDropdownModal',
            mixins: [debiki2.StoreListenerMixin],
            getInitialState: function () {
                return {
                    isOpen: false,
                    store: debiki2.ReactStore.allData(),
                };
            },
            onChange: function () {
                this.setState({ store: debiki2.ReactStore.allData() });
            },
            openForAt: function (post, at) {
                var rect = debiki2.cloneRect(at.getBoundingClientRect());
                rect.left -= 140; // then modal position looks better
                rect.right += 100;
                this.setState({
                    isOpen: true,
                    post: post,
                    windowWidth: window.innerWidth,
                    buttonRect: rect,
                });
            },
            closeSoon: function () {
                setTimeout(this.close, 330);
            },
            close: function () {
                this.setState({ isOpen: false });
            },
            hasVoted: function (what) {
                var store = this.state.store;
                return debiki2.me_hasVoted(store.me, this.state.post.nr, what);
            },
            onWrongClick: function (event) {
                var _this = this;
                var post = this.state.post;
                loginIfNeededThen(25 /* LoginReason.LoginToDisagree */, post.nr, function () {
                    toggleVote(_this.state.store, post, 'VoteWrong', !_this.hasVoted('VoteWrong'));
                    _this.closeSoon();
                });
            },
            onBuryClick: function (event) {
                var post = this.state.post;
                // Not visible unless logged in.
                toggleVote(this.state.store, post, 'VoteBury', !this.hasVoted('VoteBury'));
                this.closeSoon();
            },
            onUnwantedClick: function (event) {
                var post = this.state.post;
                // Not visible unless logged in.
                toggleVote(this.state.store, post, 'VoteUnwanted', !this.hasVoted('VoteUnwanted'));
                this.closeSoon();
            },
            makeVoteButtons: function () {
                var store = this.state.store;
                var isFlat = store.isFlat; // hmm shouldn't place in the store object, oh well
                var me = store.me;
                var myPageData = me.myCurrentPageData;
                var post = this.state.post;
                var votes = myPageData.votes[post.nr] || [];
                var isOwnPage = debiki2.store_thisIsMyPage(store);
                var isStaffFullMemberOrOwnPage = debiki2.isStaff(me) || me.trustLevel >= 3 /* TrustLevel.FullMember */ || isOwnPage;
                var isStaffOrCoreMember = debiki2.isStaff(me) || me.trustLevel >= 6 /* TrustLevel.CoreMember */;
                var isDisagreeEnabled = debiki2.page_voteTypeEnabled(store.currentPage, post, 42 /* PostVoteType.Disagree */);
                var myWrongVote = votes.indexOf('VoteWrong') !== -1 ? ' dw-my-vote' : '';
                var myBuryVote = votes.indexOf('VoteBury') !== -1 ? ' dw-my-vote' : '';
                var myUnwantedVote = votes.indexOf('VoteUnwanted') !== -1 ? ' dw-my-vote' : '';
                var wrongVoteButton = !isDisagreeEnabled ? null :
                    ExplainingListItem({
                        title: r.span({ className: 'dw-a-wrong icon-warning' + myWrongVote }, t.pa.Disagree),
                        text: r.span({}, t.pa.DisagreeExpl),
                        onClick: this.onWrongClick, key: 'w'
                    });
                // Skip if flat, because then cannot change sort order or collapse, so Bury would be pointless.
                // Also, should be full member, otherwise probably doesn't know what Bury is?
                var buryVoteButton = isFlat || !isStaffFullMemberOrOwnPage ? null : // [7UKDR10]
                    ExplainingListItem({
                        title: r.span({ className: 'dw-a-bury icon-bury' + myBuryVote }, t.pa.Bury),
                        text: r.span({}, t.pa.BuryExpl),
                        // "If the post is correct, but not interesting to read."
                        onClick: this.onBuryClick, key: 'b'
                    });
                var unwantedVoteButton = !isStaffOrCoreMember ? null : // [4DKWV9J2]
                    ExplainingListItem({
                        title: r.span({ className: 'dw-a-unwanted icon-cancel' + myUnwantedVote }, t.pa.Unwanted),
                        text: t.pa.UnwantedExpl,
                        onClick: this.onUnwantedClick, key: 'u'
                    });
                return [wrongVoteButton, buryVoteButton, unwantedVoteButton];
            },
            render: function () {
                var state = this.state;
                var content = state.isOpen ? this.makeVoteButtons() : null;
                return (DropdownModal({ show: state.isOpen, onHide: this.close,
                    atRect: state.buttonRect, windowWidth: state.windowWidth,
                    className: 'esDwnvts', showCloseButton: true }, content));
            }
        });
        // CLEAN_UP use enum PostVoteType for voteType, instead of string.
        function toggleVote(store, post, voteType, toggleOn) {
            var page = store.currentPage;
            var action;
            var postNrsRead;
            if (!toggleOn) {
                action = 'DeleteVote';
            }
            else {
                action = 'CreateVote';
                postNrsRead = findPostNrsRead(page.postsByNr, post);
            }
            var data = {
                pageId: store.currentPageId,
                postNr: post.nr,
                vote: voteType,
                action: action,
                postNrsRead: postNrsRead
            };
            debiki2.Server.saveVote(data, function (storePatch) {
                debiki2.ReactActions.vote(storePatch, action, voteType, post.nr);
            });
        }
        function findPostNrsRead(postsByNr, post) {
            var postsReadNrs = {};
            postsReadNrs[post.nr] = post.nr;
            var curPostNr = post.nr;
            var nextParentNr = post.parentNr;
            while (!postsReadNrs[nextParentNr]) {
                var parent_1 = postsByNr[nextParentNr];
                if (!parent_1) {
                    // No more parents. Done.
                    break;
                }
                if (parent_1.nr < MinRealPostNr) {
                    // The parent isn't a real post — it's a new post draft or preview. But
                    // that's impossible? Because its descendant, `post`, is real.
                    // @ifdef DEBUG
                    debiki2.die('TyE4064QKTSUTD2');
                    // @endif
                    break;
                }
                var parentShown = debiki2.$byId('post-' + parent_1.nr);
                if (parentShown) {
                    postsReadNrs[parent_1.nr] = parent_1.nr;
                }
                // Also add all previous siblings visible above curPostNr — because to find and read
                // curPostNr, one needs to scroll past, and probably read, those too.
                for (var i = 0; i < parent_1.childNrsSorted.length; ++i) {
                    var siblingNr = parent_1.childNrsSorted[i];
                    if (siblingNr === curPostNr) {
                        // Likely, any siblings sorted *after* curPostNr haven't yet been read,
                        // so don't include those.
                        // @ifdef DEBUG
                        debiki2.dieIf(!postsReadNrs[siblingNr], 'EdE4GUWKR0');
                        // @endif
                        break;
                    }
                    if (siblingNr < MinRealPostNr) {
                        // It's a draft or preview — doesn't yet exist for real.
                        continue;
                    }
                    var sibling = postsByNr[siblingNr];
                    if (!sibling) {
                        // Maybe it and some other siblings got squashed [SQUASHSIBL] and weren't
                        // loaded from the server.
                        continue;
                    }
                    var siblingShown = debiki2.$byId('post-' + siblingNr);
                    if (siblingShown) {
                        postsReadNrs[siblingNr] = siblingNr;
                    }
                }
                curPostNr = parent_1.nr;
                nextParentNr = parent_1.parentNr;
            }
            return _.values(postsReadNrs);
        }
        // some dupl code [6KUW24]
        var MoreDropdownModal = debiki2.createComponent({
            displayName: 'MoreDropdownModal',
            getInitialState: function () {
                return {
                    isOpen: false,
                };
            },
            // dupl code [6KUW24]
            openForAt: function (store, post, at) {
                this.setState({
                    isOpen: true,
                    store: store,
                    post: post,
                    windowWidth: window.innerWidth,
                    buttonRect: debiki2.cloneRect(at.getBoundingClientRect()),
                });
            },
            close: function () {
                this.setState({ isOpen: false });
            },
            onFlagClick: function (event) {
                flagPost(this.state.post, this.state.buttonRect);
                this.close();
            },
            openTagsDialog: function () {
                var state = this.state;
                debiki2.morebundle.openTagsDialog({ forPost: state.post, store: state.store });
                this.close();
            },
            onDeleteClick: function (event) {
                debiki2.morebundle.openDeletePostDialog(this.state.post, this.state.buttonRect);
                this.close();
            },
            onWikifyClick: function (event) {
                debiki2.morebundle.openWikifyDialog(this.state.post);
                this.close();
            },
            /*
            onCollapsePostClick: function(event) {
              debiki.internal.$showActionDialog('CollapsePost').call(event.target, event);
              this.close();
            },
            onCollapseTreeClick: function(event) {
              debiki.internal.$showActionDialog('CollapseTree').call(event.target, event);
              this.close();
            },
            onCloseTreeClick: function(event) {
              debiki.internal.$showActionDialog('CloseTree').call(event.target, event);
              this.close();
            },
            onPinClick: function(event) {
              debiki.internal.$showActionDialog('PinTree').call(event.target, event);
              this.close();
            }, */
            onMoveClick: function (event) {
                debiki2.morebundle.openMovePostsDialog(this.state.store, this.state.post, this.close, this.state.buttonRect);
                this.close();
            },
            onSeeWrenchClick: function (event) {
                debiki2.pagedialogs.openSeeWrenchDialog();
                this.close();
            },
            toggleBranchSideways: function (event) {
                var post = this.state.post;
                debiki2.Server.editPostSettings(post.uniqueId, {
                    branchSideways: post.branchSideways ? 0 : 100,
                });
                this.close();
            },
            makeButtons: function () {
                var store = this.state.store;
                var settings = store.settings;
                var page = store.currentPage;
                var isFlat = store['isFlat']; // hmm shouldn't place in the store object, oh well
                var me = store.me;
                var post = this.state.post;
                var isForumSite = settings.enableForum !== false;
                var isPageBody = post.nr === BodyNr;
                var isPostDeleted = debiki2.post_isDeleted(post);
                var isPageDeleted = page.pageDeletedAtMs;
                var moreLinks = [];
                var isOwnPost = debiki2.pat_isAuthorOf(me, post, store.usersByIdBrief);
                var isMindMap = page.pageRole === 11 /* PageRole.MindMap */;
                // ----- Report
                if (!isPostDeleted)
                    moreLinks.push(r.a({ className: 'dw-a dw-a-flag icon-flag', onClick: this.onFlagClick, key: 'rp' }, t.pa.Report));
                // ----- Pin post
                /* Doesn't work right now, after Post2 rewrite
                 if (user.isAdmin && !isPageBody)
                 moreLinks.push(
                 r.a({ className: 'dw-a dw-a-pin icon-pin', onClick: this.onPinClick, key: 'pn' }, 'Pin'));
                 */
                /*  Find some better way to do this. And also, don't show so many buttons below More.
                 if (!post.isTreeCollapsed && !isPageBody && user.isAdmin && isKajMagnusSite)
                 moreLinks.push(
                 r.a({ className: 'dw-a dw-a-collapse-tree icon-collapse',
                 onClick: this.onCollapseTreeClick, key: 'ct' }, 'Collapse tree'));
            
                 if (!post.isPostCollapsed && !isPageBody && user.isAdmin && isKajMagnusSite)
                 moreLinks.push(
                 r.a({ className: 'dw-a dw-a-collapse-post icon-collapse',
                 onClick: this.onCollapsePostClick, key: 'cp' }, 'Collapse post'));
            
                 if (post.isTreeCollapsed && user.isAdmin)
                 moreLinks.push(
                 r.a({ className: 'dw-a dw-a-uncollapse-tree', key: 'ut' }, 'Uncollapse tree'));
            
                 if (post.isPostCollapsed && user.isAdmin)
                 moreLinks.push(
                 r.a({ className: 'dw-a dw-a-uncollapse-post', key: 'up' }, 'Uncollapse post'));
                 */
                // ----- Close links
                /* Doesn't work any longer, not after Post2 rewrite.
                 if (post.isTreeClosed && user.isAdmin) {
                 moreLinks.push(
                 r.a({ className: 'dw-a dw-a-reopen-tree', key: 'ro' }, 'Reopen'));
                 }
                 else if (!isPageBody && user.isAdmin) {
                 moreLinks.push(
                 r.a({ className: 'dw-a dw-a-close-tree icon-archive',
                 onClick: this.onCloseTreeClick, key: 'cl' }, 'Close'));
                 }
                 */
                // ----- Tags
                if (debiki2.pat_mayEditTags(me, { forPost: post, store: store })) {
                    moreLinks.push(r.a({ className: 'dw-a icon-plus', onClick: this.openTagsDialog, key: 'ts' }, t.pa.AddTags));
                }
                // ----- Delete
                if (!isPageBody && (debiki2.isStaff(me) || isOwnPost) && !isPostDeleted) {
                    moreLinks.push(r.a({ className: 'dw-a dw-a-delete icon-trash', onClick: this.onDeleteClick, key: 'dl' }, t.Delete));
                }
                // ----- Unelete
                // Later, [UNDELPOST]
                // ----- Post settings
                // UX BUG: Wikified posts no longer looks good, because of the avatar icon to the left.
                // Only the orig post looks ok.
                if ((debiki2.isStaff(me) || isOwnPost) && !isFlat && isForumSite && !isPostDeleted) {
                    moreLinks.push(r.a({ className: 'dw-a icon-users s_PA_WkB', onClick: this.onWikifyClick, key: 'wf' }, debiki2.isWikiPost(post) ? t.pa.UnWikify : t.pa.Wikify));
                }
                // ----- Move post
                // UX BUG Currently doesn't work in iframes — because the copy-link dialog copies addresses  [6JKD2A]
                // with the embedding site's origin, and when pasting the link, that'll be the wrong origin.
                if (!isPageBody && debiki2.isStaff(me) && !store.isEmbedded && !isPostDeleted) {
                    moreLinks.push(r.a({ className: 'dw-a s_PA_MvB icon-paper-plane-empty', onClick: this.onMoveClick, key: 'mp' }, t.Move));
                }
                // ----- Look elsewhere button
                // Pin/delete/etc is placed in the topbar, not here, so that it'll be available also
                // once one has scrolled down past the orig post.
                if (isPageBody && debiki2.isStaff(me)) {
                    moreLinks.push(r.a({ className: 'dw-a icon-help-circled', onClick: this.onSeeWrenchClick, key: 'sw' }, t.pa.PinDeleteEtc));
                }
                // ----- Mind map branch sideways
                /* Mind mapst disabled [2D_LAYOUT]
                if (!isPageBody && isMindMap && (isStaff(me) || isOwnPost)) {   && !isPostDeleted
                  let sidewaysTitle = post.branchSideways ? "Don't branch sideways" : "→ Branch sideways";
                  moreLinks.push(
                    r.a({ className: 'dw-a', onClick: this.toggleBranchSideways, key: 'bs' },
                      sidewaysTitle));
                } */
                return moreLinks;
            },
            render: function () {
                var state = this.state;
                var content = state.isOpen ? this.makeButtons() : null;
                return (DropdownModal({ show: state.isOpen, onHide: this.close, showCloseButton: true,
                    className: 'e_PAMoreD', atRect: state.buttonRect, windowWidth: state.windowWidth }, content));
            }
        });
        function flagPost(post, at) {
            loginIfNeededThen(26 /* LoginReason.LoginToFlag */, post.nr, function () {
                debiki2.morebundle.openFlagDialog(post.nr, at);
            });
        }
        function loginIfNeededThen(loginToWhat, postNr, success) {
            debiki2.login.loginIfNeededReturnToPost(loginToWhat, postNr, success);
        }
        //------------------------------------------------------------------------------
    })(page = debiki2.page || (debiki2.page = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/social-buttons.ts  */ /*
 * Copyright (c) 2017 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="../Server.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var page;
    (function (page) {
        //------------------------------------------------------------------------------
        // REMOVE all this?  QUICK  SMALLER_BUNDLE
        function SocialButtons(props) {
            var aAnyAttrs = r.a;
            var divAnyAttrs = r.div;
            return (r.div({ className: 's_LikeBs' }, aAnyAttrs({ href: 'https://twitter.com/share', className: 'twitter-share-button',
                'data-show-count': false }, "Tweet"), r.div({ className: 'google-plus' }, divAnyAttrs({ className: 'g-plusone', 'data-size': 'medium' })), divAnyAttrs({ className: 'fb-like', 'data-layout': 'standard', 'data-action': 'like',
                'data-size': 'small', 'data-show-faces': 'true', 'data-share': 'true',
                'data-width': 300 }))); // otherwise too wide, causes the PostAction buttons to float drop
        }
        page.SocialButtons = SocialButtons;
        /* You can copy-paste this and insert in custom html pages: (update the Facebook
           data-href to point to your Facebook organization page, or delete that data-href)
        
          <a href="https://twitter.com/share" class="twitter-share-button" data-show-count="true">Tweet</a>
          <div class="google-plus"><div class="g-plusone" data-size="medium"></div></div>
          <div class="fb-like" data-href=... data-layout="standard" data-action="like"
              data-size="small" data-show-faces="true" data-share="true"></div>
        
        Or, large buttons, against a dark background:
        
          <a href="https://twitter.com/share" class="twitter-share-button" data-show-count="true" data-size="large">Tweet</a>
          <div class="google-plus"><div class="g-plusone" data-size="standard"></div></div>
          <div class="fb-like" data-href=... data-layout="standard" data-action="like"
              data-size="large" data-show-faces="true" data-share="true" data-colorscheme="dark"></div>
        
         */
        function activateLikeButtons(settings) {
            if (debiki2.$first('.fb-like')) {
                runFacebookJs(settings.facebookAppId);
            }
            if (debiki2.$first('.twitter-share-button')) {
                runTwitterJs();
            }
            // Google:
            if (debiki2.$first('.g-plusone')) {
                debiki2.Server.loadJs('https://apis.google.com/js/platform.js');
            }
        }
        page.activateLikeButtons = activateLikeButtons;
        function runFacebookJs(appId) {
            var appIdParam = appId ? '&appId=' + appId : '';
            (function (d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id))
                    return;
                js = d.createElement(s);
                js.id = id;
                js.src = '//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.10' + appIdParam;
                fjs.parentNode.insertBefore(js, fjs);
            }(document, 'script', 'facebook-jssdk'));
        }
        function runTwitterJs() {
            window['twttr'] = (function (d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0], t = window['twttr'] || {};
                if (d.getElementById(id))
                    return t;
                js = d.createElement(s);
                js.id = id;
                js.src = 'https://platform.twitter.com/widgets.js';
                fjs.parentNode.insertBefore(js, fjs);
                t._e = [];
                t.ready = function (f) {
                    t._e.push(f);
                };
                return t;
            }(document, 'script', 'twitter-wjs'));
        }
        //------------------------------------------------------------------------------
    })(page = debiki2.page || (debiki2.page = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/discussion.ts  */ /*
 * Copyright (c) 2014-2018 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="../oop-methods.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../utils/scroll-into-view.ts" />
/// <reference path="../help/help.ts" />
/// <reference path="../topbar/topbar.ts" />
/// <reference path="metabar.ts" />
/// <reference path="../help/help.ts" />
/// <reference path="../rules.ts" />
/// <reference path="../widgets.ts" />
/// <reference path="../page-dialogs/open-share-popup.ts" />
/// <reference path="../login/login-if-needed.ts" />
/// <reference path="cats-or-home-link.ts" />
/// <reference path="post-actions.ts" />
/// <reference path="chat.ts" />
/// <reference path="social-buttons.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var page;
    (function (page_5) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        var closedIcon = r.span({ className: 'icon-block' });
        var questionIcon = r.span({ className: 'icon-help-circled' });
        var problemIcon = r.span({ className: 'icon-attention-circled' });
        var solvedIcon = r.span({ className: 'icon-ok-circled' });
        var ideaIcon = r.span({ className: 'icon-idea' });
        var startedIcon = r.span({ className: 'icon-check-empty' });
        var plannedIcon = r.span({ className: 'icon-check-dashed' });
        var doneIcon = r.span({ className: 'icon-check' });
        var HelpTypePageClosed = 101;
        page_5.TitleBodyComments = debiki2.createComponent({
            displayName: 'TitleBodyComments',
            makeHelpMessage: function () {
                var store = this.props.store;
                var page = store.currentPage;
                var me = store.me;
                var bodyPost = page.postsByNr[BodyNr];
                if (page.pageRole === 20 /* PageRole.Form */ && page.pageClosedAtMs)
                    return { id: 'EsH4PK04', version: 1, type: HelpTypePageClosed, content: r.div({}, t.d.ThisFormClosed_1, closedIcon, t.d.ThisFormClosed_2) };
                var makeShareButton = function (where) {
                    var image;
                    if (where === debiki2.pagedialogs.Facebook) {
                        // Need to follow Facebook's brand guidelines and use this image. [FBBRAND]
                        image = debiki2.FacebookLogoImage;
                    }
                    return (r.a({ className: 'p_ShareIcon icon-' + where,
                        onClick: function () {
                            return debiki2.pagedialogs.openSharePopup("https://usability.testing.exchange", where);
                        } }, image));
                };
                var shareWithFriends = r.div({}, r.p({ style: { display: 'inline-block', paddingRight: 13 } }, "Share Usability Testing Exchange with your friends?"), // [plugin]
                r.span({ className: 's_ShareD_Social' }, makeShareButton(debiki2.pagedialogs.Facebook), makeShareButton(debiki2.pagedialogs.Twitter), makeShareButton(debiki2.pagedialogs.Google), makeShareButton(debiki2.pagedialogs.LinkedIn)));
                // If this page was closed prematurely, show "... has been closed ..." instead of
                // e.g. "... is waiting for an answer..."
                var isClosedUnfinished = page.pageClosedAtMs && !page.pageDoneAtMs && !page.pageAnsweredAtMs;
                var isClosedUsabilityTesting = page.pageClosedAtMs && page.pageRole === 21 /* PageRole.UsabilityTesting */; // [plugin]
                if (isClosedUnfinished || isClosedUsabilityTesting) {
                    var closed_1 = r.b({}, closedIcon, t.closed);
                    var done = r.b({}, doneIcon, "done");
                    if (page.pageRole === 21 /* PageRole.UsabilityTesting */) // [plugin]
                        return { id: 'Ed2PRK06', version: 1, type: HelpTypePageClosed, content: r.div({}, r.p({}, "This topic has been ", page.pageDoneAtMs ? done : closed_1, ", no more feedback " +
                                "needed. (But you can leave more feedback, if you want to.)"), shareWithFriends) };
                    return { id: 'EdH7UMPW', version: 1, type: HelpTypePageClosed, content: r.div({}, t.d.ThisTopicClosed_1, closed_1, t.d.ThisTopicClosed_2) };
                }
                /*
                if (store.pageLockedAtMs)
                  ...
            
                if (store.pageFrozenAtMs)
                  ...
                */
                var props1 = {};
                var props2 = {};
                var props3 = {};
                var props4 = {};
                var activeProps = { className: 's_Pg_TtlExpl_Active' };
                if (page.pageRole === 10 /* PageRole.Question */) {
                    if (page.pageAnsweredAtMs) {
                        props2 = activeProps;
                    }
                    else {
                        props1 = activeProps;
                    }
                    return { id: 'TyH603B', version: 1, content: r.ol({ className: '' }, r.li(props1, questionIcon, '= ' + t.pds.aQuestion), r.li(props2, solvedIcon, '= ' + t.pds.hasAccptAns)) };
                }
                if (page.pageRole === 14 /* PageRole.Problem */) {
                    var doneOrSolvedText = t.done;
                    var doneOrSolvedIcon = doneIcon;
                    if (page.pageAnsweredAtMs) {
                        doneOrSolvedText = "solved"; // I18N
                        doneOrSolvedIcon = solvedIcon; // [ans_solved_icon]
                        props4 = activeProps;
                    }
                    else if (page.pageDoneAtMs) {
                        props4 = activeProps;
                    }
                    else if (page.pageStartedAtMs) {
                        props3 = activeProps;
                    }
                    else if (page.pagePlannedAtMs) {
                        props2 = activeProps;
                    }
                    else {
                        props1 = activeProps;
                    }
                    return { id: 'TyH5KMA2', version: 1, content: r.ol({ className: '' }, r.li(props1, problemIcon, '= ' + t.pds.aProblem), r.li(props2, plannedIcon, '= ' + t.pds.planToFix), r.li(props3, startedIcon, '= ' + t.started), r.li(props4, doneOrSolvedIcon, '= ' + doneOrSolvedText)) };
                }
                if (page.pageRole === 15 /* PageRole.Idea */) {
                    var doneOrSolved = t.done;
                    if (page.pageAnsweredAtMs) {
                        doneOrSolved = "solved"; // I18N
                        props4 = activeProps;
                    }
                    else if (page.pageDoneAtMs) {
                        props4 = activeProps;
                    }
                    else if (page.pageStartedAtMs) {
                        props3 = activeProps;
                    }
                    else if (page.pagePlannedAtMs) {
                        props2 = activeProps;
                    }
                    else {
                        props1 = activeProps;
                    }
                    return { id: 'TyH4RD28', version: 1, content: r.ol({ className: '' }, r.li(props1, ideaIcon, '= ' + t.pds.anIdea), r.li(props2, plannedIcon, '= ' + t.pds.planToDo), r.li(props3, startedIcon, '= ' + t.started), r.li(props4, doneIcon, '= ' + doneOrSolved)) };
                }
                if (page.pageRole === 21 /* PageRole.UsabilityTesting */) { // [plugin]
                    if (!me.isAuthenticated) {
                        // Could explain: here someone has asked for usability testing. X people have answered,
                        // see the Replies section below.
                        return null;
                    }
                    else {
                        var isPageAuthor = bodyPost.authorId === me.id;
                        if (isPageAuthor) {
                            if (page.numRepliesVisible) {
                                return { id: 'EdH5P0WF2', version: 1, alwaysShow: true, content: r.div({}, r.h1({ className: 's_UtxHelp_HaveAsked_Title' }, "There's feedback for you"), r.p({}, "Look below — someone has posted feedback to you."), shareWithFriends) };
                            }
                            else {
                                return { id: 'EdH5PK2W', version: 1, alwaysShow: true, className: 's_UtxHelp_HaveAsked',
                                    content: r.div({}, r.h1({ className: 's_UtxHelp_HaveAsked_Title' }, "This task was created by you."), r.p({}, "You'll be notified via email, " +
                                        "when someone posts feedback to you. ", r.br(), "To edit the text," +
                                        //"Proofread your text below, to make sure it asks for " +
                                        //"the right things and is easy to understand. To edit it, " +
                                        "click the edit icon (", r.span({ className: 'icon-edit' }), ") ", 
                                    // People only see the edit icon for the title — try to fix this, by making
                                    // 'below' bold so they'll look below instead.
                                    r.b({}, "below"), " your post."), r.p({}, "Next step:", r.a({ href: '/give-me-a-task', className: 'utxGiveMeATaskL' }, "Help others"), "— then you'll get more feedback, yourself.")) };
                            }
                        }
                        else {
                            function pickAnotherTask(isSkip) {
                                var skip = isSkip ? '-skip' : '';
                                var title = isSkip ? "Skip this task" : "Pick another task";
                                return (debiki2.PrimaryButton({ className: 's_UtxHelp_HaveAsked_ContinueB' + skip,
                                    onClick: function () {
                                        var tasksToSkip = getSetCookie('edCoUtxSkip');
                                        tasksToSkip = (tasksToSkip || '') + page.pageId + ',';
                                        getSetCookie('edCoUtxSkip', tasksToSkip);
                                        location.assign('/give-me-a-task');
                                    } }, title));
                            }
                            if (page.numRepliesVisible) {
                                var feedbacks = _.filter(_.values(page.postsByNr), function (post) { return post.parentNr === BodyNr; });
                                var itsFeedbackByMe = _.some(feedbacks, function (feedback) { return feedback.authorId == me.id; });
                                if (itsFeedbackByMe) {
                                    return {
                                        id: 'EdH5P0WF2', version: 1, alwaysShow: true, content: r.div({}, r.h1({ className: 's_UtxHelp_HaveAsked_Title' }, "Done"), r.p({}, "You have posted feedback here. Continue with another task?"), pickAnotherTask())
                                    };
                                }
                                else {
                                    return {
                                        id: 'EdH5P0WF2', version: 1, alwaysShow: true, content: r.div({}, r.h1({ className: 's_UtxHelp_HaveAsked_Title' }, "This task is for you"), r.p({}, "Follow the instructions below. Click 'Give Feedback' to type your " +
                                            "answers to the questions."), r.p({}, "Some other people have posted feedback here already. Try not to read what " +
                                            "they have written, before you compose your own feedback."), pickAnotherTask(true))
                                    };
                                }
                            }
                            else {
                                return { id: 'EdH5PK2W', version: 1, alwaysShow: true, className: 's_UtxHelp_HaveAsked',
                                    content: r.div({}, r.h1({ className: 's_UtxHelp_HaveAsked_Title' }, "This task is for you"), r.p({}, "Follow the instructions below. Click 'Give Feedback' to type your " +
                                        "answers to the questions."), pickAnotherTask(true)) };
                            }
                        }
                    }
                }
                return null;
            },
            render: function () {
                var store = this.props.store;
                var page = store.currentPage;
                var me = store.me;
                var anyHelpMessageData = this.makeHelpMessage();
                var anyHelpMessage = anyHelpMessageData
                    ? debiki2.help.HelpMessageBox({ message: anyHelpMessageData, className: 's_Pg_TtlExpl' })
                    : null;
                var anyAboutCategoryClass;
                var anyAboutCategoryTitle;
                if (page.pageRole === 9 /* PageRole.About */) {
                    var ancestors = page.ancestorsRootFirst;
                    var parentCategory = _.last(ancestors);
                    anyAboutCategoryClass = 'dw-about-category';
                    anyAboutCategoryTitle =
                        r.h2({ className: 'dw-about-cat-ttl-prfx' }, "Edit the description of the ", r.strong({}, parentCategory.title), " category:");
                }
                var pageRole = page.pageRole;
                // Sometimes, hide title and categories, show only replies / comments:
                // 1) Show no title or categories on custom html pages, typically a homepage or
                // landing page — such pages typically have their own custom navigation and title.
                // 2) Embedded comment pages: Show comments only — no title or orig post needed,
                // because there's a blog post above instead. Unless we're looking at the comments
                // page directly over at the Talkyard site (!store.isEmbedded). [5UKWSP4]
                // 3) Show no title if we're showing a reply, not the orig post, as the root post.
                // 4) Category description pages, for editing category descriptions,
                // have auto gen titles (`anyAboutCategoryTitle` here). [4AKBR02]
                var skipCats = (pageRole === 1 /* PageRole.CustomHtmlPage */ ||
                    (pageRole === 5 /* PageRole.EmbeddedComments */ && store.isEmbedded) ||
                    store.rootPostId !== BodyNr);
                var skipTitle = skipCats || pageRole === 9 /* PageRole.About */;
                var anyTitle = skipTitle ? null : page_5.Title({ store: store });
                var catsOrHomeLink = skipCats ? null : page_5.CatsOrHomeLink(page, store);
                var anyPostHeader = null;
                //let anySocialLinks = null;
                if (pageRole === 1 /* PageRole.CustomHtmlPage */ || pageRole === 7 /* PageRole.Forum */ ||
                    pageRole === 9 /* PageRole.About */ || pageRole === 2 /* PageRole.WebPage */ ||
                    pageRole === 4 /* PageRole.SpecialContent */ || pageRole === 6 /* PageRole.Blog */ ||
                    (pageRole === 5 /* PageRole.EmbeddedComments */ && store.isEmbedded) ||
                    store.rootPostId !== BodyNr) {
                    // Show no author name or social links for these generic pages.
                    // And show nothing if we're showing a comment not the article as the root post.
                }
                else {
                    var post = page.postsByNr[store.rootPostId];
                    anyPostHeader = page_5.PostHeader({ store: store, post: post });
                    // anySocialLinks = SocialLinks({ socialLinksHtml: store.socialLinksHtml }); CLEAN_UP remove social links
                }
                // If the help message is important, place it below the title, and use a different
                // color (via CSS) [4JKYIXR2], so people will notice it. Page closed = important,
                // because then, writing a reply, is likely a waste of one's time.
                var helpMessageType = anyHelpMessageData ? anyHelpMessageData.type : undefined;
                var helpMessageAboveTitle = helpMessageType === HelpTypePageClosed ? null : anyHelpMessage;
                var helpMessageBelowTitle = helpMessageType === HelpTypePageClosed ? anyHelpMessage : null;
                return (r.div({ className: anyAboutCategoryClass }, catsOrHomeLink, helpMessageAboveTitle, anyAboutCategoryTitle, r.div({ className: 'debiki dw-page', id: 't_PageContent' }, anyTitle, anyPostHeader, helpMessageBelowTitle, 
                //anySocialLinks,
                RootPostAndComments({ store: store }))));
            },
        });
        page_5.Title = debiki2.createComponent({
            displayName: 'Title',
            getInitialState: function () {
                return { editingPageId: null };
            },
            editTitle: function () {
                var store = this.props.store;
                this.setState({ editingPageId: store.currentPageId });
            },
            closeEditor: function () {
                this.setState({ editingPageId: null });
            },
            componentDidUpdate: function () {
                var store = this.props.store;
                if (this.state.editingPageId && this.state.editingPageId !== store.currentPageId) {
                    this.closeEditor();
                }
            },
            render: function () {
                var store = this.props.store;
                var page = store.currentPage;
                var titlePost = page.postsByNr[TitleNr];
                if (!titlePost)
                    return null;
                var me = store.me;
                var isMyPage = debiki2.store_thisIsMyPage(store);
                var isStaffOrMyPage = debiki2.isStaff(me) || isMyPage;
                var isCoreOrMyPage = isStaffOrMyPage || debiki2.user_isTrustMinNotThreat(me, 6 /* TrustLevel.CoreMember */);
                var deletedOrUnapprovedInfo = titlePost.isApproved ? false :
                    r.span({ className: 'esPendingApproval' }, page.pageDeletedAtMs
                        ? t.d.PageDeld
                        : t.d.PagePendAppr || t.d.TitlePendAppr);
                // Insert the title as plain text (don't interpret any html tags — that'd let Mallory mess up
                // the formatting, even if sanitized).  [title_plain_txt]
                var titleText = r.span({}, titlePost.unsafeSource);
                // Make forum titles link back to the forum default view.
                if (page.pageRole === 7 /* PageRole.Forum */) {
                    titleText = debiki2.Link({ to: page.pagePath.value }, titleText);
                }
                var anyShowForumInroBtn;
                if (page.pageRole === 7 /* PageRole.Forum */ && store.hideForumIntro) {
                    var introPost = page.postsByNr[BodyNr];
                    if (introPost && !introPost.isBodyHidden) {
                        // Don't show button too early — doing that would make server side and client side
                        // React generated html differ.
                        if (store.userSpecificDataAdded) {
                            anyShowForumInroBtn =
                                r.a({ className: 'icon-info-circled dw-forum-intro-show',
                                    onClick: function () { return debiki2['ReactActions'].showForumIntro(true); } });
                        }
                    }
                }
                var anyEditTitleBtn;
                if (isStaffOrMyPage) {
                    anyEditTitleBtn =
                        r.a({ className: 'dw-a dw-a-edit icon-edit', id: 'e2eEditTitle', onClick: this.editTitle });
                }
                var contents;
                if (this.state.editingPageId) {
                    var editorProps = _.clone(this.props);
                    editorProps.closeEditor = this.closeEditor;
                    contents = debiki2.morebundle.TitleEditor(editorProps);
                }
                else {
                    var pinOrHiddenClass = page.pinWhere ? ' icon-pin' : '';
                    if (page.pageHiddenAtMs) {
                        pinOrHiddenClass = ' icon-eye-off';
                    }
                    var tooltip = '';
                    var iconClass = '';
                    var iconTooltip = '';
                    if (debiki2.page_isClosedUnfinished(page)) {
                        iconClass = 'icon-block';
                        tooltip = makePageClosedTooltipText(page.pageRole) + '\n';
                    }
                    else if (debiki2.page_isSolved(page)) {
                        tooltip = t.d.TooltipQuestSolved + ".\n";
                        iconClass = debiki2.page_getSolvedIcon(page);
                    }
                    else if (page.pageRole === 10 /* PageRole.Question */) {
                        // @ifdef DEBUG
                        debiki2.dieIf(page.pageAnsweredAtMs, 'TyE305MRKT');
                        // @endif
                        iconClass = 'icon-help-circled';
                        tooltip = t.d.TooltipQuestUnsolved + ".\n";
                    }
                    else if (debiki2.page_canBeDone(page)) {
                        iconTooltip = t.cpd.ClickToChange;
                        // (Some dupl code, see [5KEFEW2] in forum.ts.
                        if (page.pageRole === 14 /* PageRole.Problem */ || page.pageRole === 15 /* PageRole.Idea */) {
                            if (page.pageDoneAtMs) {
                                tooltip = page.pageRole === 14 /* PageRole.Problem */
                                    ? t.d.TooltipProblFixed
                                    : t.d.TooltipDone;
                                iconClass = 'icon-check';
                            }
                            else if (page.pageStartedAtMs) {
                                tooltip = page.pageRole === 14 /* PageRole.Problem */
                                    ? t.d.TooltipFixing
                                    : t.d.TooltipImplementing;
                                iconClass = 'icon-check-empty';
                            }
                            else if (page.pagePlannedAtMs) {
                                tooltip = page.pageRole === 14 /* PageRole.Problem */
                                    ? t.d.TooltipProblPlanned
                                    : t.d.TooltipIdeaPlanned;
                                iconClass = 'icon-check-dashed';
                            }
                            else {
                                tooltip = page.pageRole === 14 /* PageRole.Problem */
                                    ? t.d.TooltipUnsProbl
                                    : t.d.TooltipIdea;
                                iconClass = page.pageRole === 14 /* PageRole.Problem */ ?
                                    'icon-attention-circled' : 'icon-idea';
                            }
                        }
                        else if (page.pageRole === 21 /* PageRole.UsabilityTesting */) { // [plugin]
                            tooltip = page.pageDoneAtMs
                                ? "This has been done. Feedback has been given.\n"
                                : "Waiting for feedback.\n";
                            iconClass = page.pageDoneAtMs ? 'icon-check' : 'icon-check-empty';
                        }
                        else {
                            // CLEAN_UP reove this [4YK0F24]? No more page type to-do?
                            tooltip = page.pageDoneAtMs
                                ? "This has been done or fixed.\n"
                                : "This is about something to do or fix.\n";
                            iconClass = page.pageDoneAtMs ? 'icon-check' : 'icon-check-empty';
                        }
                        if (!isStaffOrMyPage)
                            iconTooltip = null;
                    }
                    else if (page.pageRole === 17 /* PageRole.FormalMessage */) {
                        iconClass = 'icon-mail';
                        tooltip = t.d.TooltipPersMsg;
                    }
                    else if (debiki2.page_isOpenChat(page.pageRole)) {
                        iconClass = 'icon-chat';
                        tooltip = t.d.TooltipChat;
                    }
                    else if (page.pageRole === 19 /* PageRole.PrivateChat */) {
                        iconClass = 'icon-lock';
                        tooltip = t.d.TooltipPrivChat;
                    }
                    switch (page.pinWhere) {
                        case 3 /* PinPageWhere.Globally */:
                            tooltip += t.d.TooltipPinnedGlob;
                            break;
                        case 1 /* PinPageWhere.InCategory */:
                            tooltip += t.d.TooltipPinnedCat;
                            break;
                        default:
                    }
                    var titleIcon = !page.pageAnsweredAtMs && !isCoreOrMyPage
                        ? r.span({ className: iconClass, title: iconTooltip })
                        : r.a({ className: 'dw-clickable ' + iconClass, title: iconTooltip,
                            onClick: function (event) {
                                var rect = debiki2.cloneEventTargetRect(event);
                                debiki2.morebundle.openChangePageDialog(rect, { page: page, showViewAnswerButton: true });
                            } });
                    var deletedIcon = void 0;
                    if (debiki2.store_isPageDeleted(store)) {
                        var deletedReason = page.pageDeletedAtMs ?
                            t.d.ThisPageDeleted : t.d.CatDeldPageToo;
                        deletedIcon = r.span({ className: 'icon-trash', title: deletedReason });
                        titleText = r.span({ className: 'esOP_title-deleted' }, titleText);
                    }
                    contents =
                        r.div({ className: 'dw-p-bd' }, r.div({ className: 'dw-p-bd-blk' }, deletedOrUnapprovedInfo, r.h1({ className: 'dw-p-ttl' + pinOrHiddenClass, title: tooltip }, deletedIcon, titleIcon, titleText, anyShowForumInroBtn, anyEditTitleBtn)));
                }
                return (r.div({ className: 'dw-t', id: 'dw-t-0' }, r.div({ className: 'dw-p dw-p-ttl', id: 'post-0' }, contents)));
            },
        });
        // (DELETE_LATER year 2017? not in use anywhere any longer, + delete all related stuff.)
        /*
        var SocialLinks = createComponent({
          render: function() {
            if (!this.props.socialLinksHtml)
              return null;
        
            // The social links config value can be edited by admins only so we can trust it.
            return (
              r.div({ dangerouslySetInnerHTML: { __html: this.props.socialLinksHtml }}));
          }
        }); */
        var RootPostAndComments = debiki2.createComponent({
            displayName: 'RootPostAndComments',
            getInitialState: function () {
                return {};
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            loadAndShowRootPost: function (event) {
                event.preventDefault();
                var store = this.props.store;
                debiki2.ReactActions.loadAndShowPost(store.rootPostId); // RENAME rootPostId to rootPostNr.
            },
            onAfterPageReplyClick: function (event, postType) {
                // Some dupl code below. [69KFUW20]
                var _this = this;
                event.preventDefault();
                var store = this.props.store;
                var page = store.currentPage;
                var loginToWhat = postType === 4 /* PostType.BottomComment */
                    ? 17 /* LoginReason.PostProgressPost */
                    : (page.pageRole === 5 /* PageRole.EmbeddedComments */
                        ? 16 /* LoginReason.PostEmbeddedComment */
                        : 18 /* LoginReason.PostReply */);
                debiki2.login.loginIfNeededReturnToPost(loginToWhat, BodyNr, function () {
                    if (_this.isGone)
                        return;
                    debiki2.ReactActions.composeReplyTo(BodyNr, postType);
                });
            },
            render: function () {
                var _this = this;
                var store = this.props.store;
                var page = store.currentPage;
                var postsByNr = page.postsByNr;
                var me = store.me;
                var rootPost = postsByNr[store.rootPostId];
                if (!rootPost)
                    return r.p({}, '(Root post missing, id: ' + store.rootPostId +
                        ', these are present: ' + _.keys(postsByNr) + ' [DwE8WVP4])');
                var isBody = store.rootPostId === BodyNr;
                var pageRole = page.pageRole;
                var threadClass = 'dw-t dw-depth-0' + horizontalCss(page.horizontalLayout);
                var postNrAttr = 'post-' + rootPost.nr;
                var postClass = 'dw-p';
                if (debiki2.post_shallRenderAsHidden(rootPost))
                    postClass += ' s_P-Hdn';
                if (debiki2.post_isDeleted(rootPost))
                    postClass += ' s_P-Dd';
                var postBodyClass = 'dw-p-bd';
                if (isBody) {
                    threadClass += ' dw-ar-t' + (rootPost.isApproved ? '' : ' s_PndApr');
                    postClass += ' dw-ar-p';
                    postBodyClass += ' dw-ar-p-bd';
                }
                postClass += rootPost.isPreview ? ' s_P-Prvw' : '';
                postClass += debiki2.post_isWiki(rootPost) ? ' s_P-Wiki' : '';
                var isThreadedDiscussion = debiki2.page_isThreadedDiscussion(page);
                var isFlatProgress = debiki2.page_isFlatProgress(page);
                // @ifdef DEBUG
                debiki2.dieIf(isThreadedDiscussion && isFlatProgress, 'TyE5AK40');
                // @endif
                var notYetApprovedMaybeDeletedInfo = rootPost.isApproved ? false :
                    r.div({ className: 'esPendingApproval' }, page.pageDeletedAtMs ? t.d.PageDeld : t.d.TextPendingApproval);
                var deletedCross = !page.pageDeletedAtMs ? null :
                    r.div({ className: 's_Pg_DdX' });
                var deletedText = !page.pageDeletedAtMs ? null :
                    r.div({ className: 's_Pg_DdInf' }, pageRole === 5 /* PageRole.EmbeddedComments */ ? t.d.DiscDeld : t.d.PageDeld);
                var previewInfo = !rootPost.isEditing ? null :
                    r.div({ className: 's_T_YourPrvw' }, t.e.PreviewC + ' ', r.span({ className: 's_T_YourPrvw_ToWho' }, t.d.YourEdits));
                var body = null;
                if (pageRole !== 5 /* PageRole.EmbeddedComments */ || !store.isEmbedded) {
                    var bodyContent = void 0;
                    if (debiki2.post_shallRenderAsDeleted(rootPost) || debiki2.post_shallRenderAsHidden(rootPost)) {
                        var isDeleted_1 = debiki2.post_isDeleted(rootPost);
                        var onClick = !isDeleted_1 || debiki2.isStaff(me) ? this.loadAndShowRootPost : undefined;
                        bodyContent = (r.div({ className: 'dw-p-bd-blk esOrigPost', onClick: onClick }, isDeleted_1
                            ? (t.d.PostDeld + (debiki2.isStaff(me) ? '. ' + t.ClickToShow : ''))
                            : t.d.PostHiddenClickShow));
                    }
                    else {
                        bodyContent = (r.div({ className: 'dw-p-bd-blk esOrigPost',
                            dangerouslySetInnerHTML: { __html: rootPost.sanitizedHtml } }));
                    }
                    body =
                        r.div({ className: postClass, id: postNrAttr }, r.div({ className: postBodyClass }, bodyContent));
                }
                if (!debiki2.page_isDiscussion(pageRole)) {
                    if (debiki2.store_thereAreFormReplies(store) && me.isAdmin) {
                        // Show the completed forms for the admin (i.e. don't return here).
                        // COULD show for page creator too — but currently s/he is always an admin. [6JK8WHI3]
                    }
                    else
                        return (r.div({ className: threadClass }, previewInfo, body, page_5.NoCommentsPageActions({ store: store, post: rootPost })));
                }
                var solvedBy;
                if (debiki2.page_isSolved(page)) {
                    // onClick:... handled in ../utils/show-and-highlight.js currently (scrolls to solution).
                    var solvedIcon_1 = debiki2.page_getSolvedIcon(page);
                    solvedBy = r.a({ className: 'dw-solved-by ' + solvedIcon_1,
                        href: '#post-' + page.pageAnswerPostNr,
                        onMouseEnter: function () { return debiki2.ReactActions.highlightPost(page.pageAnswerPostNr, true); },
                        onMouseLeave: function () { return debiki2.ReactActions.highlightPost(page.pageAnswerPostNr, false); },
                        onClick: debiki2.utils.makeShowPostFn(BodyNr, page.pageAnswerPostNr) }, t.d.SolvedClickView_1 + page.pageAnswerPostNr + t.d.SolvedClickView_2);
                }
                var anyHorizontalArrowToChildren = null;
                if (page.horizontalLayout) {
                    anyHorizontalArrowToChildren =
                        debiki2.renderer.drawHorizontalArrowFromRootPost(rootPost);
                }
                var backlinksElm;
                var pubLinks = page.internalBacklinks || [];
                var restrLinks = me.myCurrentPageData.internalBacklinks || [];
                var internalBacklinks = __spreadArray([], pubLinks, true);
                var _loop_5 = function (restrLink) {
                    var publLink = _.find(pubLinks, function (l) { return l.pageId === restrLink.pageId; }); // [On2]
                    if (!publLink) {
                        internalBacklinks.push(restrLink);
                    }
                };
                for (var _i = 0, restrLinks_1 = restrLinks; _i < restrLinks_1.length; _i++) {
                    var restrLink = restrLinks_1[_i];
                    _loop_5(restrLink);
                }
                if (debiki2.nonEmpty(internalBacklinks)) {
                    backlinksElm =
                        r.div({ className: 's_InLns' }, r.p({ className: 's_InLns_Ttl' }, "Linked from:"), // I18N
                        r.ol({}, internalBacklinks.map(function (topic) {
                            return r.li({ key: topic.pageId }, 
                            // UX "BUG", SHOULD: For access restricted topics, show e.g.
                            // a padlock or a private message symbol, instead of a link icon
                            // — Otherwise ppl can get nervous, when they think "everyone"
                            // can see such access restricted links.  [staff_can_see]
                            debiki2.Link({ to: topic.url, className: 's_InLns_Ln icon-link' }, topic.title));
                        })));
                }
                var repliesAreFlat = false;
                var discOrProgrReplyNrs = rootPost.childNrsSorted.concat(page.parentlessReplyNrsSorted);
                // DO_AFTER 2019-06-01 CLEAN_UP REMOVE this, because now all message page posts are ProgressPost:s,
                // so this then no longer needed. However, wait for a while, so as not to mess up any
                // discussions people are having right now (2019-04-13).
                // --------------
                // On message pages, most likely max a few people talk — then threads make no sense.
                // On form submission pages, people don't see each others submissions, won't talk at all.
                if (page.pageRole === 17 /* PageRole.FormalMessage */ || page.pageRole === 20 /* PageRole.Form */) {
                    repliesAreFlat = true;
                    discOrProgrReplyNrs = _.values(page.postsByNr).map(function (post) { return post.nr; });
                }
                // --------------
                var isSquashing = false;
                var discussionReplies = [];
                var progressPosts = [];
                addReplies(discussionReplies, discOrProgrReplyNrs, false);
                addReplies(progressPosts, page.progressPostNrsSorted, true);
                function addReplies(list, replyNrs, inProgrSect) {
                    replyNrs.forEach(function (childNr, childIndex) {
                        if (childNr === BodyNr || childNr === TitleNr)
                            return;
                        var child = postsByNr[childNr];
                        if (!child)
                            return; // deleted
                        var isProgrPost = // break out:  [comt_isForTimeline]  ?
                         child.postType === 4 /* PostType.BottomComment */ || child.postType === 31 /* PostType.MetaMessage */;
                        if (isProgrPost !== inProgrSect) {
                            return;
                        }
                        if (isSquashing && child.squash)
                            return;
                        if (child.postType === 2 /* PostType.Flat */) // could rename Flat to Comment? CLEAN_UP delete this 'if'?
                            return;
                        isSquashing = false;
                        var threadProps = { store: store };
                        if (isProgrPost || repliesAreFlat) {
                            threadProps.isFlat = true;
                        }
                        threadProps.elemType = 'div';
                        threadProps.post = child;
                        threadProps.postId = childNr; // CLEAN_UP should be .postNr. But use .post only? [349063216]
                        threadProps.index = childIndex;
                        threadProps.depth = 1;
                        threadProps.indentationDepth = 0;
                        threadProps.is2dTreeColumn = page.horizontalLayout;
                        if (child.squash) {
                            isSquashing = true;
                            list.push(r.li({ key: childNr }, SquashedThreads(threadProps)));
                        }
                        else if (child.postType === 31 /* PostType.MetaMessage */) {
                            list.push(r.li({ key: childNr, className: 's_w-MP' }, page_5.MetaPost(threadProps)));
                        }
                        else {
                            // [plugin] [utx] ----------------------------
                            var pickNextTaskStuff = void 0;
                            if (page.pageRole === 21 /* PageRole.UsabilityTesting */ && me.id === child.authorId &&
                                me.id !== rootPost.authorId &&
                                child.postType !== 4 /* PostType.BottomComment */ /* [2GYKFS4] */) {
                                pickNextTaskStuff = debiki2.help.HelpMessageBox({ className: 's_UtxNextTask', message: {
                                        id: 'EdH5P0WF2', version: 1, alwaysShow: true, content: r.div({}, r.h1({ className: 's_UtxHelp_HaveAsked_Title' }, "Done"), r.p({}, "You feedback is below. Continue giving feedback to others?"), debiki2.PrimaryButton({ className: 's_UtxHelp_HaveAsked_ContinueB',
                                            onClick: function () {
                                                var tasksToSkip = getSetCookie('edCoUtxSkip');
                                                tasksToSkip = (tasksToSkip || '') + page.pageId + ',';
                                                getSetCookie('edCoUtxSkip', tasksToSkip);
                                                location.assign('/give-me-a-task');
                                            } }, "Next task"))
                                    } });
                            }
                            // --/ [plugin] [utx] ------------------------
                            list.push(r.li({ key: childNr }, pickNextTaskStuff, Thread(threadProps)));
                        }
                    });
                }
                /*
            
                Depending on if the layout is ThreadedDiscussion or FlatProgress,
                or split threaded-flat, the orig post Reply button does different things,
                and there are, or aren't, dividers above the threaded and flat page sections,
                and there're different bottom reply buttons. Here's a table:
            
                dsc  = threaded discussion layout (like Reddit, HackerNews, Disqus)
                prg  = flat progress layout (like phpBB, Discourse, Flarum)
                re-o = replies only
                sct  = section
                re   = reply (button title)
                ap   = the button appends comment to progress section
                id   = the button inserts comment into discussion section
                n    = no / none, don't show
                y    = yes / show
                nd   = show, no divider
                wd   = show, with a divider
                btm  = bottom
            
                        always prg       disc layout               prg layout      split dsc-prg
                                  dsc-re-o  prg-re-o both   dsc-re-o  prg-re-o both
            
                top re
                btn:       ap         id      id      id       ap       ap      ap    id —> ap *
            
                dsc sct:   n          nd      nd      nd       wd       n       wd       wd
            
                prg sct:   nd         n       wd      wd       wd       n       wd       wd
            
                btm dsc
                re btn:    n          y       y       y        n        n       n      y —> n *
            
                btm prg
                re btn:    y          y**     y**     y**      y        y       y     y** —> y  *
            
            
                *id —> ap, etc: The page starts in discussion mode, and then changes to progress
                mode, when the discussion phase has ended. Currently, that's when one changes
                the doingState to Started. [SPLDSCPRG]
            
                **y: The bottom appned-progress-reply button here has the title
                     "Add progress note", and is shown just after a Reply button that
                     inserts into the threaded discussion section. [ADPRGNT]
            
                */
                // ----- Discussion section divider  [DSCPRG]
                var discussionSectionDivider;
                var showDiscussionSectionDivider = true;
                if (debiki2.page_isAlwaysFlatDiscourse(page)) {
                    // Never any Discussion section on these types of pages. (E.g. direct messages)
                    showDiscussionSectionDivider = false;
                }
                if (isThreadedDiscussion) {
                    // There's no Progress section discussion on these pages (e.g. Question-Answers
                    // or Discussion topic). Then, need not show any Discussion section title.
                    showDiscussionSectionDivider = false;
                }
                if (isFlatProgress && !discussionReplies.length) {
                    // People don't expect a Discussion section on these pages, and there are
                    // no Discussion replies, so don't show any Discussion divider.
                }
                if (page.pageRole === 9 /* PageRole.About */) {
                    // These pages are only for editing category descriptions.
                    showDiscussionSectionDivider = false;
                }
                if (showDiscussionSectionDivider) {
                    var expl = '';
                    switch (page.pageRole) {
                        case 15 /* PageRole.Idea */:
                            expl = t.d.aboutThisIdea;
                            break;
                        case 14 /* PageRole.Problem */:
                            expl = t.d.aboutThisProbl;
                            break;
                        // Weird disucssion title, if it's already a to-do? Skip?:
                        // case PageRole.ToDo: expl = "about how to do this"; break;  I1 8N
                    }
                    discussionSectionDivider = rFragment({}, r.li({ className: 's_PgSct s_PgSct-Dsc', key: 'DiscSect' }, r.div({ className: 's_PgSct_Ttl' }, t.Discussion), r.div({ className: 's_PgSct_Dtl' }, expl)), r.li({}, r.a({ className: 's_OpReB s_OpReB-Dsc icon-reply',
                        onClick: function (event) { return _this.onAfterPageReplyClick(event, 1 /* PostType.Normal */); } }, r.b({}, t.ReplyV), r.span({}, " (insert)")))); // I18N
                }
                // ----- Progress section divider [DSCPRG]
                var progressSectionDivider;
                var showProgressSectionDivider = true;
                if (debiki2.page_isAlwaysFlatDiscourse(page)) {
                    // Never any Discussion section on these types of pages. (E.g. direct messages)
                    // So show neither Discussion section nor Progress section dividers.
                    showProgressSectionDivider = false;
                }
                if (isThreadedDiscussion && !progressPosts.length) {
                    // People shouldn't expect any Progress section on these pages (e.g. a Question-Answers
                    // topic or a Discussion), and there are no Progress posts, so, skip the divider.
                    showProgressSectionDivider = false;
                }
                if (isFlatProgress && !discussionReplies.length) {
                    // People shouldn't expect any Discussion section on this page, and there are no
                    // Discussion replies, so skip the divider. (People in this community should excpect
                    // only flat progress replies.)
                    showProgressSectionDivider = false;
                }
                if (page.pageRole === 9 /* PageRole.About */) {
                    showProgressSectionDivider = false;
                }
                if (showProgressSectionDivider) {
                    var expl = '';
                    switch (page.pageRole) {
                        case 15 /* PageRole.Idea */:
                            expl = t.d.withThisIdea;
                            break;
                        case 14 /* PageRole.Problem */:
                            expl = t.d.withThisProbl;
                            break;
                        case 13 /* PageRole.ToDo */:
                            expl = t.d.withThis;
                            break;
                    }
                    progressSectionDivider =
                        r.li({ className: 's_PgSct s_PgSct-Prg', key: 'ApBtmDv' }, r.div({ className: 's_PgSct_Ttl' }, t.sb.Progr), // REFACTOR I18N move from t.sb to just t ? or to t.d.Progr?
                        r.div({ className: 's_PgSct_Dtl' }, expl));
                }
                var socialButtons = !store.settings.showSocialButtons ? null :
                    page_5.SocialButtons(store.settings);
                var postActions = debiki2.post_shallRenderAsHidden(rootPost) ? null :
                    page_5.PostActions({ store: store, post: rootPost });
                // ----- After page actions
                var skipBottomReplyAppendBtn = 
                // Skip the "Reply (apppend)" button on embedded comments pages — this far,
                // it's made people confused only. Maybe later add back, for staff only or power users?
                pageRole === 5 /* PageRole.EmbeddedComments */ ||
                    // If mind map: Don't give people a large easily clickable button that keeps appending nodes.
                    // People are supposed to think before adding new nodes, e.g. think about where to place them.
                    pageRole === 11 /* PageRole.MindMap */;
                var makeOnClick = function (postType) {
                    return function (event) {
                        _this.onAfterPageReplyClick(event, postType);
                    };
                };
                var afterPageActions = skipBottomReplyAppendBtn ? null :
                    r.div({ className: 's_APAs' }, store.isEditorOpen || !isThreadedDiscussion ? null :
                        r.a({ className: 's_OpReB s_OpReB-Dsc icon-reply',
                            onClick: makeOnClick(1 /* PostType.Normal */) }, r.b({}, t.ReplyV), 
                        // If there are progress posts above, clarify that the reply will
                        // appear in the discussion section (not in the progress section).
                        progressPosts.length ? r.span({}, ' (' + t.discussion + ')') : null), store.isEditorOpen || page.progressLayout === 2 /* ProgressLayout.MostlyDisabled */ ? null :
                        r.a({ className: 's_OpReB s_OpReB-Prg icon-reply',
                            onClick: makeOnClick(4 /* PostType.BottomComment */) }, 
                        /* This no longer needed? [DSCPRG] Keep for a while if want to add back
                           some tips abou what a Progress reply is.
                        const doReply = () => this.onAfterPageReplyClick(event, PostType.BottomComment);
                        // Comments always added at the bottom on formal messages; no explanation needed.
                        if (isFlatProgress) {
                          doReply();
                        }
                        else {
                          morebundle.openHelpDialogUnlessHidden({ id: '5JKWS', version: 1, defaultHide: false,
                            content: "... explain what a progr note is ..."
                            doAfter: doReply
                          });
                        } */
                        isThreadedDiscussion
                            ? r.span({}, t.d.AddProgrNote) // [ADPRGNT]
                            : rFragment({}, r.b({}, t.ReplyV), 
                            // If isn't a FlatProgress topic (with only Progress posts), then,
                            // clarify that this button adds the reply in the progress section.
                            isFlatProgress ? null : r.span({}, ' (' + t.progressN + ')'))));
                // ----- The reslut
                var layoutClass = isThreadedDiscussion ? ' s_ThrDsc' : (isFlatProgress ? ' s_FltPrg' : '');
                return (r.div({ className: threadClass + layoutClass }, notYetApprovedMaybeDeletedInfo, deletedCross, previewInfo, body, solvedBy, socialButtons, deletedText, postActions, backlinksElm, debiki2.page.Metabar(), anyHorizontalArrowToChildren, 
                // try to remove the dw-single-and-multireplies div + the dw-singlereplies class,
                // they're no longer needed.
                r.div({ className: 'dw-single-and-multireplies' }, r.ol({ className: 'dw-res dw-singlereplies' }, discussionSectionDivider, discussionReplies, progressSectionDivider, progressPosts)), afterPageActions, deletedText));
            },
        });
        page_5.MetaPost = debiki2.createComponent({
            displayName: 'MetaPost',
            showAboutUser: function (event) {
                // Dupl code [1FVBP4E]  — but post needed, so can lookup more by the same author,
                // by looking at hens ip & cookies.
                debiki2.morebundle.openAboutUserDialogForAuthor(this.props.post, event.target);
                event.preventDefault();
                event.stopPropagation();
            },
            shouldComponentUpdate: function (nextProps, nextState) {
                // These never change? Immutable?
                // Harmless BUG: Well ... yes, if the action-doer renames henself — let's ignore that for now :-P
                return false;
            },
            render: function () {
                var store = this.props.store;
                var post = this.props.post;
                var doer = debiki2.store_getAuthorOrMissing(store, post);
                var doersAvatar = debiki2.avatar.Avatar({ user: doer, origins: store });
                var when = debiki2.timeAgo(post.createdAtMs, 's_MP_At');
                // This results in e.g.:  [avatar-img] @admin_alice closed this 3 hours ago
                return (
                // UX DESIGN COULD show an action icon to the left, where the poster's avatar is shown
                // for normal posts. E.g. show a closed icon, or reopened, or topic-deleted icon.
                // But then need to know what kind of action was done.
                r.div({ className: 's_MP', id: "post-".concat(post.nr) }, doersAvatar, debiki2.UserName({ user: doer, store: store, makeLink: true, onClick: this.showAboutUser, avoidFullName: true }), r.span({ className: 's_MP_Text', dangerouslySetInnerHTML: { __html: post.sanitizedHtml } }), ' ', when, '.'));
            }
        });
        var SquashedThreads = debiki2.createComponent({
            displayName: 'SquashedThreads',
            render: function () {
                var store = this.props.store;
                var page = store.currentPage;
                var postsByNr = page.postsByNr;
                var post = this.props.post;
                var postNr = post.nr;
                var parentPost = postsByNr[post.parentNr];
                var arrows = debiki2.renderer.drawArrowsFromParent(postsByNr, parentPost, this.props.depth, this.props.index, page.horizontalLayout, this.props.rootPostId, !!post.branchSideways);
                var baseElem = r[this.props.elemType];
                var depthClass = ' dw-depth-' + this.props.depth;
                var indentationDepthClass = ' dw-id' + this.props.indentationDepth;
                var is2dColumnClass = this.props.is2dTreeColumn ? ' dw-2dcol' : '';
                var postNrDebug = debiki.debug ? '  #' + post.nr : '';
                return (baseElem({ className: 'dw-t dw-ts-squashed' + depthClass + indentationDepthClass +
                        is2dColumnClass }, arrows, r.a({ className: 'dw-x-show s_X_Show-PostNr-' + postNr,
                    onClick: function () { return debiki2.ReactActions.unsquashTrees(postNr); } }, t.d.ClickSeeMoreRepls + ' ...' + postNrDebug))); // [306UDRPJ24]
            }
        });
        var Thread = debiki2.createComponent({
            displayName: 'Thread',
            shouldComponentUpdate: function (nextProps, nextState) {
                var should = !nextProps.quickUpdate || !!nextProps.postsToUpdate[this.props.postId];
                return should;
            },
            onAnyActionClick: function () {
                this.refs.post.onAnyActionClick();
            },
            resumeDraft: function (event) {
                var post = this.props.post;
                event.preventDefault();
                // This will load our new reply draft text.
                // Let the reply be of the same post type as the post we're replying to. [REPLTYPE]
                debiki2.ReactActions.composeReplyTo(post.parentNr, post.postType);
            },
            askDeleteDraft: function (event) {
                event.preventDefault();
                var store = this.props.store;
                var draftPost = this.props.post;
                debiki2.morebundle.openDefaultStupidDialog({
                    body: t.d.DelDraft + '?',
                    primaryButtonTitle: t.upp.YesDelete,
                    secondaryButonTitle: t.NoCancel,
                    small: true,
                    onPrimaryClick: function () {
                        debiki2.ReactActions.deleteDraftPost(store.currentPageId, draftPost);
                    },
                });
            },
            render: function () {
                var _this = this;
                var store = this.props.store;
                var page = store.currentPage;
                var postsByNr = page.postsByNr;
                var post = postsByNr[this.props.postId];
                if (!post) {
                    // This tree has been deleted.
                    return null;
                }
                var parentPost = postsByNr[post.parentNr];
                var deeper = this.props.depth + 1;
                var isFlat = this.props.isFlat;
                var isMindMap = page.pageRole === 11 /* PageRole.MindMap */;
                var thisAndSiblingsSideways = this.props.is2dTreeColumn && isMindMap;
                // Draw arrows, but not to multireplies, because we don't know if they reply to `post`
                // or to other posts deeper in the thread.
                var arrows;
                if (!post.multireplyPostNrs.length && !isFlat) {
                    arrows = debiki2.renderer.drawArrowsFromParent(postsByNr, parentPost, this.props.depth, this.props.index, page.horizontalLayout, this.props.rootPostId, thisAndSiblingsSideways);
                }
                var numDeletedChildren = 0;
                for (var i = 0; i < post.childNrsSorted.length; ++i) {
                    var childNr = post.childNrsSorted[i];
                    if (!postsByNr[childNr]) {
                        numDeletedChildren += 1;
                    }
                }
                var numNonDeletedChildren = post.childNrsSorted.length - numDeletedChildren;
                var childrenSideways = isMindMap && !!post.branchSideways && numNonDeletedChildren >= 2;
                var anyHorizontalArrowToChildren;
                if (childrenSideways) {
                    anyHorizontalArrowToChildren =
                        debiki2.renderer.drawHorizontalArrowFromRootPost(post);
                }
                var isSquashingChildren = false;
                var children = [];
                if (!post.isTreeCollapsed && !post.isTreeDeleted && !isFlat) {
                    children = post.childNrsSorted.map(function (childNr, childIndex) {
                        var child = postsByNr[childNr];
                        if (!child)
                            return null; // deleted
                        if (isSquashingChildren && child.squash)
                            return null;
                        if (child.postType === 2 /* PostType.Flat */)
                            return null;
                        isSquashingChildren = false;
                        var childIndentationDepth = _this.props.indentationDepth;
                        // All children except for the last one are indented.
                        var isIndented = childIndex < post.childNrsSorted.length - 1 - numDeletedChildren;
                        if (!page.horizontalLayout && _this.props.depth === 1) {
                            // Replies to article replies are always indented, even the last child.
                            isIndented = true;
                        }
                        if (isIndented) {
                            childIndentationDepth += 1;
                        }
                        if (childrenSideways) {
                            childIndentationDepth = 0;
                        }
                        var threadProps = _.clone(_this.props);
                        threadProps.elemType = childrenSideways ? 'div' : 'li';
                        threadProps.post = child;
                        threadProps.postId = childNr; // CLEAN_UP should be .postNr. But use .post only? [349063216]
                        threadProps.index = childIndex;
                        threadProps.depth = deeper;
                        threadProps.indentationDepth = childIndentationDepth;
                        threadProps.is2dTreeColumn = childrenSideways;
                        threadProps.key = childNr;
                        var thread;
                        if (child.squash) {
                            isSquashingChildren = true;
                            thread = SquashedThreads(threadProps);
                        }
                        else {
                            thread = Thread(threadProps);
                        }
                        if (threadProps.is2dTreeColumn) {
                            // Need a <div> inside the <li> so margin-left can be added (margin-left otherwise
                            // won't work, because: display table-cell [4GKUF02]).
                            thread = r.li({ key: childNr }, thread);
                        }
                        return thread;
                    });
                }
                var actions = debiki2.post_isCollapsed(post) || debiki2.post_shallRenderAsHidden(post)
                    ? null
                    : page_5.PostActions({ store: store, post: post, onClick: this.onAnyActionClick });
                var renderCollapsed = (post.isTreeCollapsed || post.isPostCollapsed) &&
                    // Don't collapse threads in the sidebar; there, comments are abbreviated
                    // and rendered in a flat list.
                    !this.props.abbreviate;
                var anyWrongWarning = this.props.abbreviate ? null : makeWrongWarning(post);
                // (Show avatar also if collapsed, otherwise messes up indentation.)
                var showAvatar = this.props.depth === 1
                    && !this.props.is2dTreeColumn && !post.isForDraftNr;
                var avatarClass = showAvatar ? ' ed-w-avtr' : '';
                var anyAvatar = !showAvatar ? null :
                    debiki2.avatar.Avatar({ user: debiki2.store_getAuthorOrMissing(store, post),
                        origins: store, size: 2 /* AvatarSize.Small */ });
                var postProps = _.clone(this.props);
                postProps.post = post;
                postProps.index = this.props.index;
                //postProps.onMouseEnter = this.onPostMouseEnter; -- but there's no onPostMouseEnter?
                postProps.ref = 'post';
                postProps.renderCollapsed = renderCollapsed;
                var baseElem = r[this.props.elemType];
                var depthClass = '';
                var indentationDepthClass = '';
                if (!isFlat) {
                    depthClass = ' dw-depth-' + this.props.depth;
                    indentationDepthClass = ' dw-id' + this.props.indentationDepth;
                }
                var is2dColumnClass = this.props.is2dTreeColumn ? ' dw-2dcol' : '';
                var multireplyClass = post.multireplyPostNrs.length ? ' dw-mr' : '';
                var collapsedClass = renderCollapsed ? ' dw-zd' : '';
                var branchSidewaysClass = horizontalCss(childrenSideways);
                var replyingToElem;
                if (debiki2.store_isReplyingTo(store, post)) {
                    replyingToElem = r.div({ className: 's_T_ReTo' }, r.span({ className: 's_T_ReTo_Ttl' }, t.d.ReplyingToC), // [305KTJ4]
                    debiki2.me_uiPrefs(store.me).inp === 2 /* UiPrefsIninePreviews.Skip */ ? null :
                        r.span({ className: 's_T_ReTo_Prvw' }, t.d.ScrollToPrevw_1, r.a({ className: 's_T_ReTo_Prvw_B',
                            onMouseEnter: function () { return debiki2.ReactActions.highlightPreview(true); },
                            onMouseLeave: function () { return debiki2.ReactActions.highlightPreview(false); },
                            onClick: function () { return debiki2.ReactActions.scrollToPreview({}); } }, t.d.ScrollToPrevw_2, r.span({ className: 's_T_ReTo_Prvw_B_Arw' }, " ⬇️"))));
                }
                var previewClass = '';
                var previewElem;
                if (post.isPreview) {
                    // For now,
                    // construct either this text:  "Preview: Your reply to (someone's name):"
                    // or this:   "Your draft, replies to [link to parent post]:".
                    var isProgrPost = post.parentNr === BodyNr && post.postType === 4 /* PostType.BottomComment */;
                    var yourWhat = post.isEditing
                        ? t.e.PreviewC + ' '
                        : t.d.YourDraft + ', '; // [03RKTG42]
                    var isEditingExistingPost = post.nr >= MinRealPostNr;
                    var toWho = void 0;
                    if (isEditingExistingPost) {
                        // @ifdef DEBUG
                        debiki2.dieIf(!post.isEditing, 'TyE396KRTTF2J');
                        // @endif
                        toWho =
                            r.span({ className: 's_T_YourPrvw_ToWho' }, t.d.YourEdits);
                    }
                    else if (!post.isEditing && isProgrPost) {
                        toWho =
                            r.span({ className: 's_T_YourPrvw_ToWho' }, t.d.aProgrNote);
                    }
                    else if (!parentPost) {
                        // @ifdef DEBUG
                        debiki2.die("No parent post [TyE602FKDJDK]");
                        // @endif
                        0;
                    }
                    else {
                        var repliesToBlogPost = parentPost.nr === BodyNr && page.pageRole === 5 /* PageRole.EmbeddedComments */;
                        var replTo = !isProgrPost && !repliesToBlogPost &&
                            store.usersByIdBrief[parentPost.authorId];
                        var yourReplyTo_or_repliesTo = post.isEditing
                            ? (isProgrPost
                                ? t.d.YourProgrNoteC
                                : t.d.YourReplyTo)
                            : (isProgrPost
                                ? '' // doesn't really reply to anyone in particular
                                : t.d.repliesTo);
                        toWho = !replTo ? null :
                            r.span({ className: 's_T_YourPrvw_ToWho' }, yourReplyTo_or_repliesTo + ' ', RepliesToArrow({ post: parentPost, thisPost: post, author: replTo }), ': ');
                    }
                    var resumeDraftBtn = post.isEditing || store.isEditorOpen ? null :
                        debiki2.Button({ onClick: this.resumeDraft, className: 's_T_YourPrvw_ResumeB e_RsmDft' }, t.d.ResumeEdting);
                    var deleteDraftBtn = post.isEditing || store.isEditorOpen ? null :
                        debiki2.Button({ onClick: this.askDeleteDraft,
                            className: 's_T_YourPrvw_ResumeB e_DelDft' }, t.d.DelDraft);
                    previewElem = r.div({ className: 's_T_YourPrvw' }, yourWhat, toWho, resumeDraftBtn, deleteDraftBtn);
                    previewClass = ' s_T-Prvw ' +
                        (post.isEditing ? 's_T-Prvw-IsEd' : 's_T-Prvw-NotEd') +
                        (post.nr >= MinRealPostNr ? ' s_P-Prvw-Real' : '');
                }
                var flatClass = isFlat ? ' s_T-Flat' : '';
                return (baseElem({ className: 'dw-t' + depthClass + indentationDepthClass + multireplyClass +
                        is2dColumnClass + branchSidewaysClass + collapsedClass + avatarClass +
                        previewClass + flatClass }, arrows, replyingToElem, anyWrongWarning, previewElem, anyAvatar, page_5.Post(postProps), actions, anyHorizontalArrowToChildren, r.div({ className: 'dw-single-and-multireplies' }, r.ol({ className: 'dw-res dw-singlereplies' }, children))));
            },
        });
        function makeWrongWarning(post) {
            if (post.numWrongVotes <= 1)
                return null;
            var wrongWarning = null;
            var wrongness = post.numWrongVotes / (post.numLikeVotes || 1);
            // One, two, three, many.
            if (post.numWrongVotes > 3 && wrongness > 1) {
                wrongWarning =
                    r.div({ className: 'esWrong esWrong-Very' }, r.div({ className: 'esWrong_Txt icon-warning' }, t.d.ManyDisagree));
            }
            else if (wrongness > 0.33) {
                wrongWarning =
                    r.div({ className: 'esWrong' }, r.div({ className: 'esWrong_Txt icon-warning' }, t.d.SomeDisagree));
            }
            return wrongWarning;
        }
        page_5.Post = debiki2.createComponent({
            displayName: 'Post',
            onUncollapseClick: function (event) {
                debiki2.ReactActions.uncollapsePost(this.props.post);
            },
            onClick: function (event) {
                var props = this.props;
                if (!props.abbreviate) {
                    if (props.post.isTreeCollapsed || props.post.isPostCollapsed) {
                        this.onUncollapseClick(event);
                    }
                    else {
                        // Disable for now. This sets quickUpdate = true, which makes isClientSideCollapsed
                        // impossible to undo, for nearby threads. And not used anyway.
                        // debiki2.ReactActions.markPostAsRead(this.props.post.nr, true);
                    }
                }
                if (props.onClick) {
                    props.onClick();
                }
            },
            onAnyActionClick: function () {
                // Disable for now. Not in use anyway and see comment in this.onClick above.
                // debiki2.ReactActions.markPostAsRead(this.props.post.nr, true);
            },
            onMarkClick: function (event) {
                // Try to avoid selecting text:
                event.stopPropagation();
                event.preventDefault();
                debiki2.ReactActions.cycleToNextMark(this.props.post.nr);
            },
            render: function () {
                var store = this.props.store;
                var page = store.currentPage;
                var post = this.props.post;
                var me = store.me;
                if (!post)
                    return r.p({}, '(Post missing [TyE0POST])');
                var pendingApprovalElem;
                var headerElem;
                var bodyElem;
                var clickToExpand;
                var clickCover;
                var extraClasses = this.props.className || '';
                var isFlat = this.props.isFlat;
                extraClasses += post.isPreview ? ' s_P-Prvw' : '';
                extraClasses += debiki2.post_isWiki(post) ? ' s_P-Wiki' : '';
                if (post.isPreview && !post.isEditing) {
                    // This sohuld be a draft of a new reply.
                    // Skip header and avatar. "Your draft:"  should be enough. [03RKTG42]
                    // @ifdef DEBUG
                    // The post doesn't yet exist, shouldn't have a real post nr.
                    debiki2.dieIf(post.nr > MaxVirtPostNr, 'TyE50SKRPJAECW2');
                    // @endif
                    bodyElem = page_5.PostBody(this.props);
                    extraClasses += ' s_P-Prvw-NotEd';
                }
                else if (debiki2.post_isDeleted(post)) {
                    headerElem = r.div({ className: 'dw-p-hd' }, post.isTreeDeleted ? t.d.ThreadDeld : t.d.CmntDeld);
                    extraClasses += ' s_P-Dd';
                }
                else if (this.props.renderCollapsed &&
                    // COULD rename isTreeCollapsed since it's not always a boolean.
                    post.isTreeCollapsed !== 'Truncated') {
                    // COULD remove this way of collapsing comments, which doesn't show the first line?
                    // Currently inactive, this is dead code (!== 'Truncated' is always false).
                    var text = this.props.is2dTreeColumn ? '' : (post.isTreeCollapsed ? t.d.ClickSeeMoreComments : t.d.ClickSeeThisComment);
                    if (debiki.debug)
                        text += '  #' + this.props.postId;
                    var iconClass = this.props.is2dTreeColumn ? 'icon-right-open' : 'icon-down-open';
                    bodyElem =
                        r.span({}, text, r.span({ className: 'dw-a-clps ' + iconClass }));
                    extraClasses += ' dw-zd clearfix';
                }
                else if (!post.isApproved && !post.sanitizedHtml && !post.isPreview) {
                    // (Dupl code, for anyAvatar [503KP25])
                    var showAvatar = this.props.depth > 1 || this.props.is2dTreeColumn;
                    var author = this.props.author || // author specified here: [4WKA8YB]
                        debiki2.store_getAuthorOrMissing(store, post);
                    var anyAvatar = !showAvatar ? null : debiki2.avatar.Avatar({ user: author, origins: store });
                    headerElem =
                        r.div({ className: 'dw-p-hd' }, anyAvatar, t.d.CmtPendAppr, debiki2.timeAgo(post.createdAtMs), '.');
                    extraClasses += ' dw-p-unapproved';
                }
                else {
                    if (post.isPreview) {
                        // @ifdef DEBUG
                        debiki2.dieIf(!post.isEditing, 'TyE305RDHGR2');
                        // @endif
                        extraClasses += ' s_P-Prvw-IsEd' + (post.nr >= MinRealPostNr ? ' s_P-Prvw-Real' : '');
                    }
                    else if (!post.isApproved) {
                        var isMine = post.authorId === me.id;
                        pendingApprovalElem = r.div({ className: 'dw-p-pending-mod',
                            onClick: this.onUncollapseClick }, t.d.CmtBelowPendAppr(isMine));
                    }
                    var headerProps = _.clone(this.props);
                    headerProps.onMarkClick = this.onMarkClick;
                    // For mind maps, each node is part of the article/page (rather than a comment) so skip author.
                    headerElem = page.pageRole === 11 /* PageRole.MindMap */ ? null : page_5.PostHeader(headerProps);
                    bodyElem = page_5.PostBody(this.props);
                    if (post.isTreeCollapsed === 'Truncated' && !this.props.abbreviate) {
                        extraClasses += ' dw-x';
                        clickToExpand = r.div({ className: 'dw-x-show' }, t.d.clickToShow);
                        clickCover = r.div({ className: 'dw-x-cover' });
                    }
                }
                // For non-multireplies, we never show "In response to" for the very first reply (index 0),
                // instead we draw an arrow. For flat replies, show "In response to" inside the header instead,
                // that looks better (see PostHeader).
                var replyReceivers;
                if (!this.props.abbreviate && !isFlat && (this.props.index > 0 || post.multireplyPostNrs.length)) {
                    replyReceivers = ReplyReceivers({ store: store, post: post });
                }
                var mark = me.marksByPostId[post.nr];
                switch (mark) {
                    case YellowStarMark:
                        extraClasses += ' dw-p-mark-yellow-star';
                        break;
                    case BlueStarMark:
                        extraClasses += ' dw-p-mark-blue-star';
                        break;
                    case ManualReadMark:
                        extraClasses += ' dw-p-mark-read';
                        break;
                }
                if (debiki2.isWikiPost(post))
                    extraClasses += ' dw-wiki';
                var isSolution = debiki2.page_canBeSolved(page) && post.uniqueId === page.pageAnswerPostUniqueId;
                if (isSolution)
                    extraClasses += ' esP-solution';
                if (isFlat)
                    extraClasses += ' dw-p-flat';
                if (debiki2.post_shallRenderAsHidden(post))
                    extraClasses += ' s_P-Hdn';
                var unwantedCross;
                if (post.numUnwantedVotes) {
                    extraClasses += ' dw-unwanted dw-unwanted-' + post.numUnwantedVotes;
                    // Sync the max limit with CSS in client/app/.debiki-play.styl. [4KEF28]
                    if (post.numUnwantedVotes >= 7) {
                        extraClasses += ' dw-unwanted-max';
                    }
                    unwantedCross = r.div({ className: 'dw-unwanted-cross' });
                }
                var id = this.props.abbreviate ? undefined : 'post-' + post.nr;
                return (r.div({ className: 'dw-p ' + extraClasses, id: id,
                    onMouseEnter: this.props.onMouseEnter, onClick: this.onClick }, pendingApprovalElem, replyReceivers, headerElem, bodyElem, clickToExpand, clickCover, unwantedCross));
            }
        });
        var ReplyReceivers = debiki2.createComponent({
            displayName: 'ReplyReceivers',
            render: function () {
                var store = this.props.store;
                var page = store.currentPage;
                var multireplyClass = ' dw-mrrs'; // mrrs = multi reply receivers
                var thisPost = this.props.post;
                var repliedToPostNrs = thisPost.multireplyPostNrs;
                if (!repliedToPostNrs || !repliedToPostNrs.length) {
                    multireplyClass = '';
                    repliedToPostNrs = [thisPost.parentNr];
                }
                var receivers = [];
                for (var index = 0; index < repliedToPostNrs.length; ++index) {
                    var repliedToNr = repliedToPostNrs[index];
                    if (repliedToNr === NoPostId) {
                        // This was a reply to the whole page, happens if one clicks the "Add comment"
                        // button in the chat section, and then replies to someone too.
                        continue;
                    }
                    if (repliedToNr === BodyNr && eds.isInEmbeddedCommentsIframe) {
                        // We're replying to the blog article. There's a dummy orig post by the
                        // System user — don't show "in reply to System":
                        continue;
                    }
                    var post = page.postsByNr[repliedToNr];
                    if (!post) {
                        receivers.push(r.i({ key: repliedToNr }, 'Unknown [DwE4KFYW2]'));
                        continue;
                    }
                    var author = debiki2.store_getAuthorOrMissing(store, post);
                    var link = RepliesToArrow({ post: post, thisPost: thisPost, author: author });
                    if (receivers.length) {
                        link = r.span({ key: post.nr }, t.d._and, link);
                    }
                    receivers.push(link);
                }
                var elem = this.props.comma ? 'span' : 'div';
                return (r[elem]({ className: 'dw-rrs' + multireplyClass }, // rrs = reply receivers
                // This'll look like:  "In reply to @memah:"  followed by the reply, below.
                this.props.comma ? t.d.repliesTo : t.d.InReplyTo, receivers, ':'));
            }
        });
        function RepliesToArrow(_a) {
            var post = _a.post, thisPost = _a.thisPost, author = _a.author;
            return (r.a({ href: '#post-' + post.nr, className: 'dw-rr', key: post.nr,
                onMouseEnter: function () { return debiki2.ReactActions.highlightPost(post.nr, true); },
                onMouseLeave: function () { return debiki2.ReactActions.highlightPost(post.nr, false); },
                onClick: debiki2.utils.makeShowPostFn(thisPost.nr, post.nr) }, author.username || author.fullName, 
            // Append an up arrow to indicate that clicking the name will scroll up,
            // rather than opening an about-user dialog. ⬆ is Unicode upwards-black-arrow U+2B06.
            r.span({ className: 's_RRs_RR_Aw' }, '⬆')));
        }
        page_5.PostHeader = debiki2.createComponent({
            displayName: 'PostHeader',
            onUserClick: function (event) {
                // Dupl code [1FVBP4E]
                debiki2.morebundle.openAboutUserDialogForAuthor(this.props.post, event.target);
                event.preventDefault();
                event.stopPropagation();
            },
            onCollapseClick: function (event) {
                debiki2.ReactActions.collapseTree(this.props.post);
                event.stopPropagation();
            },
            showEditHistory: function () {
                debiki2.morebundle.openEditHistoryDialog(this.props.post.uniqueId);
            },
            render: function () {
                var props = this.props;
                var store = this.props.store;
                var page = store.currentPage;
                var me = store.me;
                var post = this.props.post;
                var abbreviate = this.props.abbreviate;
                if (!post)
                    return r.p({}, '(Post missing [DwE7IKW2])');
                var assignees = function (capitalizeClass) {
                    if (capitalizeClass === void 0) { capitalizeClass = ''; }
                    return !post.assigneeIds ? null :
                        r.span({ className: 'n_Asgd2' }, r.span({ className: 'n_Asgd2_Ttl' + capitalizeClass }, "assigned to "), // I18N
                        r.ul({ className: 'c_AsgsL' }, post.assigneeIds.map(function (patId) {
                            return r.li({ key: patId }, debiki2.UserName({ patId: patId, store: store, avoidFullName: true }));
                        })));
                };
                if (debiki2.isWikiPost(post)) {
                    var anyAssigneesCaps = assignees(' n_1stCap');
                    if (abbreviate) {
                        return r.div({ className: 'dw-p-hd' }, t.Wiki, 
                        // How does this look? Currently always null — cannot yet [assign_comments].
                        anyAssigneesCaps);
                    }
                    if (this.props.is2dTreeColumn || post.isTreeCollapsed || post.nr === BodyNr) {
                        return anyAssigneesCaps;
                    }
                    // Show a collapse button for this wiki post, but no author name because this is
                    // a wiki post contributed to by everyone.
                    return rFr({}, r.span({ className: 'dw-a-clps icon-up-open', onClick: this.onCollapseClick }), 
                    // How does this look? Currently null — cannot [assign_comments].
                    anyAssigneesCaps);
                }
                var linkFn = abbreviate ? 'span' : 'a';
                var anySolutionIcon = debiki2.page_canBeSolved(page) &&
                    post.uniqueId === page.pageAnswerPostUniqueId
                    ? r.span({ className: 'esH_solution icon-ok-circled', title: t.Solution })
                    : null;
                // (Dupl code, for anyAvatar [503KP25])
                var author = this.props.author || // author specified here: [4WKA8YB]
                    debiki2.store_getAuthorOrMissing(store, post);
                var showAvatar = this.props.depth > 1 || this.props.is2dTreeColumn;
                var anyAvatar = !showAvatar ? null : debiki2.avatar.Avatar({ user: author, origins: store });
                var editInfo = null;
                if (post.lastApprovedEditAtMs) {
                    var editedAt = debiki2.prettyLetterTimeAgo(post.lastApprovedEditAtMs);
                    //var byVariousPeople = post.numEditors > 1 ? ' by various people' : null;
                    editInfo =
                        r.span({ onClick: this.showEditHistory, className: 'esP_viewHist icon-edit',
                            title: t.d.ClickViewEdits }, editedAt);
                }
                var anyPin;
                if (post.pinnedPosition) {
                    anyPin =
                        r[linkFn]({ className: 'dw-p-pin icon-pin' });
                }
                var hashPostNr;
                if (post.nr !== TitleNr && post.nr !== BodyNr) {
                    if (debiki.debug) {
                        hashPostNr = r.span({ className: 'dw-p-link' }, '#' + post.nr);
                    }
                }
                var bookmark; /*
                if (true) { // me.bookmarks[post.uniqueId]) {
                  let starClass = ' icon-bookmark-empty';
                  bookmark =
                    // The outer -click makes the click area larger, because the marks are small.
                    r.span({ className: 's_P_H_Bm dw-p-mark-click', onClick: this.props.onMarkClick },
                      r.span({ className: 'dw-p-mark icon-bookmark' + starClass }));
                } */
                var unreadMark = !me.isLoggedIn || debiki2.me_hasRead(me, post) ? null :
                    r.span({ className: 's_P_H_Unr icon-circle' });
                var isPageBody = post.nr === BodyNr;
                var by = isPageBody ? r.span({ className: 'n_By' }, t.d.By) : '';
                var userName = debiki2.UserName({ user: author, store: store, makeLink: !abbreviate,
                    onClick: abbreviate ? undefined : this.onUserClick });
                var isBodyPostClass = isPageBody ? ' dw-ar-p-hd' : '';
                var is2dColumn = page.horizontalLayout && this.props.depth === 1;
                var collapseIcon = is2dColumn ? 'icon-left-open' : 'icon-up-open';
                var isFlat = this.props.isFlat;
                var toggleCollapsedButton = is2dColumn || abbreviate || post.isTreeCollapsed || isPageBody || isFlat
                    ? null
                    : r.span({ className: 'dw-a-clps ' + collapseIcon, onClick: this.onCollapseClick });
                // For flat replies, show "In response to" here inside the header instead,
                // rather than above the header — that looks better.
                var inReplyTo;
                if (abbreviate) {
                    // We'd like to show as little as possible: just an excerpt. So skip "replies to".
                }
                else if (!isFlat) {
                    // An arrow already shows what this post replies to.
                }
                else if (
                // If replying to the orig post, that's the "default" thing to do, so then
                // don't shwo any "replies to" text.
                (post.parentNr && post.parentNr != BodyNr) || post.multireplyPostNrs.length) {
                    inReplyTo = ReplyReceivers({ store: store, post: post, comma: true });
                }
                // Maybe always add these classes, in TagList() instead?  [alw_tag_type]
                var patTagList = debiki2.TagList({ className: 'n_TagL-Pat', forPat: author, store: store });
                var postTagList = debiki2.TagListLive({ className: 'n_TagL-Po', forPost: post, store: store, live: props.live });
                var timeClass = 'esP_H_At';
                return (r.div({ className: 'dw-p-hd' + isBodyPostClass }, r.span({ className: 'n_ByAt' }, anyPin, hashPostNr, anySolutionIcon, anyAvatar, by, userName, patTagList, 
                // COULD add "Posted on ..." tooltip.
                r.span({ className: 'n_EdAt' }, post.isPreview ? null : (this.props.exactTime ?
                    debiki2.timeExact(post.createdAtMs, timeClass) : debiki2.timeAgo(post.createdAtMs, timeClass)), editInfo), inReplyTo, assignees(), toggleCollapsedButton, bookmark, unreadMark, this.props.stuffToAppend), postTagList));
            }
        });
        // Returns the first maxCharsToShow chars, but don't count chars inside tags, e.g.
        // <a href="......."> because a URL can sometimes be 120 chars and then nothing
        // would be shown at all (if we counted the tokens inside the <a> tag).
        // Do this by parsing the sanitized html and then calling text().
        function abbreviateSanitizedHtml(html) {
            var node = debiki2.$h.wrapParseHtml(html);
            var text = node.textContent;
            var startOfText = text.substr(0, abbrContentLength);
            if (startOfText.length === abbrContentLength) {
                startOfText += '....';
            }
            return startOfText.trim();
        }
        // UX COULD update length, if screen rotated/zoomed.
        var abbrContentLength = isServerSide() ? 60 : (screen.height < 300 ? 60 : // or min(width, height)?
            (Math.min(screen.width, screen.height) < 500 ? 90 : 120));
        page_5.PostBody = debiki2.createComponent({
            displayName: 'PostBody',
            loadAndShow: function (event) {
                event.preventDefault();
                var post = this.props.post;
                debiki2.ReactActions.loadAndShowPost(post.nr);
            },
            render: function () {
                var post = this.props.post;
                // @ifdef DEBUG
                // There should be something to see, unless the post is hidden or not yet
                // approved. (We do load unapproved posts [show_empty_unapr]
                // and show "placeholders" indicating that there is a post, and that it's
                // not yet approved — but not who wrote it or its contents.)
                debiki2.dieIf(post.isApproved &&
                    !post.isBodyHidden &&
                    !debiki2.post_isDeletedOrCollapsed(post) &&
                    debiki2.isNullOrUndefined(post.sanitizedHtml) &&
                    debiki2.isNullOrUndefined(post.unsafeSource), "No post.sanitizedHtml or unsafeSource: ".concat(debiki2.toStr(post), " [TyE35RK3JH5]"));
                debiki2.dieIf(post.isForDraftNr && debiki2.isNullOrUndefined(post.unsafeSource), 'TyE2KSTH047A');
                debiki2.dieIf(post.isEditing && debiki2.isNullOrUndefined(post.sanitizedHtml), 'TyE8WT6SR2T');
                debiki2.dieIf(post.summarize && debiki2.isNullOrUndefined(post.summary), 'TyE75FKDTT035');
                // @endif
                if (post.summarize) {
                    return (r.div({ className: 'dw-p-bd' }, r.div({ className: 'dw-p-bd-blk' }, r.p({}, post.summary))));
                }
                if (post.isPreview && post.isForDraftNr && !post.isEditing) {
                    return r.pre({ className: 's_P_Prvw' }, post.unsafeSource); // [DFTSRC]
                }
                var body;
                if (debiki2.post_shallRenderAsHidden(post)) {
                    body = r.div({ className: 'dw-p-bd-blk', onClick: this.loadAndShow }, t.d.PostHiddenClickShow);
                }
                else if (this.props.abbreviate) {
                    if (this.cachedAbbrevTextSource !== post.sanitizedHtml) {
                        this.cachedAbbrevText = abbreviateSanitizedHtml(post.sanitizedHtml);
                        this.cachedAbbrevTextSource = post.sanitizedHtml;
                    }
                    body = r.div({ className: 'dw-p-bd-blk' }, this.cachedAbbrevText);
                }
                else {
                    body = r.div({ className: 'dw-p-bd-blk',
                        dangerouslySetInnerHTML: { __html: post.sanitizedHtml } });
                }
                return (r.div({ className: 'dw-p-bd' }, 
                // Beause of evil magic, without `null`, then `body` is ignored and the post becomes
                // empty, iff it was summarized and you clicked it to show it.
                // COULD test to remove `null` after having upgraded to React 0.13.
                null, body));
            }
        });
        function horizontalCss(horizontal) {
            return horizontal ? ' dw-hz' : '';
        }
        // Could move elsewhere? Where?
        function makePageClosedTooltipText(pageRole) {
            switch (pageRole) {
                case 10 /* PageRole.Question */:
                    return t.d.TooltipQuestClosedNoAnsw;
                case 13 /* PageRole.ToDo */:
                    return "This To-Do has been closed. It probably won't be done or fixed.";
                default:
                    return t.d.TooltipTopicClosed;
            }
        }
        page_5.makePageClosedTooltipText = makePageClosedTooltipText;
        //------------------------------------------------------------------------------
    })(page = debiki2.page || (debiki2.page = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/scroll-buttons.ts  */ /* Buttons that go to the next/previous post or backwards and forwards.
 * Copyright (C) 2014-2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../../../node_modules/@types/keymaster/index.d.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../widgets.ts" />
/// <reference path="../utils/DropdownModal.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var page;
    (function (page_6) {
        //------------------------------------------------------------------------------
        var keymaster = window['keymaster'];
        var r = ReactDOMFactories;
        var calcScrollIntoViewCoordsInPageColumn = debiki2.utils.calcScrollIntoViewCoordsInPageColumn;
        page_6.addVisitedPosts = _.noop;
        page_6.addVisitedPositionAndPost = _.noop;
        page_6.addVisitedPosition = _.noop;
        page_6.clearScrollHistory = _.noop;
        var WhereTop = 'T';
        var WhereReplies = 'R';
        var WhereComments = 'C';
        var WhereBottom = 'B';
        var SmallDistancePx = 5;
        function scrollToTop(addBackStep) {
            if (addBackStep !== false) {
                page_6.addVisitedPosition(WhereTop);
            }
            debiki2.utils.scrollIntoViewInPageColumn('#thePageTop');
        }
        function scrollToReplies(addBackStep) {
            if (addBackStep !== false) {
                page_6.addVisitedPosition(WhereReplies);
            }
            debiki2.utils.scrollIntoViewInPageColumn(
            // dupl code [5UKP20]
            '.dw-depth-0 > .dw-p-as', { marginTop: 65, marginBottom: 9999 });
        }
        function scrollToComments(addBackStep) {
            if (addBackStep !== false) {
                page_6.addVisitedPosition(WhereComments);
            }
            debiki2.utils.scrollIntoViewInPageColumn(
            // dupl code [5UKP20]
            '.s_PgSct-Prg', { marginTop: 65, marginBottom: 9999 });
        }
        function scrollToBottom(addBackStep) {
            if (addBackStep !== false) {
                page_6.addVisitedPosition(WhereBottom);
            }
            // dupl code [5UKP20]
            debiki2.utils.scrollIntoViewInPageColumn('#thePageBottom');
        }
        var scrollButtonsDialog;
        function openScrollButtonsDialog(openButton) {
            if (!scrollButtonsDialog) {
                scrollButtonsDialog = ReactDOM.render(ScrollButtonsDropdownModal(), debiki2.utils.makeMountNode());
            }
            scrollButtonsDialog.openAt(openButton);
        }
        function closeAnyScrollButtons() {
            if (scrollButtonsDialog) {
                scrollButtonsDialog.close();
            }
        }
        page_6.closeAnyScrollButtons = closeAnyScrollButtons;
        page_6.ScrollButtons = debiki2.createClassAndFactory({
            getInitialState: function () {
                return {
                    visitedPosts: [],
                    currentVisitedPostIndex: -1,
                    isShown: false,
                };
            },
            componentDidMount: function () {
                var _this = this;
                // Similar code here: [5KFEWR7]
                // COULD_OPTIMIZE? Perhaps sync all those time callbacks, so done in same reflow?
                setTimeout(this.showOrHide, 250);
                page_6.addVisitedPosts = this.addVisitedPosts;
                page_6.addVisitedPositionAndPost = this.addVisitedPositionAndPost;
                page_6.addVisitedPosition = this.addVisitedPosition;
                page_6.clearScrollHistory = function () { return _this.clearScrollHistory(); };
                keymaster('b', this.goBack);
                keymaster('f', this.goForward);
                keymaster('1', scrollToTop);
                keymaster('2', scrollToReplies);
                keymaster('3', scrollToComments);
                keymaster('4', scrollToBottom);
            },
            componentWillUnmount: function () {
                this.isGone = true;
                page_6.addVisitedPosts = _.noop;
                page_6.addVisitedPositionAndPost = _.noop;
                page_6.addVisitedPosition = _.noop;
                keymaster.unbind('b', 'all');
                keymaster.unbind('f', 'all');
                keymaster.unbind('1', 'all');
                keymaster.unbind('2', 'all');
                keymaster.unbind('3', 'all');
            },
            showOrHide: function () {
                if (this.isGone)
                    return;
                var pageColumnElem = debiki2.$byId('esPageScrollable');
                var pageHasScrollbars = pageColumnElem.scrollHeight > window.innerHeight;
                if (this.state.isShown !== pageHasScrollbars) {
                    this.setState({ isShown: pageHasScrollbars });
                }
                setTimeout(this.showOrHide, 500);
            },
            clearScrollHistory: function () {
                if (this.isGone)
                    return;
                this.setState({
                    visitedPosts: [],
                    currentVisitedPostIndex: -1,
                });
            },
            // Crazy with number | string. Oh well, fix later [3KGU02] CLEAN_UP
            addVisitedPosts: function (currentPostId, nextPostNr) {
                var visitedPosts = this.state.visitedPosts; // TODO clone, don't modify visitedPosts directly below [immutablejs]
                visitedPosts.splice(this.state.currentVisitedPostIndex + 1, 999999);
                // Don't duplicate the last post, and also remove it if it is empty, which happens when
                // a position without any post is added via this.addVisitedPosition().
                var lastPost = visitedPosts[visitedPosts.length - 1];
                var lastPosHasCoords;
                if (lastPost) {
                    lastPosHasCoords = _.isNumber(lastPost.windowLeft) && _.isNumber(lastPost.windowTop);
                    var lastPosHasPostNr = !debiki2.isNullOrUndefined(lastPost.postNr);
                    var isSameAsCurrent = lastPosHasPostNr && lastPost.postNr === currentPostId;
                    var isNothing = !lastPosHasPostNr && !lastPosHasCoords;
                    if (isSameAsCurrent || isNothing) {
                        visitedPosts.splice(visitedPosts.length - 1, 1);
                        lastPost = undefined;
                        lastPosHasCoords = undefined;
                    }
                }
                var currentPos = {
                    windowLeft: debiki2.$byId('esPageColumn').scrollLeft,
                    windowTop: debiki2.$byId('esPageColumn').scrollTop,
                    postNr: currentPostId
                };
                var lastPosTop = lastPost ? lastPost.windowTop : undefined;
                var lastPosLeft = lastPost ? lastPost.windowLeft : undefined;
                if (lastPost && _.isString(lastPost.postNr)) {
                    lastPosLeft = _.isNumber(lastPosLeft) ? lastPosLeft : currentPos.windowLeft;
                    switch (lastPost.postNr) {
                        case WhereTop:
                            lastPosTop = 0;
                            break;
                        case WhereBottom:
                            // DUPL CODE, fix  [5UKP20]
                            lastPosTop = calcScrollIntoViewCoordsInPageColumn('#thePageBottom').desiredParentTop;
                            break;
                        case WhereReplies:
                            // DUPL CODE, fix  [5UKP20]
                            lastPosTop =
                                calcScrollIntoViewCoordsInPageColumn('.dw-depth-0 > .dw-p-as', { marginTop: 65, marginBottom: 9999 }).desiredParentTop;
                            break;
                        case WhereComments:
                            // DUPL CODE, fix  [5UKP20]
                            lastPosTop =
                                calcScrollIntoViewCoordsInPageColumn('.s_PgSct-Prg', { marginTop: 65, marginBottom: 9999 }).desiredParentTop;
                            break;
                        default: debiki2.die('EsE2YWK4X8');
                    }
                }
                if (debiki2.isNullOrUndefined(currentPostId) && lastPost && _.isNumber(lastPost.postNr) &&
                    !_.isNumber(lastPosTop)) {
                    var post = debiki2.$byId('post-' + lastPost.postNr);
                    var scrollCoords = calcScrollIntoViewCoordsInPageColumn(post);
                    lastPosTop = scrollCoords.desiredParentTop;
                    lastPosLeft = scrollCoords.desiredParentLeft;
                }
                if (_.isNumber(currentPostId) || !_.isNumber(lastPosTop)) {
                    visitedPosts.push(currentPos);
                }
                else {
                    // If currentPos is almost the same as lastPost, skip currentPos.
                    var distX = currentPos.windowLeft - lastPosLeft;
                    var distY = currentPos.windowTop - lastPosTop;
                    var distSquared = distX * distX + distY * distY;
                    // 60 pixels is nothing, only add new pos if has scrolled further away than that.
                    if (distSquared > 60 * 60) { // COULD use 160 px instead if wide screen
                        visitedPosts.push(currentPos);
                    }
                }
                visitedPosts.push({ postNr: nextPostNr });
                this.setState({
                    visitedPosts: visitedPosts,
                    currentVisitedPostIndex: visitedPosts.length - 1,
                });
            },
            addVisitedPositionAndPost: function (nextPostNr) {
                this.addVisitedPosts(null, nextPostNr);
            },
            addVisitedPosition: function (whereNext) {
                this.addVisitedPosts(null, whereNext);
            },
            canGoBack: function () {
                return this.state.currentVisitedPostIndex >= 1;
            },
            canPerhapsGoForward: function () {
                return this.state.currentVisitedPostIndex >= 0 &&
                    this.state.currentVisitedPostIndex < this.state.visitedPosts.length - 1;
            },
            openScrollButtonsDialog: function (event) {
                openScrollButtonsDialog(event.target);
            },
            goBack: function () {
                if (!this.canGoBack())
                    return;
                var backPost = this.state.visitedPosts[this.state.currentVisitedPostIndex - 1];
                var nextIndex = this.state.currentVisitedPostIndex - 1;
                this.setState({
                    currentVisitedPostIndex: nextIndex,
                });
                var pageColumnElem = debiki2.$byId('esPageColumn');
                if (_.isNumber(backPost.windowLeft)) {
                    if (backPost.windowLeft === pageColumnElem.scrollLeft &&
                        backPost.windowTop === pageColumnElem.scrollTop) {
                        // Apparently the user has already scrolled back to the previous location, manually,
                        // and then clicked Back. A bit weird. Could perhaps scroll to the next 'visitedPosts'
                        // instead, but simpler to just:
                        return;
                    }
                    // Restore the original window top and left coordinates, so the Back button
                    // really moves back to the original position.
                    smoothScroll(pageColumnElem, backPost.windowLeft, backPost.windowTop);
                    if (backPost.postNr) {
                        debiki2.ReactActions.loadAndShowPost(backPost.postNr);
                    }
                }
                else if (_.isString(backPost.postNr)) { // crazy, oh well [3KGU02]
                    switch (backPost.postNr) {
                        case WhereTop:
                            scrollToTop(false);
                            break;
                        case WhereReplies:
                            scrollToReplies(false);
                            break;
                        case WhereComments:
                            scrollToComments(false);
                            break;
                        case WhereBottom:
                            scrollToBottom(false);
                            break;
                        default: debiki2.die('EsE4KGU02');
                    }
                }
                else {
                    debiki2.ReactActions.loadAndShowPost(backPost.postNr);
                }
            },
            // Only invokable via the 'F' key — I rarely go forwards, and a button makes the UI to cluttered.
            goForward: function () {
                if (!this.canPerhapsGoForward())
                    return;
                var forwPost = this.state.visitedPosts[this.state.currentVisitedPostIndex + 1];
                if (forwPost.postNr) {
                    debiki2.ReactActions.loadAndShowPost(forwPost.postNr);
                }
                else if (forwPost.windowTop) {
                    smoothScroll(debiki2.$byId('esPageColumn'), forwPost.windowLeft, forwPost.windowTop);
                }
                else {
                    // Ignore. Empty objects are added when the user uses the Top/Replies/Chat/End
                    // naviation buttons.
                    return;
                }
                this.setState({
                    currentVisitedPostIndex: this.state.currentVisitedPostIndex + 1,
                });
            },
            render: function () {
                if (!this.state.isShown)
                    return null;
                var openScrollMenuButton = debiki2.Button({ className: 'esScrollBtns_menu', ref: 'scrollMenuButton',
                    onClick: this.openScrollButtonsDialog }, t.sb.Scroll);
                // UX: Don't show num steps one can scroll back, don't: "Back (4)" — because people
                // sometimes think 4 is a post number.
                // UX: Don't show the 'Back' button in disabled mode, if back list is empty.
                // Instead, hide the btn, because sometimes people think Back means
                // "navigate back to the prev page".  Hopefully, once they've scroll-jumped a bit,
                // and the Back btn appears, they might realize that "back" means *scrolling* back?
                var scrollBackButton = !this.canGoBack() ? null :
                    debiki2.Button({ className: 'esScrollBtns_back', onClick: this.goBack,
                        title: t.sb.BackExpl }, r.span({ className: 'esScrollBtns_back_shortcut' }, t.sb.Back_1), t.sb.Back_2);
                return (r.div({ className: 'esScrollBtns_fixedBar' }, r.div({ className: 'container' }, r.div({ className: 'esScrollBtns' }, openScrollMenuButton, scrollBackButton))));
            }
        });
        // some dupl code [6KUW24]
        var ScrollButtonsDropdownModal = debiki2.createComponent({
            getInitialState: function () {
                return {
                    isOpen: false,
                    enableGotoTopBtn: false,
                    enableGotoEndBtn: true,
                    store: debiki2.ReactStore.allData(),
                };
            },
            onChange: function () {
                this.setState({ store: debiki2.ReactStore.allData() });
            },
            openAt: function (at) {
                var rect = at.getBoundingClientRect();
                var calcCoords = calcScrollIntoViewCoordsInPageColumn;
                var bottomCoords = calcCoords('#thePageBottom', {
                    marginTop: SmallDistancePx,
                    marginBottom: -SmallDistancePx,
                });
                this.setState({
                    isOpen: true,
                    atX: rect.left - 160,
                    atY: rect.bottom,
                    enableGotoTopBtn: debiki2.$byId('esPageColumn').scrollTop > SmallDistancePx,
                    enableGotoEndBtn: bottomCoords.needsToScroll,
                    enableGotoRepliesBtn: calcCoords('.dw-depth-0 > .dw-p-as', { marginTop: 65, marginBottom: 200 }).needsToScroll,
                    enableGotoCommentsBtn: calcCoords('.s_PgSct', { marginTop: 65, marginBottom: 200 }).needsToScroll,
                });
            },
            close: function () {
                this.setState({ isOpen: false });
            },
            scrollToTop: function () {
                scrollToTop();
                this.close();
            },
            scrollToReplies: function () {
                scrollToReplies();
                this.close();
            },
            scrollToComments: function () {
                scrollToComments();
                this.close();
            },
            scrollToEnd: function () {
                scrollToBottom();
                this.close();
            },
            render: function () {
                var state = this.state;
                var store = this.state.store;
                var page = store.currentPage;
                var pageRole = page.pageRole;
                var isChat = debiki2.page_isChat(pageRole);
                var neverHasReplies = pageRole === 1 /* PageRole.CustomHtmlPage */ || pageRole === 2 /* PageRole.WebPage */ ||
                    debiki2.isSection(pageRole);
                var content;
                if (state.isOpen) {
                    var scrollToTopButton = isChat ? null :
                        debiki2.PrimaryButton({ className: 'esScrollDlg_Up', onClick: this.scrollToTop, title: t.sb.PgTopHelp,
                            disabled: !state.enableGotoTopBtn }, r.span({}, r.span({ className: 'esScrollDlg_Up_Arw' }, '➜'), t.sb.PgTop));
                    var scrollToRepliesButton = isChat || neverHasReplies ? null :
                        debiki2.PrimaryButton({ className: 'esScrollDlg_Replies', onClick: this.scrollToReplies,
                            title: t.sb.ReplHelp, disabled: !state.enableGotoRepliesBtn }, r.span({ className: 'icon-reply' }, t.sb.Repl));
                    // Old. Progress notes are deprecated.
                    // Later, instead, a Timeline button.  [prgr_chat_sect]
                    var scrollToCommentsButton = null; /* isChat || neverHasReplies ? null :
                      PrimaryButton({ className: 'esScrollDlg_Comments', onClick: this.scrollToComments,
                          title: t.sb.ProgrHelp, disabled: !state.enableGotoCommentsBtn },
                        r.span({ className: 'icon-comment' }),
                        r.span({ className: 'esScrollDlg_Comments_Text' }, t.sb.Progr));
                        */
                    var scrollToEndButton = debiki2.PrimaryButton({ className: 'esScrollDlg_Down',
                        onClick: this.scrollToEnd, title: t.sb.BtmHelp,
                        disabled: !state.enableGotoEndBtn }, r.span({}, r.span({ className: 'esScrollDlg_Down_Arw' }, '➜'), isChat ? t.sb.PgBtm : t.sb.Btm));
                    var shortcutsArray = [];
                    if (scrollToTopButton)
                        shortcutsArray.push("1");
                    if (scrollToRepliesButton)
                        shortcutsArray.push("2");
                    if (scrollToCommentsButton)
                        shortcutsArray.push("3");
                    if (scrollToEndButton)
                        shortcutsArray.push("4");
                    var shortcutsText = shortcutsArray.join(", ");
                    content =
                        r.div({}, r.p({ className: 'esScrollDlg_title' }, t.sb.ScrollToC), scrollToTopButton, scrollToRepliesButton, scrollToCommentsButton, scrollToEndButton, r.p({ className: 'esScrollDlg_shortcuts' }, t.KbdShrtcsC, r.b({}, shortcutsText), t.sb.Kbd_1, r.b({}, "B"), t.sb.Kbd_2)); // ", and B to scroll back"
                }
                // (allowFullWidth, because this dialog isn't tall, so will be space above/below to click
                // to close.)
                return (debiki2.utils.DropdownModal({ show: state.isOpen, onHide: this.close, atX: state.atX, atY: state.atY,
                    pullLeft: true, className: 'esScrollDlg', allowFullWidth: true }, content));
            }
        });
        //------------------------------------------------------------------------------
    })(page = debiki2.page || (debiki2.page = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=tcqwn list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/forum/forum.ts  */ /*
 * Copyright (c) 2015-2021 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="../links.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/window-zoom-resize-mixin.ts" />
/// <reference path="../util/ExplainingDropdown.ts" />
/// <reference path="../Server.ts" />
/// <reference path="../ServerApi.ts" />
/// <reference path="../page/discussion.ts" />
/// <reference path="../page/scroll-buttons.ts" />
/// <reference path="../widgets.ts" />
/// <reference path="../login/login-if-needed.ts" />
/// <reference path="../more-bundle-not-yet-loaded.ts" />
/// <reference path="../editor-bundle-not-yet-loaded.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var forum;
    (function (forum) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        var ModalDropdownButton = debiki2.utils.ModalDropdownButton;
        var ExplainingListItem = debiki2.util.ExplainingListItem;
        var HelpMessageBox = debiki2.help.HelpMessageBox;
        /** Keep in sync with app/controllers/ForumController.NumTopicsToList. */
        var NumNewTopicsPerRequest = 40;
        var FilterShowAll = 'ShowAll';
        var FilterShowWaiting = 'ShowWaiting';
        var FilterShowDeleted = 'ShowDeleted';
        forum.ForumScrollBehavior = {
            updateScrollPosition: function (position, actionType) {
                // Never change scroll position when switching between last/top/categories
                // in the forum. Later on I might find this behavior useful:
                //   https://github.com/rackt/react-router/blob/master/behaviors/ImitateBrowserBehavior.js
                //   https://github.com/rackt/react-router/blob/master/docs/api/components/Route.md#ignorescrollbehavior
                //   https://github.com/rackt/react-router/blob/master/docs/api/create.md#scrollbehavior
                //   https://github.com/rackt/react-router/pull/388
                return;
            }
        };
        var lastScrollYByPath = {};
        var scrollToWhenCommentsLoaded;
        function scrollToLastPositionSoon() {
            var resetTo = scrollToWhenCommentsLoaded || 0;
            scrollToWhenCommentsLoaded = 0;
            function resetScroll() {
                debiki2.$byId('esPageColumn').scrollTop = resetTo;
            }
            // If doesn't wait some millis before resetting scroll, then, maybe 1 in 5 times, the browser
            // somehow scrolls to scrollTop = 0 = page top (it does even *before* a 0ms timeout). TyT5WG7AB02
            // The browser still does — so reset twice: Once soon, looks better. And once more just in case.
            setTimeout(resetScroll, 40);
            setTimeout(resetScroll, 160);
        }
        forum.ForumComponent = createReactClass({
            displayName: 'ForumComponent',
            mixins: [debiki2.StoreListenerMixin, debiki2.utils.PageScrollMixin],
            getInitialState: function () {
                var store = debiki2.ReactStore.allData();
                var _a = this.isPageNarrowWide(store), useNarrowLayout = _a[0], useWideLayout = _a[1];
                return {
                    store: store,
                    topicsInStoreMightBeOld: false,
                    useNarrowLayout: useNarrowLayout,
                    useWideLayout: useWideLayout,
                    topPeriod: 5 /* TopTopicsPeriod.Default */,
                };
            },
            onChange: function () {
                this.setState({
                    store: debiki2.ReactStore.allData(),
                    // Now some time has passed since this page was loaded, so:
                    topicsInStoreMightBeOld: true,
                });
            },
            componentDidMount: function () {
                var props = this.props;
                var state = this.state;
                debiki2.ReactActions.maybeLoadAndShowNewPage(state.store, props.history, props.location);
                scrollToWhenCommentsLoaded = lastScrollYByPath[props.location.pathname] || 0;
                lastScrollYByPath = {};
                // Dupl code [5KFEWR7]
                this.timerHandle = setInterval(this.checkSizeChangeLayout, 500);
            },
            componentWillUnmount: function () {
                this.isGone = true;
                clearInterval(this.timerHandle);
            },
            onScroll: function () {
                // Remember scroll only for the current sort order, otherwise, if there's a scroll position
                // remembered for each possible combination of categories and sort orders, the user will get
                // confused, because hen won't remember that stuff, henself, and wonder "why not starts at top?".
                var props = this.props;
                lastScrollYByPath = {};
                lastScrollYByPath[props.location.pathname] = debiki2.$byId('esPageColumn').scrollTop;
            },
            checkSizeChangeLayout: function () {
                var state = this.state;
                // Dupl code [5KFEWR7]
                if (this.isGone)
                    return;
                var _a = this.isPageNarrowWide(), useNarrowLayout = _a[0], useWideLayout = _a[1];
                if (useNarrowLayout !== state.useNarrowLayout ||
                    useWideLayout !== state.useWideLayout) {
                    this.setState({ useNarrowLayout: useNarrowLayout, useWideLayout: useWideLayout });
                }
            },
            isPageNarrowWide: function (store) {
                var state = this.state;
                var width = debiki2.store_getApproxPageWidth(store || state.store);
                return [width <= UseNarrowForumLayoutMaxWidth, UseWideForumLayoutMinWidth <= width];
            },
            setTopPeriod: function (topPeriod) {
                this.setState({ topPeriod: topPeriod });
            },
            setSortOrder: function (sortOrder, remember, slashSlug) {
                var props = this.props;
                var state = this.state;
                var explSetSortOrder = remember &&
                    // If it's the same, then we're toggling off the explicitly set sort order.
                    sortOrder !== state.explSetSortOrder ? sortOrder : null;
                var newState = { explSetSortOrder: explSetSortOrder };
                this.setState(newState);
                var _a = this.getForumPathAndRoutes(), forumPath = _a[0], routes = _a[1];
                // @ifdef DEBUG
                var currentSlug = routes[1] || '';
                if (slashSlug && currentSlug) {
                    debiki2.dieIf('/' + currentSlug !== slashSlug, 'TyE603MSEJ5');
                }
                // @endif
                props.history.push({
                    pathname: forumPath + sortOrder + slashSlug,
                    search: props.location.search,
                });
            },
            getActiveCategory: function (currentCategorySlug) {
                var state = this.state;
                var store = state.store;
                var forumPage = store.currentPage;
                var activeCategory;
                var activeCategorySlug = currentCategorySlug;
                if (activeCategorySlug) {
                    activeCategory = _.find(store.currentCategories, function (category) {
                        return category.slug === activeCategorySlug;
                    });
                    // If `activeCategory` is null here, that's probably because the category is
                    // included in user specific data that hasn't been activated yet. (6KEWM02)
                }
                else {
                    activeCategory = {
                        name: t.fb.AllCats,
                        id: forumPage.categoryId,
                        isForumItself: true,
                        newTopicTypes: [],
                        slug: '',
                        description: '',
                        // Whatever: (cannot create topics in this cat anyway)
                        defaultTopicType: 12 /* PageRole.Discussion */,
                    };
                }
                return activeCategory;
            },
            setCategory: function (newCatSlug, newCat) {
                // @ifdef DEBUG
                debiki2.dieIf(newCatSlug && newCat && newCatSlug !== newCat.slug, 'TyE4MJLC027');
                // @endif
                var state = this.state;
                var _a = this.getForumPathAndRoutes(), forumPath = _a[0], routes = _a[1];
                var sortOrderRoute = routes[0];
                var nextPath = sortOrderRoute === RoutePathCategories ?
                    RoutePathLatest : state.explSetSortOrder || RoutePathLatest;
                // Do-it votes categories are sorted by popular-first (unless pat has
                // clicked another sort order button).
                if (!state.explSetSortOrder && nextPath !== RoutePathTop &&
                    newCat && newCat.doItVotesPopFirst) {
                    nextPath = RoutePathTop;
                }
                var slashSlug = newCatSlug ? '/' + newCatSlug : '';
                var props = this.props;
                props.history.push({
                    pathname: forumPath + nextPath + slashSlug,
                    search: props.location.search,
                });
            },
            editCategory: function () {
                var _this = this;
                var _a = this.getForumPathAndRoutes(), forumPath = _a[0], routes = _a[1];
                var currentCategorySlug = routes[1];
                var activeCategory = this.getActiveCategory(currentCategorySlug);
                debiki2.morebundle.getEditCategoryDialog(function (dialog) {
                    if (_this.isGone)
                        return;
                    dialog.open(activeCategory.id, function (serverResponse) {
                        var slugAfter = serverResponse.newCategorySlug;
                        if (slugAfter !== currentCategorySlug) {
                            _this.setCategory(slugAfter); // [7AFDW01]
                        }
                    });
                });
            },
            getForumPathAndRoutes: function () {
                var props = this.props;
                var state = this.state;
                var store = state.store;
                var page = store.currentPage;
                var forumPath = page.pagePath.value;
                // This is done this way because of how React-Router v3 was working. It was simpler
                // do do this than to totally-rewrite. Maybe refactor-&-simplify some day?
                // Remove e.g. a '/forum/' prefix to the 'top/ideas' or 'new/bugs' whatever suffix:
                var pathRelForumPage = props.location.pathname.replace(forumPath, '');
                // This becomes e.g. ['new', 'ideas']:
                var routes = pathRelForumPage.split('/');
                return [forumPath, routes];
            },
            render: function () {
                var _this = this;
                var state = this.state;
                var store = state.store;
                var page = debiki2.store_curPage(store);
                if (page.pageRole !== 7 /* PageRole.Forum */) {
                    // We're navigating from a discussion topic to the forum page (= topic list page).
                    // The url was just updated to show the addr of the forum page, but we're not yet
                    // done updating React's state: `page` is still the discussion topic. Wait
                    // until `page` becomes the forum page.
                    return r.div({ className: 'container dw-forum' }, t.Loading + ' [TyM2EPKB04]');
                }
                var _a = this.getForumPathAndRoutes(), forumPath = _a[0], routes = _a[1];
                var sortOrderRoute = routes[0];
                switch (sortOrderRoute) {
                    case RoutePathLatest: break;
                    case RoutePathNew: break;
                    case RoutePathTop: break;
                    case RoutePathCategories: break;
                    default:
                        return r.p({}, "Bad route in the URL: '".concat(sortOrderRoute, "' [EdE2WKB4]"));
                }
                var currentCategorySlug = routes[1];
                var activeCategory = this.getActiveCategory(currentCategorySlug);
                var layout = page.pageLayout;
                /* Remove this? Doesn't look nice & makes the categories page look complicated.
                var topsAndCatsHelp = this.props.sortOrderRoute === RoutePathCategories
                  ? HelpMessageBox({ message: topicsAndCatsHelpMessage, className: 'esForum_topicsCatsHelp' })
                  : null; */
                var linkWapper = debiki2.store_isFeatFlagOn(store, 'ffNav') ? r.nav : (debiki2.store_isFeatFlagOn(store, 'ffAside') ? r.aside : (debiki2.store_isFeatFlagOn(store, 'ffSection') ? r.section : r.div));
                var rootSlash = forumPath;
                var childRoutes = r.div({}, debiki2.Switch({}, debiki2.RedirToNoSlash({ path: rootSlash + RoutePathLatest + '/' }), debiki2.RedirToNoSlash({ path: rootSlash + RoutePathNew + '/' }), debiki2.RedirToNoSlash({ path: rootSlash + RoutePathTop + '/' }), debiki2.RedirToNoSlash({ path: rootSlash + RoutePathCategories + '/' }), 
                // [React_Router_v51] skip render(), use hooks and useParams instead.
                debiki2.Route({ path: rootSlash + RoutePathCategories, exact: true, strict: true,
                    render: function (routerProps) {
                        var childProps = __assign({ store: store, forumPath: forumPath, activeCategory: activeCategory, isCategoriesRoute: true, sortOrderRoute: sortOrderRoute, setSortOrder: _this.setSortOrder, explSetSortOrder: state.explSetSortOrder, queryParams: parseQueryString(routerProps.location.search) }, routerProps);
                        // Don't use <div> — then DuckDuckGo and Bing can mistake this
                        // topic/category list page, from being a contents page, and show it
                        // in the search results, instead of the real contents page.
                        // MDN: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav
                        //  >  <nav> element represents a section of a page whose purpose is
                        //  >  to provide navigation links
                        // And that's what the topic / category list is — providing links
                        // to the actual topics / categories.
                        //
                        // Configurable, for now — just trying with <nav>.
                        //
                        return linkWapper({}, // or <aside> or <section> ?
                        ForumButtons(childProps), LoadAndListCategories(childProps));
                    } }), debiki2.Route({ path: rootSlash + ':sortOrder?/:categorySlug?', strict: true,
                    render: function (routerProps) {
                        var childProps = __assign({ // [.btn_props]
                            store: store, forumPath: forumPath, useTable: state.useWideLayout && layout != 6 /* TopicListLayout.NewsFeed */, useNarrowLayout: state.useNarrowLayout, activeCategory: activeCategory, setCategory: _this.setCategory, editCategory: _this.editCategory, sortOrderRoute: sortOrderRoute, setSortOrder: _this.setSortOrder, explSetSortOrder: state.explSetSortOrder, topPeriod: state.topPeriod, setTopPeriod: _this.setTopPeriod, queryParams: parseQueryString(routerProps.location.search) }, routerProps);
                        return linkWapper({}, 
                        // Moving the buttons to after the category title — just keeping this,
                        // in case anyone complains and wants to improve something somehow.
                        !debiki2.store_isFeatFlagOn(store, 'ffBtnsBefCat') ? null : ForumButtons(childProps), LoadAndListTopics(childProps));
                    } })));
                /* SHOULD instead of the below, throw? show? some error, if invalid sort order or bad cat name
                    Route({ path: rootSlash, component: LoadAndListTopics }),
                    Route({ path: rootSlash + RoutePathLatest, component: LoadAndListTopics }),
                    Route({ path: rootSlash + RoutePathNew, component: LoadAndListTopics }),
                    Route({ path: rootSlash + RoutePathTop, component: LoadAndListTopics })));
                    */
                var navConf = store.settings.navConf || {};
                var searchBox = page.forumSearchBox !== 2 /* ShowSearchBox.Yes */ ? null :
                    debiki2.topbar.SearchForm();
                return (r.div({ className: 'container dw-forum' }, debiki2.help.getServerAnnouncements(store), debiki2.page.Title({ store: store }), ForumIntroText({ store: store }), searchBox, 
                //topsAndCatsHelp,
                childRoutes));
            }
        });
        /* CLEAN_UP  Remove this old out commented code?  + class .esForum_topicsCatsHelp
        const topicsAndCatsHelpMessage = {
          id: 'EsH4YKG81',
          version: 1,
          content: r.span({},
            "A ", r.i({}, r.b({}, "category")), " is a group of topics. " +
            "A ", r.i({}, r.b({}, "topic")), " is a discussion or question."),
        }; */
        var ForumIntroText = debiki2.createComponent({
            displayName: 'ForumIntroText',
            render: function () {
                var store = this.props.store;
                var settings = store.settings;
                var page = debiki2.store_curPage(store);
                var user = store.me;
                var introPost = page.postsByNr[BodyNr];
                if (!introPost || introPost.isBodyHidden)
                    return null;
                var anyEditIntroBtn = user.isAdmin
                    ? r.a({ className: 'esForumIntro_edit icon-edit',
                        onClick: debiki2.morebundle.openEditIntroDialog }, t.fi.Edit)
                    : null;
                var anyForumIntroButtons = settings.enableForum === false ? null :
                    r.div({ className: 'esForumIntro_btns' }, anyEditIntroBtn, r.a({ className: 'esForumIntro_close', onClick: function () { return debiki2.ReactActions.showForumIntro(false); } }, r.span({ className: 'icon-cancel' }, t.fi.Hide_1), // "Hide ..."
                    r.span({ className: 'esForumIntro_close_reopen' }, t.fi.Hide_2, r.span({ className: 'icon-info-circled dw-forum-intro-show' }), // "click"
                    t.fi.Hide_3))); // "... to reopen"
                return (
                // The intro text is typically self-contained content, a brief summary
                // of the purpose with the forum. — So use the <article> tag.
                r.div({ className: 'esForumIntro' }, r.article({ dangerouslySetInnerHTML: { __html: introPost.sanitizedHtml } }), anyForumIntroButtons));
            }
        });
        var wideMinWidth = 801;
        var ForumButtons = debiki2.createComponent({
            displayName: 'ForumButtons',
            mixins: [debiki2.utils.WindowZoomResizeMixin],
            getInitialState: function () {
                return {
                    compact: window.innerWidth < wideMinWidth,
                };
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            onWindowZoomOrResize: function () {
                var state = this.state;
                var newCompact = window.innerWidth < wideMinWidth;
                if (state.compact !== newCompact) {
                    this.setState({ compact: newCompact });
                }
            },
            // Refactor: Move to static fn.
            getSortOrderName: function (sortOrderRoutePath) {
                var props = this.props;
                if (!sortOrderRoutePath) {
                    sortOrderRoutePath = props.sortOrderRoute;
                }
                var store = props.store;
                var showTopicFilter = debiki2.settings_showFilterButton(store.settings, store.me);
                // If there's no topic filter button, the text "All Topics" won't be visible to the
                // right of the Latest / Top sort order buttons, which makes it hard to understand what
                // Latest / Top means? Therefore, if `!showTopicFilter`, type "Latest topics" instead of
                // just "Latest". (Also, since the filter button is absent, there's more space for this.)
                switch (sortOrderRoutePath) {
                    case RoutePathLatest: return t.fb.Active;
                    case RoutePathNew: return t.fb.New;
                    case RoutePathTop: return t.fb.Top;
                    default: return null;
                }
            },
            setTopicFilter: function (entry) {
                var props = this.props;
                var newQuery = __assign({}, props.queryParams);
                if (entry.eventKey === FilterShowAll) {
                    delete newQuery.filter;
                }
                else {
                    newQuery.filter = entry.eventKey;
                }
                props.history.push({
                    pathname: props.location.pathname,
                    search: stringifyQueryString(newQuery),
                });
            },
            /* If using a filter dropdown + full search text field like GitHub does:
            onActivateFilter: function(event, filterKey: string) {
              this.setState({
                searchFilterKey: filterKey,
                searchText: this.searchTextForFilter(filterKey),
              });
            },
          
            searchTextForFilter: function(filterKey: string) {
              switch (filterKey) {
                case FilterShowAll: return '';
                case FilterShowWaiting: return 'is:open is:question-or-todo';
                case FilterShowDeleted: ...
              }
            },
          
            updateSearchText: function(event) {
              this.setState({ searchText: event.target.value });
            }, */
            createCategory: function () {
                var _this = this;
                debiki2.morebundle.getEditCategoryDialog(function (dialog) {
                    if (_this.isGone)
                        return;
                    dialog.open();
                });
            },
            createTopic: function (category) {
                var _this = this;
                var anyReturnToUrl = window.location.toString().replace(/#/, '__dwHash__');
                debiki2.login.loginIfNeeded(19 /* LoginReason.CreateTopic */, anyReturnToUrl, function () {
                    if (_this.isGone)
                        return;
                    var newTopicTypes = category.newTopicTypes || [];
                    if (newTopicTypes.length === 0) {
                        debiki2.editor.editNewForumPage(category.id, 12 /* PageRole.Discussion */);
                    }
                    else if (newTopicTypes.length === 1) {
                        debiki2.editor.editNewForumPage(category.id, newTopicTypes[0]);
                    }
                    else {
                        // There are many topic types specified for this category, because previously there
                        // was a choose-topic-type dialog. But I deleted that dialog; it made people confused.
                        // Right now, just default to Discussion instead. Later, change newTopicTypes from
                        // a collection to a defaultTopicType field; then this else {} can be deleted. [5YKW294]
                        debiki2.editor.editNewForumPage(category.id, 12 /* PageRole.Discussion */);
                    }
                }, true);
            },
            render: function () {
                var _this = this;
                var state = this.state;
                var props = this.props;
                var store = props.store;
                var settings = store.settings;
                var me = store.me;
                var showsCategoryTree = props.isCategoriesRoute;
                var activeCategory = props.activeCategory;
                // Backw compat, if buttons before cat title & descr ('ffBtnsBefCat').
                if (!activeCategory)
                    return CatNotFound(store);
                var queryParams = props.queryParams;
                var showsTopicList = !showsCategoryTree;
                var showFilterButton = debiki2.settings_showFilterButton(settings, me);
                var topicFilterFirst = true; // CLEAN_UP remove me_uiPrefs(me).fbs !== UiPrefsForumButtons.CategoryDropdownFirst; CLEAN_UP
                // A tester got a little bit confused in the categories view, because it starts with
                // the filter-*topics* button. So insert this title, before, instead.
                var anyPageTitle = showsCategoryTree || (topicFilterFirst && !showFilterButton) ?
                    r.div({ className: 'esF_BB_PageTitle' }, showsCategoryTree ? t.Categories : t.Topics) : null;
                // @ifdef DEBUG
                debiki2.dieIf(!showsCategoryTree && !props.setSortOrder, 'TyE60MREJ35');
                // @endif
                // The root cat has no slug.
                var anyActCatSlug = props.activeCategory.slug;
                var slashSlug = anyActCatSlug ? '/' + anyActCatSlug : '';
                var makeCategoryLink = function (order, rememberSortOrder, slashSlug, text, linkId, extraClass) {
                    var explSelected = props.explSetSortOrder === order ? 'n_ExplSel ' : '';
                    return debiki2.NavLink({
                        // The onClick handler will remember that we set the sort order explicitly,
                        // so it'll stay, when jumping between categories ...
                        onClick: function () { return props.setSortOrder(order, rememberSortOrder, slashSlug); },
                        // ... whilst this <a> link let's us middle mouse click to open in new tab.
                        to: { pathname: props.forumPath + order + slashSlug,
                            search: props.location.search },
                        id: linkId,
                        className: 'btn esForum_catsNav_btn ' + explSelected + (extraClass || ''),
                        activeClassName: 'active'
                    }, text);
                };
                var omitCategoryStuff = showsCategoryTree || !debiki2.settings_showCategories(store.settings, me);
                var categoryTreeLink = omitCategoryStuff ? null :
                    makeCategoryLink(RoutePathCategories, false, '', t.fb.ViewCategories, 'e_ViewCatsB', 'esForum_navLink');
                // COULD remember which topics were listed previously and return to that view.
                // Or would a Back btn somewhere be better?
                var topicListLink = showsTopicList ? null :
                    makeCategoryLink(RoutePathLatest, false, '', t.fb.TopicList, 'e2eViewTopicsB', 'esForum_navLink');
                // The Latest/Top/Categories buttons, but use a dropdown if there's not enough space.
                var currentSortOrderPath = props.sortOrderRoute;
                var latestNewTopButton;
                if (showsCategoryTree) {
                    // Then hide the sort order buttons.
                }
                else if (state.compact) {
                    latestNewTopButton =
                        ModalDropdownButton({ className: 'esForum_catsNav_btn esF_BB_SortBtn', pullLeft: true,
                            title: rFragment({}, this.getSortOrderName() + ' ', r.span({ className: 'caret' })) }, r.ul({}, 
                        // Active topics, followed by Popular, are the most useful buttons I think.
                        // Mainly staff are interested in new topics? — so place the New button last.
                        // Maybe these should be links too? I.e. use makeCategoryLink?
                        ExplainingListItem({ onClick: function () { return props.setSortOrder(RoutePathLatest, true, slashSlug); },
                            active: currentSortOrderPath === RoutePathLatest,
                            title: this.getSortOrderName(RoutePathLatest),
                            text: t.fb.ActiveDescr }), ExplainingListItem({ onClick: function () { return props.setSortOrder(RoutePathTop, true, slashSlug); },
                            active: currentSortOrderPath === RoutePathTop,
                            title: this.getSortOrderName(RoutePathTop),
                            text: t.fb.TopDescr }), ExplainingListItem({ onClick: function () { return props.setSortOrder(RoutePathNew, true, slashSlug); },
                            active: currentSortOrderPath === RoutePathNew,
                            title: this.getSortOrderName(RoutePathNew),
                            text: t.fb.NewDescr })));
                }
                else {
                    latestNewTopButton =
                        r.ul({ className: 'nav esForum_catsNav_sort' }, makeCategoryLink(RoutePathLatest, true, slashSlug, this.getSortOrderName(RoutePathLatest), 'e2eSortLatestB'), makeCategoryLink(RoutePathTop, true, slashSlug, this.getSortOrderName(RoutePathTop), 'e2eSortTopB'), makeCategoryLink(RoutePathNew, true, slashSlug, this.getSortOrderName(RoutePathNew), 'e_SortNewB'));
                }
                // ------ The filter topics select.
                var topicFilterValue = queryParams.filter || FilterShowAll;
                function makeTopicFilterText(filter) {
                    switch (filter) {
                        case FilterShowAll: return t.fb.AllTopics;
                        case FilterShowWaiting: return t.fb.WaitingTopics;
                        case FilterShowDeleted: return t.fb.ShowDeleted;
                    }
                    debiki2.die('EsE4JK85');
                }
                var showDeletedFilterItem = !debiki2.isStaff(me) || !showFilterButton ? null : // [2UFKBJ73]
                    ExplainingListItem({ onSelect: this.setTopicFilter, className: 's_F_BB_TF_Dd',
                        activeEventKey: topicFilterValue, eventKey: FilterShowDeleted,
                        title: makeTopicFilterText(FilterShowDeleted),
                        text: t.fb.ShowDeletedDescr });
                var topicFilterButton = !showFilterButton ? null :
                    ModalDropdownButton({ className: 'esForum_filterBtn esForum_catsNav_btn', pullLeft: true,
                        title: rFragment({}, makeTopicFilterText(topicFilterValue) + ' ', r.span({ className: 'caret' })) }, r.ul({}, ExplainingListItem({ onSelect: this.setTopicFilter, className: 's_F_BB_TF_All',
                        activeEventKey: topicFilterValue, eventKey: FilterShowAll,
                        title: t.fb.ShowAllTopics,
                        text: t.fb.ShowAllTopicsDescr }), ExplainingListItem({ onSelect: this.setTopicFilter, className: 's_F_BB_TF_Wait',
                        activeEventKey: topicFilterValue, eventKey: FilterShowWaiting,
                        title: makeTopicFilterText(FilterShowWaiting),
                        text: r.span({}, t.fb.OnlyWaitingDescr_1, // "shows only ..."
                        r.b({}, r.i({}, t.fb.OnlyWaitingDescr_2)), // "waiting"
                        t.fb.OnlyWaitingDescr_3) }), // "for a solution ..."
                    showDeletedFilterItem));
                /* A filter dropdown and search box instead of the <select> above:
                var makeFilterItemProps = (key: string) => {
                  var props: any = { eventKey: key };
                  if (this.state.searchFilterKey === key) {
                    props.className = 'dw-active';
                  }
                  return props;
                }
                var topicsFilterButton =
                    DropdownButton({ title: "Filter", onSelect: this.onActivateFilter, id: ... },
                      MenuItem(makeFilterItemProps(FilterShowAll), "Show everything"),
                      MenuItem(makeFilterItemProps(FilterShowWaiting), "Show waiting"));
                var topicFilter =
                    r.div({ className: 'dw-filter' },
                      Input({ type: 'text', buttonBefore: topicsFilterButton, value: this.state.searchText,
                          onChange: this.updateSearchText,
                          // ElasticSearch disabled server side, and is:* not supported anyway.
                          disabled: true, title: "Not completely implemented" }));
                */
                // If the All Categories dummy category is active, that's not where new topics
                // get placed. Instead they get placed in a default category. Find out which
                // one that is, so can show the correct create topic button title (depends
                // on the default topic type in the default category).
                var activeOrDefCat = activeCategory.isForumItself ?
                    debiki2.store_findTheDefaultCategory(store) : activeCategory;
                // @ifdef DEBUG
                // But this can happen, if the default category is private — then it won't be
                // included in the json from the server. How handle that, UX wise? [TyT0DEFCAT]
                //dieIf(!isServerSide() && !activeOrDefCat,
                //    "No active or default category [TyE0DEFCAT]");
                // @endif
                var createTopicBtn;
                var mayCreateTopics = debiki2.store_mayICreateTopics(store, activeOrDefCat);
                if (mayCreateTopics && activeOrDefCat) {
                    // TESTS_MISSING iff showsCategoryTree.
                    createTopicBtn = debiki2.PrimaryButton({
                        onClick: function () { return _this.createTopic(activeOrDefCat); }, id: 'e2eCreateSth',
                        className: 'esF_BB_NewTpcB'
                    }, createTopicBtnTitle(activeOrDefCat));
                }
                var createCategoryBtn;
                if (showsCategoryTree && me.isAdmin) {
                    createCategoryBtn = debiki2.Button({ onClick: this.createCategory, id: 'e2eCreateCategoryB',
                        className: 's_F_BB_NewCatB' }, t.fb.CreateCat);
                }
                var whatClass = showsCategoryTree ? 's_F_BB-Cats' : 's_F_BB-Topics';
                var filterAndSortButtons = /*topicFilterFirst  CLEAN_UP remove this comment block
                    ? r.div({ className: 'esForum_catsNav s_F_BB-Topics_Filter' },
                        anyPageTitle,
                        topicFilterButton,
                        latestNewTopButton,
                        categoryTreeLink,
                        topicListLink)
                    :*/ r.div({ className: 'esForum_catsNav s_F_BB-Topics_Filter' }, anyPageTitle, topicFilterButton, latestNewTopButton, categoryTreeLink, topicListLink);
                return (r.div({ className: 'dw-forum-actionbar clearfix ' + whatClass }, filterAndSortButtons, createTopicBtn, createCategoryBtn));
            }
        });
        var LoadAndListTopics = debiki2.createFactory({
            displayName: 'LoadAndListTopics',
            mixins: [debiki2.StoreListenerMixin],
            getInitialState: function () {
                // The server has included in the Flux store a list of the most recent topics, and we
                // can use that lis when rendering the topic list server side, or for the first time
                // in the browser (but not after that, because then new topics might have appeared).
                if (this.canUseTopicsInScriptTag()) {
                    var props = this.props;
                    var store = props.store;
                    return {
                        topics: store.topics,
                        showLoadMoreButton: store.topics && store.topics.length >= NumNewTopicsPerRequest
                    };
                }
                else {
                    return {};
                }
            },
            onChange: function () {
                // REFACTOR should probably use the store, for the topic list, so need not do this.
                if (this.isLoading) {
                    // This is a the-store-got-patched change event [2WKB04R]. Ignore it — we'll update
                    // in a moment, in the done-loading callback instead (4AB2D).
                    // (If we continued here, we'd call scrollToLastPositionSoon() below and might
                    // incorrectly reset the scroll position to 0.)
                    return;
                }
                this.maybeRunTour();
                if (!this.canUseTopicsInScriptTag())
                    return;
                // We're still using a copy of the topics list in the store, so update the copy,
                // maybe new user-specific data has been added.
                var props = this.props;
                var store = props.store;
                var category = props.activeCategory;
                var topics;
                if (category) {
                    topics = _.clone(store.topics);
                    topics.sort(function (t, t2) { return debiki2.topic_sortByLatestActivity(t, t2, category.id); });
                }
                else {
                    // A restricted category, we may not see it?
                    topics = [];
                }
                this.setState({ topics: topics });
                scrollToLastPositionSoon();
            },
            canUseTopicsInScriptTag: function () {
                var props = this.props;
                var store = props.store;
                if (!store.topics || props.topicsInStoreMightBeOld)
                    return false;
                var topicFilter = props.queryParams.filter;
                // The server includes topics for the active-topics sort order, all categories.
                return props.sortOrderRoute === RoutePathLatest &&
                    (!topicFilter || topicFilter === FilterShowAll) &&
                    !props.match.params.categorySlug;
            },
            componentDidMount: function () {
                // This happens when navigating back to the lates-topics list after having shown
                // all categories (plus on initial page load).
                this.loadTopics(this.props, false);
                this.maybeRunTour();
            },
            maybeRunTour: function () {
                var _this = this;
                var props = this.props;
                var store = props.store;
                var me = store.me;
                if (me.isAdmin && !this.tourMaybeStarted) {
                    this.tourMaybeStarted = true;
                    debiki2.staffbundle.loadStaffTours(function (tours) {
                        if (_this.isGone)
                            return;
                        var tour = debiki2.isBlogCommentsSite() ?
                            tours.forumIntroForBlogComments(me) : tours.forumIntroForCommunity(me);
                        debiki2.utils.maybeRunTour(tour);
                    });
                }
            },
            UNSAFE_componentWillReceiveProps: function (nextProps) {
                // This happens when switching category or showing top topics instead of latest topics.
                this.loadTopics(nextProps, false);
            },
            componentDidUpdate: function () {
                debiki2.rememberBackUrl();
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            loadMoreTopics: function () {
                this.loadTopics(this.props, true);
            },
            loadTopics: function (nextProps, loadMore) {
                var _this = this;
                if (!nextProps.activeCategory) {
                    // Probably a restricted category, won't be available until user-specific-data
                    // has been activated (by ReactStore.activateMyself). (6KEWM02)
                    return;
                }
                var curProps = this.props;
                var isNewView = curProps.location.pathname !== nextProps.location.pathname ||
                    curProps.location.search !== nextProps.location.search ||
                    curProps.topPeriod !== nextProps.topPeriod;
                var store = nextProps.store;
                var currentPageIsForumPage;
                _.each(store.pagesById, function (page) {
                    if (page.pagePath.value !== curProps.forumPath)
                        return;
                    if (page.pageId === store.currentPageId) {
                        currentPageIsForumPage = true;
                    }
                });
                if (!currentPageIsForumPage) {
                    // Then it's too soon, now, to load topics. The store hasn't currently been updated
                    // to use the forum page. The current page is some other page, with the wrong category id.
                    // It might take a HTTP request, before the forum page has been loaded & is in use.
                    return;
                }
                // Avoid loading the same topics many times:
                // - On page load, componentDidMount() and UNSAFE_componentWillReceiveProps()
                //   both loads topics.
                // - When we're refreshing the page because of Flux events, don't load the same topics again.
                if (!isNewView && !loadMore && (this.state.topics || this.isLoading))
                    return;
                var orderOffset = this.getOrderOffset(nextProps);
                orderOffset.topicFilter = nextProps.queryParams.filter;
                if (isNewView) {
                    var thisElem = ReactDOM.findDOMNode(this);
                    this.setState({
                        // Sometimes, there's no elem — happens if changing a category's slug. [7AFDW01]
                        // What do then? Hmm, min height 400px should fit in most devices?
                        minHeight: thisElem ? thisElem.clientHeight : 400,
                        topics: null,
                        showLoadMoreButton: false
                    });
                    // Load from the start, no offset. Keep any topic filter though.
                    delete orderOffset.olderThan;
                    delete orderOffset.score;
                }
                var categoryId = nextProps.activeCategory.id;
                this.isLoading = true;
                // Prevent Chrome from jumping to the bottom of the page, once the new topics
                // have been loaded.
                // I think Chrome scroll-anchors the "Load more" button, so, after all new
                // topics have been loaded, Chrome adjusts the scroll position so "Load more" is
                // still visible — that is, Chrome scrolls past all newly loaded topics. But
                // that's wrong; instead, the scroll position is to stay the same, so one
                // can continue reading at the top of the newly loaded topics.
                debiki2.$byId('esPageColumn').classList.add('s_NoScrlAncr');
                debiki2.Server.loadForumTopics(categoryId, orderOffset, function (response) {
                    if (_this.isGone)
                        return;
                    var topics = isNewView ? [] : (_this.state.topics || []);
                    var newlyLoadedTopics = response.topics;
                    topics = topics.concat(newlyLoadedTopics);
                    // `topics` includes at least the last old topic twice.
                    topics = _.uniqBy(topics, 'pageId');
                    _this.isLoading = false;
                    var newState = {
                        minHeight: null,
                        topics: topics,
                        showLoadMoreButton: newlyLoadedTopics.length >= NumNewTopicsPerRequest
                    };
                    _this.setState(newState);
                    // Only scroll to last position once, when opening the page. Not when loading more topics.
                    if (!loadMore) {
                        scrollToLastPositionSoon();
                    }
                    setTimeout(function () {
                        // Re-enable scroll anchoring.
                        debiki2.$byId('esPageColumn').classList.remove('s_NoScrlAncr');
                    });
                });
            },
            getOrderOffset: function (nextProps) {
                var props = nextProps || this.props;
                var lastBumpedAt;
                var lastScore;
                var lastCreatedAt;
                var lastTopic = _.last(this.state.topics);
                if (lastTopic) {
                    // If we're loading more topics, we should continue with this offset.
                    lastBumpedAt = lastTopic.bumpedAtMs || lastTopic.createdAtMs;
                    lastCreatedAt = lastTopic.createdAtMs;
                    lastScore = lastTopic.popularityScore; // always absent, currently [7IKA2V]
                }
                var orderOffset = { sortOrder: 1 /* TopicSortOrder.BumpTime */ };
                if (props.sortOrderRoute === RoutePathTop) {
                    orderOffset.sortOrder = 3 /* TopicSortOrder.ScoreAndBumpTime */;
                    orderOffset.olderThan = lastBumpedAt;
                    orderOffset.score = lastScore;
                    orderOffset.scoreAlg = 1 /* ScoreAlg.ByAllVotes */;
                    orderOffset.period = props.topPeriod;
                    var cat = props.activeCategory;
                    if (cat && cat.doItVotesPopFirst) {
                        orderOffset.scoreAlg = 2 /* ScoreAlg.ByDoItVotes */;
                    }
                }
                else if (props.sortOrderRoute === RoutePathNew) {
                    orderOffset.sortOrder = 2 /* TopicSortOrder.CreatedAt */;
                    orderOffset.olderThan = lastCreatedAt;
                }
                else {
                    // orderOffset.sortOrder — bump time, already.
                    orderOffset.olderThan = lastBumpedAt;
                }
                return orderOffset;
            },
            render: function () {
                var props = this.props;
                var state = this.state;
                // The category might not exist, or might be access restricted, and,
                // if pat may see it, will then appear in a moment, once pat specific data
                // has been activated (and then we'll continue below).
                if (!props.activeCategory)
                    return CatNotFound(props.store);
                var topicListProps = {
                    topics: state.topics,
                    store: props.store,
                    forumPath: props.forumPath,
                    useTable: props.useTable,
                    useNarrowLayout: props.useNarrowLayout,
                    minHeight: state.minHeight,
                    showLoadMoreButton: state.showLoadMoreButton,
                    loadMoreTopics: this.loadMoreTopics,
                    activeCategory: props.activeCategory,
                    setCategory: props.setCategory,
                    editCategory: props.editCategory,
                    orderOffset: this.getOrderOffset(),
                    topPeriod: props.topPeriod,
                    setTopPeriod: props.setTopPeriod,
                    linkCategories: true,
                    sortOrderRoute: props.sortOrderRoute,
                    setSortOrder: props.setSortOrder,
                    explSetSortOrder: props.explSetSortOrder,
                    // For the topic list buttons [.reorder_forum_btns] — props included [.btn_props].
                    location: props.location,
                    queryParams: props.queryParams,
                    history: props.history,
                };
                return forum.TopicsList(topicListProps);
            },
        });
        forum.TopicsList = debiki2.createComponent({
            displayName: 'TopicsList',
            getInitialState: function () {
                return {};
            },
            componentDidMount: function () {
                // Sometimes the relevant topics are cached / loaded already, and will be
                // rendered directly when mounting. Then need to process time ago, here directly
                // (rather than in ..DidUpdate(), which runs after done loading from server.)
                debiki2.processTimeAgo();
            },
            componentDidUpdate: function () {
                debiki2.processTimeAgo();
            },
            openIconsHelp: function () {
                this.setState({ helpOpened: true });
                debiki2.ReactActions.showSingleTipsClientSide(IconHelpMessage.id);
            },
            render: function () {
                var props = this.props;
                var store = props.store;
                var me = store.me;
                var isLoading = !props.topics;
                var topics = props.topics || [];
                var activeCategory = props.activeCategory;
                var slashAssigned = '';
                var useTable = props.useTable;
                var orderOffset = props.orderOffset;
                var doItVotesPopFirst = activeCategory && activeCategory.doItVotesPopFirst;
                var topicElems = topics.map(function (topic) {
                    // If this is an a bit more "technical" or work oriented forum, where people
                    // get assigned to do stuff, show "Users / Assigned" instead of only "Users".
                    // Otherwise, excl "/ Assigned", since maybe mildly confusing.
                    if (topic.assigneeIds)
                        slashAssigned = " / Assigned"; // I18N. What about rtl? Maybe two I18N
                    // strings: "Users" and "Users / Assigned"?
                    var topicRowProps = {
                        store: store,
                        topic: topic,
                        activeCatId: activeCategory === null || activeCategory === void 0 ? void 0 : activeCategory.id,
                        orderOffset: orderOffset,
                        key: topic.pageId, sortOrderRoute: props.sortOrderRoute,
                        explSetSortOrder: props.explSetSortOrder,
                        doItVotesPopFirst: doItVotesPopFirst,
                        inTable: useTable, useNarrowLayout: props.useNarrowLayout,
                        forumPath: props.forumPath, history: props.history
                    };
                    return TopicRow(topicRowProps);
                });
                // Insert an icon explanation help message in the topic list. Anywhere else, and
                // people won't see it at the right time, won't understand what the icons mean.
                // It'll be closed by default (click to open) if there are only a few topics.
                // (Because if people haven't seen some icons and started wondering "what's that",
                // they're just going to be annoyed by the icon help tips?)
                var numFewTopics = 10;
                var iconsHelpClosed = !this.state.helpOpened; /* always start closed, for now,
                                                                because doesn't look nice otherwise
                    [refactor] So remove this stuff then:
                    // User has clicked Hide?
                    help.isHelpMessageClosed(store, IconHelpMessage) ||
                    // Too few topics, then right now no one cares about the icons?
                    (topics.length < numFewTopics && !this.state.helpOpened);
                    */
                var iconsHelpStuff = !topics.length ? null : (iconsHelpClosed || debiki2.help.isHelpMessageClosed(store, IconHelpMessage)
                    ? r.a({ className: 'esForum_topics_openIconsHelp icon-info-circled',
                        onClick: this.openIconsHelp }, t.ft.ExplIcons)
                    : HelpMessageBox({ message: IconHelpMessage, showUnhideTips: false }));
                topicElems.splice(Math.min(topicElems.length, numFewTopics), 0, useTable
                    ? r.tr({ key: 'ExplIcns' }, r.td({ colSpan: 5 }, iconsHelpStuff))
                    : r.li({ key: 'ExplIcns', className: 'c_F_TsL_T clearfix' }, iconsHelpStuff));
                var loadMoreTopicsBtn;
                if (props.showLoadMoreButton) {
                    var queryString = '?' + debiki2.ServerApi.makeForumTopicsQueryParams(orderOffset);
                    loadMoreTopicsBtn =
                        r.div({}, r.a({ className: 'load-more', href: queryString, onClick: function (event) {
                                event.preventDefault();
                                props.loadMoreTopics();
                            } }, t.LoadMore));
                }
                var topTopicsPeriodButton;
                if (orderOffset.sortOrder === 3 /* TopicSortOrder.ScoreAndBumpTime */) {
                    var makeTopPeriodListItem = function (period, text) {
                        return ExplainingListItem({ onSelect: function () { return props.setTopPeriod(period); },
                            activeEventKey: props.topPeriod, eventKey: period,
                            title: debiki2.topPeriod_toString(period),
                            text: text });
                    };
                    topTopicsPeriodButton = r.div({}, r.span({ className: 'esForum_sortInfo' }, t.ft.PopularTopicsComma), ModalDropdownButton({ className: 'esForum_sortInfo s_F_SI_TopB', pullLeft: true,
                        title: r.span({}, debiki2.topPeriod_toString(props.topPeriod) + ' ', r.span({ className: 'caret' })) }, r.ul({ className: 'dropdown-menu' }, makeTopPeriodListItem(7 /* TopTopicsPeriod.All */, t.ft.TopFirstAllTime), makeTopPeriodListItem(1 /* TopTopicsPeriod.Day */, t.ft.TopFirstPastDay), makeTopPeriodListItem(2 /* TopTopicsPeriod.Week */), makeTopPeriodListItem(3 /* TopTopicsPeriod.Month */), makeTopPeriodListItem(4 /* TopTopicsPeriod.Quarter */), makeTopPeriodListItem(5 /* TopTopicsPeriod.Year */), makeTopPeriodListItem(6 /* TopTopicsPeriod.Triennial */))));
                }
                var forumPage = debiki2.store_curPage(store);
                var oneLinePerTopic = forumPage.pageLayout <= 2 /* TopicListLayout.TitleExcerptSameLine */;
                var oneLineClass = oneLinePerTopic ? ' c_F_TsT-OneLine' : '';
                var catDeld = activeCategory && activeCategory.isDeleted;
                var deletedClass = !catDeld ? '' : ' s_F_Ts-CatDd';
                var anyDeletedCross = !catDeld ? null : r.div({ className: 's_Pg_DdX' });
                var categoryDeletedInfo = !catDeld ? null :
                    r.p({ className: 'icon-trash s_F_CatDdInfo' }, t.ft.CatHasBeenDeleted);
                var topicsHeaderText = t.Topics;
                switch (orderOffset.sortOrder) {
                    case 1 /* TopicSortOrder.BumpTime */:
                        topicsHeaderText = t.ft.TopicsActiveFirst;
                        break;
                    case 2 /* TopicSortOrder.CreatedAt */:
                        topicsHeaderText = t.ft.TopicsNewestFirst;
                        break;
                }
                var categoryHeader = !debiki2.settings_showCategories(store.settings, me) ? null :
                    r.th({ className: 's_F_Ts_T_CN' }, t.Category);
                var activityHeaderText = orderOffset.sortOrder === 2 /* TopicSortOrder.CreatedAt */ ? t.Created : t.Activity;
                var topicsTable = !useTable ? null :
                    r.table({ className: 'esF_TsT s_F_Ts-Wide dw-topic-list' + deletedClass + oneLineClass }, r.thead({}, r.tr({}, doItVotesPopFirst ? r.th({ className: 'c_F_TsT_T_DvoTH' }, "Votes") : null, // I18N
                    r.th({}, topicsHeaderText), categoryHeader, r.th({ className: 's_F_Ts_T_Avs' }, t.Users + slashAssigned), r.th({ className: 'num dw-tpc-replies' }, t.Replies), r.th({ className: 'num' }, activityHeaderText))), 
                    // skip for now:  r.th({ className: 'num' }, "Feelings"))),  [8PKY25]
                    r.tbody({}, topicElems));
                var topicList = useTable ? null :
                    r.ol({ className: 'c_F_TsL s_F_Ts-Nrw' + deletedClass }, topicElems);
                // Show a category title and description.
                // Otherwise people tend to not notice that they are inside a category.
                // And they typically do *not* see any about-category pinned topic
                // (like Discourse does — don't do that).
                var categoryNameDescr = !activeCategory || !debiki2.settings_showCategories(store.settings, me) ||
                    props.skipCatNameDescr ? null :
                    CatNameDescr({ store: store, forumPath: props.forumPath, activeCategory: activeCategory, setCategory: this.props.setCategory,
                        editCategory: this.props.editCategory });
                var showForumBtns = activeCategory && !debiki2.store_isFeatFlagOn(store, 'ffBtnsBefCat');
                var forumButtonProps = !showForumBtns ? null : {
                    store: store,
                    forumPath: props.forumPath,
                    activeCategory: activeCategory,
                    isCategoriesRoute: false,
                    sortOrderRoute: props.sortOrderRoute,
                    setSortOrder: props.setSortOrder,
                    explSetSortOrder: props.explSetSortOrder,
                    useNarrowLayout: props.useNarrowLayout,
                    // [.reorder_forum_btns]
                    location: props.location,
                    queryParams: props.queryParams,
                    history: props.history,
                };
                var forumButtons = !showForumBtns ? null : ForumButtons(forumButtonProps);
                // Dim the topics list until topics loaded. UNTESTED after code moved to here  !.
                // Looks better than just removing it completely.
                // -- Is this still needed?: -------
                // The min height preserves scrollTop, even though the topic list becomes empty
                // for a short while (which would otherwise reduce the windows height which
                // in turn might reduce scrollTop).
                // COULD make minHeight work when switching to the Categories view too? But should
                // then probably scroll the top of the categories list into view.
                // COULD use store.topics, used when rendering server side, but for now:
                // ---------------------------------
                var loadingStyle = !isLoading ? {} : {
                    minHeight: props.minHeight,
                    pointerEvents: 'none',
                    opacity: '0.8',
                };
                return (r.div({ className: 's_F_Ts e_SrtOrdr-' + orderOffset.sortOrder,
                    style: loadingStyle }, categoryDeletedInfo, showForumBtns ? null :
                    // Legacy. Then the forum buttons are just above, instead of inside this
                    // component — and then it makes sense to show the trending topics
                    // period at the top of this component (so they appear just below
                    // the forum buttons).
                    topTopicsPeriodButton, r.div({ style: { position: 'relative' } }, anyDeletedCross, categoryNameDescr, forumButtons, showForumBtns ? topTopicsPeriodButton : null, isLoading ? t.Loading : null, topicsTable || topicList), isLoading || topics.length ? null :
                    r.div({ className: 's_F_Ts_NoTopics', id: 'e2eF_NoTopics' }, t.NoTopics), loadMoreTopicsBtn));
            }
        });
        function CatNameDescr(props) {
            var store = props.store;
            var me = store.me;
            var activeCategory = props.activeCategory;
            var catsActiveLast = debiki2.store_ancestorCatsCurLast(store, activeCategory.id);
            // catsActiveLast is empty, if we haven't selected any category. Then, currently,
            // activeCategory is a dummy category for the whole site section. (What about
            // using the root category (include it in the json from the server) instead?)
            var baseCat = catsActiveLast[0] || activeCategory;
            var anySubCat = catsActiveLast[1];
            var totalDepth = catsActiveLast.length;
            // @ifdef DEBUG
            debiki2.dieIf(totalDepth >= 3, '3 level cats not yet impl [TyE0GKRH]');
            // @endif
            var baseCats = store.currentCategories.filter(function (c) {
                // If we're showing all categories, the active category id is the root category,
                // then need to compare c.parnetId with the root category id:
                // Otherwise, we want the siblings to baseCat, that is, the same parentId.
                return activeCategory.isForumItself
                    ? c.parentId === activeCategory.id
                    : c.parentId === baseCat.parentId;
            });
            var subCats = activeCategory.isForumItself
                ? [] // (otherwise would include all base cats again — the All Cats dummy id is the root id)
                : store.currentCategories.filter(function (c) {
                    // (Cannot use `=== anySubCat.parentId` — maybe we haven't selected any sub cat.)
                    return c.parentId === baseCat.id;
                });
            debiki2.arr_sortAlphaInPlace(subCats, function (c) { return c.name; }); // [sort_cats]
            var baseCatDropdown = makeCatDropdown(store, '', baseCats, baseCat, false, !subCats.length);
            var anySubCatDropdown = makeCatDropdown(store, baseCat.slug, subCats, anySubCat, true, true);
            function makeCatDropdown(store, parentCatSlug, catsSameLevel, thisCat, isSubCat, isLastCat) {
                if (!catsSameLevel.length)
                    return null;
                var categoryMenuItems = catsSameLevel.map(function (category) {
                    var sortOrderPath = category.doItVotesPopFirst ? RoutePathTop : RoutePathLatest;
                    return debiki2.MenuItem({ key: category.id, active: thisCat && thisCat.id === category.id,
                        href: props.forumPath + sortOrderPath + '/' + category.slug,
                        onClick: function () { return props.setCategory(category.slug, category); } }, r.span({ className: debiki2.category_iconClass(category, store) }, category.name));
                });
                categoryMenuItems.unshift(debiki2.MenuItem({ key: -1,
                    active: thisCat && thisCat.isForumItself,
                    onClick: function () { return props.setCategory(parentCatSlug); } }, t.fb.AllCats));
                var activeCategoryIcon = !thisCat ? null : debiki2.category_iconClass(thisCat, store);
                var subCatClass = isSubCat ? ' s_F_Ts_Cat_Ttl-SubCat' : '';
                var categoriesDropdownButton = ModalDropdownButton({
                    className: 'esForum_catsDrop active s_F_Ts_Cat_Ttl' + subCatClass, pullLeft: true,
                    title: r.span({ className: activeCategoryIcon }, thisCat ? thisCat.name : (isSubCat ? t.fcs.All : t.fb.AllCats), isLastCat ? r.span({ className: 'caret' }) : null)
                }, r.ul({ className: 'dropdown-menu s_F_BB_CsM' }, categoryMenuItems));
                return categoriesDropdownButton;
            }
            var editCatButton = activeCategory.isForumItself || !me.isAdmin ? null :
                r.a({ className: 's_F_Ts_Cat_Edt icon-edit', onClick: props.editCategory }, t.fb.EditCat);
            return (r.div({ className: 's_F_Ts_Cat' }, r.div({ className: 's_F_Ts_Cat_SelectCatBs' }, baseCatDropdown, anySubCatDropdown), r.p({ className: 's_F_Ts_Cat_Abt' }, activeCategory.description), editCatButton));
        }
        var IconHelpMessage = {
            id: '5KY0W347',
            version: 1,
            content: r.div({ className: 'esTopicIconHelp' }, r.p({ className: 'esTopicIconHelp_intro' }, t.ft.IconExplanation), r.ul({}, r.li({}, r.span({ className: 'icon-comment' }, t.ft.ExplGenDisc)), r.li({}, r.span({ className: 'icon-help-circled' }, t.ft.ExplQuestion)), r.li({}, r.span({ className: 'icon-ok' }, t.ft.ExplAnswer)), r.li({}, r.span({ className: 'icon-idea' }, t.ft.ExplIdea)), r.li({}, r.span({ className: 'icon-attention-circled' }, t.ft.ExplProblem)), r.li({}, r.span({ className: 'icon-check-empty' }, t.ft.ExplPlanned)), r.li({}, r.span({ className: 'icon-check' }, t.ft.ExplDone)), 
            /* r.li({}, disable mind maps [NOMINDMAPS]
              r.span({ className: 'icon-sitemap' },
                "A mind map.")),  */
            r.li({}, r.span({ className: 'icon-block' }, t.ft.ExplClosed)), r.li({}, r.span({ className: 'icon-pin' }, t.ft.ExplPinned)))),
        };
        var TopicRow = debiki2.createComponent({
            displayName: 'TopicRow',
            getInitialState: function () {
                return {
                    showMoreExcerpt: false,
                };
            },
            showMoreExcerpt: function () {
                this.setState({ showMoreExcerpt: true });
            },
            // Currently not in use, see [8PKY25].
            styleFeeeling: function (num, total) {
                if (!total)
                    return null;
                // What we're interested in is the probability that people feel something for this
                // topic? The probability that they like it, or think it's wrong. One weird way to somewhat
                // estimate this, which takes into account uncertainty for topics with very few posts,
                // might be to consider num and total the outome of a binomial proportion test,
                // and use the lower bound of a confidence interval:
                // COULD give greater weight to posts that are shown on page load (when loading the topic).
                // Usually there are not more than `total * 2` like votes, as far as I've seen
                // at some popular topics @ meta.discourse.org. However, Discourse requires login;
                // currently Debiki doesn't.
                var fraction = 1.0 * num / total / 2;
                if (fraction > 1) {
                    fraction = 1;
                }
                if (!this.minProb) {
                    this.minProb = this.binProbLowerBound(0, 0) + 0.01;
                }
                var probabilityLowerBound = this.binProbLowerBound(total, fraction);
                if (probabilityLowerBound <= this.minProb)
                    return null;
                var size = 8 + 6 * probabilityLowerBound;
                var saturation = Math.min(100, 100 * probabilityLowerBound);
                var brightness = Math.max(50, 70 - 20 * probabilityLowerBound);
                var color = 'hsl(0, ' + saturation + '%, ' + brightness + '%)'; // from gray to red
                return {
                    fontSize: size,
                    color: color,
                };
            },
            binProbLowerBound: function (sampleSize, proportionOfSuccesses) {
                // This is a modified version of the Agresti-Coull method to calculate upper and
                // lower bounds of a binomial proportion. Unknown confidence interval size, I just
                // choose 1.04 below because it feels okay.
                // For details, see: modules/debiki-core/src/main/scala/com/debiki/core/statistics.scala
                var defaultProbability = Math.min(0.5, proportionOfSuccesses);
                var adjustment = 4;
                var n_ = sampleSize + adjustment;
                var p_ = (proportionOfSuccesses * sampleSize + adjustment * defaultProbability) / n_;
                var z_unknownProb = 1.04;
                var square = z_unknownProb * Math.sqrt(p_ * (1 - p_) / n_);
                var lowerBound = p_ - square;
                var upperBound = p_ + square;
                return lowerBound;
            },
            makeCategoryLink: function (category, skipQuery) {
                var props = this.props;
                var sortOrderPath = props.explSetSortOrder ? props.sortOrderRoute : (category.doItVotesPopFirst ? RoutePathTop
                    : props.sortOrderRoute); // Or maybe RoutePathLatest?
                // this.props.queryParams — later: could convert to query string, unless skipQuery === true
                return props.forumPath + sortOrderPath + '/' + category.slug;
            },
            render: function () {
                var props = this.props;
                var store = props.store;
                var forumPage = debiki2.store_curPage(store);
                var me = store.me;
                var settings = store.settings;
                var topic = props.topic;
                var category = _.find(store.currentCategories, function (category) {
                    return category.id === topic.categoryId;
                });
                /* Skip Feelings for now, mostly empty anyway, doesn't look good. Test to add back  [8PKY25]
                later if people start using Like and Wrong fairly much.
                var feelingsIcons = [];
                var heartStyle = this.styleFeeeling(topic.numLikes, topic.numPosts);
                if (heartStyle) {
                  feelingsIcons.push(
                      r.span({ className: 'icon-heart', style: heartStyle, key: 'h' }));
                }
                var wrongStyle = this.styleFeeeling(topic.numWrongs, topic.numPosts);
                if (wrongStyle) {
                  feelingsIcons.push(
                      r.span({ className: 'icon-warning', style: wrongStyle, key: 'w' }));
                }
            
                var feelings;
                if (feelingsIcons.length) {
                  var title =
                      topic.numLikes + ' like votes\n' +
                      topic.numWrongs + ' this-is-wrong votes';
                  feelings =
                    r.span({ title: title }, feelingsIcons);
                }
                 */
                // COULD change to:
                //  "Created " + debiki.prettyDuration(topic.createdAtMs, Date.now()) + ", on <exact date>"
                // but that won't work server side, because Date.now() changes all the time.
                // Would instead need to generate the tooltip dynamically (rather than include it in the html).
                // [compress]
                var activityTitle = t.ft.CreatedOn + debiki2.whenMsToIsoDate(topic.createdAtMs);
                if (topic.lastReplyAtMs) {
                    activityTitle += t.ft.LastReplyOn + debiki2.whenMsToIsoDate(topic.lastReplyAtMs);
                }
                if (topic.bumpedAtMs && topic.bumpedAtMs !== topic.lastReplyAtMs) {
                    activityTitle += t.ft.EditedOn + debiki2.whenMsToIsoDate(topic.bumpedAtMs);
                }
                var anyPinOrHiddenIconClass = topic.pinWhere ? 'icon-pin' : undefined;
                if (topic.hiddenAtMs) {
                    anyPinOrHiddenIconClass = 'icon-eye-off';
                }
                var tags = settings.enableTags === false ? null :
                    debiki2.TagList({ tags: topic.pubTags, store: store }); // or forPage: topic?
                var mabyeTagsAfterTitle;
                var excerptMaybeTags; // [7PKY2X0]
                var showExcerptAsParagraph = topic.pinWhere === 3 /* PinPageWhere.Globally */ ||
                    (topic.pinWhere && topic.categoryId === props.activeCatId) ||
                    forumPage.pageLayout >= 3 /* TopicListLayout.ExcerptBelowTitle */;
                if (showExcerptAsParagraph) {
                    excerptMaybeTags =
                        r.div({ className: 'dw-p-excerpt' }, topic.excerpt, tags);
                    // , r.a({ href: topic.url }, 'read more')); — no, better make excerpt click open page?
                }
                else if (forumPage.pageLayout === 2 /* TopicListLayout.TitleExcerptSameLine */) {
                    excerptMaybeTags =
                        r.div({ className: 's_F_Ts_T_Con_B' }, topic.excerpt, tags);
                }
                else {
                    mabyeTagsAfterTitle = tags;
                    // No excerpt.
                    debiki2.dieIf(forumPage.pageLayout && forumPage.pageLayout !== 1 /* TopicListLayout.TitleOnly */, 'EdE5FK2W8');
                }
                var anyThumbnails;
                if (forumPage.pageLayout === 4 /* TopicListLayout.ThumbnailLeft */) {
                    debiki2.die('Unimplemented: thumbnail left [EdE7KW4024]');
                }
                else if (forumPage.pageLayout >= 5 /* TopicListLayout.ThumbnailsBelowTitle */) {
                    var thumbnailUrls = topic_mediaThumbnailUrls(topic);
                    var imgIndex_1 = 0;
                    anyThumbnails = _.isEmpty(thumbnailUrls) ? null :
                        r.div({ className: 's_F_Ts_T_Tmbs' }, thumbnailUrls.map(function (url) { return r.img({ src: url, key: ++imgIndex_1 }); }));
                }
                var showCategories = debiki2.settings_showCategories(settings, me);
                var categoryName;
                if (category && showCategories) {
                    categoryName = debiki2.Link({ to: this.makeCategoryLink(category),
                        className: debiki2.category_iconClass(category, store) + 'esF_Ts_T_CName' }, category.name);
                }
                // Avatars: Original Poster, some frequent posters, most recent poster. [7UKPF26]
                var author = debiki2.store_getUserOrMissing(store, topic.authorId, 'EsE5KPF0');
                var userAvatars = [
                    debiki2.avatar.Avatar({ key: 'OP', user: author, origins: store, title: t.ft.createdTheTopic })
                ];
                for (var i = 0; i < topic.frequentPosterIds.length; ++i) {
                    var poster = debiki2.store_getUserOrMissing(store, topic.frequentPosterIds[i], 'EsE2WK0F');
                    userAvatars.push(debiki2.avatar.Avatar({ key: poster.id, user: poster, origins: store,
                        title: t.ft.frequentPoster }));
                }
                // Don't show last replyer, if same as topic author, and no other avatar is shown.
                var lastReplyerIsOp = topic.lastReplyerId === topic.authorId;
                if (topic.lastReplyerId && !(lastReplyerIsOp && userAvatars.length === 1)) {
                    var lastReplyer = debiki2.store_getUserOrMissing(store, topic.lastReplyerId, 'EsE4GTZ7');
                    userAvatars.push(debiki2.avatar.Avatar({ key: 'MR', user: lastReplyer, origins: store,
                        title: t.ft.mostRecentPoster }));
                }
                // If there are many, could create & activate some CSS that moves the avatars closer,
                // could even slightly overlap, so won't need more than NNN pixels. [pack_avatars_closer]
                if (topic.assigneeIds) {
                    // UX SHOULD change to "assigned:" instead of '/', on small screens, since then
                    // there's no "Users / Assigned" table column.
                    userAvatars.push(r.span({ key: '/', className: 'n_AvsL_AsgSep' }, '/'));
                    for (var _i = 0, _a = topic.assigneeIds; _i < _a.length; _i++) {
                        var id = _a[_i];
                        var assignee = debiki2.store_getUserOrMissing(store, id, 'TyE0PATASG');
                        userAvatars.push(debiki2.avatar.Avatar({ key: 'a' + id, user: assignee, origins: store,
                            title: "assigned" })); // t.ft.assigned  I18N
                    }
                }
                // DO_AFTER 2021-12-01: CLEAN_UP: Nowadays always Link and r.div, can move into makeTitle;
                // and contentLinkUrl no longer in use.
                var titleLinkTag = debiki2.Link;
                var titleCellTag = r.div;
                var contentLinkUrl;
                var manyLinesClass = ''; // remove, place on table insted?, see oneLineClass somewhere above.
                var onTitleCellClick = function () {
                    props.history.push(topic.url);
                };
                if (showExcerptAsParagraph) {
                    manyLinesClass = ' s_F_Ts_T_Con-Para';
                    // Make the whole title and paragraph block a link, not just the title.
                    //titleLinkTag = r.span;
                    //titleCellTag = Link;
                    //contentLinkUrl = topic.url;
                }
                else if (this.state.showMoreExcerpt) {
                    manyLinesClass = ' s_F_Ts_T_Con-More';
                }
                else {
                    manyLinesClass = ' s_F_Ts_T_Con-OneLine';
                    onTitleCellClick = this.showMoreExcerpt;
                }
                var orderOffset = props.orderOffset;
                var activeAt = debiki2.Link({ to: topic.url + FragActionHashScrollLatest }, debiki2.prettyLetterTimeAgo(orderOffset.sortOrder === 2 /* TopicSortOrder.CreatedAt */
                    ? topic.createdAtMs
                    : topic.bumpedAtMs || topic.createdAtMs));
                // We use a table layout, only for wide screens, because table columns = spacy.
                if (props.inTable)
                    return (r.tr({ className: 'esForum_topics_topic e2eF_T' }, // (update BJJ CSS before renaming 'esForum_topics_topic' (!))
                    !props.doItVotesPopFirst ? null :
                        r.td({ className: 'c_F_TsT_T_Dvo' }, TopicUpvotes(topic, true /*iconFirst*/)), r.td({ className: 'dw-tpc-title e2eTopicTitle' }, titleCellTag({ className: 's_F_Ts_T_Con' + manyLinesClass,
                        onClick: onTitleCellClick }, // , to: contentLinkUrl },
                    makeTitle(topic, 's_F_Ts_T_Con_Ttl ' + anyPinOrHiddenIconClass, settings, me, titleLinkTag), mabyeTagsAfterTitle, excerptMaybeTags), anyThumbnails), !showCategories ? null : r.td({ className: 's_F_Ts_T_CN' }, categoryName), r.td({ className: 's_F_Ts_T_Avs' }, userAvatars), r.td({ className: 'num dw-tpc-replies' }, topic.numPosts - 1), r.td({ className: 'num dw-tpc-activity', title: activityTitle }, activeAt)));
                // skip for now:  r.td({ className: 'num dw-tpc-feelings' }, feelings)));  [8PKY25]
                else
                    return (r.li({ className: 'c_F_TsL_T e2eF_T' }, !props.doItVotesPopFirst || props.useNarrowLayout ? null :
                        r.div({ className: 'n_Col1' }, TopicUpvotes(topic, true /*iconFirst*/)), r.div({ className: 'n_Col2' }, r.div({ className: 'n_Row1' }, r.div({ className: 'c_F_TsL_T_Title e2eTopicTitle' }, makeTitle(topic, anyPinOrHiddenIconClass, settings, me)), r.div({ className: 'c_F_TsL_T_Stats' }, !props.doItVotesPopFirst || !props.useNarrowLayout ? null :
                        TopicUpvotes(topic, false /*iconFirst*/), r.span({ className: 'c_F_TsL_T_NumRepls' }, topic.numPosts - 1, r.span({ className: 'icon-comment-empty' })))), excerptMaybeTags, r.div({ className: 'n_Row2' }, r.div({ className: 'c_F_TsL_T_Users' }, userAvatars), !showCategories ? null : r.div({ className: 'c_F_TsL_T_Cat' }, r.span({ className: 'c_F_TsL_T_Cat_Expl' }, t.ft.inC), categoryName), r.span({ className: 'c_F_TsL_T_When' }, activeAt)), anyThumbnails)));
            }
        });
        function TopicUpvotes(topic, iconFirst) {
            // Does log2 grow fast enough? 32 –> 4, 64 –> 5 etc. There're colors up to 11 –> 2048.
            var logLikes = Math.trunc(Math.log2(topic.numOrigPostLikes + 1));
            var votesColorClass = Math.min(logLikes, 11); // [max_log_likes]
            // Later, if DoVoteStyle is DoIt/AndDoNot, instead of a Like icon, there'll be
            // up and down arrows.
            var upvoteIcon = r.span({ className: 'icon-heart' });
            var upvoteCount = r.span({ className: 'c_TpDiVo_Ttl' }, topic.numOrigPostLikes);
            return (r.span({ className: 'c_TpDvo c_DiVo-' + votesColorClass }, 
            // In vertical layout, the icon is above the vote count, then, icon first here.
            // Otherwise, the number is before the icon, e.g. 5 <like-icon>  (and the icons
            // right aligned).
            iconFirst ? upvoteIcon : null, upvoteCount, !iconFirst ? upvoteIcon : null));
        }
        function topic_mediaThumbnailUrls(topic) {
            var bodyUrls = topic.firstImageUrls || [];
            var allUrls = bodyUrls.concat(topic.popularRepliesImageUrls || []);
            var noGifs = _.filter(allUrls, function (url) { return url.toLowerCase().indexOf('.gif') === -1; });
            return _.uniq(noGifs);
        }
        var LoadAndListCategories = debiki2.createFactory({
            displayName: 'LoadAndListCategories',
            mixins: [debiki2.StoreListenerMixin],
            getInitialState: function () {
                var props = this.props;
                var store = props.store;
                return {
                    // The server has included recent topics in each cat, because the current page
                    // is of PageType.Forum.  [per_cat_topics]  (So no need for a separate request)
                    categories: store.currentCategories,
                    myId: store.me.id,
                };
            },
            onChange: function () {
                var catsNow = debiki2.ReactStore.allData().currentCategories;
                var state = this.state;
                // If cats got updated, catsNow will point to a different array. [new_cur_cat_arr]
                if (state.categories !== catsNow) {
                    this.setState({ categories: catsNow });
                }
            },
            componentDidMount: function () {
                debiki2.processTimeAgo();
                // (No data fetch request needed — cats and topics are in the page JSON already.)
            },
            componentWillUnmount: function () {
                this.isGone = true;
            },
            componentDidUpdate: function (prevProps, prevState) {
                var curProps = this.props;
                var curState = this.state;
                var curMe = curProps.store.me;
                var prevMe = prevProps.store.me;
                var paramsChanged = curProps.queryParams.filter !== prevProps.queryParams.filter;
                var patChanged = curMe.id !== prevMe.id;
                if (paramsChanged || patChanged) {
                    this.loadCategories(curProps);
                }
                if (curState.categories !== prevState.categories) {
                    debiki2.processTimeAgo();
                }
            },
            loadCategories: function (props) {
                var _this = this;
                var store = props.store;
                debiki2.Server.loadForumCategoriesTopics(store.currentPageId, props.queryParams.filter, function (categories) {
                    if (_this.isGone)
                        return;
                    _this.setState({ categories: categories });
                });
            },
            render: function () {
                var props = this.props;
                var store = props.store;
                var state = this.state;
                var categories = state.categories;
                if (!categories)
                    return r.p({}, t.Loading);
                var siteSection = store.siteSections.find(function (s) { return s.pageId === store.currentPageId; });
                var topLevelCats = categories.filter(function (c) { return c.parentId === siteSection.rootCategoryId; });
                var categoryRows = topLevelCats.map(function (category) {
                    var childCategories = categories.filter(function (c) { return c.parentId === category.id; });
                    debiki2.arr_sortAlphaInPlace(childCategories, function (c) { return c.name; });
                    return CategoryRow({ store: props.store, location: props.location,
                        forumPath: props.forumPath, category: category, childCategories: childCategories, siteSection: siteSection, key: category.id });
                });
                var recentTopicsColumnTitle;
                switch (props.queryParams.filter) {
                    case FilterShowWaiting:
                        recentTopicsColumnTitle = t.fc.RecentTopicsWaiting;
                        break;
                    case FilterShowDeleted:
                        recentTopicsColumnTitle = t.fc.RecentTopicsInclDel;
                        break;
                    default:
                        recentTopicsColumnTitle = t.fc.RecentTopics;
                }
                return (r.table({ className: 'forum-table table' }, r.thead({}, r.tr({}, r.th({}, t.Category), r.th({}, recentTopicsColumnTitle))), r.tbody({ className: 's_F_Cs' }, categoryRows)));
            }
        });
        var CategoryRow = debiki2.createComponent({
            displayName: 'CategoryRow',
            componentDidMount: function () {
                var store = this.props.store;
                // If this is a newly created category, scroll it into view. [7KFWIQ2]
                if (this.props.category.slug === store.newCategorySlug) {
                    debiki2.utils.scrollIntoViewInPageColumn(ReactDOM.findDOMNode(this));
                }
            },
            render: function () {
                var store = this.props.store;
                var me = store.me;
                var category = this.props.category;
                var childCategories = this.props.childCategories;
                var siteSection = this.props.siteSection;
                var forumPath = this.props.forumPath;
                var location = this.props.location;
                var childCatsList = childCategories.map(function (childCat) {
                    return r.li({ key: childCat.id }, CatLink({ category: childCat, forumPath: forumPath, location: location, className: 's_F_Cs_C_ChildCs_C' }));
                });
                // For each category, show recently active topics. [per_cat_topics]
                var recentTopics = category.recentTopics || []; // missing in newly created cat
                var recentTopicRows = recentTopics.map(function (topic) {
                    var pinIconClass = topic.pinWhere ? ' icon-pin' : '';
                    var numReplies = topic.numPosts - 1;
                    return (r.tr({ key: topic.pageId }, r.td({}, 
                    // CLEAN_UP use 'c_TpcTtl' instead of 'topic-title'.
                    makeTitle(topic, 'topic-title' + pinIconClass, store.settings, me), r.span({ className: 'topic-details' }, r.span({ title: numReplies + t.fc._replies }, numReplies, r.span({ className: 'icon-comment-empty' })), debiki2.prettyLetterTimeAgo(topic.bumpedAtMs || topic.createdAtMs)))));
                });
                // This will briefly highlight a newly created category.
                var isNewClass = category.slug === store.newCategorySlug ?
                    ' esForum_cats_cat-new' : '';
                var isDeletedClass = category.isDeleted ? ' s_F_Cs_C-Dd' : '';
                var isDeletedText = category.isDeleted ?
                    r.small({}, t.fc._deleted) : null;
                var isDefaultText = category.id === siteSection.defaultCategoryId && debiki2.isStaff(me) ?
                    r.small({}, t.fc._defCat) : null;
                var categoryIconClass = debiki2.category_iconClass(category, store);
                var anyNotfLevel = !me.isLoggedIn ? null : r.div({ className: ' s_F_Cs_C_Ntfs' }, r.span({}, t.Notifications + ': '), debiki2.notfs.PageNotfPrefButton({ store: store, target: { pagesInCategoryId: category.id }, ownPrefs: me }));
                return (r.tr({ className: 'esForum_cats_cat' + isNewClass + isDeletedClass }, r.td({ className: 'forum-info' }, // [rename] to esForum_cats_cat_meta
                !category.thumbnailUrl ? null :
                    r.div({ className: 's_F_Cs_C_IcoWrp' }, r.img({ src: category.thumbnailUrl })), r.div({ className: 's_F_Cs_C_TxtWrp' }, r.div({ className: 'forum-title-wrap' }, CatLink({ category: category, forumPath: forumPath, location: location, isDefaultText: isDefaultText, className: categoryIconClass + 'forum-title', }), isDeletedText), r.p({ className: 'forum-description' }, category.description), anyNotfLevel, r.ol({ className: 's_F_Cs_C_ChildCs' }, childCatsList))), r.td({}, // class to esForum_cats_cat_topics?
                r.table({ className: 'topic-table-excerpt table table-condensed' }, r.tbody({}, recentTopicRows)))));
            }
        });
        function CatLink(props) {
            var forumPath = props.forumPath;
            var category = props.category;
            var sortOrderPath = category.doItVotesPopFirst ? RoutePathTop : RoutePathLatest;
            return debiki2.Link({ to: {
                    pathname: forumPath + sortOrderPath + '/' + category.slug,
                    search: props.location.search
                }, className: props.className }, category.name, props.isDefaultText);
        }
        // [same_title_everywhere]
        function makeTitle(topic, className, settings, me, reactTag) {
            var title = topic.title;
            var iconClass = '';
            var tooltip;
            var showIcons = debiki2.settings_showTopicTypes(settings, me);
            if (debiki2.page_isClosedUnfinished(topic)) {
                tooltip = debiki2.page.makePageClosedTooltipText(topic.pageRole);
                var closedIcon = r.span({ className: 'icon-block' });
                title = r.span({}, closedIcon, title);
            }
            else if (topic.pageRole === 10 /* PageRole.Question */) {
                tooltip = topic.answeredAtMs ? t.d.TooltipQuestSolved : t.d.TooltipQuestUnsolved;
                var questionIconClass = void 0;
                if (topic.answeredAtMs) {
                    questionIconClass = 'icon-ok';
                }
                else if (!showIcons) {
                    // Then only show, if answered.
                }
                else {
                    questionIconClass = 'icon-help-circled';
                }
                /* Skip this — feels like unneeded. The reply counts column is enough?
                var answerIcon;
                var answerCount;
                // (Don't show answer count if question already solved — too much clutter.)
                if (!topic.answeredAtMs && topic.numOrigPostReplies > 0) {
                  /* Skip this answer count stuff for now (or permanently?), too much clutter.
                  answerIcon = r.span({ className: 'icon-info-circled dw-icon-inverted' }, ' ');
                  answerCount = r.span({ className: 'dw-qa-ans-count' }, topic.numOrigPostReplies);
            
                  tooltip += " with " + topic.numOrigPostReplies;
                  if (topic.numOrigPostReplies > 1) tooltip += " answers";
                  else tooltip += " answer";
                } */
                if (questionIconClass) {
                    title = r.span({}, r.span({ className: questionIconClass }), title);
                }
            }
            else if (topic.pageRole === 14 /* PageRole.Problem */ || topic.pageRole === 15 /* PageRole.Idea */) {
                // (Previously some dupl code, see [5KEFEW2] in discussion.ts.
                if (topic.doneAtMs) {
                    // Problems get fixed, ideas get done / implemented.
                    tooltip = topic.pageRole === 14 /* PageRole.Problem */
                        ? t.ft.TitleFixed
                        : t.ft.TitleDone;
                    iconClass = 'icon-check';
                }
                else if (debiki2.page_isSolved(topic)) {
                    // A problem with a solution post — similar to a question plus answer.
                    // UX COULD use a "Problem solved" tooltip text instead of "Question ...".
                    tooltip = t.d.TooltipQuestSolved;
                    // Use the same icon as for Question topics with an answer selected
                    // — in most cases, Problem topics with a solution accepted,
                    // might as well have been posted as questions + answers; using different
                    // icons just adds extra clutter & "brain noise"? [ans_solved_icon]
                    iconClass = 'icon-ok';
                }
                else if (!showIcons) {
                    // Then don't show icons, unless done/fixed.
                }
                else if (topic.startedAtMs) {
                    tooltip = topic.pageRole === 14 /* PageRole.Problem */ ?
                        t.ft.TitleStartedFixing : t.ft.TitleStarted;
                    iconClass = 'icon-check-empty';
                }
                else if (!topic.plannedAtMs) {
                    tooltip = topic.pageRole === 14 /* PageRole.Problem */
                        ? t.ft.TitleUnsolved
                        : t.ft.TitleIdea;
                    iconClass = topic.pageRole === 14 /* PageRole.Problem */ ? 'icon-attention-circled' : 'icon-idea';
                }
                else {
                    tooltip = topic.pageRole === 14 /* PageRole.Problem */
                        ? t.ft.TitlePlanningFix
                        : t.ft.TitlePlanningDo;
                    iconClass = 'icon-check-dashed';
                }
                if (iconClass) {
                    title = r.span({}, r.span({ className: iconClass }, title));
                }
            }
            else if (topic.pageRole === 21 /* PageRole.UsabilityTesting */) { // [plugin]
                if (topic.doneAtMs) {
                    iconClass = 'icon-check';
                    tooltip = topic.pageRole === 21 /* PageRole.UsabilityTesting */ ? // [plugin]
                        "Testing and feedback done." : "This has been done or fixed";
                }
                else if (showIcons) {
                    iconClass = 'icon-check-empty';
                    tooltip = topic.pageRole === 21 /* PageRole.UsabilityTesting */ ? // [plugin]
                        "Waiting for feedback" : "This is something to do or to fix";
                }
                if (iconClass) {
                    title = r.span({}, r.span({ className: iconClass }, title));
                }
            }
            else if (debiki2.page_isOpenChat(topic.pageRole)) {
                if (showIcons) {
                    tooltip = t.ft.TitleChat;
                    title = r.span({}, r.span({ className: 'icon-chat' }), title);
                }
            }
            else if (topic.pageRole === 19 /* PageRole.PrivateChat */) {
                tooltip = t.ft.TitlePrivateChat;
                title = r.span({}, r.span({ className: 'icon-lock' }), title);
            }
            else if (topic.pageRole === 11 /* PageRole.MindMap */) {
                if (showIcons) {
                    tooltip = "This is a mind map";
                    title = r.span({}, r.span({ className: 'icon-sitemap' }), title);
                }
            }
            else if (topic.pageRole === 17 /* PageRole.FormalMessage */) {
                tooltip = t.ft.TitlePrivateMessage;
                title = r.span({}, r.span({ className: 'icon-mail' }), title);
            }
            else if (topic.pageRole === 2 /* PageRole.WebPage */ || topic.pageRole === 1 /* PageRole.CustomHtmlPage */) {
                // These are special & "rare" pages (e.g. the site's About page), usually editable by staff only.
                // Make them easier to find/recognize, by always showing icons.
                tooltip = t.ft.TitleInfoPage;
                title = r.span({}, r.span({ className: 'icon-doc-text' }), title);
            }
            else {
                if (showIcons) {
                    title = r.span({}, r.span({ className: 'icon-comment-empty' }), title);
                    tooltip = t.ft.TitleDiscussion;
                }
            }
            if (topic.deletedAtMs) {
                title = r.span({ className: 'esForum_topics_topic-deleted' }, r.span({ className: 'icon-trash' }), title);
            }
            if (topic.pinWhere) {
                tooltip += topic.pinWhere == 3 /* PinPageWhere.Globally */ ?
                    t.ft.IsPinnedGlobally : t.ft.IsPinnedInCat;
            }
            // COULD remove the HTML for the topic type icon, if topic pinned — because showing both
            // the pin icon, + topic type icon, looks ugly. But for now, just hide the topic type
            // icon in CSS instead: [6YK320W].
            var toUrl = reactTag && reactTag !== debiki2.Link ? undefined : topic.url;
            return ((reactTag || debiki2.Link)({
                to: toUrl, title: tooltip, className: className + ' c_TpcTtl'
            }, title));
        }
        function createTopicBtnTitle(category) {
            var title = t.fb.CreateTopic;
            if (_.isEqual([15 /* PageRole.Idea */], category.newTopicTypes)) {
                title = t.fb.PostIdea;
            }
            else if (_.isEqual([10 /* PageRole.Question */], category.newTopicTypes)) {
                title = t.fb.AskQuestion;
            }
            else if (_.isEqual([14 /* PageRole.Problem */], category.newTopicTypes)) {
                title = t.fb.ReportProblem;
            }
            else if (_.isEqual([11 /* PageRole.MindMap */], category.newTopicTypes)) {
                title = t.fb.CreateMindMap;
            }
            else if (areWebPages(category.newTopicTypes)) {
                title = t.fb.CreatePage;
            }
            function areWebPages(topicTypes) {
                return isWebPage(topicTypes[0]) && (topicTypes.length === 1 || (topicTypes.length === 2 && isWebPage(topicTypes[1])));
            }
            function isWebPage(pageType) {
                return pageType === 1 /* PageRole.CustomHtmlPage */ || pageType === 2 /* PageRole.WebPage */;
            }
            return title;
        }
        function CatNotFound(store) {
            // Can happen if 1) pat types a non-existing category slug in the URL.
            // Or if 2) hen has just created a category, clicked a link to another page,
            // and then clicked Back in the browser, and thus navigated back to the forum page
            // — then, the browser reloads the forum page, but uses cached forum page HTML
            // which includes JSON in which the newly created category is missing (wasn't
            // created, when the forum page was first loaded).
            // However, if 3) user-specific-data hasn't yet been activated, the reason the cat
            // seems missing, can be that it's access restricted, and will get added to the
            // store's category list in a moment, when user specific data gets activated (6KEWM02).
            // Or 4) pat may indeed not see the cat.
            // So, let's wait until user specific data added, before showing any not-found error.
            return !store.userSpecificDataAdded ? null : (r.div({ className: 'c_F_0Cat' }, r.h3({}, "Category not found."), r.p({}, "Did you just create it? Or renamed it?", r.br(), "Or you may not access it? Maybe it doesn't exist? [_TyE0CAT]"), r.br(), debiki2.PrimaryLinkButton({ href: '/' }, "Go to Homepage"), debiki2.Button({ onClick: function () { return location.reload(); } }, "Reload page")));
        }
        //------------------------------------------------------------------------------
    })(forum = debiki2.forum || (debiki2.forum = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/help/serverAnnouncements.ts  */
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var help;
    (function (help) {
        //------------------------------------------------------------------------------
        function getServerAnnouncements(store) {
            return null;
        }
        help.getServerAnnouncements = getServerAnnouncements;
        //------------------------------------------------------------------------------
    })(help = debiki2.help || (debiki2.help = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/login/login-dialog.ts  */ var debiki2;
(function (debiki2) {
    var login;
    (function (login) {
        function getLoginDialog() { }
        login.getLoginDialog = getLoginDialog;
        function loginIfNeeded() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
        }
        login.loginIfNeeded = loginIfNeeded;
    })(login = debiki2.login || (debiki2.login = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/notification/Notification.ts  */ // This avoids 'Cannot read property "..." from undefined' errors.
var debiki2;
(function (debiki2) {
    var notification;
    (function (notification) {
        notification.Notification = {};
    })(notification = debiki2.notification || (debiki2.notification = {}));
})(debiki2 || (debiki2 = {}));
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/arrows.ts  */ /*
 * Copyright (c) 2014 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * This file draws arrows between comments to illustrate parent child relationships.
 * It draws PNG arrows.
 *
 * There is old outdated jQuery soup code that draws arrows in SVG, here:
 *   client/app/old/arrows/arrows-svg-unused.js
 * There are problems with SVG though: rendering SVG arrows takes rather long,
 * especially problematic on mobile phones. And keeping the SVG arrows correctly stretched
 * when something is resized, is prone to errors. (The PNG arrows use `border: ...` and
 * resize automatically.) Also, I haven't yet made SVG avoid indenting deeply nested
 * replies "too much".
 */
/// <reference path="../prelude.ts" />
/// <reference path="../ReactActions.ts" />
/// <reference path="../utils/scroll-into-view.ts" />
/// <reference path="../page/scroll-buttons.ts" />
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    var renderer;
    (function (renderer) {
        //------------------------------------------------------------------------------
        var r = ReactDOMFactories;
        function drawHorizontalArrowFromRootPost(rootPost) {
            var arrowToChildren;
            if (rootPost.childNrsSorted.length === 1) {
                arrowToChildren = r.div({ className: 'dw-arw dw-arw-hz-curve-to-reply-btn' });
            }
            else if (rootPost.childNrsSorted.length >= 2) {
                arrowToChildren = r.div({ className: 'dw-arw dw-arw-hz-branch-to-reply-btn' });
            }
            return r.div({ className: 'dw-t-vspace' }, arrowToChildren);
        }
        renderer.drawHorizontalArrowFromRootPost = drawHorizontalArrowFromRootPost;
        function drawArrowsFromParent(postsByNr, parentPost, depth, index, horizontalLayout, rootPostNr, 
        // COULD REFACTOR: don't send both horizontalLayout and hmmIs2dTreeColumn.
        hmmIs2dTreeColumn) {
            // Some posts have no parent, e.g. form replies and embedded comments.
            if (!parentPost)
                return [];
            var postNr = parentPost.childNrsSorted[index];
            var post = postsByNr[postNr];
            if (!post)
                return []; // deleted
            var isSquashing = post.squash;
            // Find out how many siblings after `index` to which we shall draw arrows.
            var numRemainingWithArrows = 0;
            if (parentPost) {
                for (var i = index + 1; i < parentPost.childNrsSorted.length; ++i) {
                    var siblingNr = parentPost.childNrsSorted[i];
                    var sibling = postsByNr[siblingNr];
                    if (!sibling) {
                        // This post has been deleted?
                        continue;
                    }
                    if (isSquashing && sibling.squash) {
                        // Don't break — there might be non-squashed siblings later.
                        continue;
                    }
                    if (sibling.squash) {
                        // Don't increase numRemainingWithArrows with more than 1 for a bunch of squashed siblings.
                        isSquashing = true;
                    }
                    if (sibling.multireplyPostNrs.length) {
                        break;
                    }
                    numRemainingWithArrows += 1;
                }
            }
            if (hmmIs2dTreeColumn) {
                return drawHorizontalArrows(index === 0, numRemainingWithArrows);
            }
            if (parentPost && horizontalLayout && parentPost.nr === rootPostNr) {
                return drawHorizontalArrows(index === 0, numRemainingWithArrows);
            }
            if (parentPost) {
                // In vertical layout, don't draw arrows to top level replies.
                if (!horizontalLayout && depth === 1)
                    return [];
                return drawVerticalArrows(depth, index === 0, horizontalLayout, numRemainingWithArrows, parentPost);
            }
            return [];
        }
        renderer.drawArrowsFromParent = drawArrowsFromParent;
        function drawHorizontalArrows(isFirstChild, numRemainingWithArrows) {
            // We're rendering a top level reply in its own column. Draw horizontal arrows from
            // the root post. First, and arrow to this thread. Then, if there are any sibling
            // therad columns to the right, arrows to them too. But if this thread is the very
            // first child, then skip some arrows because there's already a special arrow
            // from the root post to this thread.
            var arrows = [];
            if (!isFirstChild) {
                arrows.push(r.div({ className: 'dw-arw dw-arw-hz-curve-to-this', key: 11 }));
            }
            if (numRemainingWithArrows > 0) {
                if (!isFirstChild) {
                    arrows.push(r.div({ className: 'dw-arw dw-arw-hz-line-to-this', key: 12 }));
                }
                arrows.push(r.div({ className: 'dw-arw dw-arw-hz-line-to-sibling', key: 13 }));
            }
            return arrows;
        }
        function drawVerticalArrows(depth, isFirstChild, horizontalLayout, numRemainingWithArrows, parentPost) {
            var arrows = [];
            if (isFirstChild) {
                // This arrrow is shown if the max indentation depth is reached. Then
                // we'll still draw an arrow from the parent to this post, if this post is
                // the very first child (and this post won't be indented, so we'll hide
                // all arrows to any siblings).
                arrows.push(r.div({ className: 'dw-arw dw-arw-vt-curve-to-this-first-unindented', key: 21 }));
            }
            // Only one reply
            // ------------------
            //
            // Single replies (without any siblings) are placed directly below their parent,
            // as if using a flat layout (rather than a threaded layout). Then, need draw
            // no arrows; people are used to flat layouts.
            //
            // This is how it looks:
            //
            // Explanation                                 Illustration
            // -----------                                 ------------
            //
            // A parent comment with only one reply.       +-----—-———————----+
            //                                             |parent comment    |
            //                                             |text…             |
            //                                             +------------------+
            //                                              ＼
            //                                               v
            // The child comment (would be this post,      +-----—------------+
            // if `isOnlyChild` below is true).            |the only child    |
            //                                             |comment text…     |
            //                                             +------------------+
            var isOnlyChild = isFirstChild && numRemainingWithArrows === 0;
            if (isOnlyChild) {
                arrows.push(r.div({ className: 'dw-arw dw-arw-vt-curve-to-this', key: 22 }));
                return arrows;
            }
            // Many replies
            // ------------------
            //
            // Let me explain how I draw arrows to this thread from the parent:
            //
            //
            // Explanation                                 Illustration
            // -----------                                 ------------
            //
            // A parent comment with 3 replies.            +-----—-———————----+
            //                                             |parent comment    |
            //                                             |text…             |
            //                                         __  +------------------+
            // This part >--------->---------->-------/    |
            // is "dw-arw-vt-line-to-sibling-1"       \    |
            //                                         \_  |
            // This line >----------->------->----->   /   |`-> +-----—-------+
            // is "dw-arw-vt-curve-to-this"           /    |    |child comment|
            //                                       /     |    |text…        |
            // This part >---------->-------->------/----  |    +-------------+
            // is "dw-arw-vt-line-to-sibling-2"       /    |
            //                                       /     |
            // And here is >---------->-------->----/----  |`-> +-----------—-+
            // is "dw-arw-vt-line-to-sibling-1",           |    |child comment|
            // again.                                      |    |text…        |
            //                                             |    +-------------+
            //                                             ＼
            // This very last line to the :last-child -->   v
            // is "dw-arw-vt-curve-to-unindented".         +-----—------------+
            // Here, numRemainingWithArrows is 0.          |:last-child       |
            //                                             |comment text…     |
            //                                             +------------------+
            // Draw the `-> part:
            if (numRemainingWithArrows >= 1) {
                arrows.push(r.div({ className: 'dw-arw dw-arw-vt-curve-to-this', key: 23 }));
            }
            // Start or continue an arrow to the siblings below, but not to
            // multireplies, since we don't know if they reply to the current post,
            // or to posts elsewhere in the tree.
            if (numRemainingWithArrows >= 1) {
                arrows.push(r.div({ className: 'dw-arw dw-arw-vt-line-to-sibling-1', key: 24 }));
                arrows.push(r.div({ className: 'dw-arw dw-arw-vt-line-to-sibling-2', key: 25 }));
                //          ＼
                // Draw the  v  arrow to the very last sibling: — ... but always indent it, nowadays. [6UWADTW0]
                if (numRemainingWithArrows === 1) {
                    //if (!horizontalLayout && depth === 2) {
                    arrows.push(r.div({ className: 'dw-arw dw-arw-vt-curve-to-last-sibling-indented', key: 26 }));
                    /*}
                    else {
                      arrows.push(
                        r.div({ className: 'dw-arw dw-arw-vt-curve-to-last-sibling-unindented', key: 27 }));
                    }*/
                }
                // Add a clickable handle that scrolls to the parent post and highlights it.
                arrows.push(r.div({ className: 'dw-arw-vt-handle', key: 28, onMouseDown: rememberMousedownCoords,
                    onClick: function (event) { return scrollToParent(event, parentPost); },
                    onMouseEnter: function (event) { return highlightArrowIfParentPostNotVisible(event, parentPost); },
                    onMouseLeave: function (event) { return highlightArrowIfParentPostNotVisible(event, parentPost); } }));
            }
            return arrows;
        }
        var arrowHandleMousedownCoords = null;
        function rememberMousedownCoords(event) {
            arrowHandleMousedownCoords = {
                clientX: event.clientX,
                clientY: event.clientY
            };
        }
        function scrollToParent(event, parentPost) {
            if (arrowHandleMousedownCoords) {
                var dragDistanceX = event.clientX - arrowHandleMousedownCoords.clientX;
                var dragDistanceY = event.clientY - arrowHandleMousedownCoords.clientY;
                var dragDistance2 = dragDistanceX * dragDistanceX + dragDistanceY * dragDistanceY;
                if (dragDistance2 > 15) {
                    // This is click-and-drag, probably Utterscrolling, not a pure click.
                    return;
                }
            }
            var parentPostElem = debiki2.$byId('post-' + parentPost.nr);
            if (!debiki2.utils.elemIsVisible(parentPostElem)) {
                debiki2.page.addVisitedPositionAndPost(parentPost.nr);
            }
            // (UX: Always highlight the post, even if it's on screen already, because otherwise
            // some people who test-click the arrows after having watched the click-arrows demo video,
            // think the arrows are broken. loadAndShowPost always highlights it.)
            debiki2.ReactActions.loadAndShowPost(parentPost.nr);
        }
        // Highlighs an arrow on hover, if the parent post is not visible, because then
        // clicking the arrow scrolls the parent into view. (Otherwise don't highlight
        // though, because that'd be annoying.)
        function highlightArrowIfParentPostNotVisible(event, parentPost) {
            var arrowElem = event.target;
            var parentPostElem = debiki2.$byId('post-' + parentPost.nr);
            var parentVisible = debiki.internal.elemIsVisible(parentPostElem);
            var siblingRepliesRoot = arrowElem.parentNode.parentNode;
            var siblingThreads = siblingRepliesRoot.children;
            _.each(siblingThreads, function (threadElem) {
                var arrowHandleElem = threadElem.querySelector('.dw-arw-vt-handle');
                if (!arrowHandleElem || arrowHandleElem.parentNode != threadElem)
                    return;
                if (event.type === 'mouseenter' || event.type === 'mouseover') {
                    if (!parentVisible) {
                        debiki2.$h.addClasses(arrowHandleElem, 'dw-highlight');
                        arrowHandleElem.style.cursor = 'pointer';
                    }
                    else {
                        arrowHandleElem.style.cursor = 'default';
                    }
                }
                else {
                    debiki2.$h.removeClasses(arrowHandleElem, 'dw-highlight');
                }
            });
        }
        //------------------------------------------------------------------------------
    })(renderer = debiki2.renderer || (debiki2.renderer = {}));
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page/page.ts  */ /*
 * Copyright (c) 2014-2016 Kaj Magnus Lindberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/// <reference path="../prelude.ts" />
/// <reference path="../utils/utils.ts" />
/// <reference path="../utils/react-utils.ts" />
/// <reference path="../help/help.ts" />
/// <reference path="../help/serverAnnouncements.ts" />
/// <reference path="../rules.ts" />
/// <reference path="discussion.ts" />
/// <reference path="chat.ts" />
/// <reference path="scroll-buttons.ts" />
// Wrapping in a module causes an ArrayIndexOutOfBoundsException: null error, see:
//  http://stackoverflow.com/questions/26189940/java-8-nashorn-arrayindexoutofboundsexception
// The bug has supposedly been fixed in Java 8u40. Once I'm using that version,
// remove `var exports = {};` from app/debiki/Nashorn.  CLEAN_UP do this. Or done already?
//------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    var r = ReactDOMFactories;
    // UX COULD reset if logs out.
    var scrollXyByPageId = {};
    function rememberScrollPosition(pageId) {
        var pageCol = debiki2.$byId('esPageColumn');
        scrollXyByPageId[pageId] = [pageCol.scrollLeft, pageCol.scrollTop];
    }
    // UX BUG SHOULD the first time for each new page, scroll to the last read post, ...
    // (i.e. ReadingProgress.lastViewedPostNr in model.ts)
    function scrollToLastPosition(pageId) {
        var xy = scrollXyByPageId[pageId] || [0, 0]; // ... instead of always 0,0 first
        var pageCol = debiki2.$byId('esPageColumn');
        pageCol.scrollLeft = xy[0];
        pageCol.scrollTop = xy[1];
    }
    debiki2.PageWithStateComponent = createReactClass({
        displayName: 'PageWithStateComponent',
        mixins: [debiki2.StoreListenerMixin],
        getInitialState: function () {
            var state = this.makeState();
            this.scrollPageId = state.store.currentPageId;
            return state;
        },
        onChange: function () {
            this.setState(this.makeState());
        },
        makeState: function () {
            var store = debiki2.ReactStore.allData();
            // Is undef if on an embedded comments page (then, no router).
            var location = this.props.location;
            if (!location)
                return { store: store };
            var curPage = store.currentPage;
            var curPagePath = curPage.pagePath.value;
            var isMaybeWrongPage = location.pathname !== curPagePath;
            // We can get to here, if curPage is a *deleted* site section page  [subcomms]
            // (e.g. a deleted forum) — because then it wouldn't be included in
            // store.siteSections (since deleted), instead it'd be handled as an
            // ordinary page. However there might be a url path suffix like RoutePathLatest
            // or RoutePathNew, and then it'd seem as if curPage didn't match the current URL,
            // and we'd show just a blank page — instead of a deleted page.
            // Which can be confusing. Instead, show the deleted page.
            var isSectionPage = debiki2.isSection(curPage);
            if (isSectionPage && location.pathname.startsWith(curPagePath)) {
                // (Maybe check if curPagePath + RoutePathLatest or RoutePathNew etc
                // becomes pathname?)
                isMaybeWrongPage = false;
            }
            return { store: store, isMaybeWrongPage: isMaybeWrongPage };
        },
        componentDidMount: function () {
            var store = this.state.store;
            debiki2.ReactActions.maybeLoadAndShowNewPage(store, this.props.history, this.props.location);
            if (!this.state.isMaybeWrongPage) {
                scrollToLastPosition(store.currentPageId);
            }
        },
        UNSAFE_componentWillReceiveProps: function (nextProps) {
            var location = this.props.location;
            if (!location)
                return;
            // If we're about to show another page, remember the current page's scroll offset.
            var store = this.state.store;
            var nextUrlPath = nextProps.location.pathname;
            if (nextUrlPath !== location.pathname && !debiki2.urlPath_isToPageId(nextUrlPath, store.currentPageId)) {
                rememberScrollPosition(store.currentPageId);
            }
            debiki2.ReactActions.maybeLoadAndShowNewPage(store, this.props.history, location, nextProps.location);
        },
        componentDidUpdate: function (oldProps, oldState) {
            var store = this.state.store;
            if (this.scrollPageId !== store.currentPageId && !this.state.isMaybeWrongPage) {
                this.scrollPageId = store.currentPageId;
                var hash = location.hash;
                // Magic hash params start with &, like &param=value or &debug. [2FG6MJ9]
                var anyAndIndex = hash.indexOf('&');
                var isScrollTarget = hash && anyAndIndex !== 1; // '#' is at 0 so '#&...' = index 1
                if (isScrollTarget) {
                    // Then scroll to the scroll target, probably #post-123, instead of to the last position.
                }
                else {
                    // Apparently some re-layout is still happening, so don't scroll until after that's been done.
                    // For example, inserting YouTube videos might take a while, for the browser? and afterwards
                    // it modifies the scroll offset to compensate for the size of the video? which results in
                    // the wrong scroll offset.
                    // Try three times, once immediately, so looks good. And once, quickly, hopefully will work.
                    // And once, even slower, works always, so far.
                    // BUG UX SHOULD make this work with just 1 scroll call, and immediately. Can do that (?)
                    // by remembering the page size, and forcing that min-height directly when switching page.
                    // So the total page size won't change, just because the browser inserts stuff it
                    // lazy-loads / lazy-inserts-sizes, like the above-mentioned videos ??
                    function updateScroll() { scrollToLastPosition(store.currentPageId); }
                    setTimeout(updateScroll);
                    setTimeout(updateScroll, 50);
                    setTimeout(updateScroll, 300);
                }
            }
        },
        componentWillUnmount: function () {
            // Close any [scroll locally on the current page] scroll dialog the user might
            // have opened — we're leaving the current page.
            debiki2.page.closeAnyScrollButtons();
        },
        render: function () {
            // 1. What does isMaybeWrongPage mean? Let's say we're in the forum. Then we click a link
            // to /some-page. The URL will update immediately to /some-page, and React will activate
            // the route to that page, i.e. this component, PageWithStateComponent.
            // And we'll run this code — but we haven't yet loaded the new page. The current page
            // is still the forum page. We'd render the forum, as a normal page, instead of as a topic list.
            // That'd result in "a flash of the forum rendered incorrectly" and doesn't look nice.
            // Instead, until we've loaded the new page, render nothing.
            // 2. About ...this.props: That sends router props to the new page.
            return this.state.isMaybeWrongPage ? null : Page(__assign({ store: this.state.store }, this.props));
        }
    });
    debiki2.PageWithState = reactCreateFactory(debiki2.PageWithStateComponent);
    var Page = debiki2.createComponent({
        displayName: 'Page',
        getInitialState: function () {
            return {
                useWideLayout: this.isPageWide(),
            };
        },
        componentDidMount: function () {
            // A tiny bit dupl code though, perhaps break out... what? a mixin? [5KFEWR7]
            this.timerHandle = setInterval(this.checkSizeChangeLayout, 500);
        },
        componentWillUnmount: function () {
            this.isGone = true;
            clearInterval(this.timerHandle);
        },
        checkSizeChangeLayout: function () {
            // Dupl code [5KFEWR7]
            if (this.isGone)
                return;
            var isWide = this.isPageWide();
            if (isWide !== this.state.useWideLayout) {
                this.setState({ useWideLayout: isWide });
            }
        },
        isPageWide: function () {
            var store = this.props.store;
            return debiki2.store_getApproxPageWidth(store) > UseWidePageLayoutMinWidth;
        },
        render: function () {
            var store = this.props.store;
            var page = store.currentPage;
            var content = debiki2.page_isChat(page.pageRole)
                ? debiki2.page.ChatMessages({ store: store })
                : debiki2.page.TitleBodyComments({ store: store });
            var compactClass = this.state.useWideLayout ? '' : ' esPage-Compact'; // BUG React rendering: Was missing server side, present in browser
            var pageTypeClass = ' s_PT-' + page.pageRole; // REFACTOR place here: [5J7KTW2] instead
            var isChat = debiki2.page_isChat(page.pageRole);
            return rFragment({}, isChat ? r.div({ id: 'theChatVspace' }) : null, r.div({ className: 'esPage' + compactClass + pageTypeClass }, r.div({ className: 'container' }, debiki2.help.getServerAnnouncements(store), r.article({}, content))));
        }
    });
    // REFACTOR break out to new file render-page-server-side.ts? [7VUBWR45]
    function renderPageServerSideToString() {
        debiki2.avatar.resetAvatars();
        // Comment in the next line to skip React server side and debug in browser only.
        //return '<p class="dw-page" data-reactid=".123" data-react-checksum="123">react_skipped [BRWSRDBG]</p>'
        // Compare with [2FKB5P].
        var store = debiki2.ReactStore.allData();
        var page = store.currentPage;
        if (page.pageRole === 7 /* PageRole.Forum */) {
            var defaultPath = page.pagePath.value + (store.settings.forumMainView || RoutePathLatest);
            // Otherwise rendering the categories dropdown button results in a null error:
            store.currentCategories = store.publicCategories;
            var forumRoute = debiki2.Route({ path: defaultPath, component: debiki2.forum.ForumComponent });
            // In the future, when using the HTML5 history API to update the URL when navigating
            // inside the forum, we can use `store.pagePath` below. But for now:
            var path = page.pagePath.value + 'latest';
            // Sync with client side rendering code [7UKTWR], otherwise React will do mistakes when
            // trying to reuse the server side html, resulting in CSS classes ending up on the wrong
            // elements and a somewhat broken page.
            return ReactDOMServer.renderToString(debiki2.Router({ location: path }, rFr({}, debiki2.Route({ render: debiki2.topbar.TopBar }), forumRoute, null, // would be ScrollButtons, and its render() returns null initially
            null)));
        }
        else if (store.isEmbedded && page.pageRole === 5 /* PageRole.EmbeddedComments */) {
            // Then we don't include any top bar or scroll buttons [1FBZQ4]
            return ReactDOMServer.renderToString(Page({ store: store }));
        }
        else {
            // Sync with client side rendering code. [7UKTWR]
            return ReactDOMServer.renderToString(debiki2.Router({}, rFr({}, debiki2.Route({ render: debiki2.topbar.TopBar }), Page({ store: store }), null, // would be ScrollButtons, and its render() returns null initially
            null)));
        }
    }
    debiki2.renderPageServerSideToString = renderPageServerSideToString;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=0 list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/delete-post-dialog.ts  */
var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function getDeletePostDialog() { }
        pagedialogs.getDeletePostDialog = getDeletePostDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/flag-dialog.ts  */ var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function openFlagDialog(postId) { }
        pagedialogs.openFlagDialog = openFlagDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function getAboutUserDialog() { }
        pagedialogs.getAboutUserDialog = getAboutUserDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/move-posts-dialog.ts  */
var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function openMovePostsDialog() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
        }
        pagedialogs.openMovePostsDialog = openMovePostsDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/see-wrench-dialog.ts  */
var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function openSeeWrenchDialog() { }
        pagedialogs.openSeeWrenchDialog = openSeeWrenchDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/share-dialog.ts  */
var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function openShareDialog() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
        }
        pagedialogs.openShareDialog = openShareDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/tags-dialog.ts  */
var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function openTagsDialog() {
            var whatever = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                whatever[_i] = arguments[_i];
            }
        }
        pagedialogs.openTagsDialog = openTagsDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-dialogs/wikify-dialog.ts  */
var debiki2;
(function (debiki2) {
    var pagedialogs;
    (function (pagedialogs) {
        function getWikifyDialog() { }
        pagedialogs.getWikifyDialog = getWikifyDialog;
    })(pagedialogs = debiki2.pagedialogs || (debiki2.pagedialogs = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/page-tools/page-tools.ts  */ var debiki2;
(function (debiki2) {
    var pagetools;
    (function (pagetools) {
        function getPageToolsDialog() { }
        pagetools.getPageToolsDialog = getPageToolsDialog;
    })(pagetools = debiki2.pagetools || (debiki2.pagetools = {}));
})(debiki2 || (debiki2 = {}));
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/react-bootstrap-old/Input.more.ts  */ var debiki2;
(function (debiki2) {
    function Input() {
        debiki2.die('The Input component is used server side [EsE4FK0WY2]');
    }
    debiki2.Input = Input;
})(debiki2 || (debiki2 = {}));
// vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list
//=====================================================================================
//=====================================================================================
//=====================================================================================
/* Next file: client/server/utils/show-and-highlight.ts  */ //------------------------------------------------------------------------------
var debiki2;
(function (debiki2) {
    //------------------------------------------------------------------------------
    function scrollAndFlashPostNr() {
        var whatever = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            whatever[_i] = arguments[_i];
        }
        throw new Error('scrollAndFlashPostNr called server side [TyE502RKSG3]');
    }
    debiki2.scrollAndFlashPostNr = scrollAndFlashPostNr;
    //------------------------------------------------------------------------------
})(debiki2 || (debiki2 = {}));
//------------------------------------------------------------------------------
// vim: fdm=marker et ts=2 sw=2 tw=100 list
//=====================================================================================
//=====================================================================================
//=====================================================================================


var md;
try {
  // Dupl code browser side: [9G03MSRMW2].
  md = markdownit({ html: true, linkify: true, breaks: true });
  md.use(debiki.internal.MentionsMarkdownItPlugin());
  md.use(debiki.internal.LinkPreviewMarkdownItPlugin);
  ed.editor.CdnLinkifyer.replaceLinks(md);
}
catch (e) {
  console.error("Error creating CommonMark renderer: [TyECMARKRENDR]");
  printStackTrace(e);
}

// Returns [html, mentions] if ok, else a string with an error message
// and exception stack trace.
function renderAndSanitizeCommonMark(source, allowClassIdDataAttrs, followLinks,
       instantLinkPreviewRenderer, uploadsUrlPrefixCommonmark) {
  var exceptionAsString;
  try {
    theStore = null; // Fail fast. Don't use here, might not have been inited.
    eds.uploadsUrlPrefixCommonmark = uploadsUrlPrefixCommonmark;  // [7AKBQ2]
    debiki.internal.serverSideLinkPreviewRenderer = instantLinkPreviewRenderer;
    debiki.mentionsServerHelp = [];
    var unsafeHtml = md.render(source);
    var mentionsThisTime = debiki.mentionsServerHelp;
    delete debiki.mentionsServerHelp;
    var allowClassAndIdAttr = allowClassIdDataAttrs;
    var allowDataAttr = allowClassIdDataAttrs;
    var html = googleCajaSanitizeHtml(
          unsafeHtml, allowClassAndIdAttr, allowDataAttr, followLinks);
    // Fail fast — simplify detection of reusing without reinitialzing:
    eds.uploadsUrlPrefixCommonmark = 'TyE4GKFWB0';
    debiki.internal.serverSideLinkPreviewRenderer = 'TyE56JKW20';
    return [html, mentionsThisTime];
  }
  catch (e) {
    console.error("Error in renderAndSanitizeCommonMark: [TyERNDRCM02A]");
    printStackTrace(e);
    exceptionAsString = exceptionToString(e);
  }
  return "Error in renderAndSanitizeCommonMark: [TyERNDRCM02B]\n\n" + exceptionAsString;
}

// (Don't name this function 'sanitizeHtml' because it'd then get overwritten by
// a function with that same name from a certain sanitize-html npm module.)
function sanitizeHtmlServerSide(source, followLinks) {
  try {
    // This function calls both Google Caja and the sanitize-html npm module. CLEAN_UP RENAME.
    return googleCajaSanitizeHtml(source, false, false, followLinks);
  }
  catch (e) {
    printStackTrace(e);
  }
  return "Error sanitizing HTML on server [DwE5GBCU6]";
}


console.log(`Starting server ...`);



async function serverReqHandler(req: Request): Promise<Response> {
  console.log("Method:", req.method);

  const url = new URL(req.url);
  console.log("Path:", url.pathname);
  console.log("Query parameters:", url.searchParams);

  console.log("Headers:", req.headers);

  if (!req.body) {
    return new Response("No request body");
  }

  const reqBody = await req.text();
  console.log("Body:", reqBody);

  let respBody: St;

  if (url.pathname === '/renderAndSanitizeCommonMark') {
    console.log(`I will:  renderAndSanitizeCommonMark`);
    respBody = renderAndSanitizeCommonMark(reqBody, false, false, null, '/uploads_url_prefx/');
    // It works!
    /*
    curl http://localhost:8070/renderAndSanitizeCommonMark -d  '**boldify** _italics_   

    ```
    code in
       backticks()
    ```
    '   */
  }
  else if (url.pathname === '/sanitizeHtmlServerSide') {
    console.log(`I will:  sanitizeHtmlServerSide`);
    respBody = sanitizeHtmlServerSide(reqBody, false);

    // It works!
    //    curl http://localhost:8070/sanitizeHtmlServerSide -d '<div>I am in a div. JSON: {"aa": 11, "bb": 22}</div> <b>bold?</bold> Param like:  http://ex.co/aa/bb?qq=vv;q2=v2,q3=v3'
    //
  }
  else if (url.pathname === '/renderReactServerSide') {
    console.log(`I will:  renderReactServerSide`);
    respBody = renderReactServerSide(reqBody);
  }
  else if (url.pathname === '/denoExit') {
    console.log(`I will:  Deno.exit`);
    Deno.exit();
  }
  else {
    console.log(`I won't:  ${url.pathname}`);
  }

  return new Response(respBody);
}


serve(serverReqHandler, { port: 8070 });


}  // end bindThis

console.log(`Now: bindThis.bind(globalThis):  ` + globalThis);
bindThis.apply(globalThis, []);
