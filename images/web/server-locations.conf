# 'location' directives for a Talkyard server block a.k.a. virtual host.
# Included by server .conf files, which in turn are included at the end of nginx.conf.
#
# """You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration """
#


# ----- HTTPS
#
# HTTPS public and private keys are located in /etc/letsencrypt/, and included
# not-from-this-file but from the sites-available/*.conf files.

#ssl_certificate...  – defined in sites-available/*.conf instead
# ssl_...  – defined in nginx.conf

# [ty_v1] Remove .well-known from here. Include it instead in the
# default servers file, which can be edited — in case someone doesn't want
# to use LetsEncrypt, or needs to add more .well-known contents.
#
# Magic files for generating HTTPS certificates with Let's Encrypt.
location /.well-known {

  # oops, to verify Azure AD domain, needs to host a file here:
  # https://{YOUR-DOMAIN-HERE}.com/.well-known/
  #      microsoft-identity-association.json
  # 'Content-Type' should be returned as 'application/json'
  # (without '; charset=utf-8').
  # https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-configure-publisher-domain
  # https://certbot.eff.org/docs/using.html#webroot
  # So:  default_type application/json;
  # But:  add_header Content-Type application/json;  would just add
  # a 2nd Content-Type header? At least when paired with  return 200 'ok'.
  #
  # Maybe enable auto LetsEncrypt auto cert plugin first?
  # So can remove this docker mount:
  # ./data/certbot-challenges/.well-known/:/opt/nginx/html/.well-known/:ro
  # from file: modules/ed-prod-one-test/docker-compose.yml

  alias /opt/nginx/html/.well-known;
  #autoindex off; – module disabled [5KUP293]
}



# ----- Bad requests

# Bots on the Internet send requests with weird URL paths, making  [block_bad_reqs]
# Play Framework log annoying warnings. Block such requests.
#
# Examples:
#  """Illegal request-target: Invalid input '\"',
#     expected pchar, '/', '?' or 'EOI' (line 1, column 10):
#     /spacespp\"pga'ofz/13/index.html\n         ^"""
#
# - Play Framework also rejects '^<>{}[]' in the URL path, but allows
#   them in the query string. Let's reject them everywhere for simplicity.
# - '()' is supposedly ok to use in urls — and actually Facebook
#   uses '()' in FB's Graph API:
#   https://developers.facebook.com/docs/graph-api/using-graph-api
#   https://graph.facebook.com/{user-id}?fields=feed.limit(3)
# - PHP uses [] for arrays in the query string; there're indeed auto hack
#   attempt requests with '[]' and PHP software name in the URL path.
#
# Old RFC: https://tools.ietf.org/html/rfc1738#page-3
#   > The characters "<" and ">" are unsafe because they are used as the
#   > delimiters around URLs in free text; the quote mark (""") is used to
#   > delimit URLs in some systems.  The character "#" is unsafe and should
#   > always be encoded because it is used in World Wide Web and in other
#   > systems to delimit a URL from a fragment/anchor identifier that might
#   > follow it.  The character "%" is unsafe because it is used for
#   > encodings of other characters.  Other characters are unsafe because
#   > gateways and other transport agents are known to sometimes modify
#   > such characters. These characters are "{", "}", "|", "\", "^", "~",
#   > "[", "]", and "`".
#   > All unsafe characters must always be encoded within a URL
#   >
#   > [...] the special characters "$-_.+!*'(),", and
#   > reserved characters used for their reserved purposes may be used
#   > unencoded
#
# Nevertheless don't allow "'" — would just confuse CommonMark parsers if
# someone pastes such an url? But '~' is fine I think, at least "~" was in
# the URL paths at University.
#
# Blog post with nice table:
# https://perishablepress.com/stop-using-unsafe-characters-in-urls/

# Also reject  \x00-\x20  and \x7f-\xff — trying out this at Ty.io:
#  location ~ '[\x00-\x20`\'"^\\\\<>\{\}\[\]\|\x7f-\xff]' {
#
# \x00-\x1f are control chars, \x20 is space.  \x7f is a control char,
# \x80-\xff are language specific letters.
#
# To type a real tab in Bash:  Ctrl+V Tab   — can incl in a cURL url to test
# sending a control char (i.e. tab, \x09 aka ^I.)  Or just incl a ' ' space.
# To test the upper range, \x7f-\xff,  incl sth like  åäö  or  úéý  in the url.
#
# Or this, seems to send %00 null, and %20 space and %33 the digit '3' (ASCII 51):
# curl -v -v 'https://www.talkyard.io/%00'  — 400 Bad request
# curl -v -v 'https://www.talkyard.io/%20'  — 400 Bad char in URL
# curl -v -v 'https://www.talkyard.io/%33'  — 404 Not Found
#
location ~ '[`\'"^\\\ \n\t<>\{\}\[\]\|]' {
  return 400 'Bad char in URL [TyENGXURLCH]\n';
}

# Instead of this:
# if ($http_host ~ '[`\'"\\\ \n\t<>(){}\[\],;+*^$!?&=#]') {
#   ...
# there's a  server {} block with a server_name regex, which rejects
# requests with weird hostnames — see nginx.conf.


# Later: Block requests with no Host header? Or is it good to be able
# to connect just via IP, for troubleshooting?



# ----- Static files: Javascript, CSS, images, fonts [NGXSTC]

location /-/assets/ {
  alias /opt/talkyard/assets/;
  # access_log off;  # enable to check if CDN hasn't been configd to cache assets
  # autoindex off; – module disabled [5KUP293]
  # Cache in CDN and browsers.
  add_header Cache-Control "${TY_MAX_AGE_YEAR}";
  gzip_static on;

  # No assets versioning for these. Later: Change to one week?
  location = /-/assets/ext-iframe.js     { add_header Cache-Control "${TY_MAX_AGE_DAY}"; }
  location = /-/assets/ext-iframe.min.js { add_header Cache-Control "${TY_MAX_AGE_DAY}"; }
}

location /-/fonts/ {
  alias /opt/talkyard/fonts/;
  add_header Cache-Control "${TY_MAX_AGE_YEAR}";
  # In case served from a CDN:
  add_header Access-Control-Allow-Origin "*";
  gzip_static on;
}


# People will hardcode links to the embedded comments script in their static html
# (see: [2WPGKS04]), which they will "never" touch again. So, set a short cache time,
# so the browsers will fetch a newer version of the script every now and then. [2WBKP46]
# It's just 6kb so ok to download again, and it's fine to "wait" 100 ms extra for
# the comments — one spends maybe a minute reading the embedding article anyway.
# Use a descriptive name that includes "Talkyard", because people see the name when
# they copy-paste embedded comments html tags. 'ed-comments(.v0)?' = old names. [2EBG05]
# [embcom_script_cache_time]
location ~ ^/-/(talkyard-comments|ed-comments(.v0)?).(?<suffix>min.js|js)$ {
  alias /opt/talkyard/assets/talkyard-comments.$suffix;
  # Temp short max age, when non-backw compat blog comments changes. [embcom_upgr_0cache]
  add_header Cache-Control "${TY_MAX_AGE_15MIN}";  # because no assets versioning, test: [2WBKP46]
  gzip_static on;
}

location = /-/session-iframe {
  alias /opt/nginx/html/session-iframe.html;
  add_header Cache-Control "${TY_MAX_AGE_DAY}";  # because no assets versioning
  default_type text/html;
}

# Prefix with 'talkyard-' so one sees it's Talkyards service worker, when debugging on localhost.
# Can be other localhost service workers, from unrelated other open source projects. [sw]
location ~ ^/talkyard-service-worker.(js|min.js)$ {
  root /opt/talkyard/assets/;
  # If the service worker caches itsef forever, then it's complicated to update it.
  # It's supposedly not cached by modern browsers — set max 1 day anyway, just in case. [sw]
  add_header Cache-Control "${TY_MAX_AGE_DAY}";
  gzip_static on;
}

# Here're static images and videos and Talkyard's favicon. [NGXMEDIA]
location /-/media/ {
  alias /opt/talkyard/ty-media/;
  add_header Cache-Control "${TY_MAX_AGE_MONTH}";
}

# This also needed, in case somehow the wrong favicon path is used.
location = /favicon.ico {
  root /opt/talkyard/ty-media/favicon/;
  add_header Cache-Control "${TY_MAX_AGE_WEEK}"; # cannot do assets versioning
}

location = /robots.txt {
  root /opt/nginx/html/;
  add_header Cache-Control "${TY_MAX_AGE_WEEK}";  # cannot do assets versioning
}

location = /security.txt {
  root /opt/nginx/html/;
  add_header Cache-Control "${TY_MAX_AGE_WEEK}";  # cannot do assets versioning
}


# ----- The Play Framework application server

location = /-/websocket {
  # Upgrade requests use GET. Is OPTIONS not needed?
  limit_except GET OPTIONS {
    deny  all;
  }

  # Disallow too long URLs. [.2_long_uri]
  if ($request_uri ~* '^.{2049,}') {
    return 414 "414 URI Too Long [TyENGXURILEN1]\n\n";
  }

  proxy_pass http://app:9000/-/websocket;
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "Upgrade";
  proxy_set_header Host $host;  # [ngx_host_hdr]
  # 16 random bytes.
  proxy_set_header X-Request-Id       $request_id; # COULD update e2e test [5FK02FP]
  proxy_set_header X-Real-IP          $remote_addr;
  proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto  $scheme;

  # Timeout for establishing a connection with the app server. The default is 60s,
  # but that's a lot — better reply Error? The client can try again soon.
  proxy_connect_timeout 20s;
  # If the client is silent for this long, Nginx closes the connection.
  # A bit shorter than the read timeout — so it'll be mostly the client's
  # responsibility to keep-alive? 220 < 240.
  proxy_send_timeout 220s;  # default: 60s
  # If the app server is silent for this long, Nginx closes the connection and
  # logs "upstream timed out (110: Connection timed out)".
  proxy_read_timeout 240s;  # default: 60s
  # Where is send_timeout documented?
  send_timeout 240s;
}

location / {
  # Without the following, external things send TRACE and TRACK headers trying
  # to steal cookies, making Play Framework log annoying warnings.
  # Talkyard only uses GET and POST.
  # OPTIONS is needed for CORS (Cross-Origin Resource Sharing) to work.
  limit_except GET POST OPTIONS {
    deny  all;
  }

  # Disallow too long URLs [.2_long_uri]. Play Framework's Akka module otherwise logs
  # a warning: "Illegal request, responding with status '414 URI Too Long'"
  # — which clutters up the log files — and then rejects the request anyway:
  # "414 URI Too Long" "URI length exceeds the configured limit of 2048 characters"
  if ($request_uri ~* '^.{2049,}') {
    return 414 "414 URI Too Long [TyENGXURILEN2]\n\n";
  }

  # Some exploits targeting other server software send invalid content types,
  # cluttering up the log files with warning messages from Play Framework.
  # The real format is:
  #     type "/" subtype *[";" parameter]
  # e.g.  text/plain; charset=utf-8
  # See: https://datatracker.ietf.org/doc/html/rfc1341
  # Here's how you can reproduce such an annoying request:
  #    curl -v -v -X POST -H "Content-Type: %{(#f_ck='multipart/form-data')..."
  #          http://site-1.localhost/-/search  # or any POST endpoint
  #
  # The type and subtype should be tchars, and, says
  # https://stackoverflow.com/a/65905599, tchar is:
  # tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
  #  "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
  # but Talkyard basically won't understand anything except for json, multipart,
  # form-data and text — so let's keep it simple, just quotes and [_.-]?
  # Also, '' must match so GET will work (no Content-Type).
  #
  if ($http_content_type !~ '^(|\s*[\'"a-zA-Z0-9_.-]+/[\'"a-zA-Z0-9_.-]+\s*(;.*)?)$') {
    return 415 "415 Unsupported Media Type\n\nUnexpected Content-Type [TyENGXCONTY1]\n\n";
  }

  # This is also in the server-limits.conf server {} block — but needs to
  # be here, in location {}, otherwise Nginx defaults to 1mb (one megabyte).
  # SECURITY use a lower limit here, say, 1 MiB or 5 MiB?
  # And TY_NGX_LIMIT_REQ_BODY_SIZE_UPLOADS can be (a lot) larger for uploads?
  #
  client_max_body_size ${TY_NGX_LIMIT_REQ_BODY_SIZE};
  client_body_buffer_size 128k;  # or: ${TY_NGX_LIMIT_REQ_BODY_SIZE};

  # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size

  # This sends the full url on the same domain, but only the domain name to other
  # domains — but sends nothing if from a secure to an insecure domain.
  # Later: A config value if some sites want 'same-origin'.
  # Here's how to set conditonal headers in Ninx: (if absent from upstream)
  # https://serverfault.com/a/598106/44112
  #
  # Note: "[the add_header] directives are inherited from the previous
  # level if and only if there are no add_header directives defined on
  # the current level", that is, "add" sort of deletes everything.
  #
  add_header Referrer-Policy 'strict-origin-when-cross-origin';

  # Later, but currently supported by no browser:
  #add_header Cross-Origin-Opener-Policy 'Deny';

  # HTTP/2 to proxied servers not supported — and not needed, they write:
  # ""there is no [parallel requests limit] when talking to
  #   your own backends.  Moreover, things may even become worse when
  #   using HTTP/2 to backends, due to single TCP connection being used
  #   instead of multiple ones"""
  # http://mailman.nginx.org/pipermail/nginx/2015-December/049445.html
  #
  proxy_http_version 1.1;

  # The docker host has ip 172.17.0.1, for me. (also see [7YKFG32] below)
  # Read more here: https://docs.docker.com/v1.7/articles/networking/
  # and: https://github.com/docker/docker/issues/17305
  # and: http://stackoverflow.com/a/31213387/694469
  # ... Use Docker networking instead and hostname 'app'.
  #
  proxy_pass http://app:9000/;  # not inherited to nested blocks ...
  #
  # ... *but* proxy_set_header *is* inherited — *unless* there're any such directives
  # in the current block (there aren't).
  # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header


  # Send $host, not $http_host, to the Ty app server.
  # > $host: host name from the request line, or host name from the 'Host' header,
  # > or the server name matching a request
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#var_host
  #
  # The Host header, it's required by HTTP 1.1 (but not 1.0, not in use)
  # and is how Nginx looks up the server {} block, see:
  # https://nginx.org/en/docs/http/request_processing.html
  # — but is there a bug in those docs — the docs says the Host *header*
  # chooses server, but in my tests, any Absolute-URI host in the request
  # line has precedence. — Then it's important to use $host here?
  # since that's what determined which server{} bock we're in now.
  #
  # (You might have found:
  # > When a proxy receives a request with an absolute-form of
  # > request-target, the proxy MUST ignore the received Host header field
  # > (if any) and instead replace it with the host information of the
  # > request-target
  # https://tools.ietf.org/html/rfc7230#section-5.4   2014-06
  # but that doesn't apply to Ngnix because Nginx is not a proxy:
  # > In terms of RFC7230, nginx is not a proxy, it is a server
  # https://trac.nginx.org/nginx/ticket/1635  2018-09
  # After all, the Nginx server blocks are called "server" blocks. )
  #
  proxy_set_header Host $host;  # [ngx_host_hdr]

  # COULD disallow empty host: (Host header *required* by HTTP 1.1)
  #  server { server_name "";   throw 404 ? }
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#server


  # 16 random bytes.
  proxy_set_header X-Request-Id $request_id; # COULD update e2e test [5FK02FP]
  proxy_set_header X-Real-IP          $remote_addr;
  proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto  $scheme;

  proxy_connect_timeout  900;
  proxy_send_timeout     900;
  proxy_read_timeout     900;
  send_timeout           900;


  # QUICK RENAME to just /-/upload-file, and later:
  # optional ?restrictTo=username:group_name,ppid:participant_id, ... ?
  location /-/upload-public-file {
    limit_except POST OPTIONS {
      deny  all;
    }

    if ($http_content_type !~ '^multipart/form-data;') {
      return 415 "415 Unsupported Media Type\n\nContent-Type should be: multipart/form-data [TyENGXCONTY2]\n\n";
    }

    # Large files HTTP/2 problem?
    # If uploading large files, like 15 MiB, then, Nginx can incorrectly detect
    # a HTTP/2 flood — Nginx then logs:
    #   > [error] 13#13: *458 client intended to send too large body:
    #   >     19901222 bytes, client: .., server: _, request:
    #   >     "POST /-/upload-public-file?... HTTP/2.0",
    #   >     host: "www.talkyard.io", referrer: "https://www.talkyard.io/..."
    #   > [info] 13#13: *458 http2 flood detected while processing HTTP/2 connection
    # Someone disabled HTTP/2 because of that:
    #   http://mailman.nginx.org/pipermail/nginx/2019-December/058801.html
    #   > [We have] intermittent problems uploading files via nginx to a
    #   > flask backend over http2  [...]
    #   > I think we'll just disable http2 for the time being.

    # Or use a different limit here, for file uploads?
    # Say: TY_NGX_LIMIT_REQ_BODY_SIZE_UPLOADS
    # How sync this with an admin friendly error if an admin tries to set
    # max_upload_bytes_c > 25 MiB currently (see ./Dockerfile)  [server_limits]
    client_max_body_size ${TY_NGX_LIMIT_REQ_BODY_SIZE};
    client_body_buffer_size 128k;  # or: ${TY_NGX_LIMIT_REQ_BODY_SIZE};

    # proxy_request_buffering  on; — the default

    # Apparently it's not possible to customize Nginx' client_max_body_size
    # per request, see: "variable support for client_max_body_size"
    # https://trac.nginx.org/nginx/ticket/586,
    # — but we can pre-check the Content-Length in the app server,
    # before accepting the request.
    #
    # Don't use auth_request here — it cannot reply with any end user
    # helpful info if upload rejected, or if something goes wrong.
    access_by_lua_file /opt/talkyard/lua/lua-limit-uploads/limit-uploads.lua;

    proxy_pass http://app:9000;  # not inherited to this nested block
  }


  location /-/site/ {
    # This is for accessing per site static assets only. Is OPTIONS not needed?
    limit_except GET OPTIONS {
      deny  all;
    }
    proxy_pass http://app:9000$request_uri;  # not inherited to this nested block
    # this:  proxy_pass http://app:9000;
    #  and:  proxy_pass http://app:9000/-/site/;  are the same?

    # Can cache — asset versioning in use here.
    proxy_cache EfDiCache;
    proxy_cache_valid  200 302   7d; # d = days. Maybe change to 1 year?
    proxy_cache_valid  404      10m; # m = minutes not months
    proxy_cache_key $request_uri;    # is like: '/-/assets/123/script.js' (no hostname included)
    add_header X-Cache-Status $upstream_cache_status;
  }
}


# If the app server isn't running, we'll show friendly instructions about how to start it.
error_page 502 /502.html;
location = /502.html {
  root /opt/nginx/html/;
}
error_page 503 /503.html;
location = /503.html {
  root /opt/nginx/html/;
}
error_page 504 /504.html;
location = /504.html {
  root /opt/nginx/html/;
}
location = /403-upload-not-found.html {
  root /opt/nginx/html/;
}
# Use a custom 404, so we know it's from this Talkyard server (and not some other Nginx
# reverse proxy).
error_page 404 /404.html;
location = /404.html {
  root /opt/nginx/html/;
}
error_page 413 /413.html;
location = /413.html {
  root /opt/nginx/html/;
}


# Global scripts, e.g. a feedback widget, for admins at all sites, so they can report problems
# to the Talkyard developers. No assets versioning for now so don't cache for long.
# (Only admins load the file anyway.)
location ~ ^/-/(globalAdminScript|globalStaffScript|globalAllScript)\.js$ {
  alias /opt/talkyard/uploads/public/$1.js;
  add_header Cache-Control "max-age=300, s-maxage=300, public";
}


# ----- Uploads

# The app server saves uploads to the directory indicated below, and here we configure Nginx
# to serve them directly from the file system.
# But before sending back an uploaded file, we ask the app server, via Lua and an Nginx subrequest,
# if it's ok for the client to download it.

# The path looks like: /-/u/pub-site-id/hash-path.
# There're older backw compat paths too [6FKW24].
# Bind regex captures to named variables ('pubSiteId', 'hashPath') because apparently the
# nested regex location (the one for mp4|m4v|m4a) "overwrites" $1, $2, $3 with its own captures.
location ~ ^/-/u/(?<pubSiteId>[^/][^/]+)/(?<hashPath>.*)$ {  # location one  [6FKW24]
  # Dupl code, see /-/uploads/public/ below.

  limit_except GET OPTIONS {
    deny all;
  }

  # Was previously using Lua for auth, see: [63DRN3M75], but Lua's ngx.location.capture
  # doesn't work with HTTP2, so now using auth_request instead.
  # Docs / example: https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/
  auth_request /_auth_upload/;

  # (Can also set variables from the server's auth response:
  # auth_request_set $auth_status $upstream_status; )

  # The auth_request module cannot reply 404 Not Found, only 403 — so here's a custom
  # 403 page with a Not Found message instead (since Not Found should be more
  # on-topic, from the end user's perspective).
  error_page 403 /403-upload-not-found.html;

  # This dir is read-only mounted in the relevant docker-compose.yml, in the Nginx
  # container, and read-write mounted in the Play app container.
  alias /opt/talkyard/uploads/public/$hashPath;

  # access_log off; enable for now so I'll notice if Google's CDN doesn't cache this
  # autoindex off; – module disabled [5KUP293]

  # Make any CDN and browsers cache this. 2592000 is 30 days. SHOULD COULD_OPTIMIZE change to 365 later?
  add_header Cache-Control "max-age=2592000, s-maxage=2592000, public";

  # KeyCDN and CloudFlare (enterprise only) can purge cached items by tag. So tag with the site id
  # — then it'll be possible to quickly purge a whole site from the CDN.
  # (CloudFlare wants ',' and KeyCDN wants ' ' spaces between tags, but there's just one tag.
  # Docs: https://www.keycdn.com/support/purge-cdn-cache/
  # (Maybe add Fastly's and Varnish's Surrogate-Key header too? It works in the same way)
  add_header Cache-Tag $1;

  # sendfile, tcp_nopush, tcp_nodelay already configured in nginx.conf.

  location ~ \.(mp4|m4v|m4a)$ {
    mp4;
  }
  # (could: ~ .mp4.(m3u8|ts)$ { hls; }
  # ngx_http_hls_module & _f4f_ = commercial though)
}

location /_auth_upload/ {
  # Only for Nginx subrequests.
  internal;
  proxy_pass              http://app:9000/-/_int_req/may-download-file/$pubSiteId/$hashPath;
  proxy_pass_request_body off;
  proxy_set_header        Content-Length "";
  proxy_set_header        X-Original-URI $request_uri;
}


# Old. No site id, and too long (/-/uploads/public).
# LATER, SECURITY: Somehow rewrite/change all  /-/u/hash-path  to  /-/u/site-id/hash-path,
# and thereafter remove these endpoints.
location ~ ^(?:/-/u/|/-/uploads/public/)(?<hashPath>.*)$ {  # location two [6FKW24]
  # Dupl code, see /-/u/ above.
  limit_except GET OPTIONS {
    deny all;
  }
  alias /opt/talkyard/uploads/public/$hashPath;
  expires 31d;
  add_header Cache-Control public;
  location ~ \.(mp4|m4v|m4a)$ {
    mp4;
  }
}


# ----- Internal requests


# Internal requests to Play Framework.
location /-/_int_req/ {
  deny all;
}


# ----- Status pages

# Nginx status. Shouldn't be public (security & org privacy).

location /-/nginx-status {
  stub_status on;
  access_log off;
  allow 127.0.0.1;
  deny all;
}


# ----- Ping pong

location /-/ping-nginx {
  return 200 'pong\n';
}

# vim: et ts=2 sw=2 tw=0 list
